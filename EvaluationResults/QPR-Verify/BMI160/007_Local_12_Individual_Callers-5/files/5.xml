<SourceFile>
  <Line number="1">/**</Line>
  <Line number="2"> * Copyright (C) 2015 - 2016 Bosch Sensortec GmbH</Line>
  <Line number="3"> *</Line>
  <Line number="4"> * Redistribution and use in source and binary forms, with or without</Line>
  <Line number="5"> * modification, are permitted provided that the following conditions are met:</Line>
  <Line number="6"> *</Line>
  <Line number="7"> * Redistributions of source code must retain the above copyright</Line>
  <Line number="8"> * notice, this list of conditions and the following disclaimer.</Line>
  <Line number="9"> *</Line>
  <Line number="10"> * Redistributions in binary form must reproduce the above copyright</Line>
  <Line number="11"> * notice, this list of conditions and the following disclaimer in the</Line>
  <Line number="12"> * documentation and/or other materials provided with the distribution.</Line>
  <Line number="13"> *</Line>
  <Line number="14"> * Neither the name of the copyright holder nor the names of the</Line>
  <Line number="15"> * contributors may be used to endorse or promote products derived from</Line>
  <Line number="16"> * this software without specific prior written permission.</Line>
  <Line number="17"> *</Line>
  <Line number="18"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND</Line>
  <Line number="19"> * CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR</Line>
  <Line number="20"> * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</Line>
  <Line number="21"> * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</Line>
  <Line number="22"> * DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER</Line>
  <Line number="23"> * OR CONTRIBUTORS BE LIABLE FOR ANY</Line>
  <Line number="24"> * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,</Line>
  <Line number="25"> * OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO,</Line>
  <Line number="26"> * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</Line>
  <Line number="27"> * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</Line>
  <Line number="28"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,</Line>
  <Line number="29"> * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</Line>
  <Line number="30"> * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN</Line>
  <Line number="31"> * ANY WAY OUT OF THE USE OF THIS</Line>
  <Line number="32"> * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE</Line>
  <Line number="33"> *</Line>
  <Line number="34"> * The information provided is believed to be accurate and reliable.</Line>
  <Line number="35"> * The copyright holder assumes no responsibility</Line>
  <Line number="36"> * for the consequences of use</Line>
  <Line number="37"> * of such information nor for any infringement of patents or</Line>
  <Line number="38"> * other rights of third parties which may result from its use.</Line>
  <Line number="39"> * No license is granted by implication or otherwise under any patent or</Line>
  <Line number="40"> * patent rights of the copyright holder.</Line>
  <Line number="41"> *</Line>
  <Line number="42"> * @file    bmi160.h</Line>
  <Line number="43"> * @date    24 Nov 2017</Line>
  <Line number="44"> * @version 3.7.4</Line>
  <Line number="45"> * @brief</Line>
  <Line number="46"> *</Line>
  <Line number="47"> */</Line>
  <Line number="48"></Line>
  <Line number="49">/*!</Line>
  <Line number="50"> * @defgroup bmi160</Line>
  <Line number="51"> * @brief</Line>
  <Line number="52"> * @{*/</Line>
  <Line number="53"></Line>
  <Line number="54">#ifndef BMI160_H_</Line>
  <Line number="55">#define BMI160_H_</Line>
  <Line number="56"></Line>
  <Line number="57">/*************************** C++ guard macro *****************************/</Line>
  <Line number="58">#ifdef __cplusplus</Line>
  <Line number="59">extern &quot;C&quot;</Line>
  <Line number="60">{</Line>
  <Line number="61">#endif</Line>
  <Line number="62"></Line>
  <Line number="63">#include &quot;bmi160_defs.h&quot;</Line>
  <Line number="64">#ifdef __KERNEL__</Line>
  <Line number="65">#include &lt;bmi160_math.h&gt;</Line>
  <Line number="66">#else</Line>
  <Line number="67">#include &lt;math.h&gt;</Line>
  <Line number="68">#include &lt;string.h&gt;</Line>
  <Line number="69">#include &lt;stdlib.h&gt;</Line>
  <Line number="70">#endif</Line>
  <Line number="71"></Line>
  <Line number="72"></Line>
  <Line number="73">/*********************** User function prototypes ************************/</Line>
  <Line number="74"></Line>
  <Line number="75">/*!</Line>
  <Line number="76"> *  @brief This API is the entry point for sensor.It performs</Line>
  <Line number="77"> *  the selection of I2C/SPI read mechanism according to the</Line>
  <Line number="78"> *  selected interface and reads the chip-id of bmi160 sensor.</Line>
  <Line number="79"> *</Line>
  <Line number="80"> *  @param[in,out] dev : Structure instance of bmi160_dev</Line>
  <Line number="81"> *  @note : Refer user guide for detailed info.</Line>
  <Line number="82"> *</Line>
  <Line number="83"> *  @return Result of API execution status</Line>
  <Line number="84"> *  @retval zero -&gt; Success / -ve value -&gt; Error</Line>
  <Line number="85"> */</Line>
  <Line number="86">int8_t bmi160_init(struct bmi160_dev *dev);</Line>
  <Line number="87"></Line>
  <Line number="88">/*!</Line>
  <Line number="89"> * @brief This API reads the data from the given register address of sensor.</Line>
  <Line number="90"> *</Line>
  <Line number="91"> * @param[in] reg_addr  : Register address from where the data to be read</Line>
  <Line number="92"> * @param[out] data     : Pointer to data buffer to store the read data.</Line>
  <Line number="93"> * @param[in] len       : No of bytes of data to be read.</Line>
  <Line number="94"> * @param[in] dev       : Structure instance of bmi160_dev.</Line>
  <Line number="95"> *</Line>
  <Line number="96"> * @return Result of API execution status</Line>
  <Line number="97"> * @retval zero -&gt; Success / -ve value -&gt; Error</Line>
  <Line number="98"> */</Line>
  <Line number="99">int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev);</Line>
  <Line number="100"></Line>
  <Line number="101">/*!</Line>
  <Line number="102"> * @brief This API writes the given data to the register address</Line>
  <Line number="103"> * of sensor.</Line>
  <Line number="104"> *</Line>
  <Line number="105"> * @param[in] reg_addr  : Register address from where the data to be written.</Line>
  <Line number="106"> * @param[in] data      : Pointer to data buffer which is to be written</Line>
  <Line number="107"> * in the sensor.</Line>
  <Line number="108"> * @param[in] len       : No of bytes of data to write..</Line>
  <Line number="109"> * @param[in] dev       : Structure instance of bmi160_dev.</Line>
  <Line number="110"> *</Line>
  <Line number="111"> * @return Result of API execution status</Line>
  <Line number="112"> * @retval zero -&gt; Success / -ve value -&gt; Error</Line>
  <Line number="113"> */</Line>
  <Line number="114">int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev);</Line>
  <Line number="115"></Line>
  <Line number="116">/*!</Line>
  <Line number="117"> * @brief This API resets and restarts the device.</Line>
  <Line number="118"> * All register values are overwritten with default parameters.</Line>
  <Line number="119"> *</Line>
  <Line number="120"> * @param[in] dev  : Structure instance of bmi160_dev.</Line>
  <Line number="121"> *</Line>
  <Line number="122"> * @return Result of API execution status</Line>
  <Line number="123"> * @retval zero -&gt; Success / -ve value -&gt; Error.</Line>
  <Line number="124"> */</Line>
  <Line number="125">int8_t bmi160_soft_reset(struct bmi160_dev *dev);</Line>
  <Line number="126"></Line>
  <Line number="127">/*!</Line>
  <Line number="128"> * @brief This API configures the power mode, range and bandwidth</Line>
  <Line number="129"> * of sensor.</Line>
  <Line number="130"> *</Line>
  <Line number="131"> * @param[in] dev    : Structure instance of bmi160_dev.</Line>
  <Line number="132"> * @note : Refer user guide for detailed info.</Line>
  <Line number="133"> *</Line>
  <Line number="134"> * @return Result of API execution status</Line>
  <Line number="135"> * @retval zero -&gt; Success / -ve value -&gt; Error.</Line>
  <Line number="136"> */</Line>
  <Line number="137">int8_t bmi160_set_sens_conf(struct bmi160_dev *dev);</Line>
  <Line number="138"></Line>
  <Line number="139">/*!</Line>
  <Line number="140"> * @brief This API sets the power mode of the sensor.</Line>
  <Line number="141"> *</Line>
  <Line number="142"> * @param[in] dev  : Structure instance of bmi160_dev.</Line>
  <Line number="143"> *</Line>
  <Line number="144"> * @return Result of API execution status</Line>
  <Line number="145"> * @retval zero -&gt; Success / -ve value -&gt; Error.</Line>
  <Line number="146"> */</Line>
  <Line number="147">int8_t bmi160_set_power_mode(struct bmi160_dev *dev);</Line>
  <Line number="148"></Line>
  <Line number="149">/*!</Line>
  <Line number="150"> * @brief This API reads sensor data, stores it in</Line>
  <Line number="151"> * the bmi160_sensor_data structure pointer passed by the user.</Line>
  <Line number="152"> * The user can ask for accel data ,gyro data or both sensor</Line>
  <Line number="153"> * data using bmi160_select_sensor enum</Line>
  <Line number="154"> *</Line>
  <Line number="155"> * @param[in] select_sensor    : enum to choose accel,gyro or both sensor data</Line>
  <Line number="156"> * @param[out] accel    : Structure pointer to store accel data</Line>
  <Line number="157"> * @param[out] gyro     : Structure pointer to store gyro data</Line>
  <Line number="158"> * @param[in] dev       : Structure instance of bmi160_dev.</Line>
  <Line number="159"> * @note : Refer user guide for detailed info.</Line>
  <Line number="160"> *</Line>
  <Line number="161"> * @return Result of API execution status</Line>
  <Line number="162"> * @retval zero -&gt; Success  / -ve value -&gt; Error</Line>
  <Line number="163"> */</Line>
  <Line number="164">int8_t bmi160_get_sensor_data(uint8_t select_sensor, struct bmi160_sensor_data *accel,</Line>
  <Line number="165">				struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev);</Line>
  <Line number="166"></Line>
  <Line number="167">/*!</Line>
  <Line number="168"> * @brief This API configures the necessary interrupt based on</Line>
  <Line number="169"> *  the user settings in the bmi160_int_settg structure instance.</Line>
  <Line number="170"> *</Line>
  <Line number="171"> * @param[in] int_config  : Structure instance of bmi160_int_settg.</Line>
  <Line number="172"> * @param[in] dev         : Structure instance of bmi160_dev.</Line>
  <Line number="173"> * @note : Refer user guide for detailed info.</Line>
  <Line number="174"> *</Line>
  <Line number="175"> * @return Result of API execution status</Line>
  <Line number="176"> * @retval zero -&gt; Success / -ve value -&gt; Error</Line>
  <Line number="177"> */</Line>
  <Line number="178">int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev);</Line>
  <Line number="179"></Line>
  <Line number="180">/*!</Line>
  <Line number="181"> * @brief This API enables the step counter feature.</Line>
  <Line number="182"> *</Line>
  <Line number="183"> * @param[in] step_cnt_enable	: value to enable or disable</Line>
  <Line number="184"> * @param[in] dev		: Structure instance of bmi160_dev.</Line>
  <Line number="185"> * @note : Refer user guide for detailed info.</Line>
  <Line number="186"> *</Line>
  <Line number="187"> * @return Result of API execution status</Line>
  <Line number="188"> * @retval zero -&gt; Success / -ve value -&gt; Error</Line>
  <Line number="189"> */</Line>
  <Line number="190">int8_t bmi160_set_step_counter(uint8_t step_cnt_enable, const struct bmi160_dev *dev);</Line>
  <Line number="191"></Line>
  <Line number="192">/*!</Line>
  <Line number="193"> * @brief This API reads the step counter value.</Line>
  <Line number="194"> *</Line>
  <Line number="195"> * @param[in] step_val	  : Pointer to store the step counter value.</Line>
  <Line number="196"> * @param[in] dev         : Structure instance of bmi160_dev.</Line>
  <Line number="197"> * @note : Refer user guide for detailed info.</Line>
  <Line number="198"> *</Line>
  <Line number="199"> * @return Result of API execution status</Line>
  <Line number="200"> * @retval zero -&gt; Success / -ve value -&gt; Error</Line>
  <Line number="201"> */</Line>
  <Line number="202">int8_t bmi160_read_step_counter(uint16_t *step_val, const struct bmi160_dev *dev);</Line>
  <Line number="203"></Line>
  <Line number="204">/*!</Line>
  <Line number="205"> * @brief This API reads the mention no of byte of data from the given</Line>
  <Line number="206"> * register address of auxiliary sensor.</Line>
  <Line number="207"> *</Line>
  <Line number="208"> * @param[in] reg_addr	  : Address of register to read.</Line>
  <Line number="209"> * @param[in] aux_data	  : Pointer to store the read data.</Line>
  <Line number="210"> * @param[in] len	  : No of bytes to read.</Line>
  <Line number="211"> * @param[in] dev         : Structure instance of bmi160_dev.</Line>
  <Line number="212"> * @note : Refer user guide for detailed info.</Line>
  <Line number="213"> *</Line>
  <Line number="214"> * @return Result of API execution status</Line>
  <Line number="215"> * @retval zero -&gt; Success / -ve value -&gt; Error</Line>
  <Line number="216"> */</Line>
  <Line number="217">int8_t bmi160_aux_read(uint8_t reg_addr, uint8_t *aux_data, uint16_t len, const struct bmi160_dev *dev);</Line>
  <Line number="218"></Line>
  <Line number="219">/*!</Line>
  <Line number="220"> * @brief This API writes the mention no of byte of data to the given</Line>
  <Line number="221"> * register address of auxiliary sensor.</Line>
  <Line number="222"> *</Line>
  <Line number="223"> * @param[in] reg_addr	  : Address of register to write.</Line>
  <Line number="224"> * @param[in] aux_data	  : Pointer to write data.</Line>
  <Line number="225"> * @param[in] len	  : No of bytes to write.</Line>
  <Line number="226"> * @param[in] dev         : Structure instance of bmi160_dev.</Line>
  <Line number="227"> * @note : Refer user guide for detailed info.</Line>
  <Line number="228"> *</Line>
  <Line number="229"> * @return Result of API execution status</Line>
  <Line number="230"> * @retval zero -&gt; Success / -ve value -&gt; Error</Line>
  <Line number="231"> */</Line>
  <Line number="232">int8_t bmi160_aux_write(uint8_t reg_addr, uint8_t *aux_data, uint16_t len, const struct bmi160_dev *dev);</Line>
  <Line number="233"></Line>
  <Line number="234">/*!</Line>
  <Line number="235"> * @brief This API initialize the auxiliary sensor</Line>
  <Line number="236"> * in order to access it.</Line>
  <Line number="237"> *</Line>
  <Line number="238"> * @param[in] dev         : Structure instance of bmi160_dev.</Line>
  <Line number="239"> * @note : Refer user guide for detailed info.</Line>
  <Line number="240"> *</Line>
  <Line number="241"> * @return Result of API execution status</Line>
  <Line number="242"> * @retval zero -&gt; Success / -ve value -&gt; Error</Line>
  <Line number="243"> */</Line>
  <Line number="244">int8_t bmi160_aux_init(const struct bmi160_dev *dev);</Line>
  <Line number="245"></Line>
  <Line number="246">/*!</Line>
  <Line number="247"> * @brief This API is used to setup the auxiliary sensor of bmi160 in auto mode</Line>
  <Line number="248"> * Thus enabling the auto update of 8 bytes of data from auxiliary sensor</Line>
  <Line number="249"> * to BMI160 register address 0x04 to 0x0B</Line>
  <Line number="250"> *</Line>
  <Line number="251"> * @param[in] data_addr	   : Starting address of aux. sensor&apos;s data register</Line>
  <Line number="252"> *                           (BMI160 registers 0x04 to 0x0B will be updated</Line>
  <Line number="253"> *                           with 8 bytes of data from auxiliary sensor</Line>
  <Line number="254"> *                           starting from this register address.)</Line>
  <Line number="255"> * @param[in] dev	   : Structure instance of bmi160_dev.</Line>
  <Line number="256"> *</Line>
  <Line number="257"> * @note : Set the value of auxiliary polling rate by setting</Line>
  <Line number="258"> *         dev-&gt;aux_cfg.aux_odr to the required value from the table</Line>
  <Line number="259"> *         before calling this API</Line>
  <Line number="260"> *</Line>
  <Line number="261"> *   dev-&gt;aux_cfg.aux_odr  |   Auxiliary ODR (Hz)</Line>
  <Line number="262"> *  -----------------------|-----------------------</Line>
  <Line number="263"> *  BMI160_AUX_ODR_0_78HZ  |        25/32</Line>
  <Line number="264"> *  BMI160_AUX_ODR_1_56HZ  |        25/16</Line>
  <Line number="265"> *  BMI160_AUX_ODR_3_12HZ  |        25/8</Line>
  <Line number="266"> *  BMI160_AUX_ODR_6_25HZ  |        25/4</Line>
  <Line number="267"> *  BMI160_AUX_ODR_12_5HZ  |        25/2</Line>
  <Line number="268"> *  BMI160_AUX_ODR_25HZ    |        25</Line>
  <Line number="269"> *  BMI160_AUX_ODR_50HZ    |        50</Line>
  <Line number="270"> *  BMI160_AUX_ODR_100HZ   |        100</Line>
  <Line number="271"> *  BMI160_AUX_ODR_200HZ   |        200</Line>
  <Line number="272"> *  BMI160_AUX_ODR_400HZ   |        400</Line>
  <Line number="273"> *  BMI160_AUX_ODR_800HZ   |        800</Line>
  <Line number="274"> *</Line>
  <Line number="275"> * @note : Other values of  dev-&gt;aux_cfg.aux_odr are reserved and not for use</Line>
  <Line number="276"> *</Line>
  <Line number="277"> * @return Result of API execution status</Line>
  <Line number="278"> * @retval zero -&gt; Success  / -ve value -&gt; Error</Line>
  <Line number="279"> */</Line>
  <Line number="280">int8_t bmi160_set_aux_auto_mode(uint8_t *data_addr, struct bmi160_dev *dev);</Line>
  <Line number="281"></Line>
  <Line number="282">/*!</Line>
  <Line number="283"> * @brief This API configures the 0x4C register and settings like</Line>
  <Line number="284"> * Auxiliary sensor manual enable/ disable and aux burst read length.</Line>
  <Line number="285"> *</Line>
  <Line number="286"> * @param[in] dev    : Structure instance of bmi160_dev.</Line>
  <Line number="287"> *</Line>
  <Line number="288"> * @return Result of API execution status</Line>
  <Line number="289"> * @retval zero -&gt; Success  / -ve value -&gt; Error</Line>
  <Line number="290"> */</Line>
  <Line number="291">int8_t bmi160_config_aux_mode(const struct bmi160_dev *dev);</Line>
  <Line number="292"></Line>
  <Line number="293">/*!</Line>
  <Line number="294"> * @brief This API is used to read the raw uncompensated auxiliary sensor</Line>
  <Line number="295"> * data of 8 bytes from BMI160 register address 0x04 to 0x0B</Line>
  <Line number="296"> *</Line>
  <Line number="297"> * @param[in] aux_data	     : Pointer to user array of length 8 bytes</Line>
  <Line number="298"> *                             Ensure that the aux_data array is of</Line>
  <Line number="299"> *                             length 8 bytes</Line>
  <Line number="300"> * @param[in] dev	     : Structure instance of bmi160_dev</Line>
  <Line number="301"> *</Line>
  <Line number="302"> * @return Result of API execution status</Line>
  <Line number="303"> * @retval zero -&gt; Success  / -ve value -&gt; Error</Line>
  <Line number="304"> */</Line>
  <Line number="305">int8_t bmi160_read_aux_data_auto_mode(uint8_t *aux_data, const struct bmi160_dev *dev);</Line>
  <Line number="306"></Line>
  <Line number="307">/*!</Line>
  <Line number="308"> * @brief This is used to perform self test of accel/gyro of the BMI160 sensor</Line>
  <Line number="309"> *</Line>
  <Line number="310"> * @param[in] select_sensor  : enum to choose accel or gyro for self test</Line>
  <Line number="311"> * @param[in] dev            : Structure instance of bmi160_dev</Line>
  <Line number="312"> *</Line>
  <Line number="313"> * @note self test can be performed either for accel/gyro at any instant.</Line>
  <Line number="314"> *</Line>
  <Line number="315"> *     value of select_sensor       |  Inference</Line>
  <Line number="316"> *----------------------------------|--------------------------------</Line>
  <Line number="317"> *   BMI160_ACCEL_ONLY              | Accel self test enabled</Line>
  <Line number="318"> *   BMI160_GYRO_ONLY               | Gyro self test enabled</Line>
  <Line number="319"> *   BMI160_BOTH_ACCEL_AND_GYRO	    | NOT TO BE USED</Line>
  <Line number="320"> *</Line>
  <Line number="321"> * @note The return value of this API gives us the result of self test.</Line>
  <Line number="322"> *</Line>
  <Line number="323"> * @note Performing self test does soft reset of the sensor, User can</Line>
  <Line number="324"> * set the desired settings after performing the self test.</Line>
  <Line number="325"> *</Line>
  <Line number="326"> * @return Result of API execution status</Line>
  <Line number="327"> * @retval zero -&gt; Success  / -ve value -&gt; Error / +ve value -&gt; Self-test fail</Line>
  <Line number="328"> *</Line>
  <Line number="329"> *   Return value                  |   Result of self test</Line>
  <Line number="330"> * --------------------------------|---------------------------------</Line>
  <Line number="331"> *  BMI160_OK                      |  Self test success</Line>
  <Line number="332"> *  BMI160_W_GYRO_SELF_TEST_FAIL   |  Gyro self test fail</Line>
  <Line number="333"> *  BMI160_W_ACCEl_SELF_TEST_FAIL  |  Accel self test fail</Line>
  <Line number="334"> */</Line>
  <Line number="335">int8_t bmi160_perform_self_test(uint8_t select_sensor, struct bmi160_dev *dev);</Line>
  <Line number="336"></Line>
  <Line number="337">/*!</Line>
  <Line number="338"> *  @brief This API reads data from the fifo buffer.</Line>
  <Line number="339"> *</Line>
  <Line number="340"> *  @note User has to allocate the FIFO buffer along with</Line>
  <Line number="341"> *  corresponding fifo length from his side before calling this API</Line>
  <Line number="342"> *  as mentioned in the readme.md</Line>
  <Line number="343"> *</Line>
  <Line number="344"> *  @note User must specify the number of bytes to read from the FIFO in</Line>
  <Line number="345"> *  dev-&gt;fifo-&gt;length , It will be updated by the number of bytes actually</Line>
  <Line number="346"> *  read from FIFO after calling this API</Line>
  <Line number="347"> *</Line>
  <Line number="348"> *  @param[in] dev     : Structure instance of bmi160_dev.</Line>
  <Line number="349"> *</Line>
  <Line number="350"> *  @return Result of API execution status</Line>
  <Line number="351"> *  @retval zero -&gt; Success / -ve value -&gt; Error</Line>
  <Line number="352"> *</Line>
  <Line number="353"> */</Line>
  <Line number="354">int8_t bmi160_get_fifo_data(struct bmi160_dev const *dev);</Line>
  <Line number="355"></Line>
  <Line number="356">/*!</Line>
  <Line number="357"> *  @brief This API writes fifo_flush command to command register.This</Line>
  <Line number="358"> *  action clears all data in the Fifo without changing fifo configuration</Line>
  <Line number="359"> *  settings.</Line>
  <Line number="360"> *</Line>
  <Line number="361"> *  @param[in] dev     : Structure instance of bmi160_dev</Line>
  <Line number="362"> *</Line>
  <Line number="363"> *  @return Result of API execution status</Line>
  <Line number="364"> *  @retval 0 -&gt; Success</Line>
  <Line number="365"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="366"> *</Line>
  <Line number="367"> */</Line>
  <Line number="368">int8_t bmi160_set_fifo_flush(const struct bmi160_dev *dev);</Line>
  <Line number="369"></Line>
  <Line number="370">/*! @brief This API sets the FIFO configuration in the sensor.</Line>
  <Line number="371"> *</Line>
  <Line number="372"> *  @param[in] config : variable used to specify the FIFO</Line>
  <Line number="373"> *  configurations which are to be enabled or disabled in the sensor.</Line>
  <Line number="374"> *</Line>
  <Line number="375"> *  @note : User can set either set one or more or all FIFO configurations</Line>
  <Line number="376"> *  by ORing the below mentioned macros.</Line>
  <Line number="377"> *      config                  |   Value</Line>
  <Line number="378"> *      ------------------------|---------------------------</Line>
  <Line number="379"> *      BMI160_FIFO_TIME        |   0x02</Line>
  <Line number="380"> *      BMI160_FIFO_TAG_INT2    |   0x04</Line>
  <Line number="381"> *      BMI160_FIFO_TAG_INT1    |   0x08</Line>
  <Line number="382"> *      BMI160_FIFO_HEADER      |   0x10</Line>
  <Line number="383"> *      BMI160_FIFO_AUX         |   0x20</Line>
  <Line number="384"> *      BMI160_FIFO_ACCEL	|   0x40</Line>
  <Line number="385"> *      BMI160_FIFO_GYRO        |   0x80</Line>
  <Line number="386"> *</Line>
  <Line number="387"> *  @param[in] enable : Parameter used to enable or disable the above</Line>
  <Line number="388"> *  FIFO configuration</Line>
  <Line number="389"> *  @param[in] dev : Structure instance of bmi160_dev.</Line>
  <Line number="390"> *</Line>
  <Line number="391"> *  @return status of bus communication result</Line>
  <Line number="392"> *  @retval 0 -&gt; Success</Line>
  <Line number="393"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="394"> *</Line>
  <Line number="395"> */</Line>
  <Line number="396">int8_t bmi160_set_fifo_config(uint8_t config, uint8_t enable, struct bmi160_dev const *dev);</Line>
  <Line number="397"></Line>
  <Line number="398">/*! @brief This API is used to configure the down sampling ratios of</Line>
  <Line number="399"> *  the accel and gyro data for FIFO.Also, it configures filtered or</Line>
  <Line number="400"> *  pre-filtered data for the fifo for accel and gyro.</Line>
  <Line number="401"> *</Line>
  <Line number="402"> *  @param[in] fifo_down : variable used to specify the FIFO down</Line>
  <Line number="403"> *  configurations which are to be enabled or disabled in the sensor.</Line>
  <Line number="404"> *</Line>
  <Line number="405"> *  @note The user must select one among the following macros to</Line>
  <Line number="406"> *  select down-sampling ratio for accel</Line>
  <Line number="407"> *      config                               |   Value</Line>
  <Line number="408"> *      -------------------------------------|---------------------------</Line>
  <Line number="409"> *      BMI160_ACCEL_FIFO_DOWN_ZERO          |   0x00</Line>
  <Line number="410"> *      BMI160_ACCEL_FIFO_DOWN_ONE           |   0x10</Line>
  <Line number="411"> *      BMI160_ACCEL_FIFO_DOWN_TWO           |   0x20</Line>
  <Line number="412"> *      BMI160_ACCEL_FIFO_DOWN_THREE         |   0x30</Line>
  <Line number="413"> *      BMI160_ACCEL_FIFO_DOWN_FOUR          |   0x40</Line>
  <Line number="414"> *      BMI160_ACCEL_FIFO_DOWN_FIVE          |   0x50</Line>
  <Line number="415"> *      BMI160_ACCEL_FIFO_DOWN_SIX           |   0x60</Line>
  <Line number="416"> *      BMI160_ACCEL_FIFO_DOWN_SEVEN         |   0x70</Line>
  <Line number="417"> *</Line>
  <Line number="418"> *  @note The user must select one among the following macros to</Line>
  <Line number="419"> *  select down-sampling ratio for gyro</Line>
  <Line number="420"> *</Line>
  <Line number="421"> *      config                               |   Value</Line>
  <Line number="422"> *      -------------------------------------|---------------------------</Line>
  <Line number="423"> *      BMI160_GYRO_FIFO_DOWN_ZERO           |   0x00</Line>
  <Line number="424"> *      BMI160_GYRO_FIFO_DOWN_ONE            |   0x01</Line>
  <Line number="425"> *      BMI160_GYRO_FIFO_DOWN_TWO            |   0x02</Line>
  <Line number="426"> *      BMI160_GYRO_FIFO_DOWN_THREE          |   0x03</Line>
  <Line number="427"> *      BMI160_GYRO_FIFO_DOWN_FOUR           |   0x04</Line>
  <Line number="428"> *      BMI160_GYRO_FIFO_DOWN_FIVE           |   0x05</Line>
  <Line number="429"> *      BMI160_GYRO_FIFO_DOWN_SIX            |   0x06</Line>
  <Line number="430"> *      BMI160_GYRO_FIFO_DOWN_SEVEN          |   0x07</Line>
  <Line number="431"> *</Line>
  <Line number="432"> *  @note The user can enable filtered accel data by the following macro</Line>
  <Line number="433"> *      config                               |   Value</Line>
  <Line number="434"> *      -------------------------------------|---------------------------</Line>
  <Line number="435"> *      BMI160_ACCEL_FIFO_FILT_EN            |   0x80</Line>
  <Line number="436"> *</Line>
  <Line number="437"> *  @note The user can enable filtered gyro data by the following macro</Line>
  <Line number="438"> *      config                               |   Value</Line>
  <Line number="439"> *      -------------------------------------|---------------------------</Line>
  <Line number="440"> *      BMI160_GYRO_FIFO_FILT_EN             |   0x08</Line>
  <Line number="441"> *</Line>
  <Line number="442"> *  @note : By ORing the above mentioned macros, the user can select</Line>
  <Line number="443"> *  the required FIFO down config settings</Line>
  <Line number="444"> *</Line>
  <Line number="445"> *  @param[in] dev : Structure instance of bmi160_dev.</Line>
  <Line number="446"> *</Line>
  <Line number="447"> *  @return status of bus communication result</Line>
  <Line number="448"> *  @retval 0 -&gt; Success</Line>
  <Line number="449"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="450"> *</Line>
  <Line number="451"> */</Line>
  <Line number="452">int8_t bmi160_set_fifo_down(uint8_t fifo_down, const struct bmi160_dev *dev);</Line>
  <Line number="453"></Line>
  <Line number="454">/*!</Line>
  <Line number="455"> *  @brief This API sets the FIFO watermark level in the sensor.</Line>
  <Line number="456"> *</Line>
  <Line number="457"> *  @note The FIFO watermark is issued when the FIFO fill level is</Line>
  <Line number="458"> *  equal or above the watermark level and units of watermark is 4 bytes.</Line>
  <Line number="459"> *</Line>
  <Line number="460"> *  @param[in]  fifo_wm        : Variable used to set the FIFO water mark level</Line>
  <Line number="461"> *  @param[in]  dev            : Structure instance of bmi160_dev</Line>
  <Line number="462"> *</Line>
  <Line number="463"> *  @return Result of API execution status</Line>
  <Line number="464"> *  @retval 0 -&gt; Success</Line>
  <Line number="465"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="466"> *</Line>
  <Line number="467"> */</Line>
  <Line number="468">int8_t bmi160_set_fifo_wm(uint8_t fifo_wm, const struct bmi160_dev *dev);</Line>
  <Line number="469"></Line>
  <Line number="470">/*!</Line>
  <Line number="471"> *  @brief This API parses and extracts the accelerometer frames from</Line>
  <Line number="472"> *  FIFO data read by the &quot;bmi160_get_fifo_data&quot; API and stores it in</Line>
  <Line number="473"> *  the &quot;accel_data&quot; structure instance.</Line>
  <Line number="474"> *</Line>
  <Line number="475"> *  @note The bmi160_extract_accel API should be called only after</Line>
  <Line number="476"> *  reading the FIFO data by calling the bmi160_get_fifo_data() API.</Line>
  <Line number="477"> *</Line>
  <Line number="478"> *  @param[out] accel_data    : Structure instance of bmi160_sensor_data</Line>
  <Line number="479"> *                              where the accelerometer data in FIFO is stored.</Line>
  <Line number="480"> *  @param[in,out] accel_length  : Number of valid accelerometer frames</Line>
  <Line number="481"> *                              (x,y,z axes data) read out from fifo.</Line>
  <Line number="482"> *  @param[in] dev            : Structure instance of bmi160_dev.</Line>
  <Line number="483"> *</Line>
  <Line number="484"> *  @note accel_length is updated with the number of valid accelerometer</Line>
  <Line number="485"> *  frames extracted from fifo (1 accel frame   = 6 bytes) at the end of</Line>
  <Line number="486"> *  execution of this API.</Line>
  <Line number="487"> *</Line>
  <Line number="488"> *  @return Result of API execution status</Line>
  <Line number="489"> *  @retval 0 -&gt; Success</Line>
  <Line number="490"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="491"> *</Line>
  <Line number="492"> */</Line>
  <Line number="493">int8_t bmi160_extract_accel(struct bmi160_sensor_data *accel_data, uint8_t *accel_length, struct bmi160_dev const *dev);</Line>
  <Line number="494"></Line>
  <Line number="495">/*!</Line>
  <Line number="496"> *  @brief This API parses and extracts the gyro frames from</Line>
  <Line number="497"> *  FIFO data read by the &quot;bmi160_get_fifo_data&quot; API and stores it in</Line>
  <Line number="498"> *  the &quot;gyro_data&quot; structure instance.</Line>
  <Line number="499"> *</Line>
  <Line number="500"> *  @note The bmi160_extract_gyro API should be called only after</Line>
  <Line number="501"> *  reading the FIFO data by calling the bmi160_get_fifo_data() API.</Line>
  <Line number="502"> *</Line>
  <Line number="503"> *  @param[out] gyro_data    : Structure instance of bmi160_sensor_data</Line>
  <Line number="504"> *                             where the gyro data in FIFO is stored.</Line>
  <Line number="505"> *  @param[in,out] gyro_length  : Number of valid gyro frames</Line>
  <Line number="506"> *                             (x,y,z axes data) read out from fifo.</Line>
  <Line number="507"> *  @param[in] dev           : Structure instance of bmi160_dev.</Line>
  <Line number="508"> *</Line>
  <Line number="509"> *  @note gyro_length is updated with the number of valid gyro</Line>
  <Line number="510"> *  frames extracted from fifo (1 gyro frame   = 6 bytes) at the end of</Line>
  <Line number="511"> *  execution of this API.</Line>
  <Line number="512"> *</Line>
  <Line number="513"> *  @return Result of API execution status</Line>
  <Line number="514"> *  @retval 0 -&gt; Success</Line>
  <Line number="515"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="516"> *</Line>
  <Line number="517"> */</Line>
  <Line number="518">int8_t bmi160_extract_gyro(struct bmi160_sensor_data *gyro_data, uint8_t *gyro_length, struct bmi160_dev const *dev);</Line>
  <Line number="519"></Line>
  <Line number="520">/*!</Line>
  <Line number="521"> *  @brief This API parses and extracts the aux frames from</Line>
  <Line number="522"> *  FIFO data read by the &quot;bmi160_get_fifo_data&quot; API and stores it in</Line>
  <Line number="523"> *  the bmi160_aux_data structure instance.</Line>
  <Line number="524"> *</Line>
  <Line number="525"> *  @note The bmi160_extract_aux API should be called only after</Line>
  <Line number="526"> *  reading the FIFO data by calling the bmi160_get_fifo_data() API.</Line>
  <Line number="527"> *</Line>
  <Line number="528"> *  @param[out] aux_data    : Structure instance of bmi160_aux_data</Line>
  <Line number="529"> *                            where the aux data in FIFO is stored.</Line>
  <Line number="530"> *  @param[in,out] aux_len  : Number of valid aux frames (8bytes)</Line>
  <Line number="531"> *                            read out from FIFO.</Line>
  <Line number="532"> *  @param[in] dev          : Structure instance of bmi160_dev.</Line>
  <Line number="533"> *</Line>
  <Line number="534"> *  @note aux_len is updated with the number of valid aux</Line>
  <Line number="535"> *  frames extracted from fifo (1 aux frame = 8 bytes) at the end of</Line>
  <Line number="536"> *  execution of this API.</Line>
  <Line number="537"> *</Line>
  <Line number="538"> *  @return Result of API execution status</Line>
  <Line number="539"> *  @retval 0 -&gt; Success</Line>
  <Line number="540"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="541"> *</Line>
  <Line number="542"> */</Line>
  <Line number="543">int8_t bmi160_extract_aux(struct bmi160_aux_data *aux_data, uint8_t *aux_len, struct bmi160_dev const *dev);</Line>
  <Line number="544"></Line>
  <Line number="545">/*!</Line>
  <Line number="546"> *  @brief This API starts the FOC of accel and gyro</Line>
  <Line number="547"> *</Line>
  <Line number="548"> *  @note FOC should not be used in low-power mode of sensor</Line>
  <Line number="549"> *</Line>
  <Line number="550"> *  @note Accel FOC targets values of +1g , 0g , -1g</Line>
  <Line number="551"> *  Gyro FOC always targets value of 0 dps</Line>
  <Line number="552"> *</Line>
  <Line number="553"> *  @param[in] foc_conf    : Structure instance of bmi160_foc_conf which</Line>
  <Line number="554"> *                                   has the FOC configuration</Line>
  <Line number="555"> *  @param[in,out] offset  : Structure instance to store Offset</Line>
  <Line number="556"> *                                   values read from sensor</Line>
  <Line number="557"> *  @param[in] dev         : Structure instance of bmi160_dev.</Line>
  <Line number="558"> *</Line>
  <Line number="559"> *  @note Pre-requisites for triggering FOC in accel , Set the following,</Line>
  <Line number="560"> *   Enable the acc_off_en</Line>
  <Line number="561"> *       Ex :  foc_conf.acc_off_en = BMI160_ENABLE;</Line>
  <Line number="562"> *</Line>
  <Line number="563"> *   Set the desired target values of FOC to each axes (x,y,z) by using the</Line>
  <Line number="564"> *   following macros</Line>
  <Line number="565"> *       - BMI160_FOC_ACCEL_DISABLED</Line>
  <Line number="566"> *       - BMI160_FOC_ACCEL_POSITIVE_G</Line>
  <Line number="567"> *       - BMI160_FOC_ACCEL_NEGATIVE_G</Line>
  <Line number="568"> *       - BMI160_FOC_ACCEL_0G</Line>
  <Line number="569"> *</Line>
  <Line number="570"> *   Ex : foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;</Line>
  <Line number="571"> *        foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;</Line>
  <Line number="572"> *        foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;</Line>
  <Line number="573"> *</Line>
  <Line number="574"> *  @note Pre-requisites for triggering FOC in gyro ,</Line>
  <Line number="575"> *  Set the following parameters,</Line>
  <Line number="576"> *</Line>
  <Line number="577"> *   Ex : foc_conf.foc_gyr_en = BMI160_ENABLE;</Line>
  <Line number="578"> *        foc_conf.gyro_off_en = BMI160_ENABLE;</Line>
  <Line number="579"> *</Line>
  <Line number="580"> *  @return Result of API execution status</Line>
  <Line number="581"> *  @retval 0 -&gt; Success</Line>
  <Line number="582"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="583"> */</Line>
  <Line number="584">int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf, struct bmi160_offsets *offset,</Line>
  <Line number="585">				struct bmi160_dev const *dev);</Line>
  <Line number="586"></Line>
  <Line number="587">/*!</Line>
  <Line number="588"> *  @brief This API reads and stores the offset values of accel and gyro</Line>
  <Line number="589"> *</Line>
  <Line number="590"> *  @param[in,out] offset : Structure instance of bmi160_offsets in which</Line>
  <Line number="591"> *                          the offset values are read and stored</Line>
  <Line number="592"> *  @param[in] dev        : Structure instance of bmi160_dev.</Line>
  <Line number="593"> *</Line>
  <Line number="594"> *  @return Result of API execution status</Line>
  <Line number="595"> *  @retval 0 -&gt; Success</Line>
  <Line number="596"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="597"> */</Line>
  <Line number="598">int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev);</Line>
  <Line number="599"></Line>
  <Line number="600">/*!</Line>
  <Line number="601"> *  @brief This API writes the offset values of accel and gyro to</Line>
  <Line number="602"> *  the sensor but these values will be reset on POR or soft reset.</Line>
  <Line number="603"> *</Line>
  <Line number="604"> *  @param[in] foc_conf    : Structure instance of bmi160_foc_conf which</Line>
  <Line number="605"> *                                   has the FOC configuration</Line>
  <Line number="606"> *  @param[in] offset      : Structure instance in which user updates offset</Line>
  <Line number="607"> *                            values which are to be written in the sensor</Line>
  <Line number="608"> *  @param[in] dev         : Structure instance of bmi160_dev.</Line>
  <Line number="609"> *</Line>
  <Line number="610"> *  @note Offsets can be set by user like offset-&gt;off_acc_x = 10;</Line>
  <Line number="611"> *  where 1LSB = 3.9mg and for gyro 1LSB = 0.061degrees/second</Line>
  <Line number="612"> *</Line>
  <Line number="613"> * @note BMI160 offset values for xyz axes of accel should be within range of</Line>
  <Line number="614"> *  BMI160_ACCEL_MIN_OFFSET (-128) to BMI160_ACCEL_MAX_OFFSET (127)</Line>
  <Line number="615"> *</Line>
  <Line number="616"> * @note BMI160 offset values for xyz axes of gyro should be within range of</Line>
  <Line number="617"> *  BMI160_GYRO_MIN_OFFSET (-512) to BMI160_GYRO_MAX_OFFSET (511)</Line>
  <Line number="618"> *</Line>
  <Line number="619"> *  @return Result of API execution status</Line>
  <Line number="620"> *  @retval 0 -&gt; Success</Line>
  <Line number="621"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="622"> */</Line>
  <Line number="623">int8_t bmi160_set_offsets(const struct bmi160_foc_conf *foc_conf, const struct bmi160_offsets *offset,</Line>
  <Line number="624">				struct bmi160_dev const *dev);</Line>
  <Line number="625"></Line>
  <Line number="626">/*!</Line>
  <Line number="627"> *  @brief This API writes the image registers values to NVM which is</Line>
  <Line number="628"> *  stored even after POR or soft reset</Line>
  <Line number="629"> *</Line>
  <Line number="630"> *  @param[in] dev         : Structure instance of bmi160_dev.</Line>
  <Line number="631"> *</Line>
  <Line number="632"> *  @return Result of API execution status</Line>
  <Line number="633"> *  @retval 0 -&gt; Success</Line>
  <Line number="634"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="635"> */</Line>
  <Line number="636">int8_t bmi160_update_nvm(struct bmi160_dev const *dev);</Line>
  <Line number="637"></Line>
  <Line number="638">/*!</Line>
  <Line number="639"> *  @brief This API gets the interrupt status from the sensor.</Line>
  <Line number="640"> *</Line>
  <Line number="641"> *  @param[in] int_status_sel		: Enum variable to select either individual or all the</Line>
  <Line number="642"> *  interrupt status bits.</Line>
  <Line number="643"> *	@param[in] int_status			: pointer variable to get the interrupt status</Line>
  <Line number="644"> *	from the sensor.</Line>
  <Line number="645"> *	param[in] dev					: Structure instance of bmi160_dev.</Line>
  <Line number="646"> *</Line>
  <Line number="647"> *  @return Result of API execution status</Line>
  <Line number="648"> *  @retval 0 -&gt; Success</Line>
  <Line number="649"> *  @retval Any non zero value -&gt; Fail</Line>
  <Line number="650"> */</Line>
  <Line number="651">int8_t bmi160_get_int_status(enum bmi160_int_status_sel int_status_sel,</Line>
  <Line number="652">				union bmi160_int_status *int_status, struct bmi160_dev const *dev);</Line>
  <Line number="653"></Line>
  <Line number="654">/*************************** C++ guard macro *****************************/</Line>
  <Line number="655">#ifdef __cplusplus</Line>
  <Line number="656">}</Line>
  <Line number="657">#endif</Line>
  <Line number="658"></Line>
  <Line number="659">#endif /* BMI160_H_ */</Line>
  <Line number="660"></Line>
  <Line number="661">/** @}*/</Line>
</SourceFile>
