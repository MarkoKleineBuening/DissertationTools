#ifndef __QPR_STDLIB_MATH_H
#define __QPR_STDLIB_MATH_H

// 7.12 (1)
// introduction

// 7.12 (2)
#if FLT_EVAL_METHOD == 0
#define float_t float
#define double_t double
#elif FLT_EVAL_METHOD == 1
#define float_t double
#define double_t double
#elif FLT_EVAL_METHOD == 2
#define float_t long double
#define double_t long double
#else
// this is implementation defined
#endif

// 7.12 (3)
// HUGE_VAL and friends indicate the value is too large to be represented
#define HUGE_VAL
// ^ some positive large double value
#define HUGE_VALF
// ^ some positive large float value
#define HUGE_VALL
// ^ some positive large long double value

// 7.12 (4)
#define INFINITY

// 7.12 (5)
#define NAN

// 7.12 (6) number classification macros
// arbitrarily chosen...
#define FP_INFINITE 0
#define FP_NAN 1
#define FP_NORMAL 2
#define FP_SUBNORMAL 3
#define FP_ZERO 4

// 7.12 (7) fast float multiplication plus addition
// these macros are option (does this mean implementation defined?)
//#define  FP_FAST_FMA 1
//#define FP_FAST_FMAF 1
//#define FP_FAST_FMAL 1

// 7.12 (8)
#define FP_ILOGB0 INT_MIN
#define FP_ILOGBNAN INT_MAX

// 7.12 (9)
#define MATH_ERRNO 1
#define MATH_ERREXCEPT 2
// the following can also be MATH_ERREXCEPT ot MATH_ERRNO|MATH_ERREXCEPT  
#define math_errhandling() (int)MATH_ERRNO

// 7.12.1 treatment of error conditions

// 7.12.2 the FP_CONTRACT pragma

// 7.12.3 classification macros

// 7.12.3.1 fpclassify
int __fpclassifyf(float x);
int __fpclassifyd(double x);
int __fpclassifyl(long double x);
#define fpclassify(x) \
    ((sizeof (x) == sizeof (float))  ? __fpclassifyf(x) : \
     (sizeof (x) == sizeof (double)) ? __fpclassifyd(x) : \
                                       __fpclassifyl(x))

// 7.12.3.2 isfinite
#define isfinite(x) (fpclassify(x) == FP_NORMAL || fpclassify(x) == FP_SUBNORMAL || fpclassify(x) == FP_ZERO)

// 7.12.3.3 isinf
#define isinf(x) (fpclassify(x) == FP_INF)

// 7.12.3.4 isnan
#define isnan(x) (fpclassify(x) == FP_NAN)


//7.12.3.5 isnormal
#define isnormal(X) (flpassify(x) == FP_NORMAL)

// 7.12.3.6 signbit
int __signbitf(float x);
int __signbitd(double x);
int __signbitl(long double x);
#define signbit(x) \
  ((sizeof (x) == sizeof (float))  ? __signbitf(x) : \
   (sizeof (x) == sizeof (double)) ? __signbitd(x) : \
                                     __signbitl(x))

// 7.12.4.1 acos
double acos(double x);
float acosf(float x);
long double acosl(long double x);

// 7.12.4.2 asin
double asin(double x);
float asinf(float x);
long double asinl(long double x);

// 7.12.4.3 atan
double atan(double x);
float atanf(float x);
long double atanl(long double x);

// 7.12.4.4 atan2
double atan2(double y, double x);
float atan2f(float y, float x);
long double atan2l(long double y, long double x);

// 7.12.4.5 cos
double cos(double x);
float cosf(float x);
long double cosl(long double x);

// 7.12.4.6 sin
double sin(double x);
float sinf(float x);
long double sinl(long double x);

// 7.12.4.7 tan
double tan(double x);
float tanf(float x);
long double tanl(long double x);

// 7.12.5.1 acosh
double acosh(double x);
float acoshf(float x);
long double acoshl(long double x);

// 7.12.5.2 asinh
double asinh(double x);
float asinhf(float x);
long double asinhl(long double x);

// 7.12.5.3 atanh
double atanh(double x);
float atanhf(float x);
long double atanhl(long double x);

// 7.12.5.4 cosh
double cosh(double x);
float coshf(float x);
long double coshl(long double x);

// 7.12.5.5 sinh
double sinh(double x);
float sinhf(float x);
long double sinhl(long double x);

// 7.12.5.6 tanh
double tanh(double x);
float tanhf(float x);
long double tanhl(long double x);

// 7.12.6.1 exp
double exp(double x);
float expf(float x);
long double expl(long double x);

// 7.12.6.2 exp2
double exp2(double x);
float exp2f(float x);
long double exp2l(long double x);

// 7.12.6.3 expm1
double expm1(double x);
float expm1f(float x);
long double expm1l(long double x);

// 7.12.6.4 frexp
double frexp(double value, int *exp);
float frexpf(float value, int *exp);
long double frexpl(long double value, int *exp);

// 7.12.6.5 ilogb
int ilogb(double x);
int ilogbf(float x);
int ilogbl(long double x);

// 7.12.6.6 ldexp
double ldexp(double x, int exp);
float ldexpf(float x, int exp);
long double ldexpl(long double x, int exp);

// 7.12.6.7 log
double log(double x);
float logf(float x);
long double logl(long double x);

// 7.12.6.8 log10
double log10(double x);
float log10f(float x);
long double log10l(long double x);

// 7.12.6.9 log1p
double log1p(double x);
float log1pf(float x);
long double log1pl(long double x);

// 7.12.6.10 log2
double log2(double x);
float log2f(float x);
long double log2l(long double x);

// 7.12.6.11 logb
double logb(double x);
float logbf(float x);
long double logbl(long double x);

// 7.12.6.12 modf
double modf(double value, double *iptr);
float modff(float value, float *iptr);
long double modfl(long double value, long double *iptr);

// 7.12.6.13 scalbn scalbln
double scalbn(double x, int n);
float scalbnf(float x, int n);
long double scalbnl(long double x, int n);

double scalbln(double x, long int n);
float scalblnf(float x, long int n);
long double scalblnl(long double x, long int n);

// 7.12.7.1 cbrt
double cbrt(double x);
float cbrtf(float x);
long double cbrtl(long double x);

// 7.12.7.2 fabs
double fabs(double x);
float fabsf(float x);
long double fabsl(long double x);

// 7.12.7.3 hypot
double hypot(double x, double y);
float hypotf(float x, float y);
long double hypotl(long double x, long double y);

// 7.12.7.4 pow
double pow(double x, double y);
float powf(float x, float y);
long double powl(long double x, long double y);

// 7.12.7.5 sqrt
double sqrt(double x);
float sqrtf(float x);
long double sqrtl(long double x);

// 7.12.8.1 erf
double erf(double x);
float erff(float x);
long double erfl(long double x);

// 7.12.8.2 erfc
double erfc(double x);
float erfcf(float x);
long double erfcl(long double x);

// 7.12.8.3 lgamma
double lgamma(double x);
float lgammaf(float x);
long double lgammal(long double x);

// 7.12.8.4 tgamma
double tgamma(double x);
float tgammaf(float x);
long double tgammal(long double x);

// 7.12.9.1 ceil
double ceil(double x);
float ceilf(float x);
long double ceill(long double x);

// 7.12.9.2 floor
double floor(double x);
float floorf(float x);
long double floorl(long double x);

// 7.12.9.3 nearbyint
double nearbyint(double x);
float nearbyintf(float x);
long double nearbyintl(long double x);

// 7.12.9.4 rint
double rint(double x);
float rintf(float x);
long double rintl(long double x);

// 7.12.9.5 lrint
long int lrint(double x);
long int lrintf(float x);
long int lrintl(long double x);

long long int llrint(double x);
long long int llrintf(float x);
long long int llrintl(long double x);

// 7.12.9.6 round
double round(double x);
float roundf(float x);
long double roundl(long double x);

// 7.12.9.7 lround llround
long int lround(double x);
long int lroundf(float x);
long int lroundl(long double x);
long long int llround(double x);
long long int llroundf(float x);
long long int llroundl(long double x);

// 7.12.9.8 trunc
double trunc(double x);
float truncf(float x);
long double truncl(long double x);

// 7.12.10.1 fmod
double fmod(double x, double y);
float fmodf(float x, float y);
long double fmodl(long double x, long double y);

// 7.12.10.2 remainder
double remainder(double x, double y);
float remainderf(float x, float y);
long double remainderl(long double x, long double y);

// 7.12.10.3 remquo
double remquo(double x, double y, int *quo);
float remquof(float x, float y, int *quo);
long double remquol(long double x, long double y, int *quo);

// 7.12.11.1 copysign
double copysign(double x, double y);
float copysignf(float x, float y);
long double copysignl(long double x, long double y);

// 7.12.11.2 nan
double nan(const char *tagp);
float nanf(const char *tagp);
long double nanl(const char *tagp);

// 7.12.11.3 nextafter
double nextafter(double x, double y);
float nextafterf(float x, float y);
long double nextafterl(long double x, long double y);

// 7.12.11.4 nexttoward
double nexttoward(double x, long double y);
float nexttowardf(float x, long double y);
long double nexttowardl(long double x, long double y);

// 7.12.12.1 fdim
double fdim(double x, double y);
float fdimf(float x, float y);
long double fdiml(long double x, long double y);

// 7.12.12.2 fmax
double fmax(double x, double y);
float fmaxf(float x, float y);
long double fmaxl(long double x, long double y);

// 7.12.12.3 fmin
double fmin(double x, double y);
float fminf(float x, float y);
long double fminl(long double x, long double y);

// 7.12.13.1 floating multiply add
double fma(double x, double y, double z);
float fmaf(float x, float y, float z);
long double fmal(long double x, long double y, long double z);

// 7.12.14.1
#define isgreater(x) \
    ((sizeof (x) == sizeof (float))  ? __isgreaterf(x) : \
     (sizeof (x) == sizeof (double)) ? __isgreaterd(x) : \
                                       __isgreaterl(x))

// 7.12.14.2
#define isgreaterequal(x) \
    ((sizeof (x) == sizeof (float))  ? __isgreaterequalf(x) : \
     (sizeof (x) == sizeof (double)) ? __isgreaterequald(x) : \
                                       __isgreaterequall(x))

// 7.12.14.3
#define isless(x) \
    ((sizeof (x) == sizeof (float))  ? __islessf(x) : \
     (sizeof (x) == sizeof (double)) ? __islessd(x) : \
                                       __islessl(x))

// 7.12.14.4
#define islessequal(x) \
    ((sizeof (x) == sizeof (float))  ? __islessequalf(x) : \
     (sizeof (x) == sizeof (double)) ? __islessequald(x) : \
                                       __islessequall(x))

// 7.12.14.5
#define islessgreater(x) \
    ((sizeof (x) == sizeof (float))  ? __islessgreaterf(x) : \
     (sizeof (x) == sizeof (double)) ? __islessgreaterd(x) : \
                                       __islessgreaterl(x))

// 7.12.14.6
#define isunordered(x) \
    ((sizeof (x) == sizeof (float))  ? __isunorderedf(x) : \
     (sizeof (x) == sizeof (double)) ? __isunoredredd(x) : \
                                       __isunorderedl(x))
#endif
