<SourceFile>
  <Line number="1">/**</Line>
  <Line number="2"> * Copyright (C) 2015 - 2016 Bosch Sensortec GmbH</Line>
  <Line number="3"> *</Line>
  <Line number="4"> * Redistribution and use in source and binary forms, with or without</Line>
  <Line number="5"> * modification, are permitted provided that the following conditions are met:</Line>
  <Line number="6"> *</Line>
  <Line number="7"> * Redistributions of source code must retain the above copyright</Line>
  <Line number="8"> * notice, this list of conditions and the following disclaimer.</Line>
  <Line number="9"> *</Line>
  <Line number="10"> * Redistributions in binary form must reproduce the above copyright</Line>
  <Line number="11"> * notice, this list of conditions and the following disclaimer in the</Line>
  <Line number="12"> * documentation and/or other materials provided with the distribution.</Line>
  <Line number="13"> *</Line>
  <Line number="14"> * Neither the name of the copyright holder nor the names of the</Line>
  <Line number="15"> * contributors may be used to endorse or promote products derived from</Line>
  <Line number="16"> * this software without specific prior written permission.</Line>
  <Line number="17"> *</Line>
  <Line number="18"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND</Line>
  <Line number="19"> * CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR</Line>
  <Line number="20"> * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED</Line>
  <Line number="21"> * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</Line>
  <Line number="22"> * DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER</Line>
  <Line number="23"> * OR CONTRIBUTORS BE LIABLE FOR ANY</Line>
  <Line number="24"> * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,</Line>
  <Line number="25"> * OR CONSEQUENTIAL DAMAGES(INCLUDING, BUT NOT LIMITED TO,</Line>
  <Line number="26"> * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;</Line>
  <Line number="27"> * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</Line>
  <Line number="28"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,</Line>
  <Line number="29"> * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</Line>
  <Line number="30"> * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN</Line>
  <Line number="31"> * ANY WAY OUT OF THE USE OF THIS</Line>
  <Line number="32"> * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE</Line>
  <Line number="33"> *</Line>
  <Line number="34"> * The information provided is believed to be accurate and reliable.</Line>
  <Line number="35"> * The copyright holder assumes no responsibility</Line>
  <Line number="36"> * for the consequences of use</Line>
  <Line number="37"> * of such information nor for any infringement of patents or</Line>
  <Line number="38"> * other rights of third parties which may result from its use.</Line>
  <Line number="39"> * No license is granted by implication or otherwise under any patent or</Line>
  <Line number="40"> * patent rights of the copyright holder.</Line>
  <Line number="41"> *</Line>
  <Line number="42"> * @file    bmi160_defs.h</Line>
  <Line number="43"> * @date    24 Nov 2017</Line>
  <Line number="44"> * @version 3.7.4</Line>
  <Line number="45"> * @brief</Line>
  <Line number="46"> *</Line>
  <Line number="47"> */</Line>
  <Line number="48"></Line>
  <Line number="49">/*!</Line>
  <Line number="50"> * @defgroup bmi160_defs</Line>
  <Line number="51"> * @brief</Line>
  <Line number="52"> * @{*/</Line>
  <Line number="53"></Line>
  <Line number="54">#ifndef BMI160_DEFS_H_</Line>
  <Line number="55">#define BMI160_DEFS_H_</Line>
  <Line number="56"></Line>
  <Line number="57">/*************************** C types headers *****************************/</Line>
  <Line number="58">#ifdef __KERNEL__</Line>
  <Line number="59">#include &lt;linux/types.h&gt;</Line>
  <Line number="60">#include &lt;linux/kernel.h&gt;</Line>
  <Line number="61">#else</Line>
  <Line number="62">#include &lt;stdint.h&gt;</Line>
  <Line number="63">#include &lt;stddef.h&gt;</Line>
  <Line number="64">#endif</Line>
  <Line number="65"></Line>
  <Line number="66">/*************************** Common macros   *****************************/</Line>
  <Line number="67"></Line>
  <Line number="68">// This code appears to use some Linux definitions:</Line>
  <Line number="69">// Imported definitions from https://github.com/torvalds/linux/blob/ead751507de86d90fa250431e9990a8b881f713c/include/asm-generic/int-ll64.h</Line>
  <Line number="70">#define S8_C(x)  x</Line>
  <Line number="71">#define U8_C(x)  x ## U</Line>
  <Line number="72">#define S16_C(x) x</Line>
  <Line number="73">#define U16_C(x) x ## U</Line>
  <Line number="74">#define S32_C(x) x</Line>
  <Line number="75">#define U32_C(x) x ## U</Line>
  <Line number="76">#define S64_C(x) x ## LL</Line>
  <Line number="77">#define U64_C(x) x ## ULL</Line>
  <Line number="78">// End import</Line>
  <Line number="79"></Line>
  <Line number="80">#if !defined(UINT8_C) &amp;&amp; !defined(INT8_C)</Line>
  <Line number="81">#define INT8_C(x)       S8_C(x)</Line>
  <Line number="82">#define UINT8_C(x)      U8_C(x)</Line>
  <Line number="83">#endif</Line>
  <Line number="84"></Line>
  <Line number="85">#if !defined(UINT16_C) &amp;&amp; !defined(INT16_C)</Line>
  <Line number="86">#define INT16_C(x)      S16_C(x)</Line>
  <Line number="87">#define UINT16_C(x)     U16_C(x)</Line>
  <Line number="88">#endif</Line>
  <Line number="89"></Line>
  <Line number="90">#if !defined(INT32_C) &amp;&amp; !defined(UINT32_C)</Line>
  <Line number="91">#define INT32_C(x)      S32_C(x)</Line>
  <Line number="92">#define UINT32_C(x)     U32_C(x)</Line>
  <Line number="93">#endif</Line>
  <Line number="94"></Line>
  <Line number="95">#if !defined(INT64_C) &amp;&amp; !defined(UINT64_C)</Line>
  <Line number="96">#define INT64_C(x)      S64_C(x)</Line>
  <Line number="97">#define UINT64_C(x)     U64_C(x)</Line>
  <Line number="98">#endif</Line>
  <Line number="99"></Line>
  <Line number="100">/**@}*/</Line>
  <Line number="101"></Line>
  <Line number="102">/**\name C standard macros */</Line>
  <Line number="103">#ifndef NULL</Line>
  <Line number="104">#ifdef __cplusplus</Line>
  <Line number="105">#define NULL   0</Line>
  <Line number="106">#else</Line>
  <Line number="107">#define NULL   ((void *) 0)</Line>
  <Line number="108">#endif</Line>
  <Line number="109">#endif</Line>
  <Line number="110"></Line>
  <Line number="111">/*************************** Sensor macros   *****************************/</Line>
  <Line number="112">/* Test for an endian machine */</Line>
  <Line number="113">#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__</Line>
  <Line number="114">#define LITTLE_ENDIAN   1</Line>
  <Line number="115">#elif __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__</Line>
  <Line number="116">#define BIG_ENDIAN   1</Line>
  <Line number="117">#else</Line>
  <Line number="118">#error &quot;Code does not support Endian format of the processor&quot;</Line>
  <Line number="119">#endif</Line>
  <Line number="120"></Line>
  <Line number="121">/** Mask definitions */</Line>
  <Line number="122">#define BMI160_ACCEL_BW_MASK                    UINT8_C(0x70)</Line>
  <Line number="123">#define BMI160_ACCEL_ODR_MASK                   UINT8_C(0x0F)</Line>
  <Line number="124">#define BMI160_ACCEL_UNDERSAMPLING_MASK         UINT8_C(0x80)</Line>
  <Line number="125">#define BMI160_ACCEL_RANGE_MASK                 UINT8_C(0x0F)</Line>
  <Line number="126">#define BMI160_GYRO_BW_MASK                     UINT8_C(0x30)</Line>
  <Line number="127">#define BMI160_GYRO_ODR_MASK                    UINT8_C(0x0F)</Line>
  <Line number="128">#define BMI160_GYRO_RANGE_MSK                   UINT8_C(0x07)</Line>
  <Line number="129"></Line>
  <Line number="130">/** Mask definitions for INT_EN registers */</Line>
  <Line number="131">#define BMI160_ANY_MOTION_X_INT_EN_MASK         UINT8_C(0x01)</Line>
  <Line number="132">#define BMI160_HIGH_G_X_INT_EN_MASK             UINT8_C(0x01)</Line>
  <Line number="133">#define BMI160_NO_MOTION_X_INT_EN_MASK          UINT8_C(0x01)</Line>
  <Line number="134">#define BMI160_ANY_MOTION_Y_INT_EN_MASK         UINT8_C(0x02)</Line>
  <Line number="135">#define BMI160_HIGH_G_Y_INT_EN_MASK             UINT8_C(0x02)</Line>
  <Line number="136">#define BMI160_NO_MOTION_Y_INT_EN_MASK          UINT8_C(0x02)</Line>
  <Line number="137">#define BMI160_ANY_MOTION_Z_INT_EN_MASK         UINT8_C(0x04)</Line>
  <Line number="138">#define BMI160_HIGH_G_Z_INT_EN_MASK             UINT8_C(0x04)</Line>
  <Line number="139">#define BMI160_NO_MOTION_Z_INT_EN_MASK          UINT8_C(0x04)</Line>
  <Line number="140">#define BMI160_SIG_MOTION_INT_EN_MASK           UINT8_C(0x07)</Line>
  <Line number="141">#define BMI160_ANY_MOTION_ALL_INT_EN_MASK	UINT8_C(0x07)</Line>
  <Line number="142">#define BMI160_STEP_DETECT_INT_EN_MASK          UINT8_C(0x08)</Line>
  <Line number="143">#define BMI160_DOUBLE_TAP_INT_EN_MASK           UINT8_C(0x10)</Line>
  <Line number="144">#define BMI160_SINGLE_TAP_INT_EN_MASK           UINT8_C(0x20)</Line>
  <Line number="145">#define BMI160_FIFO_FULL_INT_EN_MASK            UINT8_C(0x20)</Line>
  <Line number="146">#define BMI160_ORIENT_INT_EN_MASK               UINT8_C(0x40)</Line>
  <Line number="147">#define BMI160_FIFO_WATERMARK_INT_EN_MASK       UINT8_C(0x40)</Line>
  <Line number="148">#define BMI160_LOW_G_INT_EN_MASK                UINT8_C(0x08)</Line>
  <Line number="149">#define BMI160_STEP_DETECT_EN_MASK              UINT8_C(0x08)</Line>
  <Line number="150">#define BMI160_FLAT_INT_EN_MASK                 UINT8_C(0x80)</Line>
  <Line number="151">#define BMI160_DATA_RDY_INT_EN_MASK             UINT8_C(0x10)</Line>
  <Line number="152"></Line>
  <Line number="153">/** Mask definitions for INT_OUT_CTRL register */</Line>
  <Line number="154">#define BMI160_INT1_EDGE_CTRL_MASK              UINT8_C(0x01)</Line>
  <Line number="155">#define BMI160_INT1_OUTPUT_MODE_MASK            UINT8_C(0x04)</Line>
  <Line number="156">#define BMI160_INT1_OUTPUT_TYPE_MASK            UINT8_C(0x02)</Line>
  <Line number="157">#define BMI160_INT1_OUTPUT_EN_MASK              UINT8_C(0x08)</Line>
  <Line number="158">#define BMI160_INT2_EDGE_CTRL_MASK              UINT8_C(0x10)</Line>
  <Line number="159">#define BMI160_INT2_OUTPUT_MODE_MASK            UINT8_C(0x40)</Line>
  <Line number="160">#define BMI160_INT2_OUTPUT_TYPE_MASK            UINT8_C(0x20)</Line>
  <Line number="161">#define BMI160_INT2_OUTPUT_EN_MASK              UINT8_C(0x80)</Line>
  <Line number="162"></Line>
  <Line number="163">/** Mask definitions for INT_LATCH register */</Line>
  <Line number="164">#define BMI160_INT1_INPUT_EN_MASK               UINT8_C(0x10)</Line>
  <Line number="165">#define BMI160_INT2_INPUT_EN_MASK               UINT8_C(0x20)</Line>
  <Line number="166">#define BMI160_INT_LATCH_MASK                   UINT8_C(0x0F)</Line>
  <Line number="167"></Line>
  <Line number="168">/** Mask definitions for INT_MAP register */</Line>
  <Line number="169">#define BMI160_INT1_LOW_G_MASK                  UINT8_C(0x01)</Line>
  <Line number="170">#define BMI160_INT1_HIGH_G_MASK                 UINT8_C(0x02)</Line>
  <Line number="171">#define BMI160_INT1_SLOPE_MASK                  UINT8_C(0x04)</Line>
  <Line number="172">#define BMI160_INT1_NO_MOTION_MASK              UINT8_C(0x08)</Line>
  <Line number="173">#define BMI160_INT1_DOUBLE_TAP_MASK             UINT8_C(0x10)</Line>
  <Line number="174">#define BMI160_INT1_SINGLE_TAP_MASK             UINT8_C(0x20)</Line>
  <Line number="175">#define BMI160_INT1_FIFO_FULL_MASK              UINT8_C(0x20)</Line>
  <Line number="176">#define BMI160_INT1_FIFO_WM_MASK		UINT8_C(0x40)</Line>
  <Line number="177">#define BMI160_INT1_ORIENT_MASK                 UINT8_C(0x40)</Line>
  <Line number="178">#define BMI160_INT1_FLAT_MASK                   UINT8_C(0x80)</Line>
  <Line number="179">#define BMI160_INT1_DATA_READY_MASK             UINT8_C(0x80)</Line>
  <Line number="180">#define BMI160_INT2_LOW_G_MASK                  UINT8_C(0x01)</Line>
  <Line number="181">#define BMI160_INT1_LOW_STEP_DETECT_MASK        UINT8_C(0x01)</Line>
  <Line number="182">#define BMI160_INT2_LOW_STEP_DETECT_MASK        UINT8_C(0x01)</Line>
  <Line number="183">#define BMI160_INT2_HIGH_G_MASK                 UINT8_C(0x02)</Line>
  <Line number="184">#define BMI160_INT2_FIFO_FULL_MASK              UINT8_C(0x02)</Line>
  <Line number="185">#define BMI160_INT2_FIFO_WM_MASK		UINT8_C(0x04)</Line>
  <Line number="186">#define BMI160_INT2_SLOPE_MASK                  UINT8_C(0x04)</Line>
  <Line number="187">#define BMI160_INT2_DATA_READY_MASK             UINT8_C(0x08)</Line>
  <Line number="188">#define BMI160_INT2_NO_MOTION_MASK              UINT8_C(0x08)</Line>
  <Line number="189">#define BMI160_INT2_DOUBLE_TAP_MASK             UINT8_C(0x10)</Line>
  <Line number="190">#define BMI160_INT2_SINGLE_TAP_MASK             UINT8_C(0x20)</Line>
  <Line number="191">#define BMI160_INT2_ORIENT_MASK                 UINT8_C(0x40)</Line>
  <Line number="192">#define BMI160_INT2_FLAT_MASK                   UINT8_C(0x80)</Line>
  <Line number="193"></Line>
  <Line number="194">/** Mask definitions for INT_DATA register */</Line>
  <Line number="195">#define BMI160_TAP_SRC_INT_MASK                 UINT8_C(0x08)</Line>
  <Line number="196">#define BMI160_LOW_HIGH_SRC_INT_MASK            UINT8_C(0x80)</Line>
  <Line number="197">#define BMI160_MOTION_SRC_INT_MASK              UINT8_C(0x80)</Line>
  <Line number="198"></Line>
  <Line number="199">/** Mask definitions for INT_MOTION register */</Line>
  <Line number="200">#define BMI160_SLOPE_INT_DUR_MASK               UINT8_C(0x03)</Line>
  <Line number="201">#define BMI160_NO_MOTION_INT_DUR_MASK           UINT8_C(0xFC)</Line>
  <Line number="202">#define BMI160_NO_MOTION_SEL_BIT_MASK           UINT8_C(0x01)</Line>
  <Line number="203"></Line>
  <Line number="204">/** Mask definitions for INT_TAP register */</Line>
  <Line number="205">#define BMI160_TAP_DUR_MASK                     UINT8_C(0x07)</Line>
  <Line number="206">#define BMI160_TAP_SHOCK_DUR_MASK               UINT8_C(0x40)</Line>
  <Line number="207">#define BMI160_TAP_QUIET_DUR_MASK               UINT8_C(0x80)</Line>
  <Line number="208">#define BMI160_TAP_THRES_MASK                   UINT8_C(0x1F)</Line>
  <Line number="209"></Line>
  <Line number="210">/** Mask definitions for INT_FLAT register */</Line>
  <Line number="211">#define BMI160_FLAT_THRES_MASK                  UINT8_C(0x3F)</Line>
  <Line number="212">#define BMI160_FLAT_HOLD_TIME_MASK              UINT8_C(0x30)</Line>
  <Line number="213">#define BMI160_FLAT_HYST_MASK                   UINT8_C(0x07)</Line>
  <Line number="214"></Line>
  <Line number="215">/** Mask definitions for INT_LOWHIGH register */</Line>
  <Line number="216">#define BMI160_LOW_G_HYST_MASK                  UINT8_C(0x03)</Line>
  <Line number="217">#define BMI160_LOW_G_LOW_MODE_MASK              UINT8_C(0x04)</Line>
  <Line number="218">#define BMI160_HIGH_G_HYST_MASK                 UINT8_C(0xC0)</Line>
  <Line number="219"></Line>
  <Line number="220">/** Mask definitions for INT_SIG_MOTION register */</Line>
  <Line number="221">#define BMI160_SIG_MOTION_SEL_MASK              UINT8_C(0x02)</Line>
  <Line number="222">#define BMI160_SIG_MOTION_SKIP_MASK             UINT8_C(0x0C)</Line>
  <Line number="223">#define BMI160_SIG_MOTION_PROOF_MASK            UINT8_C(0x30)</Line>
  <Line number="224"></Line>
  <Line number="225">/** Mask definitions for INT_ORIENT register */</Line>
  <Line number="226">#define BMI160_ORIENT_MODE_MASK                 UINT8_C(0x03)</Line>
  <Line number="227">#define BMI160_ORIENT_BLOCK_MASK                UINT8_C(0x0C)</Line>
  <Line number="228">#define BMI160_ORIENT_HYST_MASK                 UINT8_C(0xF0)</Line>
  <Line number="229">#define BMI160_ORIENT_THETA_MASK                UINT8_C(0x3F)</Line>
  <Line number="230">#define BMI160_ORIENT_UD_ENABLE                 UINT8_C(0x40)</Line>
  <Line number="231">#define BMI160_AXES_EN_MASK                     UINT8_C(0x80)</Line>
  <Line number="232"></Line>
  <Line number="233">/** Mask definitions for FIFO_CONFIG register */</Line>
  <Line number="234">#define BMI160_FIFO_GYRO			UINT8_C(0x80)</Line>
  <Line number="235">#define BMI160_FIFO_ACCEL			UINT8_C(0x40)</Line>
  <Line number="236">#define BMI160_FIFO_AUX				UINT8_C(0x20)</Line>
  <Line number="237">#define BMI160_FIFO_TAG_INT1			UINT8_C(0x08)</Line>
  <Line number="238">#define BMI160_FIFO_TAG_INT2			UINT8_C(0x04)</Line>
  <Line number="239">#define BMI160_FIFO_TIME			UINT8_C(0x02)</Line>
  <Line number="240">#define BMI160_FIFO_HEADER			UINT8_C(0x10)</Line>
  <Line number="241">#define BMI160_FIFO_CONFIG_1_MASK               UINT8_C(0xFE)</Line>
  <Line number="242"></Line>
  <Line number="243"></Line>
  <Line number="244">/** Mask definitions for STEP_CONF register */</Line>
  <Line number="245">#define BMI160_STEP_COUNT_EN_BIT_MASK           UINT8_C(0x08)</Line>
  <Line number="246">#define BMI160_STEP_DETECT_MIN_THRES_MASK       UINT8_C(0x18)</Line>
  <Line number="247">#define BMI160_STEP_DETECT_STEPTIME_MIN_MASK    UINT8_C(0x07)</Line>
  <Line number="248">#define BMI160_STEP_MIN_BUF_MASK                UINT8_C(0x07)</Line>
  <Line number="249"></Line>
  <Line number="250">/** Mask definition for FIFO Header Data Tag */</Line>
  <Line number="251">#define BMI160_FIFO_TAG_INTR_MASK               UINT8_C(0xFC)</Line>
  <Line number="252"></Line>
  <Line number="253">/** Fifo byte counter mask definitions */</Line>
  <Line number="254">#define BMI160_FIFO_BYTE_COUNTER_MASK           UINT8_C(0x07)</Line>
  <Line number="255"></Line>
  <Line number="256">/** Enable/disable bit value */</Line>
  <Line number="257">#define BMI160_ENABLE                           UINT8_C(0x01)</Line>
  <Line number="258">#define BMI160_DISABLE                          UINT8_C(0x00)</Line>
  <Line number="259"></Line>
  <Line number="260">/** Latch Duration */</Line>
  <Line number="261">#define BMI160_LATCH_DUR_NONE                   UINT8_C(0x00)</Line>
  <Line number="262">#define BMI160_LATCH_DUR_312_5_MICRO_SEC        UINT8_C(0x01)</Line>
  <Line number="263">#define BMI160_LATCH_DUR_625_MICRO_SEC          UINT8_C(0x02)</Line>
  <Line number="264">#define BMI160_LATCH_DUR_1_25_MILLI_SEC         UINT8_C(0x03)</Line>
  <Line number="265">#define BMI160_LATCH_DUR_2_5_MILLI_SEC          UINT8_C(0x04)</Line>
  <Line number="266">#define BMI160_LATCH_DUR_5_MILLI_SEC            UINT8_C(0x05)</Line>
  <Line number="267">#define BMI160_LATCH_DUR_10_MILLI_SEC           UINT8_C(0x06)</Line>
  <Line number="268">#define BMI160_LATCH_DUR_20_MILLI_SEC           UINT8_C(0x07)</Line>
  <Line number="269">#define BMI160_LATCH_DUR_40_MILLI_SEC           UINT8_C(0x08)</Line>
  <Line number="270">#define BMI160_LATCH_DUR_80_MILLI_SEC           UINT8_C(0x09)</Line>
  <Line number="271">#define BMI160_LATCH_DUR_160_MILLI_SEC          UINT8_C(0x0A)</Line>
  <Line number="272">#define BMI160_LATCH_DUR_320_MILLI_SEC          UINT8_C(0x0B)</Line>
  <Line number="273">#define BMI160_LATCH_DUR_640_MILLI_SEC          UINT8_C(0x0C)</Line>
  <Line number="274">#define BMI160_LATCH_DUR_1_28_SEC               UINT8_C(0x0D)</Line>
  <Line number="275">#define BMI160_LATCH_DUR_2_56_SEC               UINT8_C(0x0E)</Line>
  <Line number="276">#define BMI160_LATCHED                          UINT8_C(0x0F)</Line>
  <Line number="277"></Line>
  <Line number="278">/** BMI160 Register map */</Line>
  <Line number="279">#define BMI160_CHIP_ID_ADDR		UINT8_C(0x00)</Line>
  <Line number="280">#define BMI160_ERROR_REG_ADDR		UINT8_C(0x02)</Line>
  <Line number="281">#define BMI160_AUX_DATA_ADDR		UINT8_C(0x04)</Line>
  <Line number="282">#define BMI160_GYRO_DATA_ADDR		UINT8_C(0x0C)</Line>
  <Line number="283">#define BMI160_ACCEL_DATA_ADDR		UINT8_C(0x12)</Line>
  <Line number="284">#define BMI160_STATUS_ADDR		UINT8_C(0x1B)</Line>
  <Line number="285">#define BMI160_INT_STATUS_ADDR		UINT8_C(0x1C)</Line>
  <Line number="286">#define BMI160_FIFO_LENGTH_ADDR		UINT8_C(0x22)</Line>
  <Line number="287">#define BMI160_FIFO_DATA_ADDR		UINT8_C(0x24)</Line>
  <Line number="288">#define BMI160_ACCEL_CONFIG_ADDR	UINT8_C(0x40)</Line>
  <Line number="289">#define BMI160_ACCEL_RANGE_ADDR		UINT8_C(0x41)</Line>
  <Line number="290">#define BMI160_GYRO_CONFIG_ADDR		UINT8_C(0x42)</Line>
  <Line number="291">#define BMI160_GYRO_RANGE_ADDR		UINT8_C(0x43)</Line>
  <Line number="292">#define BMI160_AUX_ODR_ADDR		UINT8_C(0x44)</Line>
  <Line number="293">#define BMI160_FIFO_DOWN_ADDR           UINT8_C(0x45)</Line>
  <Line number="294">#define BMI160_FIFO_CONFIG_0_ADDR       UINT8_C(0x46)</Line>
  <Line number="295">#define BMI160_FIFO_CONFIG_1_ADDR       UINT8_C(0x47)</Line>
  <Line number="296">#define BMI160_AUX_IF_0_ADDR		UINT8_C(0x4B)</Line>
  <Line number="297">#define BMI160_AUX_IF_1_ADDR		UINT8_C(0x4C)</Line>
  <Line number="298">#define BMI160_AUX_IF_2_ADDR		UINT8_C(0x4D)</Line>
  <Line number="299">#define BMI160_AUX_IF_3_ADDR		UINT8_C(0x4E)</Line>
  <Line number="300">#define BMI160_AUX_IF_4_ADDR		UINT8_C(0x4F)</Line>
  <Line number="301">#define BMI160_INT_ENABLE_0_ADDR         UINT8_C(0x50)</Line>
  <Line number="302">#define BMI160_INT_ENABLE_1_ADDR         UINT8_C(0x51)</Line>
  <Line number="303">#define BMI160_INT_ENABLE_2_ADDR         UINT8_C(0x52)</Line>
  <Line number="304">#define BMI160_INT_OUT_CTRL_ADDR         UINT8_C(0x53)</Line>
  <Line number="305">#define BMI160_INT_LATCH_ADDR            UINT8_C(0x54)</Line>
  <Line number="306">#define BMI160_INT_MAP_0_ADDR            UINT8_C(0x55)</Line>
  <Line number="307">#define BMI160_INT_MAP_1_ADDR            UINT8_C(0x56)</Line>
  <Line number="308">#define BMI160_INT_MAP_2_ADDR            UINT8_C(0x57)</Line>
  <Line number="309">#define BMI160_INT_DATA_0_ADDR           UINT8_C(0x58)</Line>
  <Line number="310">#define BMI160_INT_DATA_1_ADDR           UINT8_C(0x59)</Line>
  <Line number="311">#define BMI160_INT_LOWHIGH_0_ADDR        UINT8_C(0x5A)</Line>
  <Line number="312">#define BMI160_INT_LOWHIGH_1_ADDR        UINT8_C(0x5B)</Line>
  <Line number="313">#define BMI160_INT_LOWHIGH_2_ADDR        UINT8_C(0x5C)</Line>
  <Line number="314">#define BMI160_INT_LOWHIGH_3_ADDR        UINT8_C(0x5D)</Line>
  <Line number="315">#define BMI160_INT_LOWHIGH_4_ADDR        UINT8_C(0x5E)</Line>
  <Line number="316">#define BMI160_INT_MOTION_0_ADDR         UINT8_C(0x5F)</Line>
  <Line number="317">#define BMI160_INT_MOTION_1_ADDR         UINT8_C(0x60)</Line>
  <Line number="318">#define BMI160_INT_MOTION_2_ADDR         UINT8_C(0x61)</Line>
  <Line number="319">#define BMI160_INT_MOTION_3_ADDR         UINT8_C(0x62)</Line>
  <Line number="320">#define BMI160_INT_TAP_0_ADDR            UINT8_C(0x63)</Line>
  <Line number="321">#define BMI160_INT_TAP_1_ADDR            UINT8_C(0x64)</Line>
  <Line number="322">#define BMI160_INT_ORIENT_0_ADDR         UINT8_C(0x65)</Line>
  <Line number="323">#define BMI160_INT_ORIENT_1_ADDR         UINT8_C(0x66)</Line>
  <Line number="324">#define BMI160_INT_FLAT_0_ADDR           UINT8_C(0x67)</Line>
  <Line number="325">#define BMI160_INT_FLAT_1_ADDR           UINT8_C(0x68)</Line>
  <Line number="326">#define BMI160_FOC_CONF_ADDR             UINT8_C(0x69)</Line>
  <Line number="327">#define BMI160_CONF_ADDR                 UINT8_C(0x6A)</Line>
  <Line number="328"></Line>
  <Line number="329">#define BMI160_IF_CONF_ADDR		 UINT8_C(0x6B)</Line>
  <Line number="330">#define BMI160_SELF_TEST_ADDR		 UINT8_C(0x6D)</Line>
  <Line number="331">#define BMI160_OFFSET_ADDR		 UINT8_C(0x71)</Line>
  <Line number="332">#define BMI160_OFFSET_CONF_ADDR		 UINT8_C(0x77)</Line>
  <Line number="333">#define BMI160_INT_STEP_CNT_0_ADDR	 UINT8_C(0x78)</Line>
  <Line number="334">#define BMI160_INT_STEP_CONFIG_0_ADDR    UINT8_C(0x7A)</Line>
  <Line number="335">#define BMI160_INT_STEP_CONFIG_1_ADDR    UINT8_C(0x7B)</Line>
  <Line number="336">#define BMI160_COMMAND_REG_ADDR		 UINT8_C(0x7E)</Line>
  <Line number="337">#define BMI160_SPI_COMM_TEST_ADDR        UINT8_C(0x7F)</Line>
  <Line number="338">#define BMI160_INTL_PULLUP_CONF_ADDR	 UINT8_C(0x85)</Line>
  <Line number="339"></Line>
  <Line number="340">/** Error code definitions */</Line>
  <Line number="341">#define BMI160_OK                         INT8_C(0)</Line>
  <Line number="342">#define BMI160_E_NULL_PTR                 INT8_C(-1)</Line>
  <Line number="343">#define BMI160_E_COM_FAIL                 INT8_C(-2)</Line>
  <Line number="344">#define BMI160_E_DEV_NOT_FOUND            INT8_C(-3)</Line>
  <Line number="345">#define BMI160_E_OUT_OF_RANGE             INT8_C(-4)</Line>
  <Line number="346">#define BMI160_E_INVALID_INPUT            INT8_C(-5)</Line>
  <Line number="347">#define BMI160_E_ACCEL_ODR_BW_INVALID	  INT8_C(-6)</Line>
  <Line number="348">#define BMI160_E_GYRO_ODR_BW_INVALID	  INT8_C(-7)</Line>
  <Line number="349">#define BMI160_E_LWP_PRE_FLTR_INT_INVALID INT8_C(-8)</Line>
  <Line number="350">#define BMI160_E_LWP_PRE_FLTR_INVALID	  INT8_C(-9)</Line>
  <Line number="351">#define BMI160_E_AUX_NOT_FOUND		  INT8_C(-10)</Line>
  <Line number="352">#define BMI160_FOC_FAILURE		  INT8_C(-11)</Line>
  <Line number="353"></Line>
  <Line number="354">/**\name API warning codes */</Line>
  <Line number="355">#define BMI160_W_GYRO_SELF_TEST_FAIL	INT8_C(1)</Line>
  <Line number="356">#define BMI160_W_ACCEl_SELF_TEST_FAIL	INT8_C(2)</Line>
  <Line number="357"></Line>
  <Line number="358">/** BMI160 unique chip identifier */</Line>
  <Line number="359">#define BMI160_CHIP_ID                   UINT8_C(0xD1)</Line>
  <Line number="360"></Line>
  <Line number="361">/** Soft reset command */</Line>
  <Line number="362">#define BMI160_SOFT_RESET_CMD            UINT8_C(0xb6)</Line>
  <Line number="363">#define BMI160_SOFT_RESET_DELAY_MS       UINT8_C(15)</Line>
  <Line number="364">/** Start FOC command */</Line>
  <Line number="365">#define BMI160_START_FOC_CMD            UINT8_C(0x03)</Line>
  <Line number="366">/** NVM backup enabling command */</Line>
  <Line number="367">#define BMI160_NVM_BACKUP_EN		UINT8_C(0xA0)</Line>
  <Line number="368"></Line>
  <Line number="369">/* Delay in ms settings */</Line>
  <Line number="370">#define BMI160_ACCEL_DELAY_MS            UINT8_C(5)</Line>
  <Line number="371">#define BMI160_GYRO_DELAY_MS             UINT8_C(81)</Line>
  <Line number="372">#define BMI160_ONE_MS_DELAY              UINT8_C(1)</Line>
  <Line number="373">#define BMI160_AUX_COM_DELAY		 UINT8_C(10)</Line>
  <Line number="374">#define BMI160_GYRO_SELF_TEST_DELAY	 UINT8_C(20)</Line>
  <Line number="375">#define BMI160_ACCEL_SELF_TEST_DELAY	 UINT8_C(50)</Line>
  <Line number="376"></Line>
  <Line number="377">/** Self test configurations */</Line>
  <Line number="378">#define BMI160_ACCEL_SELF_TEST_CONFIG		UINT8_C(0x2C)</Line>
  <Line number="379">#define BMI160_ACCEL_SELF_TEST_POSITIVE_EN	UINT8_C(0x0D)</Line>
  <Line number="380">#define BMI160_ACCEL_SELF_TEST_NEGATIVE_EN	UINT8_C(0x09)</Line>
  <Line number="381">#define BMI160_ACCEL_SELF_TEST_LIMIT		UINT16_C(8192)</Line>
  <Line number="382"></Line>
  <Line number="383">/** Power mode settings */</Line>
  <Line number="384">/* Accel power mode */</Line>
  <Line number="385">#define BMI160_ACCEL_NORMAL_MODE         UINT8_C(0x11)</Line>
  <Line number="386">#define BMI160_ACCEL_LOWPOWER_MODE       UINT8_C(0x12)</Line>
  <Line number="387">#define BMI160_ACCEL_SUSPEND_MODE        UINT8_C(0x10)</Line>
  <Line number="388"></Line>
  <Line number="389">/* Gyro power mode */</Line>
  <Line number="390">#define BMI160_GYRO_SUSPEND_MODE         UINT8_C(0x14)</Line>
  <Line number="391">#define BMI160_GYRO_NORMAL_MODE          UINT8_C(0x15)</Line>
  <Line number="392">#define BMI160_GYRO_FASTSTARTUP_MODE     UINT8_C(0x17)</Line>
  <Line number="393"></Line>
  <Line number="394">/* Aux power mode */</Line>
  <Line number="395">#define BMI160_AUX_SUSPEND_MODE		UINT8_C(0x18)</Line>
  <Line number="396">#define BMI160_AUX_NORMAL_MODE		UINT8_C(0x19)</Line>
  <Line number="397">#define BMI160_AUX_LOWPOWER_MODE	UINT8_C(0x1A)</Line>
  <Line number="398"></Line>
  <Line number="399">/** Range settings */</Line>
  <Line number="400">/* Accel Range */</Line>
  <Line number="401">#define BMI160_ACCEL_RANGE_2G            UINT8_C(0x03)</Line>
  <Line number="402">#define BMI160_ACCEL_RANGE_4G            UINT8_C(0x05)</Line>
  <Line number="403">#define BMI160_ACCEL_RANGE_8G            UINT8_C(0x08)</Line>
  <Line number="404">#define BMI160_ACCEL_RANGE_16G           UINT8_C(0x0C)</Line>
  <Line number="405"></Line>
  <Line number="406">/* Gyro Range */</Line>
  <Line number="407">#define BMI160_GYRO_RANGE_2000_DPS       UINT8_C(0x00)</Line>
  <Line number="408">#define BMI160_GYRO_RANGE_1000_DPS       UINT8_C(0x01)</Line>
  <Line number="409">#define BMI160_GYRO_RANGE_500_DPS        UINT8_C(0x02)</Line>
  <Line number="410">#define BMI160_GYRO_RANGE_250_DPS        UINT8_C(0x03)</Line>
  <Line number="411">#define BMI160_GYRO_RANGE_125_DPS        UINT8_C(0x04)</Line>
  <Line number="412"></Line>
  <Line number="413">/** Bandwidth settings */</Line>
  <Line number="414">/* Accel Bandwidth */</Line>
  <Line number="415">#define BMI160_ACCEL_BW_OSR4_AVG1        UINT8_C(0x00)</Line>
  <Line number="416">#define BMI160_ACCEL_BW_OSR2_AVG2        UINT8_C(0x01)</Line>
  <Line number="417">#define BMI160_ACCEL_BW_NORMAL_AVG4      UINT8_C(0x02)</Line>
  <Line number="418">#define BMI160_ACCEL_BW_RES_AVG8         UINT8_C(0x03)</Line>
  <Line number="419">#define BMI160_ACCEL_BW_RES_AVG16        UINT8_C(0x04)</Line>
  <Line number="420">#define BMI160_ACCEL_BW_RES_AVG32        UINT8_C(0x05)</Line>
  <Line number="421">#define BMI160_ACCEL_BW_RES_AVG64        UINT8_C(0x06)</Line>
  <Line number="422">#define BMI160_ACCEL_BW_RES_AVG128       UINT8_C(0x07)</Line>
  <Line number="423"></Line>
  <Line number="424">#define BMI160_GYRO_BW_OSR4_MODE         UINT8_C(0x00)</Line>
  <Line number="425">#define BMI160_GYRO_BW_OSR2_MODE         UINT8_C(0x01)</Line>
  <Line number="426">#define BMI160_GYRO_BW_NORMAL_MODE       UINT8_C(0x02)</Line>
  <Line number="427"></Line>
  <Line number="428">/* Output Data Rate settings */</Line>
  <Line number="429">/* Accel Output data rate */</Line>
  <Line number="430">#define BMI160_ACCEL_ODR_RESERVED        UINT8_C(0x00)</Line>
  <Line number="431">#define BMI160_ACCEL_ODR_0_78HZ          UINT8_C(0x01)</Line>
  <Line number="432">#define BMI160_ACCEL_ODR_1_56HZ          UINT8_C(0x02)</Line>
  <Line number="433">#define BMI160_ACCEL_ODR_3_12HZ          UINT8_C(0x03)</Line>
  <Line number="434">#define BMI160_ACCEL_ODR_6_25HZ          UINT8_C(0x04)</Line>
  <Line number="435">#define BMI160_ACCEL_ODR_12_5HZ          UINT8_C(0x05)</Line>
  <Line number="436">#define BMI160_ACCEL_ODR_25HZ            UINT8_C(0x06)</Line>
  <Line number="437">#define BMI160_ACCEL_ODR_50HZ            UINT8_C(0x07)</Line>
  <Line number="438">#define BMI160_ACCEL_ODR_100HZ           UINT8_C(0x08)</Line>
  <Line number="439">#define BMI160_ACCEL_ODR_200HZ           UINT8_C(0x09)</Line>
  <Line number="440">#define BMI160_ACCEL_ODR_400HZ           UINT8_C(0x0A)</Line>
  <Line number="441">#define BMI160_ACCEL_ODR_800HZ           UINT8_C(0x0B)</Line>
  <Line number="442">#define BMI160_ACCEL_ODR_1600HZ          UINT8_C(0x0C)</Line>
  <Line number="443">#define BMI160_ACCEL_ODR_RESERVED0       UINT8_C(0x0D)</Line>
  <Line number="444">#define BMI160_ACCEL_ODR_RESERVED1       UINT8_C(0x0E)</Line>
  <Line number="445">#define BMI160_ACCEL_ODR_RESERVED2       UINT8_C(0x0F)</Line>
  <Line number="446"></Line>
  <Line number="447">/* Gyro Output data rate */</Line>
  <Line number="448">#define BMI160_GYRO_ODR_RESERVED         UINT8_C(0x00)</Line>
  <Line number="449">#define BMI160_GYRO_ODR_25HZ             UINT8_C(0x06)</Line>
  <Line number="450">#define BMI160_GYRO_ODR_50HZ             UINT8_C(0x07)</Line>
  <Line number="451">#define BMI160_GYRO_ODR_100HZ            UINT8_C(0x08)</Line>
  <Line number="452">#define BMI160_GYRO_ODR_200HZ            UINT8_C(0x09)</Line>
  <Line number="453">#define BMI160_GYRO_ODR_400HZ            UINT8_C(0x0A)</Line>
  <Line number="454">#define BMI160_GYRO_ODR_800HZ            UINT8_C(0x0B)</Line>
  <Line number="455">#define BMI160_GYRO_ODR_1600HZ           UINT8_C(0x0C)</Line>
  <Line number="456">#define BMI160_GYRO_ODR_3200HZ           UINT8_C(0x0D)</Line>
  <Line number="457"></Line>
  <Line number="458">/* Auxiliary sensor Output data rate */</Line>
  <Line number="459">#define BMI160_AUX_ODR_RESERVED        UINT8_C(0x00)</Line>
  <Line number="460">#define BMI160_AUX_ODR_0_78HZ          UINT8_C(0x01)</Line>
  <Line number="461">#define BMI160_AUX_ODR_1_56HZ          UINT8_C(0x02)</Line>
  <Line number="462">#define BMI160_AUX_ODR_3_12HZ          UINT8_C(0x03)</Line>
  <Line number="463">#define BMI160_AUX_ODR_6_25HZ          UINT8_C(0x04)</Line>
  <Line number="464">#define BMI160_AUX_ODR_12_5HZ          UINT8_C(0x05)</Line>
  <Line number="465">#define BMI160_AUX_ODR_25HZ            UINT8_C(0x06)</Line>
  <Line number="466">#define BMI160_AUX_ODR_50HZ            UINT8_C(0x07)</Line>
  <Line number="467">#define BMI160_AUX_ODR_100HZ           UINT8_C(0x08)</Line>
  <Line number="468">#define BMI160_AUX_ODR_200HZ           UINT8_C(0x09)</Line>
  <Line number="469">#define BMI160_AUX_ODR_400HZ           UINT8_C(0x0A)</Line>
  <Line number="470">#define BMI160_AUX_ODR_800HZ           UINT8_C(0x0B)</Line>
  <Line number="471"></Line>
  <Line number="472">/* Maximum limits definition */</Line>
  <Line number="473">#define BMI160_ACCEL_ODR_MAX             UINT8_C(15)</Line>
  <Line number="474">#define BMI160_ACCEL_BW_MAX              UINT8_C(2)</Line>
  <Line number="475">#define BMI160_ACCEL_RANGE_MAX           UINT8_C(12)</Line>
  <Line number="476">#define BMI160_GYRO_ODR_MAX              UINT8_C(13)</Line>
  <Line number="477">#define BMI160_GYRO_BW_MAX               UINT8_C(2)</Line>
  <Line number="478">#define BMI160_GYRO_RANGE_MAX            UINT8_C(4)</Line>
  <Line number="479"></Line>
  <Line number="480">/** FIFO_CONFIG Definitions */</Line>
  <Line number="481">#define BMI160_FIFO_TIME_ENABLE          UINT8_C(0x02)</Line>
  <Line number="482">#define BMI160_FIFO_TAG_INT2_ENABLE      UINT8_C(0x04)</Line>
  <Line number="483">#define BMI160_FIFO_TAG_INT1_ENABLE      UINT8_C(0x08)</Line>
  <Line number="484">#define BMI160_FIFO_HEAD_ENABLE          UINT8_C(0x10)</Line>
  <Line number="485">#define BMI160_FIFO_M_ENABLE             UINT8_C(0x20)</Line>
  <Line number="486">#define BMI160_FIFO_A_ENABLE             UINT8_C(0x40)</Line>
  <Line number="487">#define BMI160_FIFO_M_A_ENABLE           UINT8_C(0x60)</Line>
  <Line number="488">#define BMI160_FIFO_G_ENABLE             UINT8_C(0x80)</Line>
  <Line number="489">#define BMI160_FIFO_M_G_ENABLE           UINT8_C(0xA0)</Line>
  <Line number="490">#define BMI160_FIFO_G_A_ENABLE           UINT8_C(0xC0)</Line>
  <Line number="491">#define BMI160_FIFO_M_G_A_ENABLE         UINT8_C(0xE0)</Line>
  <Line number="492"></Line>
  <Line number="493">/* Macro to specify the number of bytes over-read from the</Line>
  <Line number="494"> * FIFO in order to get the sensor time at the end of FIFO */</Line>
  <Line number="495">#ifndef BMI160_FIFO_BYTES_OVERREAD</Line>
  <Line number="496">#define BMI160_FIFO_BYTES_OVERREAD       UINT8_C(25)</Line>
  <Line number="497">#endif</Line>
  <Line number="498"></Line>
  <Line number="499"></Line>
  <Line number="500"></Line>
  <Line number="501">/* Accel, gyro and aux. sensor length and also their combined</Line>
  <Line number="502"> * length definitions in FIFO */</Line>
  <Line number="503">#define BMI160_FIFO_G_LENGTH             UINT8_C(6)</Line>
  <Line number="504">#define BMI160_FIFO_A_LENGTH             UINT8_C(6)</Line>
  <Line number="505">#define BMI160_FIFO_M_LENGTH             UINT8_C(8)</Line>
  <Line number="506">#define BMI160_FIFO_GA_LENGTH            UINT8_C(12)</Line>
  <Line number="507">#define BMI160_FIFO_MA_LENGTH            UINT8_C(14)</Line>
  <Line number="508">#define BMI160_FIFO_MG_LENGTH            UINT8_C(14)</Line>
  <Line number="509">#define BMI160_FIFO_MGA_LENGTH           UINT8_C(20)</Line>
  <Line number="510"></Line>
  <Line number="511"></Line>
  <Line number="512">/** FIFO Header Data definitions */</Line>
  <Line number="513">#define BMI160_FIFO_HEAD_SKIP_FRAME      UINT8_C(0x40)</Line>
  <Line number="514">#define BMI160_FIFO_HEAD_SENSOR_TIME     UINT8_C(0x44)</Line>
  <Line number="515">#define BMI160_FIFO_HEAD_INPUT_CONFIG    UINT8_C(0x48)</Line>
  <Line number="516">#define BMI160_FIFO_HEAD_OVER_READ       UINT8_C(0x80)</Line>
  <Line number="517">#define BMI160_FIFO_HEAD_A               UINT8_C(0x84)</Line>
  <Line number="518">#define BMI160_FIFO_HEAD_G               UINT8_C(0x88)</Line>
  <Line number="519">#define BMI160_FIFO_HEAD_G_A             UINT8_C(0x8C)</Line>
  <Line number="520">#define BMI160_FIFO_HEAD_M               UINT8_C(0x90)</Line>
  <Line number="521">#define BMI160_FIFO_HEAD_M_A             UINT8_C(0x94)</Line>
  <Line number="522">#define BMI160_FIFO_HEAD_M_G             UINT8_C(0x98)</Line>
  <Line number="523">#define BMI160_FIFO_HEAD_M_G_A           UINT8_C(0x9C)</Line>
  <Line number="524"></Line>
  <Line number="525"></Line>
  <Line number="526">/** FIFO sensor time length definitions */</Line>
  <Line number="527">#define BMI160_SENSOR_TIME_LENGTH        UINT8_C(3)</Line>
  <Line number="528"></Line>
  <Line number="529"></Line>
  <Line number="530">/** FIFO DOWN selection */</Line>
  <Line number="531">/* Accel fifo down-sampling values*/</Line>
  <Line number="532">#define  BMI160_ACCEL_FIFO_DOWN_ZERO     UINT8_C(0x00)</Line>
  <Line number="533">#define  BMI160_ACCEL_FIFO_DOWN_ONE      UINT8_C(0x10)</Line>
  <Line number="534">#define  BMI160_ACCEL_FIFO_DOWN_TWO      UINT8_C(0x20)</Line>
  <Line number="535">#define  BMI160_ACCEL_FIFO_DOWN_THREE    UINT8_C(0x30)</Line>
  <Line number="536">#define  BMI160_ACCEL_FIFO_DOWN_FOUR     UINT8_C(0x40)</Line>
  <Line number="537">#define  BMI160_ACCEL_FIFO_DOWN_FIVE     UINT8_C(0x50)</Line>
  <Line number="538">#define  BMI160_ACCEL_FIFO_DOWN_SIX      UINT8_C(0x60)</Line>
  <Line number="539">#define  BMI160_ACCEL_FIFO_DOWN_SEVEN    UINT8_C(0x70)</Line>
  <Line number="540"></Line>
  <Line number="541">/* Gyro fifo down-smapling values*/</Line>
  <Line number="542">#define  BMI160_GYRO_FIFO_DOWN_ZERO      UINT8_C(0x00)</Line>
  <Line number="543">#define  BMI160_GYRO_FIFO_DOWN_ONE       UINT8_C(0x01)</Line>
  <Line number="544">#define  BMI160_GYRO_FIFO_DOWN_TWO       UINT8_C(0x02)</Line>
  <Line number="545">#define  BMI160_GYRO_FIFO_DOWN_THREE     UINT8_C(0x03)</Line>
  <Line number="546">#define  BMI160_GYRO_FIFO_DOWN_FOUR      UINT8_C(0x04)</Line>
  <Line number="547">#define  BMI160_GYRO_FIFO_DOWN_FIVE      UINT8_C(0x05)</Line>
  <Line number="548">#define  BMI160_GYRO_FIFO_DOWN_SIX       UINT8_C(0x06)</Line>
  <Line number="549">#define  BMI160_GYRO_FIFO_DOWN_SEVEN     UINT8_C(0x07)</Line>
  <Line number="550"></Line>
  <Line number="551">/* Accel Fifo filter enable*/</Line>
  <Line number="552">#define  BMI160_ACCEL_FIFO_FILT_EN       UINT8_C(0x80)</Line>
  <Line number="553"></Line>
  <Line number="554">/* Gyro Fifo filter enable*/</Line>
  <Line number="555">#define  BMI160_GYRO_FIFO_FILT_EN        UINT8_C(0x08)</Line>
  <Line number="556"></Line>
  <Line number="557">/** Definitions to check validity of FIFO frames */</Line>
  <Line number="558">#define FIFO_CONFIG_MSB_CHECK            UINT8_C(0x80)</Line>
  <Line number="559">#define FIFO_CONFIG_LSB_CHECK            UINT8_C(0x00)</Line>
  <Line number="560"></Line>
  <Line number="561">/*! BMI160 accel FOC configurations */</Line>
  <Line number="562">#define BMI160_FOC_ACCEL_DISABLED        UINT8_C(0x00)</Line>
  <Line number="563">#define BMI160_FOC_ACCEL_POSITIVE_G      UINT8_C(0x01)</Line>
  <Line number="564">#define BMI160_FOC_ACCEL_NEGATIVE_G      UINT8_C(0x02)</Line>
  <Line number="565">#define BMI160_FOC_ACCEL_0G              UINT8_C(0x03)</Line>
  <Line number="566"></Line>
  <Line number="567">/** Array Parameter DefinItions */</Line>
  <Line number="568">#define BMI160_SENSOR_TIME_LSB_BYTE      UINT8_C(0)</Line>
  <Line number="569">#define BMI160_SENSOR_TIME_XLSB_BYTE     UINT8_C(1)</Line>
  <Line number="570">#define BMI160_SENSOR_TIME_MSB_BYTE      UINT8_C(2)</Line>
  <Line number="571"></Line>
  <Line number="572"></Line>
  <Line number="573">/** Interface settings */</Line>
  <Line number="574">#define BMI160_SPI_INTF                  UINT8_C(1)</Line>
  <Line number="575">#define BMI160_I2C_INTF                  UINT8_C(0)</Line>
  <Line number="576">#define BMI160_SPI_RD_MASK               UINT8_C(0x80)</Line>
  <Line number="577">#define BMI160_SPI_WR_MASK               UINT8_C(0x7F)</Line>
  <Line number="578"></Line>
  <Line number="579">/* Sensor &amp; time select definition*/</Line>
  <Line number="580">#define BMI160_ACCEL_SEL		UINT8_C(0x01)</Line>
  <Line number="581">#define BMI160_GYRO_SEL			UINT8_C(0x02)</Line>
  <Line number="582">#define BMI160_TIME_SEL			UINT8_C(0x04)</Line>
  <Line number="583"></Line>
  <Line number="584">/* Sensor select mask*/</Line>
  <Line number="585">#define BMI160_SEN_SEL_MASK		UINT8_C(0x07)</Line>
  <Line number="586"></Line>
  <Line number="587">/* Error code mask */</Line>
  <Line number="588">#define BMI160_ERR_REG_MASK		UINT8_C(0x0F)</Line>
  <Line number="589"></Line>
  <Line number="590">/* BMI160 I2C address */</Line>
  <Line number="591">#define BMI160_I2C_ADDR                 UINT8_C(0x68)</Line>
  <Line number="592"></Line>
  <Line number="593">/* BMI160 secondary IF address */</Line>
  <Line number="594">#define BMI160_AUX_BMM150_I2C_ADDR		UINT8_C(0x10)</Line>
  <Line number="595"></Line>
  <Line number="596">/** BMI160 Length definitions */</Line>
  <Line number="597">#define BMI160_ONE                       UINT8_C(1)</Line>
  <Line number="598">#define BMI160_TWO                       UINT8_C(2)</Line>
  <Line number="599">#define BMI160_THREE                     UINT8_C(3)</Line>
  <Line number="600">#define BMI160_FOUR                      UINT8_C(4)</Line>
  <Line number="601">#define BMI160_FIVE                      UINT8_C(5)</Line>
  <Line number="602"></Line>
  <Line number="603">/** BMI160 fifo level Margin */</Line>
  <Line number="604">#define BMI160_FIFO_LEVEL_MARGIN         UINT8_C(16)</Line>
  <Line number="605"></Line>
  <Line number="606">/** BMI160 fifo flush Command */</Line>
  <Line number="607">#define BMI160_FIFO_FLUSH_VALUE          UINT8_C(0xB0)</Line>
  <Line number="608"></Line>
  <Line number="609">/** BMI160 offset values for xyz axes of accel */</Line>
  <Line number="610">#define BMI160_ACCEL_MIN_OFFSET         INT8_C(-128)</Line>
  <Line number="611">#define BMI160_ACCEL_MAX_OFFSET         INT8_C(127)</Line>
  <Line number="612"></Line>
  <Line number="613">/** BMI160 offset values for xyz axes of gyro */</Line>
  <Line number="614">#define BMI160_GYRO_MIN_OFFSET         INT16_C(-512)</Line>
  <Line number="615">#define BMI160_GYRO_MAX_OFFSET         INT16_C(511)</Line>
  <Line number="616"></Line>
  <Line number="617">/** BMI160 fifo full interrupt position and mask */</Line>
  <Line number="618">#define	BMI160_FIFO_FULL_INT_POS	UINT8_C(5)</Line>
  <Line number="619">#define	BMI160_FIFO_FULL_INT_MSK	UINT8_C(0x20)</Line>
  <Line number="620">#define	BMI160_FIFO_WTM_INT_POS		UINT8_C(6)</Line>
  <Line number="621">#define	BMI160_FIFO_WTM_INT_MSK		UINT8_C(0x40)</Line>
  <Line number="622"></Line>
  <Line number="623">#define BMI160_FIFO_FULL_INT_PIN1_POS	UINT8_C(5)</Line>
  <Line number="624">#define	BMI160_FIFO_FULL_INT_PIN1_MSK	UINT8_C(0x20)</Line>
  <Line number="625">#define BMI160_FIFO_FULL_INT_PIN2_POS	UINT8_C(1)</Line>
  <Line number="626">#define	BMI160_FIFO_FULL_INT_PIN2_MSK	UINT8_C(0x02)</Line>
  <Line number="627"></Line>
  <Line number="628">#define BMI160_FIFO_WTM_INT_PIN1_POS	UINT8_C(6)</Line>
  <Line number="629">#define	BMI160_FIFO_WTM_INT_PIN1_MSK	UINT8_C(0x40)</Line>
  <Line number="630">#define BMI160_FIFO_WTM_INT_PIN2_POS	UINT8_C(2)</Line>
  <Line number="631">#define	BMI160_FIFO_WTM_INT_PIN2_MSK	UINT8_C(0x04)</Line>
  <Line number="632"></Line>
  <Line number="633">#define BMI160_MANUAL_MODE_EN_POS	UINT8_C(7)</Line>
  <Line number="634">#define BMI160_MANUAL_MODE_EN_MSK	UINT8_C(0x80)</Line>
  <Line number="635">#define BMI160_AUX_READ_BURST_POS	UINT8_C(0)</Line>
  <Line number="636">#define BMI160_AUX_READ_BURST_MSK	UINT8_C(0x03)</Line>
  <Line number="637"></Line>
  <Line number="638">#define BMI160_GYRO_SELF_TEST_POS	UINT8_C(4)</Line>
  <Line number="639">#define BMI160_GYRO_SELF_TEST_MSK	UINT8_C(0x10)</Line>
  <Line number="640">#define BMI160_GYRO_SELF_TEST_STATUS_POS	UINT8_C(1)</Line>
  <Line number="641">#define BMI160_GYRO_SELF_TEST_STATUS_MSK	UINT8_C(0x02)</Line>
  <Line number="642"></Line>
  <Line number="643">#define BMI160_GYRO_FOC_EN_POS	UINT8_C(6)</Line>
  <Line number="644">#define BMI160_GYRO_FOC_EN_MSK	UINT8_C(0x40)</Line>
  <Line number="645"></Line>
  <Line number="646">#define BMI160_ACCEL_FOC_X_CONF_POS	UINT8_C(4)</Line>
  <Line number="647">#define BMI160_ACCEL_FOC_X_CONF_MSK	UINT8_C(0x30)</Line>
  <Line number="648"></Line>
  <Line number="649">#define BMI160_ACCEL_FOC_Y_CONF_POS	UINT8_C(2)</Line>
  <Line number="650">#define BMI160_ACCEL_FOC_Y_CONF_MSK	UINT8_C(0x0C)</Line>
  <Line number="651"></Line>
  <Line number="652">#define BMI160_ACCEL_FOC_Z_CONF_MSK	UINT8_C(0x03)</Line>
  <Line number="653"></Line>
  <Line number="654">#define BMI160_FOC_STATUS_POS	UINT8_C(3)</Line>
  <Line number="655">#define BMI160_FOC_STATUS_MSK	UINT8_C(0x08)</Line>
  <Line number="656"></Line>
  <Line number="657">#define BMI160_GYRO_OFFSET_X_MSK	UINT8_C(0x03)</Line>
  <Line number="658"></Line>
  <Line number="659">#define BMI160_GYRO_OFFSET_Y_POS	UINT8_C(2)</Line>
  <Line number="660">#define BMI160_GYRO_OFFSET_Y_MSK	UINT8_C(0x0C)</Line>
  <Line number="661"></Line>
  <Line number="662">#define BMI160_GYRO_OFFSET_Z_POS	UINT8_C(4)</Line>
  <Line number="663">#define BMI160_GYRO_OFFSET_Z_MSK	UINT8_C(0x30)</Line>
  <Line number="664"></Line>
  <Line number="665">#define BMI160_GYRO_OFFSET_EN_POS	UINT8_C(7)</Line>
  <Line number="666">#define BMI160_GYRO_OFFSET_EN_MSK	UINT8_C(0x80)</Line>
  <Line number="667"></Line>
  <Line number="668">#define BMI160_ACCEL_OFFSET_EN_POS	UINT8_C(6)</Line>
  <Line number="669">#define BMI160_ACCEL_OFFSET_EN_MSK	UINT8_C(0x40)</Line>
  <Line number="670"></Line>
  <Line number="671"></Line>
  <Line number="672">#define BMI160_GYRO_OFFSET_POS	        UINT16_C(8)</Line>
  <Line number="673">#define BMI160_GYRO_OFFSET_MSK	        UINT16_C(0x0300)</Line>
  <Line number="674"></Line>
  <Line number="675">#define BMI160_NVM_UPDATE_POS	        UINT8_C(1)</Line>
  <Line number="676">#define BMI160_NVM_UPDATE_MSK	        UINT8_C(0x02)</Line>
  <Line number="677"></Line>
  <Line number="678">#define BMI160_NVM_STATUS_POS	        UINT8_C(4)</Line>
  <Line number="679">#define BMI160_NVM_STATUS_MSK	        UINT8_C(0x10)</Line>
  <Line number="680"></Line>
  <Line number="681">/* BIT SLICE GET AND SET FUNCTIONS */</Line>
  <Line number="682">#define	BMI160_GET_BITS(regvar, bitname)\</Line>
  <Line number="683">		((regvar &amp; bitname##_MSK) &gt;&gt; bitname##_POS)</Line>
  <Line number="684">#define	BMI160_SET_BITS(regvar, bitname, val)\</Line>
  <Line number="685">		((regvar &amp; ~bitname##_MSK) | \</Line>
  <Line number="686">		((val&lt;&lt;bitname##_POS)&amp;bitname##_MSK))</Line>
  <Line number="687"></Line>
  <Line number="688">#define BMI160_SET_BITS_POS_0(reg_data, bitname, data) \</Line>
  <Line number="689">				((reg_data &amp; ~(bitname##_MSK)) | \</Line>
  <Line number="690">				(data &amp; bitname##_MSK))</Line>
  <Line number="691"></Line>
  <Line number="692">#define BMI160_GET_BITS_POS_0(reg_data, bitname)  (reg_data &amp; (bitname##_MSK))</Line>
  <Line number="693"></Line>
  <Line number="694">/**\name UTILITY MACROS	*/</Line>
  <Line number="695">#define BMI160_SET_LOW_BYTE     UINT16_C(0x00FF)</Line>
  <Line number="696">#define BMI160_SET_HIGH_BYTE    UINT16_C(0xFF00)</Line>
  <Line number="697"></Line>
  <Line number="698">#define BMI160_GET_LSB(var)	(uint8_t)(var &amp; BMI160_SET_LOW_BYTE)</Line>
  <Line number="699">#define BMI160_GET_MSB(var)	(uint8_t)((var &amp; BMI160_SET_HIGH_BYTE) &gt;&gt; 8)</Line>
  <Line number="700"></Line>
  <Line number="701">/*****************************************************************************/</Line>
  <Line number="702">/* type definitions */</Line>
  <Line number="703">typedef int8_t (*bmi160_com_fptr_t)(uint8_t dev_addr, uint8_t reg_addr,</Line>
  <Line number="704">		uint8_t *data, uint16_t len);</Line>
  <Line number="705"></Line>
  <Line number="706">typedef void (*bmi160_delay_fptr_t)(uint32_t period);</Line>
  <Line number="707"></Line>
  <Line number="708">/*************************** Data structures *********************************/</Line>
  <Line number="709">/*!</Line>
  <Line number="710"> * @brief bmi160 interrupt status selection enum.</Line>
  <Line number="711"> */</Line>
  <Line number="712">enum bmi160_int_status_sel {</Line>
  <Line number="713">	BMI160_INT_STATUS_0 = 1,</Line>
  <Line number="714">	BMI160_INT_STATUS_1 = 2,</Line>
  <Line number="715">	BMI160_INT_STATUS_2 = 4,</Line>
  <Line number="716">	BMI160_INT_STATUS_3 = 8,</Line>
  <Line number="717">	BMI160_INT_STATUS_ALL = 15</Line>
  <Line number="718">};</Line>
  <Line number="719"></Line>
  <Line number="720">/*!</Line>
  <Line number="721"> * @brief bmi160 interrupt status bits structure</Line>
  <Line number="722"> */</Line>
  <Line number="723">struct bmi160_int_status_bits {</Line>
  <Line number="724">#if LITTLE_ENDIAN == 1</Line>
  <Line number="725">	uint32_t step :1;</Line>
  <Line number="726">	uint32_t sigmot :1;</Line>
  <Line number="727">	uint32_t anym :1;</Line>
  <Line number="728">	/* pmu trigger will be handled later */</Line>
  <Line number="729">	uint32_t pmu_trigger_reserved :1;</Line>
  <Line number="730">	uint32_t d_tap :1;</Line>
  <Line number="731">	uint32_t s_tap :1;</Line>
  <Line number="732">	uint32_t orient :1;</Line>
  <Line number="733">	uint32_t flat_int :1;</Line>
  <Line number="734">	uint32_t reserved :2;</Line>
  <Line number="735">	uint32_t high_g :1;</Line>
  <Line number="736">	uint32_t low_g :1;</Line>
  <Line number="737">	uint32_t drdy :1;</Line>
  <Line number="738">	uint32_t ffull :1;</Line>
  <Line number="739">	uint32_t fwm :1;</Line>
  <Line number="740">	uint32_t nomo :1;</Line>
  <Line number="741">	uint32_t anym_first_x :1;</Line>
  <Line number="742">	uint32_t anym_first_y :1;</Line>
  <Line number="743">	uint32_t anym_first_z :1;</Line>
  <Line number="744">	uint32_t anym_sign :1;</Line>
  <Line number="745">	uint32_t tap_first_x :1;</Line>
  <Line number="746">	uint32_t tap_first_y :1;</Line>
  <Line number="747">	uint32_t tap_first_z :1;</Line>
  <Line number="748">	uint32_t tap_sign :1;</Line>
  <Line number="749">	uint32_t high_first_x :1;</Line>
  <Line number="750">	uint32_t high_first_y :1;</Line>
  <Line number="751">	uint32_t high_first_z :1;</Line>
  <Line number="752">	uint32_t high_sign :1;</Line>
  <Line number="753">	uint32_t orient_1_0 :2;</Line>
  <Line number="754">	uint32_t orient_2 :1;</Line>
  <Line number="755">	uint32_t flat :1;</Line>
  <Line number="756">#elif BIG_ENDIAN == 1</Line>
  <Line number="757">	uint32_t high_first_x :1;</Line>
  <Line number="758">	uint32_t high_first_y :1;</Line>
  <Line number="759">	uint32_t high_first_z :1;</Line>
  <Line number="760">	uint32_t high_sign :1;</Line>
  <Line number="761">	uint32_t orient_1_0 :2;</Line>
  <Line number="762">	uint32_t orient_2 :1;</Line>
  <Line number="763">	uint32_t flat :1;</Line>
  <Line number="764">	uint32_t anym_first_x :1;</Line>
  <Line number="765">	uint32_t anym_first_y :1;</Line>
  <Line number="766">	uint32_t anym_first_z :1;</Line>
  <Line number="767">	uint32_t anym_sign :1;</Line>
  <Line number="768">	uint32_t tap_first_x :1;</Line>
  <Line number="769">	uint32_t tap_first_y :1;</Line>
  <Line number="770">	uint32_t tap_first_z :1;</Line>
  <Line number="771">	uint32_t tap_sign :1;</Line>
  <Line number="772">	uint32_t reserved :2;</Line>
  <Line number="773">	uint32_t high_g :1;</Line>
  <Line number="774">	uint32_t low_g :1;</Line>
  <Line number="775">	uint32_t drdy :1;</Line>
  <Line number="776">	uint32_t ffull :1;</Line>
  <Line number="777">	uint32_t fwm :1;</Line>
  <Line number="778">	uint32_t nomo :1;</Line>
  <Line number="779">	uint32_t step :1;</Line>
  <Line number="780">	uint32_t sigmot :1;</Line>
  <Line number="781">	uint32_t anym :1;</Line>
  <Line number="782">	/* pmu trigger will be handled later */</Line>
  <Line number="783">	uint32_t pmu_trigger_reserved :1;</Line>
  <Line number="784">	uint32_t d_tap :1;</Line>
  <Line number="785">	uint32_t s_tap :1;</Line>
  <Line number="786">	uint32_t orient :1;</Line>
  <Line number="787">	uint32_t flat_int :1;</Line>
  <Line number="788">#endif</Line>
  <Line number="789">};</Line>
  <Line number="790"></Line>
  <Line number="791">/*!</Line>
  <Line number="792"> * @brief bmi160 interrupt status structure</Line>
  <Line number="793"> */</Line>
  <Line number="794">union bmi160_int_status {</Line>
  <Line number="795">	uint8_t data[4];</Line>
  <Line number="796">	struct bmi160_int_status_bits bit;</Line>
  <Line number="797">};</Line>
  <Line number="798"></Line>
  <Line number="799">/*!</Line>
  <Line number="800"> * @brief bmi160 sensor data structure which comprises of accel data</Line>
  <Line number="801"> */</Line>
  <Line number="802">struct bmi160_sensor_data {</Line>
  <Line number="803">	/*! X-axis sensor data */</Line>
  <Line number="804">	int16_t x;</Line>
  <Line number="805">	/*! Y-axis sensor data */</Line>
  <Line number="806">	int16_t y;</Line>
  <Line number="807">	/*! Z-axis sensor data */</Line>
  <Line number="808">	int16_t z;</Line>
  <Line number="809">	/*! sensor time */</Line>
  <Line number="810">	uint32_t sensortime;</Line>
  <Line number="811">};</Line>
  <Line number="812"></Line>
  <Line number="813">/*!</Line>
  <Line number="814"> * @brief bmi160 aux data structure which comprises of 8 bytes of accel data</Line>
  <Line number="815"> */</Line>
  <Line number="816">struct bmi160_aux_data {</Line>
  <Line number="817">	/*! Auxiliary data */</Line>
  <Line number="818">	uint8_t data[8];</Line>
  <Line number="819">};</Line>
  <Line number="820"></Line>
  <Line number="821">/*!</Line>
  <Line number="822"> * @brief bmi160 FOC configuration structure</Line>
  <Line number="823"> */</Line>
  <Line number="824">struct bmi160_foc_conf {</Line>
  <Line number="825">	/*! Enabling FOC in gyro</Line>
  <Line number="826">	 * Assignable macros :</Line>
  <Line number="827">	 *  - BMI160_ENABLE</Line>
  <Line number="828">	 *  - BMI160_DISABLE</Line>
  <Line number="829">	 */</Line>
  <Line number="830">	uint8_t foc_gyr_en;</Line>
  <Line number="831"></Line>
  <Line number="832">	/*! Accel FOC configurations</Line>
  <Line number="833">	 * Assignable macros :</Line>
  <Line number="834">	 *  - BMI160_FOC_ACCEL_DISABLED</Line>
  <Line number="835">	 *  - BMI160_FOC_ACCEL_POSITIVE_G</Line>
  <Line number="836">	 *  - BMI160_FOC_ACCEL_NEGATIVE_G</Line>
  <Line number="837">	 *  - BMI160_FOC_ACCEL_0G</Line>
  <Line number="838">	 */</Line>
  <Line number="839">	uint8_t foc_acc_x;</Line>
  <Line number="840">	uint8_t foc_acc_y;</Line>
  <Line number="841">	uint8_t foc_acc_z;</Line>
  <Line number="842"></Line>
  <Line number="843">	/*! Enabling offset compensation for accel in data registers</Line>
  <Line number="844">	 * Assignable macros :</Line>
  <Line number="845">	 *  - BMI160_ENABLE</Line>
  <Line number="846">	 *  - BMI160_DISABLE</Line>
  <Line number="847">	 */</Line>
  <Line number="848">	uint8_t acc_off_en;</Line>
  <Line number="849"></Line>
  <Line number="850">	/*! Enabling offset compensation for gyro in data registers</Line>
  <Line number="851">	 * Assignable macros :</Line>
  <Line number="852">	 *  - BMI160_ENABLE</Line>
  <Line number="853">	 *  - BMI160_DISABLE</Line>
  <Line number="854">	 */</Line>
  <Line number="855">	uint8_t gyro_off_en;</Line>
  <Line number="856">};</Line>
  <Line number="857"></Line>
  <Line number="858">/*!</Line>
  <Line number="859"> * @brief bmi160 accel gyro offsets</Line>
  <Line number="860"> */</Line>
  <Line number="861">struct bmi160_offsets {</Line>
  <Line number="862">	/*! Accel offset for x axis */</Line>
  <Line number="863">	int8_t off_acc_x;</Line>
  <Line number="864">	/*! Accel offset for y axis */</Line>
  <Line number="865">	int8_t off_acc_y;</Line>
  <Line number="866">	/*! Accel offset for z axis */</Line>
  <Line number="867">	int8_t off_acc_z;</Line>
  <Line number="868">	/*! Gyro offset for x axis */</Line>
  <Line number="869">	int16_t off_gyro_x;</Line>
  <Line number="870">	/*! Gyro offset for y axis */</Line>
  <Line number="871">	int16_t off_gyro_y;</Line>
  <Line number="872">	/*! Gyro offset for z axis */</Line>
  <Line number="873">	int16_t off_gyro_z;</Line>
  <Line number="874">};</Line>
  <Line number="875"></Line>
  <Line number="876">/*!</Line>
  <Line number="877"> * @brief FIFO aux. sensor data structure</Line>
  <Line number="878"> */</Line>
  <Line number="879">struct bmi160_aux_fifo_data {</Line>
  <Line number="880">	/*! The value of aux. sensor x LSB data */</Line>
  <Line number="881">	uint8_t aux_x_lsb;</Line>
  <Line number="882">	/*! The value of aux. sensor x MSB data */</Line>
  <Line number="883">	uint8_t aux_x_msb;</Line>
  <Line number="884">	/*! The value of aux. sensor y LSB data */</Line>
  <Line number="885">	uint8_t aux_y_lsb;</Line>
  <Line number="886">	/*! The value of aux. sensor y MSB data */</Line>
  <Line number="887">	uint8_t aux_y_msb;</Line>
  <Line number="888">	/*! The value of aux. sensor z LSB data */</Line>
  <Line number="889">	uint8_t aux_z_lsb;</Line>
  <Line number="890">	/*! The value of aux. sensor z MSB data */</Line>
  <Line number="891">	uint8_t aux_z_msb;</Line>
  <Line number="892">	/*! The value of aux. sensor r for BMM150 LSB data */</Line>
  <Line number="893">	uint8_t aux_r_y2_lsb;</Line>
  <Line number="894">	/*! The value of aux. sensor r for BMM150 MSB data */</Line>
  <Line number="895">	uint8_t aux_r_y2_msb;</Line>
  <Line number="896">};</Line>
  <Line number="897"></Line>
  <Line number="898">/*!</Line>
  <Line number="899"> * @brief bmi160 sensor select structure</Line>
  <Line number="900"> */</Line>
  <Line number="901">enum bmi160_select_sensor {</Line>
  <Line number="902">	BMI160_ACCEL_ONLY = 1,</Line>
  <Line number="903">	BMI160_GYRO_ONLY,</Line>
  <Line number="904">	BMI160_BOTH_ACCEL_AND_GYRO</Line>
  <Line number="905">};</Line>
  <Line number="906"></Line>
  <Line number="907">/*!</Line>
  <Line number="908"> * @brief bmi160 sensor step detector mode structure</Line>
  <Line number="909"> */</Line>
  <Line number="910">enum bmi160_step_detect_mode {</Line>
  <Line number="911">	BMI160_STEP_DETECT_NORMAL,</Line>
  <Line number="912">	BMI160_STEP_DETECT_SENSITIVE,</Line>
  <Line number="913">	BMI160_STEP_DETECT_ROBUST,</Line>
  <Line number="914">	/*! Non recommended User defined setting */</Line>
  <Line number="915">	BMI160_STEP_DETECT_USER_DEFINE</Line>
  <Line number="916">};</Line>
  <Line number="917"></Line>
  <Line number="918">/*!</Line>
  <Line number="919"> * @brief enum for auxiliary burst read selection</Line>
  <Line number="920"> */</Line>
  <Line number="921">enum bm160_aux_read_len {</Line>
  <Line number="922">	BMI160_AUX_READ_LEN_0,</Line>
  <Line number="923">	BMI160_AUX_READ_LEN_1,</Line>
  <Line number="924">	BMI160_AUX_READ_LEN_2,</Line>
  <Line number="925">	BMI160_AUX_READ_LEN_3</Line>
  <Line number="926">};</Line>
  <Line number="927">/*!</Line>
  <Line number="928"> * @brief bmi160 sensor configuration structure</Line>
  <Line number="929"> */</Line>
  <Line number="930">struct bmi160_cfg {</Line>
  <Line number="931">	/*! power mode */</Line>
  <Line number="932">	uint8_t power;</Line>
  <Line number="933">	/*! output data rate */</Line>
  <Line number="934">	uint8_t odr;</Line>
  <Line number="935">	/*! range */</Line>
  <Line number="936">	uint8_t range;</Line>
  <Line number="937">	/*! bandwidth */</Line>
  <Line number="938">	uint8_t bw;</Line>
  <Line number="939">};</Line>
  <Line number="940"></Line>
  <Line number="941">/*!</Line>
  <Line number="942"> * @brief Aux sensor configuration structure</Line>
  <Line number="943"> */</Line>
  <Line number="944">struct bmi160_aux_cfg {</Line>
  <Line number="945">	/*! Aux sensor, 1 - enable 0 - disable */</Line>
  <Line number="946">	uint8_t aux_sensor_enable : 1;</Line>
  <Line number="947">	/*! Aux manual/auto mode status */</Line>
  <Line number="948">	uint8_t manual_enable : 1;</Line>
  <Line number="949">	/*! Aux read burst length */</Line>
  <Line number="950">	uint8_t aux_rd_burst_len : 2;</Line>
  <Line number="951">	/*! output data rate */</Line>
  <Line number="952">	uint8_t aux_odr :4;</Line>
  <Line number="953">	/*! i2c addr of auxiliary sensor */</Line>
  <Line number="954">	uint8_t aux_i2c_addr;</Line>
  <Line number="955">};</Line>
  <Line number="956"></Line>
  <Line number="957">/*!</Line>
  <Line number="958"> * @brief bmi160 interrupt channel selection structure</Line>
  <Line number="959"> */</Line>
  <Line number="960">enum bmi160_int_channel {</Line>
  <Line number="961">	/*! Un-map both channels */</Line>
  <Line number="962">	BMI160_INT_CHANNEL_NONE,</Line>
  <Line number="963">	/*! interrupt Channel 1 */</Line>
  <Line number="964">	BMI160_INT_CHANNEL_1,</Line>
  <Line number="965">	/*! interrupt Channel 2 */</Line>
  <Line number="966">	BMI160_INT_CHANNEL_2,</Line>
  <Line number="967">	/*! Map both channels */</Line>
  <Line number="968">	BMI160_INT_CHANNEL_BOTH</Line>
  <Line number="969">};</Line>
  <Line number="970"></Line>
  <Line number="971">enum bmi160_int_types {</Line>
  <Line number="972">	/*! Slope/Any-motion interrupt */</Line>
  <Line number="973">	BMI160_ACC_ANY_MOTION_INT,</Line>
  <Line number="974">	/*! Significant motion interrupt */</Line>
  <Line number="975">	BMI160_ACC_SIG_MOTION_INT,</Line>
  <Line number="976">	/*! Step detector interrupt */</Line>
  <Line number="977">	BMI160_STEP_DETECT_INT,</Line>
  <Line number="978">	/*! double tap interrupt */</Line>
  <Line number="979">	BMI160_ACC_DOUBLE_TAP_INT,</Line>
  <Line number="980">	/*! single tap interrupt */</Line>
  <Line number="981">	BMI160_ACC_SINGLE_TAP_INT,</Line>
  <Line number="982">	/*! orientation interrupt */</Line>
  <Line number="983">	BMI160_ACC_ORIENT_INT,</Line>
  <Line number="984">	/*! flat interrupt */</Line>
  <Line number="985">	BMI160_ACC_FLAT_INT,</Line>
  <Line number="986">	/*! high-g interrupt */</Line>
  <Line number="987">	BMI160_ACC_HIGH_G_INT,</Line>
  <Line number="988">	/*! low-g interrupt */</Line>
  <Line number="989">	BMI160_ACC_LOW_G_INT,</Line>
  <Line number="990">	/*! slow/no-motion interrupt */</Line>
  <Line number="991">	BMI160_ACC_SLOW_NO_MOTION_INT,</Line>
  <Line number="992">	/*! data ready interrupt  */</Line>
  <Line number="993">	BMI160_ACC_GYRO_DATA_RDY_INT,</Line>
  <Line number="994">	/*! fifo full interrupt */</Line>
  <Line number="995">	BMI160_ACC_GYRO_FIFO_FULL_INT,</Line>
  <Line number="996">	/*! fifo watermark interrupt */</Line>
  <Line number="997">	BMI160_ACC_GYRO_FIFO_WATERMARK_INT,</Line>
  <Line number="998">	/*! fifo tagging feature support */</Line>
  <Line number="999">	BMI160_FIFO_TAG_INT_PIN</Line>
  <Line number="1000">};</Line>
  <Line number="1001"></Line>
  <Line number="1002">/*!</Line>
  <Line number="1003"> * @brief bmi160 active state of any &amp; sig motion interrupt.</Line>
  <Line number="1004"> */</Line>
  <Line number="1005">enum bmi160_any_sig_motion_active_interrupt_state {</Line>
  <Line number="1006">	/*! Both any &amp; sig motion are disabled */</Line>
  <Line number="1007">	BMI160_BOTH_ANY_SIG_MOTION_DISABLED = <CheckRefs ids="1">-</CheckRefs>1,</Line>
  <Line number="1008">	/*! Any-motion selected */</Line>
  <Line number="1009">	BMI160_ANY_MOTION_ENABLED,</Line>
  <Line number="1010">	/*! Sig-motion selected */</Line>
  <Line number="1011">	BMI160_SIG_MOTION_ENABLED</Line>
  <Line number="1012">};</Line>
  <Line number="1013"></Line>
  <Line number="1014">struct bmi160_acc_tap_int_cfg {</Line>
  <Line number="1015">#if LITTLE_ENDIAN == 1</Line>
  <Line number="1016">	/*! tap threshold */</Line>
  <Line number="1017">	uint16_t tap_thr :5;</Line>
  <Line number="1018">	/*! tap shock */</Line>
  <Line number="1019">	uint16_t tap_shock :1;</Line>
  <Line number="1020">	/*! tap quiet */</Line>
  <Line number="1021">	uint16_t tap_quiet :1;</Line>
  <Line number="1022">	/*! tap duration */</Line>
  <Line number="1023">	uint16_t tap_dur :3;</Line>
  <Line number="1024">	/*! data source 0- filter &amp; 1 pre-filter*/</Line>
  <Line number="1025">	uint16_t tap_data_src :1;</Line>
  <Line number="1026">	/*! tap enable, 1 - enable, 0 - disable */</Line>
  <Line number="1027">	uint16_t tap_en :1;</Line>
  <Line number="1028">#elif BIG_ENDIAN == 1</Line>
  <Line number="1029">	/*! tap enable, 1 - enable, 0 - disable */</Line>
  <Line number="1030">	uint16_t tap_en :1;</Line>
  <Line number="1031">	/*! data source 0- filter &amp; 1 pre-filter*/</Line>
  <Line number="1032">	uint16_t tap_data_src :1;</Line>
  <Line number="1033">	/*! tap duration */</Line>
  <Line number="1034">	uint16_t tap_dur : 3;</Line>
  <Line number="1035">	/*! tap quiet */</Line>
  <Line number="1036">	uint16_t tap_quiet : 1;</Line>
  <Line number="1037">	/*! tap shock */</Line>
  <Line number="1038">	uint16_t tap_shock : 1;</Line>
  <Line number="1039">	/*! tap threshold */</Line>
  <Line number="1040">	uint16_t tap_thr : 5;</Line>
  <Line number="1041">#endif</Line>
  <Line number="1042">};</Line>
  <Line number="1043"></Line>
  <Line number="1044">struct bmi160_acc_any_mot_int_cfg {</Line>
  <Line number="1045">#if LITTLE_ENDIAN == 1</Line>
  <Line number="1046">	/*! 1 any-motion enable, 0 - any-motion disable */</Line>
  <Line number="1047">	uint8_t anymotion_en :1;</Line>
  <Line number="1048">	/*! slope interrupt x, 1 - enable, 0 - disable */</Line>
  <Line number="1049">	uint8_t anymotion_x :1;</Line>
  <Line number="1050">	/*! slope interrupt y, 1 - enable, 0 - disable */</Line>
  <Line number="1051">	uint8_t anymotion_y :1;</Line>
  <Line number="1052">	/*! slope interrupt z, 1 - enable, 0 - disable */</Line>
  <Line number="1053">	uint8_t anymotion_z :1;</Line>
  <Line number="1054">	/*! slope duration */</Line>
  <Line number="1055">	uint8_t anymotion_dur :2;</Line>
  <Line number="1056">	/*! data source 0- filter &amp; 1 pre-filter*/</Line>
  <Line number="1057">	uint8_t anymotion_data_src :1;</Line>
  <Line number="1058">	/*! slope threshold */</Line>
  <Line number="1059">	uint8_t anymotion_thr;</Line>
  <Line number="1060">#elif BIG_ENDIAN == 1</Line>
  <Line number="1061">	/*! slope threshold */</Line>
  <Line number="1062">	uint8_t anymotion_thr;</Line>
  <Line number="1063">	/*! data source 0- filter &amp; 1 pre-filter*/</Line>
  <Line number="1064">	uint8_t anymotion_data_src :1;</Line>
  <Line number="1065">	/*! slope duration */</Line>
  <Line number="1066">	uint8_t anymotion_dur : 2;</Line>
  <Line number="1067">	/*! slope interrupt z, 1 - enable, 0 - disable */</Line>
  <Line number="1068">	uint8_t anymotion_z : 1;</Line>
  <Line number="1069">	/*! slope interrupt y, 1 - enable, 0 - disable */</Line>
  <Line number="1070">	uint8_t anymotion_y : 1;</Line>
  <Line number="1071">	/*! slope interrupt x, 1 - enable, 0 - disable */</Line>
  <Line number="1072">	uint8_t anymotion_x : 1;</Line>
  <Line number="1073">	/*! 1 any-motion enable, 0 - any-motion disable */</Line>
  <Line number="1074">	uint8_t anymotion_en :1;</Line>
  <Line number="1075">#endif</Line>
  <Line number="1076">};</Line>
  <Line number="1077"></Line>
  <Line number="1078">struct bmi160_acc_sig_mot_int_cfg {</Line>
  <Line number="1079">#if LITTLE_ENDIAN == 1</Line>
  <Line number="1080">	/*! skip time of sig-motion interrupt */</Line>
  <Line number="1081">	uint8_t sig_mot_skip :2;</Line>
  <Line number="1082">	/*! proof time of sig-motion interrupt */</Line>
  <Line number="1083">	uint8_t sig_mot_proof :2;</Line>
  <Line number="1084">	/*! data source 0- filter &amp; 1 pre-filter*/</Line>
  <Line number="1085">	uint8_t sig_data_src :1;</Line>
  <Line number="1086">	/*! 1 - enable sig, 0 - disable sig &amp; enable anymotion */</Line>
  <Line number="1087">	uint8_t sig_en :1;</Line>
  <Line number="1088">	/*! sig-motion threshold */</Line>
  <Line number="1089">	uint8_t sig_mot_thres;</Line>
  <Line number="1090">#elif BIG_ENDIAN == 1</Line>
  <Line number="1091">	/*! sig-motion threshold */</Line>
  <Line number="1092">	uint8_t sig_mot_thres;</Line>
  <Line number="1093">	/*! 1 - enable sig, 0 - disable sig &amp; enable anymotion */</Line>
  <Line number="1094">	uint8_t sig_en :1;</Line>
  <Line number="1095">	/*! data source 0- filter &amp; 1 pre-filter*/</Line>
  <Line number="1096">	uint8_t sig_data_src :1;</Line>
  <Line number="1097">	/*! proof time of sig-motion interrupt */</Line>
  <Line number="1098">	uint8_t sig_mot_proof : 2;</Line>
  <Line number="1099">	/*! skip time of sig-motion interrupt */</Line>
  <Line number="1100">	uint8_t sig_mot_skip : 2;</Line>
  <Line number="1101">#endif</Line>
  <Line number="1102">};</Line>
  <Line number="1103"></Line>
  <Line number="1104">struct bmi160_acc_step_detect_int_cfg {</Line>
  <Line number="1105">#if LITTLE_ENDIAN == 1</Line>
  <Line number="1106">	/*! 1- step detector enable, 0- step detector disable */</Line>
  <Line number="1107">	uint16_t step_detector_en :1;</Line>
  <Line number="1108">	/*! minimum threshold */</Line>
  <Line number="1109">	uint16_t min_threshold :2;</Line>
  <Line number="1110">	/*! minimal detectable step time */</Line>
  <Line number="1111">	uint16_t steptime_min :3;</Line>
  <Line number="1112">	/*! enable step counter mode setting */</Line>
  <Line number="1113">	uint16_t step_detector_mode :2;</Line>
  <Line number="1114">	/*! minimum step buffer size*/</Line>
  <Line number="1115">	uint16_t step_min_buf :3;</Line>
  <Line number="1116">#elif BIG_ENDIAN == 1</Line>
  <Line number="1117">	/*! minimum step buffer size*/</Line>
  <Line number="1118">	uint16_t step_min_buf :3;</Line>
  <Line number="1119">	/*! enable step counter mode setting */</Line>
  <Line number="1120">	uint16_t step_detector_mode : 2;</Line>
  <Line number="1121">	/*! minimal detectable step time */</Line>
  <Line number="1122">	uint16_t steptime_min : 3;</Line>
  <Line number="1123">	/*! minimum threshold */</Line>
  <Line number="1124">	uint16_t min_threshold : 2;</Line>
  <Line number="1125">	/*! 1- step detector enable, 0- step detector disable */</Line>
  <Line number="1126">	uint16_t step_detector_en :1;</Line>
  <Line number="1127">#endif</Line>
  <Line number="1128">};</Line>
  <Line number="1129"></Line>
  <Line number="1130">struct bmi160_acc_no_motion_int_cfg {</Line>
  <Line number="1131">#if LITTLE_ENDIAN == 1</Line>
  <Line number="1132">	/*! no motion interrupt x */</Line>
  <Line number="1133">	uint16_t no_motion_x :1;</Line>
  <Line number="1134">	/*! no motion interrupt y */</Line>
  <Line number="1135">	uint16_t no_motion_y :1;</Line>
  <Line number="1136">	/*! no motion interrupt z */</Line>
  <Line number="1137">	uint16_t no_motion_z :1;</Line>
  <Line number="1138">	/*! no motion duration */</Line>
  <Line number="1139">	uint16_t no_motion_dur :6;</Line>
  <Line number="1140">	/*! no motion sel , 1 - enable no-motion ,0- enable slow-motion */</Line>
  <Line number="1141">	uint16_t no_motion_sel :1;</Line>
  <Line number="1142">	/*! data source 0- filter &amp; 1 pre-filter*/</Line>
  <Line number="1143">	uint16_t no_motion_src :1;</Line>
  <Line number="1144">	/*! no motion threshold */</Line>
  <Line number="1145">	uint8_t no_motion_thres;</Line>
  <Line number="1146">#elif BIG_ENDIAN == 1</Line>
  <Line number="1147">	/*! no motion threshold */</Line>
  <Line number="1148">	uint8_t no_motion_thres;</Line>
  <Line number="1149">	/*! data source 0- filter &amp; 1 pre-filter*/</Line>
  <Line number="1150">	uint16_t no_motion_src :1;</Line>
  <Line number="1151">	/*! no motion sel , 1 - enable no-motion ,0- enable slow-motion */</Line>
  <Line number="1152">	uint16_t no_motion_sel : 1;</Line>
  <Line number="1153">	/*! no motion duration */</Line>
  <Line number="1154">	uint16_t no_motion_dur : 6;</Line>
  <Line number="1155">	/* no motion interrupt z */</Line>
  <Line number="1156">	uint16_t no_motion_z :1;</Line>
  <Line number="1157">	/*! no motion interrupt y */</Line>
  <Line number="1158">	uint16_t no_motion_y :1;</Line>
  <Line number="1159">	/*! no motion interrupt x */</Line>
  <Line number="1160">	uint16_t no_motion_x :1;</Line>
  <Line number="1161">#endif</Line>
  <Line number="1162">};</Line>
  <Line number="1163"></Line>
  <Line number="1164">struct bmi160_acc_orient_int_cfg {</Line>
  <Line number="1165">#if LITTLE_ENDIAN == 1</Line>
  <Line number="1166">	/*! thresholds for switching between the different orientations */</Line>
  <Line number="1167">	uint16_t orient_mode :2;</Line>
  <Line number="1168">	/*! blocking_mode */</Line>
  <Line number="1169">	uint16_t orient_blocking :2;</Line>
  <Line number="1170">	/*! Orientation interrupt hysteresis */</Line>
  <Line number="1171">	uint16_t orient_hyst :4;</Line>
  <Line number="1172">	/*! Orientation interrupt theta */</Line>
  <Line number="1173">	uint16_t orient_theta :6;</Line>
  <Line number="1174">	/*! Enable/disable Orientation interrupt */</Line>
  <Line number="1175">	uint16_t orient_ud_en :1;</Line>
  <Line number="1176">	/*! exchange x- and z-axis in algorithm ,0 - z, 1 - x */</Line>
  <Line number="1177">	uint16_t axes_ex :1;</Line>
  <Line number="1178">	/*! 1 - orient enable, 0 - orient disable */</Line>
  <Line number="1179">	uint8_t orient_en :1;</Line>
  <Line number="1180">#elif BIG_ENDIAN == 1</Line>
  <Line number="1181">	/*! 1 - orient enable, 0 - orient disable */</Line>
  <Line number="1182">	uint8_t orient_en :1;</Line>
  <Line number="1183">	/*! exchange x- and z-axis in algorithm ,0 - z, 1 - x */</Line>
  <Line number="1184">	uint16_t axes_ex : 1;</Line>
  <Line number="1185">	/*! Enable/disable Orientation interrupt */</Line>
  <Line number="1186">	uint16_t orient_ud_en : 1;</Line>
  <Line number="1187">	/*! Orientation interrupt theta */</Line>
  <Line number="1188">	uint16_t orient_theta : 6;</Line>
  <Line number="1189">	/*! Orientation interrupt hysteresis */</Line>
  <Line number="1190">	uint16_t orient_hyst : 4;</Line>
  <Line number="1191">	/*! blocking_mode */</Line>
  <Line number="1192">	uint16_t orient_blocking : 2;</Line>
  <Line number="1193">	/*! thresholds for switching between the different orientations */</Line>
  <Line number="1194">	uint16_t orient_mode : 2;</Line>
  <Line number="1195">#endif</Line>
  <Line number="1196">};</Line>
  <Line number="1197"></Line>
  <Line number="1198">struct bmi160_acc_flat_detect_int_cfg {</Line>
  <Line number="1199">#if LITTLE_ENDIAN == 1</Line>
  <Line number="1200">	/*! flat threshold */</Line>
  <Line number="1201">	uint16_t flat_theta :6;</Line>
  <Line number="1202">	/*! flat interrupt hysteresis */</Line>
  <Line number="1203">	uint16_t flat_hy :3;</Line>
  <Line number="1204">	/*! delay time for which the flat value must remain stable for the</Line>
  <Line number="1205">	 * flat interrupt to be generated */</Line>
  <Line number="1206">	uint16_t flat_hold_time :2;</Line>
  <Line number="1207">	/*! 1 - flat enable, 0 - flat disable */</Line>
  <Line number="1208">	uint16_t flat_en :1;</Line>
  <Line number="1209">#elif BIG_ENDIAN == 1</Line>
  <Line number="1210">	/*! 1 - flat enable, 0 - flat disable */</Line>
  <Line number="1211">	uint16_t flat_en :1;</Line>
  <Line number="1212">	/*! delay time for which the flat value must remain stable for the</Line>
  <Line number="1213">	 * flat interrupt to be generated */</Line>
  <Line number="1214">	uint16_t flat_hold_time : 2;</Line>
  <Line number="1215">	/*! flat interrupt hysteresis */</Line>
  <Line number="1216">	uint16_t flat_hy : 3;</Line>
  <Line number="1217">	/*! flat threshold */</Line>
  <Line number="1218">	uint16_t flat_theta : 6;</Line>
  <Line number="1219">#endif</Line>
  <Line number="1220">};</Line>
  <Line number="1221"></Line>
  <Line number="1222">struct bmi160_acc_low_g_int_cfg {</Line>
  <Line number="1223">#if LITTLE_ENDIAN == 1</Line>
  <Line number="1224">	/*! low-g interrupt trigger delay */</Line>
  <Line number="1225">	uint8_t low_dur;</Line>
  <Line number="1226">	/*! low-g interrupt trigger threshold */</Line>
  <Line number="1227">	uint8_t low_thres;</Line>
  <Line number="1228">	/*! hysteresis of low-g interrupt */</Line>
  <Line number="1229">	uint8_t low_hyst :2;</Line>
  <Line number="1230">	/*! 0 - single-axis mode ,1 - axis-summing mode */</Line>
  <Line number="1231">	uint8_t low_mode :1;</Line>
  <Line number="1232">	/*! data source 0- filter &amp; 1 pre-filter */</Line>
  <Line number="1233">	uint8_t low_data_src :1;</Line>
  <Line number="1234">	/*! 1 - enable low-g, 0 - disable low-g */</Line>
  <Line number="1235">	uint8_t low_en :1;</Line>
  <Line number="1236">#elif BIG_ENDIAN == 1</Line>
  <Line number="1237">	/*! 1 - enable low-g, 0 - disable low-g */</Line>
  <Line number="1238">	uint8_t low_en :1;</Line>
  <Line number="1239">	/*! data source 0- filter &amp; 1 pre-filter */</Line>
  <Line number="1240">	uint8_t low_data_src :1;</Line>
  <Line number="1241">	/*! 0 - single-axis mode ,1 - axis-summing mode */</Line>
  <Line number="1242">	uint8_t low_mode : 1;</Line>
  <Line number="1243">	/*! hysteresis of low-g interrupt */</Line>
  <Line number="1244">	uint8_t low_hyst : 2;</Line>
  <Line number="1245">	/*! low-g interrupt trigger threshold */</Line>
  <Line number="1246">	uint8_t low_thres;</Line>
  <Line number="1247">	/*! low-g interrupt trigger delay */</Line>
  <Line number="1248">	uint8_t low_dur;</Line>
  <Line number="1249">#endif</Line>
  <Line number="1250">};</Line>
  <Line number="1251"></Line>
  <Line number="1252">struct bmi160_acc_high_g_int_cfg {</Line>
  <Line number="1253">#if LITTLE_ENDIAN == 1</Line>
  <Line number="1254">	/*! High-g interrupt x, 1 - enable, 0 - disable */</Line>
  <Line number="1255">	uint8_t high_g_x :1;</Line>
  <Line number="1256">	/*! High-g interrupt y, 1 - enable, 0 - disable */</Line>
  <Line number="1257">	uint8_t high_g_y :1;</Line>
  <Line number="1258">	/*! High-g interrupt z, 1 - enable, 0 - disable */</Line>
  <Line number="1259">	uint8_t high_g_z :1;</Line>
  <Line number="1260">	/*! High-g hysteresis  */</Line>
  <Line number="1261">	uint8_t high_hy :2;</Line>
  <Line number="1262">	/*! data source 0- filter &amp; 1 pre-filter */</Line>
  <Line number="1263">	uint8_t high_data_src :1;</Line>
  <Line number="1264">	/*! High-g threshold */</Line>
  <Line number="1265">	uint8_t high_thres;</Line>
  <Line number="1266">	/*! High-g duration */</Line>
  <Line number="1267">	uint8_t high_dur;</Line>
  <Line number="1268">#elif BIG_ENDIAN == 1</Line>
  <Line number="1269">	/*! High-g duration */</Line>
  <Line number="1270">	uint8_t high_dur;</Line>
  <Line number="1271">	/*! High-g threshold */</Line>
  <Line number="1272">	uint8_t high_thres;</Line>
  <Line number="1273">	/*! data source 0- filter &amp; 1 pre-filter */</Line>
  <Line number="1274">	uint8_t high_data_src :1;</Line>
  <Line number="1275">	/*! High-g hysteresis  */</Line>
  <Line number="1276">	uint8_t high_hy : 2;</Line>
  <Line number="1277">	/*! High-g interrupt z, 1 - enable, 0 - disable */</Line>
  <Line number="1278">	uint8_t high_g_z : 1;</Line>
  <Line number="1279">	/*! High-g interrupt y, 1 - enable, 0 - disable */</Line>
  <Line number="1280">	uint8_t high_g_y : 1;</Line>
  <Line number="1281">	/*! High-g interrupt x, 1 - enable, 0 - disable */</Line>
  <Line number="1282">	uint8_t high_g_x : 1;</Line>
  <Line number="1283">#endif</Line>
  <Line number="1284">};</Line>
  <Line number="1285"></Line>
  <Line number="1286">struct bmi160_int_pin_settg {</Line>
  <Line number="1287">#if LITTLE_ENDIAN == 1</Line>
  <Line number="1288">	/*! To enable either INT1 or INT2 pin as output.</Line>
  <Line number="1289">	 * 0- output disabled ,1- output enabled */</Line>
  <Line number="1290">	uint16_t output_en :1;</Line>
  <Line number="1291">	/*! 0 - push-pull 1- open drain,only valid if output_en is set 1 */</Line>
  <Line number="1292">	uint16_t output_mode :1;</Line>
  <Line number="1293">	/*! 0 - active low , 1 - active high level.</Line>
  <Line number="1294">	 * if output_en is 1,this applies to interrupts,else PMU_trigger */</Line>
  <Line number="1295">	uint16_t output_type :1;</Line>
  <Line number="1296">	/*! 0 - level trigger , 1 - edge trigger  */</Line>
  <Line number="1297">	uint16_t edge_ctrl :1;</Line>
  <Line number="1298">	/*! To enable either INT1 or INT2 pin as input.</Line>
  <Line number="1299">	 * 0 - input disabled ,1 - input enabled */</Line>
  <Line number="1300">	uint16_t input_en :1;</Line>
  <Line number="1301">	/*! latch duration*/</Line>
  <Line number="1302">	uint16_t latch_dur :4;</Line>
  <Line number="1303">#elif BIG_ENDIAN == 1</Line>
  <Line number="1304">	/*! latch duration*/</Line>
  <Line number="1305">	uint16_t latch_dur : 4;</Line>
  <Line number="1306">	/*! Latched,non-latched or temporary interrupt modes */</Line>
  <Line number="1307">	uint16_t input_en : 1;</Line>
  <Line number="1308">	/*! 1 - edge trigger, 0 - level trigger */</Line>
  <Line number="1309">	uint16_t edge_ctrl : 1;</Line>
  <Line number="1310">	/*! 0 - active low , 1 - active high level.</Line>
  <Line number="1311">	 * if output_en is 1,this applies to interrupts,else PMU_trigger */</Line>
  <Line number="1312">	uint16_t output_type : 1;</Line>
  <Line number="1313">	/*! 0 - push-pull , 1 - open drain,only valid if output_en is set 1 */</Line>
  <Line number="1314">	uint16_t output_mode : 1;</Line>
  <Line number="1315">	/*! To enable either INT1 or INT2 pin as output.</Line>
  <Line number="1316">	 * 0 - output disabled , 1 - output enabled */</Line>
  <Line number="1317">	uint16_t output_en : 1;</Line>
  <Line number="1318">#endif</Line>
  <Line number="1319">};</Line>
  <Line number="1320"></Line>
  <Line number="1321">union bmi160_int_type_cfg {</Line>
  <Line number="1322">	/*! Tap interrupt structure */</Line>
  <Line number="1323">	struct bmi160_acc_tap_int_cfg acc_tap_int;</Line>
  <Line number="1324">	/*! Slope interrupt structure */</Line>
  <Line number="1325">	struct bmi160_acc_any_mot_int_cfg acc_any_motion_int;</Line>
  <Line number="1326">	/*! Significant motion interrupt structure */</Line>
  <Line number="1327">	struct bmi160_acc_sig_mot_int_cfg acc_sig_motion_int;</Line>
  <Line number="1328">	/*! Step detector interrupt structure */</Line>
  <Line number="1329">	struct bmi160_acc_step_detect_int_cfg acc_step_detect_int;</Line>
  <Line number="1330">	/*! No motion interrupt structure */</Line>
  <Line number="1331">	struct bmi160_acc_no_motion_int_cfg acc_no_motion_int;</Line>
  <Line number="1332">	/*! Orientation interrupt structure */</Line>
  <Line number="1333">	struct bmi160_acc_orient_int_cfg acc_orient_int;</Line>
  <Line number="1334">	/*! Flat interrupt structure */</Line>
  <Line number="1335">	struct bmi160_acc_flat_detect_int_cfg acc_flat_int;</Line>
  <Line number="1336">	/*! Low-g interrupt structure */</Line>
  <Line number="1337">	struct bmi160_acc_low_g_int_cfg acc_low_g_int;</Line>
  <Line number="1338">	/*! High-g interrupt structure */</Line>
  <Line number="1339">	struct bmi160_acc_high_g_int_cfg acc_high_g_int;</Line>
  <Line number="1340">};</Line>
  <Line number="1341"></Line>
  <Line number="1342">struct bmi160_int_settg {</Line>
  <Line number="1343">	/*! Interrupt channel */</Line>
  <Line number="1344">	enum bmi160_int_channel int_channel;</Line>
  <Line number="1345">	/*! Select Interrupt */</Line>
  <Line number="1346">	enum bmi160_int_types int_type;</Line>
  <Line number="1347">	/*! Structure configuring Interrupt pins */</Line>
  <Line number="1348">	struct bmi160_int_pin_settg int_pin_settg;</Line>
  <Line number="1349">	/*! Union configures required interrupt */</Line>
  <Line number="1350">	union bmi160_int_type_cfg int_type_cfg;</Line>
  <Line number="1351">	/*! FIFO FULL INT 1-enable, 0-disable */</Line>
  <Line number="1352">	uint8_t fifo_full_int_en :1;</Line>
  <Line number="1353">	/*! FIFO WTM INT 1-enable, 0-disable */</Line>
  <Line number="1354">	uint8_t fifo_WTM_int_en :1;</Line>
  <Line number="1355">};</Line>
  <Line number="1356"></Line>
  <Line number="1357">/*!</Line>
  <Line number="1358"> *  @brief This structure holds the information for usage of</Line>
  <Line number="1359"> *  FIFO by the user.</Line>
  <Line number="1360"> */</Line>
  <Line number="1361">struct bmi160_fifo_frame {</Line>
  <Line number="1362">	/*! Data buffer of user defined length is to be mapped here */</Line>
  <Line number="1363">	uint8_t *data;</Line>
  <Line number="1364">	/*! While calling the API  &quot;bmi160_get_fifo_data&quot; , length stores</Line>
  <Line number="1365">	 *  number of bytes in FIFO to be read (specified by user as input)</Line>
  <Line number="1366">	 *  and after execution of the API ,number of FIFO data bytes</Line>
  <Line number="1367">	 *  available is provided as an output to user</Line>
  <Line number="1368">	 */</Line>
  <Line number="1369">	uint16_t length;</Line>
  <Line number="1370">	/*! FIFO time enable */</Line>
  <Line number="1371">	uint8_t fifo_time_enable;</Line>
  <Line number="1372">	/*! Enabling of the FIFO header to stream in header mode */</Line>
  <Line number="1373">	uint8_t fifo_header_enable;</Line>
  <Line number="1374">	/*! Streaming of the Accelerometer, Gyroscope</Line>
  <Line number="1375">	sensor data or both in FIFO */</Line>
  <Line number="1376">	uint8_t fifo_data_enable;</Line>
  <Line number="1377">	/*! Will be equal to length when no more frames are there to parse */</Line>
  <Line number="1378">	uint16_t accel_byte_start_idx;</Line>
  <Line number="1379">	/*! Will be equal to length when no more frames are there to parse */</Line>
  <Line number="1380">	uint16_t gyro_byte_start_idx;</Line>
  <Line number="1381">	/*! Will be equal to length when no more frames are there to parse */</Line>
  <Line number="1382">	uint16_t aux_byte_start_idx;</Line>
  <Line number="1383">	/*! Value of FIFO sensor time time */</Line>
  <Line number="1384">	uint32_t sensor_time;</Line>
  <Line number="1385">	/*! Value of Skipped frame counts */</Line>
  <Line number="1386">	uint8_t skipped_frame_count;</Line>
  <Line number="1387">};</Line>
  <Line number="1388"></Line>
  <Line number="1389">struct bmi160_dev {</Line>
  <Line number="1390">	/*! Chip Id */</Line>
  <Line number="1391">	uint8_t chip_id;</Line>
  <Line number="1392">	/*! Device Id */</Line>
  <Line number="1393">	uint8_t id;</Line>
  <Line number="1394">	/*! 0 - I2C , 1 - SPI Interface */</Line>
  <Line number="1395">	uint8_t interface;</Line>
  <Line number="1396">	/*! Hold active interrupts status for any and sig motion</Line>
  <Line number="1397">	 *  0 - Any-motion enable, 1 - Sig-motion enable,</Line>
  <Line number="1398">	 *  -1 neither any-motion nor sig-motion selected */</Line>
  <Line number="1399">	enum bmi160_any_sig_motion_active_interrupt_state any_sig_sel;</Line>
  <Line number="1400">	/*! Structure to configure Accel sensor */</Line>
  <Line number="1401">	struct bmi160_cfg accel_cfg;</Line>
  <Line number="1402">	/*! Structure to hold previous/old accel config parameters.</Line>
  <Line number="1403">	 * This is used at driver level to prevent overwriting of same</Line>
  <Line number="1404">	 * data, hence user does not change it in the code */</Line>
  <Line number="1405">	struct bmi160_cfg prev_accel_cfg;</Line>
  <Line number="1406">	/*! Structure to configure Gyro sensor */</Line>
  <Line number="1407">	struct bmi160_cfg gyro_cfg;</Line>
  <Line number="1408">	/*! Structure to hold previous/old gyro config parameters.</Line>
  <Line number="1409">	 * This is used at driver level to prevent overwriting of same</Line>
  <Line number="1410">	 * data, hence user does not change it in the code */</Line>
  <Line number="1411">	struct bmi160_cfg prev_gyro_cfg;</Line>
  <Line number="1412">	/*! Structure to configure the auxiliary sensor */</Line>
  <Line number="1413">	struct bmi160_aux_cfg aux_cfg;</Line>
  <Line number="1414">	/*! Structure to hold previous/old aux config parameters.</Line>
  <Line number="1415">	 * This is used at driver level to prevent overwriting of same</Line>
  <Line number="1416">	 * data, hence user does not change it in the code */</Line>
  <Line number="1417">	struct bmi160_aux_cfg prev_aux_cfg;</Line>
  <Line number="1418">	 /*! FIFO related configurations */</Line>
  <Line number="1419">	struct bmi160_fifo_frame *fifo;</Line>
  <Line number="1420">	/*! Read function pointer */</Line>
  <Line number="1421">	bmi160_com_fptr_t read;</Line>
  <Line number="1422">	/*! Write function pointer */</Line>
  <Line number="1423">	bmi160_com_fptr_t write;</Line>
  <Line number="1424">	/*!  Delay function pointer */</Line>
  <Line number="1425">	bmi160_delay_fptr_t delay_ms;</Line>
  <Line number="1426">};</Line>
  <Line number="1427"></Line>
  <Line number="1428"></Line>
  <Line number="1429">#endif /* BMI160_DEFS_H_ */</Line>
</SourceFile>
