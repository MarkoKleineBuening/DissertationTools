<SourceFile>
  <Line number="1">/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */</Line>
  <Line number="2">#ifndef _FALLOC_H_</Line>
  <Line number="3">#define _FALLOC_H_</Line>
  <Line number="4"></Line>
  <Line number="5">#define FALLOC_FL_KEEP_SIZE	0x01 /* default is extend size */</Line>
  <Line number="6">#define FALLOC_FL_PUNCH_HOLE	0x02 /* de-allocates range */</Line>
  <Line number="7">#define FALLOC_FL_NO_HIDE_STALE	0x04 /* reserved codepoint */</Line>
  <Line number="8"></Line>
  <Line number="9">/*</Line>
  <Line number="10"> * FALLOC_FL_COLLAPSE_RANGE is used to remove a range of a file</Line>
  <Line number="11"> * without leaving a hole in the file. The contents of the file beyond</Line>
  <Line number="12"> * the range being removed is appended to the start offset of the range</Line>
  <Line number="13"> * being removed (i.e. the hole that was punched is &quot;collapsed&quot;),</Line>
  <Line number="14"> * resulting in a file layout that looks like the range that was</Line>
  <Line number="15"> * removed never existed. As such collapsing a range of a file changes</Line>
  <Line number="16"> * the size of the file, reducing it by the same length of the range</Line>
  <Line number="17"> * that has been removed by the operation.</Line>
  <Line number="18"> *</Line>
  <Line number="19"> * Different filesystems may implement different limitations on the</Line>
  <Line number="20"> * granularity of the operation. Most will limit operations to</Line>
  <Line number="21"> * filesystem block size boundaries, but this boundary may be larger or</Line>
  <Line number="22"> * smaller depending on the filesystem and/or the configuration of the</Line>
  <Line number="23"> * filesystem or file.</Line>
  <Line number="24"> *</Line>
  <Line number="25"> * Attempting to collapse a range that crosses the end of the file is</Line>
  <Line number="26"> * considered an illegal operation - just use ftruncate(2) if you need</Line>
  <Line number="27"> * to collapse a range that crosses EOF.</Line>
  <Line number="28"> */</Line>
  <Line number="29">#define FALLOC_FL_COLLAPSE_RANGE	0x08</Line>
  <Line number="30"></Line>
  <Line number="31">/*</Line>
  <Line number="32"> * FALLOC_FL_ZERO_RANGE is used to convert a range of file to zeros preferably</Line>
  <Line number="33"> * without issuing data IO. Blocks should be preallocated for the regions that</Line>
  <Line number="34"> * span holes in the file, and the entire range is preferable converted to</Line>
  <Line number="35"> * unwritten extents - even though file system may choose to zero out the</Line>
  <Line number="36"> * extent or do whatever which will result in reading zeros from the range</Line>
  <Line number="37"> * while the range remains allocated for the file.</Line>
  <Line number="38"> *</Line>
  <Line number="39"> * This can be also used to preallocate blocks past EOF in the same way as</Line>
  <Line number="40"> * with fallocate. Flag FALLOC_FL_KEEP_SIZE should cause the inode</Line>
  <Line number="41"> * size to remain the same.</Line>
  <Line number="42"> */</Line>
  <Line number="43">#define FALLOC_FL_ZERO_RANGE		0x10</Line>
  <Line number="44"></Line>
  <Line number="45">/*</Line>
  <Line number="46"> * FALLOC_FL_INSERT_RANGE is use to insert space within the file size without</Line>
  <Line number="47"> * overwriting any existing data. The contents of the file beyond offset are</Line>
  <Line number="48"> * shifted towards right by len bytes to create a hole.  As such, this</Line>
  <Line number="49"> * operation will increase the size of the file by len bytes.</Line>
  <Line number="50"> *</Line>
  <Line number="51"> * Different filesystems may implement different limitations on the granularity</Line>
  <Line number="52"> * of the operation. Most will limit operations to filesystem block size</Line>
  <Line number="53"> * boundaries, but this boundary may be larger or smaller depending on</Line>
  <Line number="54"> * the filesystem and/or the configuration of the filesystem or file.</Line>
  <Line number="55"> *</Line>
  <Line number="56"> * Attempting to insert space using this flag at OR beyond the end of</Line>
  <Line number="57"> * the file is considered an illegal operation - just use ftruncate(2) or</Line>
  <Line number="58"> * fallocate(2) with mode 0 for such type of operations.</Line>
  <Line number="59"> */</Line>
  <Line number="60">#define FALLOC_FL_INSERT_RANGE		0x20</Line>
  <Line number="61"></Line>
  <Line number="62">/*</Line>
  <Line number="63"> * FALLOC_FL_UNSHARE_RANGE is used to unshare shared blocks within the</Line>
  <Line number="64"> * file size without overwriting any existing data. The purpose of this</Line>
  <Line number="65"> * call is to preemptively reallocate any blocks that are subject to</Line>
  <Line number="66"> * copy-on-write.</Line>
  <Line number="67"> *</Line>
  <Line number="68"> * Different filesystems may implement different limitations on the</Line>
  <Line number="69"> * granularity of the operation. Most will limit operations to filesystem</Line>
  <Line number="70"> * block size boundaries, but this boundary may be larger or smaller</Line>
  <Line number="71"> * depending on the filesystem and/or the configuration of the filesystem</Line>
  <Line number="72"> * or file.</Line>
  <Line number="73"> *</Line>
  <Line number="74"> * This flag can only be used with allocate-mode fallocate, which is</Line>
  <Line number="75"> * to say that it cannot be used with the punch, zero, collapse, or</Line>
  <Line number="76"> * insert range modes.</Line>
  <Line number="77"> */</Line>
  <Line number="78">#define FALLOC_FL_UNSHARE_RANGE		0x40</Line>
  <Line number="79"></Line>
  <Line number="80">#endif /* _FALLOC_H_ */</Line>
</SourceFile>
