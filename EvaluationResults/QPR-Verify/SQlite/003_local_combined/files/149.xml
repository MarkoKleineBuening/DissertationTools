<SourceFile>
  <Line number="1">/* Memory-mapping-related declarations/definitions, not architecture-specific.</Line>
  <Line number="2">   Copyright (C) 2017-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef _SYS_MMAN_H</Line>
  <Line number="20"># error &quot;Never use &lt;bits/mman-shared.h&gt; directly; include &lt;sys/mman.h&gt; instead.&quot;</Line>
  <Line number="21">#endif</Line>
  <Line number="22"></Line>
  <Line number="23">#ifdef __USE_GNU</Line>
  <Line number="24">/* Flags for mremap.  */</Line>
  <Line number="25"># define MREMAP_MAYMOVE	1</Line>
  <Line number="26"># define MREMAP_FIXED	2</Line>
  <Line number="27"></Line>
  <Line number="28">/* Flags for memfd_create.  */</Line>
  <Line number="29"># ifndef MFD_CLOEXEC</Line>
  <Line number="30">#  define MFD_CLOEXEC 1U</Line>
  <Line number="31">#  define MFD_ALLOW_SEALING 2U</Line>
  <Line number="32">#  define MFD_HUGETLB 4U</Line>
  <Line number="33"># endif</Line>
  <Line number="34"></Line>
  <Line number="35">/* Flags for mlock2.  */</Line>
  <Line number="36"># ifndef MLOCK_ONFAULT</Line>
  <Line number="37">#  define MLOCK_ONFAULT 1U</Line>
  <Line number="38"># endif</Line>
  <Line number="39"></Line>
  <Line number="40">/* Access rights for pkey_alloc.  */</Line>
  <Line number="41"># ifndef PKEY_DISABLE_ACCESS</Line>
  <Line number="42">#  define PKEY_DISABLE_ACCESS 0x1</Line>
  <Line number="43">#  define PKEY_DISABLE_WRITE 0x2</Line>
  <Line number="44"># endif</Line>
  <Line number="45"></Line>
  <Line number="46">__BEGIN_DECLS</Line>
  <Line number="47"></Line>
  <Line number="48">/* Create a new memory file descriptor.  NAME is a name for debugging.</Line>
  <Line number="49">   FLAGS is a combination of the MFD_* constants.  */</Line>
  <Line number="50">int memfd_create (const char *__name, unsigned int __flags) __THROW;</Line>
  <Line number="51"></Line>
  <Line number="52">/* Lock pages from ADDR (inclusive) to ADDR + LENGTH (exclusive) into</Line>
  <Line number="53">   memory.  FLAGS is a combination of the MLOCK_* flags above.  */</Line>
  <Line number="54">int mlock2 (const void *__addr, size_t __length, unsigned int __flags) __THROW;</Line>
  <Line number="55"></Line>
  <Line number="56">/* Allocate a new protection key, with the PKEY_DISABLE_* bits</Line>
  <Line number="57">   specified in ACCESS_RIGHTS.  The protection key mask for the</Line>
  <Line number="58">   current thread is updated to match the access privilege for the new</Line>
  <Line number="59">   key.  */</Line>
  <Line number="60">int pkey_alloc (unsigned int __flags, unsigned int __access_rights) __THROW;</Line>
  <Line number="61"></Line>
  <Line number="62">/* Update the access rights for the current thread for KEY, which must</Line>
  <Line number="63">   have been allocated using pkey_alloc.  */</Line>
  <Line number="64">int pkey_set (int __key, unsigned int __access_rights) __THROW;</Line>
  <Line number="65"></Line>
  <Line number="66">/* Return the access rights for the current thread for KEY, which must</Line>
  <Line number="67">   have been allocated using pkey_alloc.  */</Line>
  <Line number="68">int pkey_get (int __key) __THROW;</Line>
  <Line number="69"></Line>
  <Line number="70">/* Free an allocated protection key, which must have been allocated</Line>
  <Line number="71">   using pkey_alloc.  */</Line>
  <Line number="72">int pkey_free (int __key) __THROW;</Line>
  <Line number="73"></Line>
  <Line number="74">/* Apply memory protection flags for KEY to the specified address</Line>
  <Line number="75">   range.  */</Line>
  <Line number="76">int pkey_mprotect (void *__addr, size_t __len, int __prot, int __pkey) __THROW;</Line>
  <Line number="77"></Line>
  <Line number="78">__END_DECLS</Line>
  <Line number="79"></Line>
  <Line number="80">#endif /* __USE_GNU */</Line>
</SourceFile>
