<SourceFile>
  <Line number="1">/* `fd_set&apos; type and related macros, and `select&apos;/`pselect&apos; declarations.</Line>
  <Line number="2">   Copyright (C) 1996-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">/*	POSIX 1003.1g: 6.2 Select from File Descriptor Sets &lt;sys/select.h&gt;  */</Line>
  <Line number="20"></Line>
  <Line number="21">#ifndef _SYS_SELECT_H</Line>
  <Line number="22">#define _SYS_SELECT_H	1</Line>
  <Line number="23"></Line>
  <Line number="24">#include &lt;features.h&gt;</Line>
  <Line number="25"></Line>
  <Line number="26">/* Get definition of needed basic types.  */</Line>
  <Line number="27">#include &lt;bits/types.h&gt;</Line>
  <Line number="28"></Line>
  <Line number="29">/* Get __FD_* definitions.  */</Line>
  <Line number="30">#include &lt;bits/select.h&gt;</Line>
  <Line number="31"></Line>
  <Line number="32">/* Get sigset_t.  */</Line>
  <Line number="33">#include &lt;bits/types/sigset_t.h&gt;</Line>
  <Line number="34"></Line>
  <Line number="35">/* Get definition of timer specification structures.  */</Line>
  <Line number="36">#include &lt;bits/types/time_t.h&gt;</Line>
  <Line number="37">#include &lt;bits/types/struct_timeval.h&gt;</Line>
  <Line number="38">#ifdef __USE_XOPEN2K</Line>
  <Line number="39"># include &lt;bits/types/struct_timespec.h&gt;</Line>
  <Line number="40">#endif</Line>
  <Line number="41"></Line>
  <Line number="42">#ifndef __suseconds_t_defined</Line>
  <Line number="43">typedef __suseconds_t suseconds_t;</Line>
  <Line number="44"># define __suseconds_t_defined</Line>
  <Line number="45">#endif</Line>
  <Line number="46"></Line>
  <Line number="47"></Line>
  <Line number="48">/* The fd_set member is required to be an array of longs.  */</Line>
  <Line number="49">typedef long int __fd_mask;</Line>
  <Line number="50"></Line>
  <Line number="51">/* Some versions of &lt;linux/posix_types.h&gt; define this macros.  */</Line>
  <Line number="52">#undef	__NFDBITS</Line>
  <Line number="53">/* It&apos;s easier to assume 8-bit bytes than to get CHAR_BIT.  */</Line>
  <Line number="54">#define __NFDBITS	(8 * (int) sizeof (__fd_mask))</Line>
  <Line number="55">#define	__FD_ELT(d)	((d) / __NFDBITS)</Line>
  <Line number="56">#define	__FD_MASK(d)	((__fd_mask) (1UL &lt;&lt; ((d) % __NFDBITS)))</Line>
  <Line number="57"></Line>
  <Line number="58">/* fd_set for select and pselect.  */</Line>
  <Line number="59">typedef struct</Line>
  <Line number="60">  {</Line>
  <Line number="61">    /* XPG4.2 requires this member name.  Otherwise avoid the name</Line>
  <Line number="62">       from the global namespace.  */</Line>
  <Line number="63">#ifdef __USE_XOPEN</Line>
  <Line number="64">    __fd_mask fds_bits[__FD_SETSIZE <CheckRefs ids="4471,4472">/</CheckRefs> <CheckRefs ids="4473,4474">__NFDBITS</CheckRefs>];</Line>
  <Line number="65"># define __FDS_BITS(set) ((set)-&gt;fds_bits)</Line>
  <Line number="66">#else</Line>
  <Line number="67">    __fd_mask __fds_bits[__FD_SETSIZE <CheckRefs ids="35,36">/</CheckRefs> <CheckRefs ids="37,38">__NFDBITS</CheckRefs>];</Line>
  <Line number="68"># define __FDS_BITS(set) ((set)-&gt;__fds_bits)</Line>
  <Line number="69">#endif</Line>
  <Line number="70">  } fd_set;</Line>
  <Line number="71"></Line>
  <Line number="72">/* Maximum number of file descriptors in `fd_set&apos;.  */</Line>
  <Line number="73">#define	FD_SETSIZE		__FD_SETSIZE</Line>
  <Line number="74"></Line>
  <Line number="75">#ifdef __USE_MISC</Line>
  <Line number="76">/* Sometimes the fd_set member is assumed to have this type.  */</Line>
  <Line number="77">typedef __fd_mask fd_mask;</Line>
  <Line number="78"></Line>
  <Line number="79">/* Number of bits per word of `fd_set&apos; (some code assumes this is 32).  */</Line>
  <Line number="80"># define NFDBITS		__NFDBITS</Line>
  <Line number="81">#endif</Line>
  <Line number="82"></Line>
  <Line number="83"></Line>
  <Line number="84">/* Access macros for `fd_set&apos;.  */</Line>
  <Line number="85">#define	FD_SET(fd, fdsetp)	__FD_SET (fd, fdsetp)</Line>
  <Line number="86">#define	FD_CLR(fd, fdsetp)	__FD_CLR (fd, fdsetp)</Line>
  <Line number="87">#define	FD_ISSET(fd, fdsetp)	__FD_ISSET (fd, fdsetp)</Line>
  <Line number="88">#define	FD_ZERO(fdsetp)		__FD_ZERO (fdsetp)</Line>
  <Line number="89"></Line>
  <Line number="90"></Line>
  <Line number="91">__BEGIN_DECLS</Line>
  <Line number="92"></Line>
  <Line number="93">/* Check the first NFDS descriptors each in READFDS (if not NULL) for read</Line>
  <Line number="94">   readiness, in WRITEFDS (if not NULL) for write readiness, and in EXCEPTFDS</Line>
  <Line number="95">   (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, time out</Line>
  <Line number="96">   after waiting the interval specified therein.  Returns the number of ready</Line>
  <Line number="97">   descriptors, or -1 for errors.</Line>
  <Line number="98"></Line>
  <Line number="99">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="100">   __THROW.  */</Line>
  <Line number="101">extern int select (int __nfds, fd_set *__restrict __readfds,</Line>
  <Line number="102">		   fd_set *__restrict __writefds,</Line>
  <Line number="103">		   fd_set *__restrict __exceptfds,</Line>
  <Line number="104">		   struct timeval *__restrict __timeout);</Line>
  <Line number="105"></Line>
  <Line number="106">#ifdef __USE_XOPEN2K</Line>
  <Line number="107">/* Same as above only that the TIMEOUT value is given with higher</Line>
  <Line number="108">   resolution and a sigmask which is been set temporarily.  This version</Line>
  <Line number="109">   should be used.</Line>
  <Line number="110"></Line>
  <Line number="111">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="112">   __THROW.  */</Line>
  <Line number="113">extern int pselect (int __nfds, fd_set *__restrict __readfds,</Line>
  <Line number="114">		    fd_set *__restrict __writefds,</Line>
  <Line number="115">		    fd_set *__restrict __exceptfds,</Line>
  <Line number="116">		    const struct timespec *__restrict __timeout,</Line>
  <Line number="117">		    const __sigset_t *__restrict __sigmask);</Line>
  <Line number="118">#endif</Line>
  <Line number="119"></Line>
  <Line number="120"></Line>
  <Line number="121">/* Define some inlines helping to catch common problems.  */</Line>
  <Line number="122">#if __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __GNUC__</Line>
  <Line number="123"># include &lt;bits/select2.h&gt;</Line>
  <Line number="124">#endif</Line>
  <Line number="125"></Line>
  <Line number="126">__END_DECLS</Line>
  <Line number="127"></Line>
  <Line number="128">#endif /* sys/select.h */</Line>
</SourceFile>
