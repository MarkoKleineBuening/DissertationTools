<SourceFile>
  <Line number="1">/* Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">/*</Line>
  <Line number="19"> *	ISO C99 Standard 7.4: Character handling	&lt;ctype.h&gt;</Line>
  <Line number="20"> */</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef	_CTYPE_H</Line>
  <Line number="23">#define	_CTYPE_H	1</Line>
  <Line number="24"></Line>
  <Line number="25">#include &lt;features.h&gt;</Line>
  <Line number="26">#include &lt;bits/types.h&gt;</Line>
  <Line number="27"></Line>
  <Line number="28">__BEGIN_DECLS</Line>
  <Line number="29"></Line>
  <Line number="30">#ifndef _ISbit</Line>
  <Line number="31">/* These are all the characteristics of characters.</Line>
  <Line number="32">   If there get to be more than 16 distinct characteristics,</Line>
  <Line number="33">   many things must be changed that use `unsigned short int&apos;s.</Line>
  <Line number="34"></Line>
  <Line number="35">   The characteristics are stored always in network byte order (big</Line>
  <Line number="36">   endian).  We define the bit value interpretations here dependent on the</Line>
  <Line number="37">   machine&apos;s byte order.  */</Line>
  <Line number="38"></Line>
  <Line number="39"># include &lt;bits/endian.h&gt;</Line>
  <Line number="40"># if __BYTE_ORDER == __BIG_ENDIAN</Line>
  <Line number="41">#  define _ISbit(bit)	(1 &lt;&lt; (bit))</Line>
  <Line number="42"># else /* __BYTE_ORDER == __LITTLE_ENDIAN */</Line>
  <Line number="43">#  define _ISbit(bit)	((bit) &lt; 8 ? ((1 &lt;&lt; (bit)) &lt;&lt; 8) : ((1 &lt;&lt; (bit)) &gt;&gt; 8))</Line>
  <Line number="44"># endif</Line>
  <Line number="45"></Line>
  <Line number="46">enum</Line>
  <Line number="47">{</Line>
  <Line number="48">  _ISupper = <CheckRefs ids="46,45,56,55,54,53,52,51,50,49,48,47">_ISbit</CheckRefs> (0),	/* UPPERCASE.  */</Line>
  <Line number="49">  _ISlower = <CheckRefs ids="66,68,67,65,64,63,61,60,57,59,58,62">_ISbit</CheckRefs> (1),	/* lowercase.  */</Line>
  <Line number="50">  _ISalpha = <CheckRefs ids="75,80,79,78,77,76,74,73,72,71,70,69">_ISbit</CheckRefs> (2),	/* Alphabetic.  */</Line>
  <Line number="51">  _ISdigit = <CheckRefs ids="84,92,91,90,89,88,86,85,81,83,82,87">_ISbit</CheckRefs> (3),	/* Numeric.  */</Line>
  <Line number="52">  _ISxdigit = <CheckRefs ids="99,104,103,102,101,100,98,97,96,95,94,93">_ISbit</CheckRefs> (4),	/* Hexadecimal numeric.  */</Line>
  <Line number="53">  _ISspace = <CheckRefs ids="105,116,115,114,113,112,111,110,109,108,107,106">_ISbit</CheckRefs> (5),	/* Whitespace.  */</Line>
  <Line number="54">  _ISprint = <CheckRefs ids="117,128,127,126,125,124,122,121,120,119,118,123">_ISbit</CheckRefs> (6),	/* Printing.  */</Line>
  <Line number="55">  _ISgraph = <CheckRefs ids="135,140,139,138,137,136,134,133,132,131,130,129">_ISbit</CheckRefs> (7),	/* Graphical.  */</Line>
  <Line number="56">  _ISblank = <CheckRefs ids="141,152,151,150,149,148,147,146,145,144,143,142">_ISbit</CheckRefs> (8),	/* Blank (usually SPC and TAB).  */</Line>
  <Line number="57">  _IScntrl = <CheckRefs ids="164,163,162,156,161,160,158,157,155,154,153,159">_ISbit</CheckRefs> (9),	/* Control character.  */</Line>
  <Line number="58">  _ISpunct = <CheckRefs ids="174,176,175,173,172,171,169,168,167,166,165,170">_ISbit</CheckRefs> (10),	/* Punctuation.  */</Line>
  <Line number="59">  _ISalnum = <CheckRefs ids="188,187,186,185,184,183,182,181,180,179,178,177">_ISbit</CheckRefs> (11)	/* Alphanumeric.  */</Line>
  <Line number="60">};</Line>
  <Line number="61">#endif /* ! _ISbit  */</Line>
  <Line number="62"></Line>
  <Line number="63">/* These are defined in ctype-info.c.</Line>
  <Line number="64">   The declarations here must match those in localeinfo.h.</Line>
  <Line number="65"></Line>
  <Line number="66">   In the thread-specific locale model (see `uselocale&apos; in &lt;locale.h&gt;)</Line>
  <Line number="67">   we cannot use global variables for these as was done in the past.</Line>
  <Line number="68">   Instead, the following accessor functions return the address of</Line>
  <Line number="69">   each variable, which is local to the current thread if multithreaded.</Line>
  <Line number="70"></Line>
  <Line number="71">   These point into arrays of 384, so they can be indexed by any `unsigned</Line>
  <Line number="72">   char&apos; value [0,255]; by EOF (-1); or by any `signed char&apos; value</Line>
  <Line number="73">   [-128,-1).  ISO C requires that the ctype functions work for `unsigned</Line>
  <Line number="74">   char&apos; values and for EOF; we also support negative `signed char&apos; values</Line>
  <Line number="75">   for broken old programs.  The case conversion arrays are of `int&apos;s</Line>
  <Line number="76">   rather than `unsigned char&apos;s because tolower (EOF) must be EOF, which</Line>
  <Line number="77">   doesn&apos;t fit into an `unsigned char&apos;.  But today more important is that</Line>
  <Line number="78">   the arrays are also used for multi-byte character sets.  */</Line>
  <Line number="79">extern const unsigned short int **__ctype_b_loc (void)</Line>
  <Line number="80">     __THROW __attribute__ ((__const__));</Line>
  <Line number="81">extern const __int32_t **__ctype_tolower_loc (void)</Line>
  <Line number="82">     __THROW __attribute__ ((__const__));</Line>
  <Line number="83">extern const __int32_t **__ctype_toupper_loc (void)</Line>
  <Line number="84">     __THROW __attribute__ ((__const__));</Line>
  <Line number="85"></Line>
  <Line number="86"></Line>
  <Line number="87">#ifndef __cplusplus</Line>
  <Line number="88"># define __isctype(c, type) \</Line>
  <Line number="89">  ((*__ctype_b_loc ())[(int) (c)] &amp; (unsigned short int) type)</Line>
  <Line number="90">#elif defined __USE_EXTERN_INLINES</Line>
  <Line number="91"># define __isctype_f(type) \</Line>
  <Line number="92">  __extern_inline int							      \</Line>
  <Line number="93">  is##type (int __c) __THROW						      \</Line>
  <Line number="94">  {									      \</Line>
  <Line number="95">    return (*__ctype_b_loc ())[(int) (__c)] &amp; (unsigned short int) _IS##type; \</Line>
  <Line number="96">  }</Line>
  <Line number="97">#endif</Line>
  <Line number="98"></Line>
  <Line number="99">#define	__isascii(c)	(((c) &amp; ~0x7f) == 0)	/* If C is a 7 bit value.  */</Line>
  <Line number="100">#define	__toascii(c)	((c) &amp; 0x7f)		/* Mask off high bits.  */</Line>
  <Line number="101"></Line>
  <Line number="102">#define	__exctype(name)	extern int name (int) __THROW</Line>
  <Line number="103"></Line>
  <Line number="104">/* The following names are all functions:</Line>
  <Line number="105">     int isCHARACTERISTIC(int c);</Line>
  <Line number="106">   which return nonzero iff C has CHARACTERISTIC.</Line>
  <Line number="107">   For the meaning of the characteristic names, see the `enum&apos; above.  */</Line>
  <Line number="108">__exctype (isalnum);</Line>
  <Line number="109">__exctype (isalpha);</Line>
  <Line number="110">__exctype (iscntrl);</Line>
  <Line number="111">__exctype (isdigit);</Line>
  <Line number="112">__exctype (islower);</Line>
  <Line number="113">__exctype (isgraph);</Line>
  <Line number="114">__exctype (isprint);</Line>
  <Line number="115">__exctype (ispunct);</Line>
  <Line number="116">__exctype (isspace);</Line>
  <Line number="117">__exctype (isupper);</Line>
  <Line number="118">__exctype (isxdigit);</Line>
  <Line number="119"></Line>
  <Line number="120"></Line>
  <Line number="121">/* Return the lowercase version of C.  */</Line>
  <Line number="122">extern int tolower (int __c) __THROW;</Line>
  <Line number="123"></Line>
  <Line number="124">/* Return the uppercase version of C.  */</Line>
  <Line number="125">extern int toupper (int __c) __THROW;</Line>
  <Line number="126"></Line>
  <Line number="127"></Line>
  <Line number="128">/* ISO C99 introduced one new function.  */</Line>
  <Line number="129">#ifdef	__USE_ISOC99</Line>
  <Line number="130">__exctype (isblank);</Line>
  <Line number="131">#endif</Line>
  <Line number="132"></Line>
  <Line number="133">#ifdef __USE_GNU</Line>
  <Line number="134">/* Test C for a set of character classes according to MASK.  */</Line>
  <Line number="135">extern int isctype (int __c, int __mask) __THROW;</Line>
  <Line number="136">#endif</Line>
  <Line number="137"></Line>
  <Line number="138">#if defined __USE_MISC || defined __USE_XOPEN</Line>
  <Line number="139"></Line>
  <Line number="140">/* Return nonzero iff C is in the ASCII set</Line>
  <Line number="141">   (i.e., is no more than 7 bits wide).  */</Line>
  <Line number="142">extern int isascii (int __c) __THROW;</Line>
  <Line number="143"></Line>
  <Line number="144">/* Return the part of C that is in the ASCII set</Line>
  <Line number="145">   (i.e., the low-order 7 bits of C).  */</Line>
  <Line number="146">extern int toascii (int __c) __THROW;</Line>
  <Line number="147"></Line>
  <Line number="148">/* These are the same as `toupper&apos; and `tolower&apos; except that they do not</Line>
  <Line number="149">   check the argument for being in the range of a `char&apos;.  */</Line>
  <Line number="150">__exctype (_toupper);</Line>
  <Line number="151">__exctype (_tolower);</Line>
  <Line number="152">#endif /* Use X/Open or use misc.  */</Line>
  <Line number="153"></Line>
  <Line number="154">/* This code is needed for the optimized mapping functions.  */</Line>
  <Line number="155">#define __tobody(c, f, a, args) \</Line>
  <Line number="156">  (__extension__							      \</Line>
  <Line number="157">   ({ int __res;							      \</Line>
  <Line number="158">      if (sizeof (c) &gt; 1)						      \</Line>
  <Line number="159">	{								      \</Line>
  <Line number="160">	  if (__builtin_constant_p (c))					      \</Line>
  <Line number="161">	    {								      \</Line>
  <Line number="162">	      int __c = (c);						      \</Line>
  <Line number="163">	      __res = __c &lt; -128 || __c &gt; 255 ? __c : (a)[__c];		      \</Line>
  <Line number="164">	    }								      \</Line>
  <Line number="165">	  else								      \</Line>
  <Line number="166">	    __res = f args;						      \</Line>
  <Line number="167">	}								      \</Line>
  <Line number="168">      else								      \</Line>
  <Line number="169">	__res = (a)[(int) (c)];						      \</Line>
  <Line number="170">      __res; }))</Line>
  <Line number="171"></Line>
  <Line number="172">#if !defined __NO_CTYPE</Line>
  <Line number="173"># ifdef __isctype_f</Line>
  <Line number="174">__isctype_f (alnum)</Line>
  <Line number="175">__isctype_f (alpha)</Line>
  <Line number="176">__isctype_f (cntrl)</Line>
  <Line number="177">__isctype_f (digit)</Line>
  <Line number="178">__isctype_f (lower)</Line>
  <Line number="179">__isctype_f (graph)</Line>
  <Line number="180">__isctype_f (print)</Line>
  <Line number="181">__isctype_f (punct)</Line>
  <Line number="182">__isctype_f (space)</Line>
  <Line number="183">__isctype_f (upper)</Line>
  <Line number="184">__isctype_f (xdigit)</Line>
  <Line number="185">#  ifdef __USE_ISOC99</Line>
  <Line number="186">__isctype_f (blank)</Line>
  <Line number="187">#  endif</Line>
  <Line number="188"># elif defined __isctype</Line>
  <Line number="189"># define isalnum(c)	__isctype((c), _ISalnum)</Line>
  <Line number="190"># define isalpha(c)	__isctype((c), _ISalpha)</Line>
  <Line number="191"># define iscntrl(c)	__isctype((c), _IScntrl)</Line>
  <Line number="192"># define isdigit(c)	__isctype((c), _ISdigit)</Line>
  <Line number="193"># define islower(c)	__isctype((c), _ISlower)</Line>
  <Line number="194"># define isgraph(c)	__isctype((c), _ISgraph)</Line>
  <Line number="195"># define isprint(c)	__isctype((c), _ISprint)</Line>
  <Line number="196"># define ispunct(c)	__isctype((c), _ISpunct)</Line>
  <Line number="197"># define isspace(c)	__isctype((c), _ISspace)</Line>
  <Line number="198"># define isupper(c)	__isctype((c), _ISupper)</Line>
  <Line number="199"># define isxdigit(c)	__isctype((c), _ISxdigit)</Line>
  <Line number="200">#  ifdef __USE_ISOC99</Line>
  <Line number="201">#   define isblank(c)	__isctype((c), _ISblank)</Line>
  <Line number="202">#  endif</Line>
  <Line number="203"># endif</Line>
  <Line number="204"></Line>
  <Line number="205"># ifdef __USE_EXTERN_INLINES</Line>
  <Line number="206">__extern_inline int</Line>
  <Line number="207">__NTH (tolower (int __c))</Line>
  <Line number="208">{</Line>
  <Line number="209">  return __c &gt;= -128 &amp;&amp; __c &lt; 256 ? (*__ctype_tolower_loc ())[__c] : __c;</Line>
  <Line number="210">}</Line>
  <Line number="211"></Line>
  <Line number="212">__extern_inline int</Line>
  <Line number="213">__NTH (toupper (int __c))</Line>
  <Line number="214">{</Line>
  <Line number="215">  return __c &gt;= -128 &amp;&amp; __c &lt; 256 ? (*__ctype_toupper_loc ())[__c] : __c;</Line>
  <Line number="216">}</Line>
  <Line number="217"># endif</Line>
  <Line number="218"></Line>
  <Line number="219"># if __GNUC__ &gt;= 2 &amp;&amp; defined __OPTIMIZE__ &amp;&amp; !defined __cplusplus</Line>
  <Line number="220">#  define tolower(c)	__tobody (c, tolower, *__ctype_tolower_loc (), (c))</Line>
  <Line number="221">#  define toupper(c)	__tobody (c, toupper, *__ctype_toupper_loc (), (c))</Line>
  <Line number="222"># endif /* Optimizing gcc */</Line>
  <Line number="223"></Line>
  <Line number="224"># if defined __USE_MISC || defined __USE_XOPEN</Line>
  <Line number="225">#  define isascii(c)	__isascii (c)</Line>
  <Line number="226">#  define toascii(c)	__toascii (c)</Line>
  <Line number="227"></Line>
  <Line number="228">#  define _tolower(c)	((int) (*__ctype_tolower_loc ())[(int) (c)])</Line>
  <Line number="229">#  define _toupper(c)	((int) (*__ctype_toupper_loc ())[(int) (c)])</Line>
  <Line number="230"># endif</Line>
  <Line number="231"></Line>
  <Line number="232">#endif /* Not __NO_CTYPE.  */</Line>
  <Line number="233"></Line>
  <Line number="234"></Line>
  <Line number="235">#ifdef __USE_XOPEN2K8</Line>
  <Line number="236">/* POSIX.1-2008 extended locale interface (see locale.h).  */</Line>
  <Line number="237"># include &lt;bits/types/locale_t.h&gt;</Line>
  <Line number="238"></Line>
  <Line number="239">/* These definitions are similar to the ones above but all functions</Line>
  <Line number="240">   take as an argument a handle for the locale which shall be used.  */</Line>
  <Line number="241">#  define __isctype_l(c, type, locale) \</Line>
  <Line number="242">  ((locale)-&gt;__ctype_b[(int) (c)] &amp; (unsigned short int) type)</Line>
  <Line number="243"></Line>
  <Line number="244"># define __exctype_l(name) 						      \</Line>
  <Line number="245">  extern int name (int, locale_t) __THROW</Line>
  <Line number="246"></Line>
  <Line number="247">/* The following names are all functions:</Line>
  <Line number="248">     int isCHARACTERISTIC(int c, locale_t *locale);</Line>
  <Line number="249">   which return nonzero iff C has CHARACTERISTIC.</Line>
  <Line number="250">   For the meaning of the characteristic names, see the `enum&apos; above.  */</Line>
  <Line number="251">__exctype_l (isalnum_l);</Line>
  <Line number="252">__exctype_l (isalpha_l);</Line>
  <Line number="253">__exctype_l (iscntrl_l);</Line>
  <Line number="254">__exctype_l (isdigit_l);</Line>
  <Line number="255">__exctype_l (islower_l);</Line>
  <Line number="256">__exctype_l (isgraph_l);</Line>
  <Line number="257">__exctype_l (isprint_l);</Line>
  <Line number="258">__exctype_l (ispunct_l);</Line>
  <Line number="259">__exctype_l (isspace_l);</Line>
  <Line number="260">__exctype_l (isupper_l);</Line>
  <Line number="261">__exctype_l (isxdigit_l);</Line>
  <Line number="262"></Line>
  <Line number="263">__exctype_l (isblank_l);</Line>
  <Line number="264"></Line>
  <Line number="265"></Line>
  <Line number="266">/* Return the lowercase version of C in locale L.  */</Line>
  <Line number="267">extern int __tolower_l (int __c, locale_t __l) __THROW;</Line>
  <Line number="268">extern int tolower_l (int __c, locale_t __l) __THROW;</Line>
  <Line number="269"></Line>
  <Line number="270">/* Return the uppercase version of C.  */</Line>
  <Line number="271">extern int __toupper_l (int __c, locale_t __l) __THROW;</Line>
  <Line number="272">extern int toupper_l (int __c, locale_t __l) __THROW;</Line>
  <Line number="273"></Line>
  <Line number="274"># if __GNUC__ &gt;= 2 &amp;&amp; defined __OPTIMIZE__ &amp;&amp; !defined __cplusplus</Line>
  <Line number="275">#  define __tolower_l(c, locale) \</Line>
  <Line number="276">  __tobody (c, __tolower_l, (locale)-&gt;__ctype_tolower, (c, locale))</Line>
  <Line number="277">#  define __toupper_l(c, locale) \</Line>
  <Line number="278">  __tobody (c, __toupper_l, (locale)-&gt;__ctype_toupper, (c, locale))</Line>
  <Line number="279">#  define tolower_l(c, locale)	__tolower_l ((c), (locale))</Line>
  <Line number="280">#  define toupper_l(c, locale)	__toupper_l ((c), (locale))</Line>
  <Line number="281"># endif	/* Optimizing gcc */</Line>
  <Line number="282"></Line>
  <Line number="283"></Line>
  <Line number="284"># ifndef __NO_CTYPE</Line>
  <Line number="285">#  define __isalnum_l(c,l)	__isctype_l((c), _ISalnum, (l))</Line>
  <Line number="286">#  define __isalpha_l(c,l)	__isctype_l((c), _ISalpha, (l))</Line>
  <Line number="287">#  define __iscntrl_l(c,l)	__isctype_l((c), _IScntrl, (l))</Line>
  <Line number="288">#  define __isdigit_l(c,l)	__isctype_l((c), _ISdigit, (l))</Line>
  <Line number="289">#  define __islower_l(c,l)	__isctype_l((c), _ISlower, (l))</Line>
  <Line number="290">#  define __isgraph_l(c,l)	__isctype_l((c), _ISgraph, (l))</Line>
  <Line number="291">#  define __isprint_l(c,l)	__isctype_l((c), _ISprint, (l))</Line>
  <Line number="292">#  define __ispunct_l(c,l)	__isctype_l((c), _ISpunct, (l))</Line>
  <Line number="293">#  define __isspace_l(c,l)	__isctype_l((c), _ISspace, (l))</Line>
  <Line number="294">#  define __isupper_l(c,l)	__isctype_l((c), _ISupper, (l))</Line>
  <Line number="295">#  define __isxdigit_l(c,l)	__isctype_l((c), _ISxdigit, (l))</Line>
  <Line number="296"></Line>
  <Line number="297">#  define __isblank_l(c,l)	__isctype_l((c), _ISblank, (l))</Line>
  <Line number="298"></Line>
  <Line number="299">#  ifdef __USE_MISC</Line>
  <Line number="300">#   define __isascii_l(c,l)	((l), __isascii (c))</Line>
  <Line number="301">#   define __toascii_l(c,l)	((l), __toascii (c))</Line>
  <Line number="302">#  endif</Line>
  <Line number="303"></Line>
  <Line number="304">#  define isalnum_l(c,l)	__isalnum_l ((c), (l))</Line>
  <Line number="305">#  define isalpha_l(c,l)	__isalpha_l ((c), (l))</Line>
  <Line number="306">#  define iscntrl_l(c,l)	__iscntrl_l ((c), (l))</Line>
  <Line number="307">#  define isdigit_l(c,l)	__isdigit_l ((c), (l))</Line>
  <Line number="308">#  define islower_l(c,l)	__islower_l ((c), (l))</Line>
  <Line number="309">#  define isgraph_l(c,l)	__isgraph_l ((c), (l))</Line>
  <Line number="310">#  define isprint_l(c,l)	__isprint_l ((c), (l))</Line>
  <Line number="311">#  define ispunct_l(c,l)	__ispunct_l ((c), (l))</Line>
  <Line number="312">#  define isspace_l(c,l)	__isspace_l ((c), (l))</Line>
  <Line number="313">#  define isupper_l(c,l)	__isupper_l ((c), (l))</Line>
  <Line number="314">#  define isxdigit_l(c,l)	__isxdigit_l ((c), (l))</Line>
  <Line number="315"></Line>
  <Line number="316">#  define isblank_l(c,l)	__isblank_l ((c), (l))</Line>
  <Line number="317"></Line>
  <Line number="318">#  ifdef __USE_MISC</Line>
  <Line number="319">#   define isascii_l(c,l)	__isascii_l ((c), (l))</Line>
  <Line number="320">#   define toascii_l(c,l)	__toascii_l ((c), (l))</Line>
  <Line number="321">#  endif</Line>
  <Line number="322"></Line>
  <Line number="323"># endif /* Not __NO_CTYPE.  */</Line>
  <Line number="324"></Line>
  <Line number="325">#endif /* Use POSIX 2008.  */</Line>
  <Line number="326"></Line>
  <Line number="327">__END_DECLS</Line>
  <Line number="328"></Line>
  <Line number="329">#endif /* ctype.h  */</Line>
</SourceFile>
