<SourceFile>
  <Line number="1">/* Prototype declarations for math classification macros helpers.</Line>
  <Line number="2">   Copyright (C) 2017-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19"></Line>
  <Line number="20">/* Classify given number.  */</Line>
  <Line number="21">__MATHDECL_1 (int, __fpclassify,, (_Mdouble_ __value))</Line>
  <Line number="22">     __attribute__ ((__const__));</Line>
  <Line number="23"></Line>
  <Line number="24">/* Test for negative number.  */</Line>
  <Line number="25">__MATHDECL_1 (int, __signbit,, (_Mdouble_ __value))</Line>
  <Line number="26">     __attribute__ ((__const__));</Line>
  <Line number="27"></Line>
  <Line number="28">/* Return 0 if VALUE is finite or NaN, +1 if it</Line>
  <Line number="29">   is +Infinity, -1 if it is -Infinity.  */</Line>
  <Line number="30">__MATHDECL_1 (int, __isinf,, (_Mdouble_ __value)) __attribute__ ((__const__));</Line>
  <Line number="31"></Line>
  <Line number="32">/* Return nonzero if VALUE is finite and not NaN.  Used by isfinite macro.  */</Line>
  <Line number="33">__MATHDECL_1 (int, __finite,, (_Mdouble_ __value)) __attribute__ ((__const__));</Line>
  <Line number="34"></Line>
  <Line number="35">/* Return nonzero if VALUE is not a number.  */</Line>
  <Line number="36">__MATHDECL_1 (int, __isnan,, (_Mdouble_ __value)) __attribute__ ((__const__));</Line>
  <Line number="37"></Line>
  <Line number="38">/* Test equality.  */</Line>
  <Line number="39">__MATHDECL_1 (int, __iseqsig,, (_Mdouble_ __x, _Mdouble_ __y));</Line>
  <Line number="40"></Line>
  <Line number="41">/* Test for signaling NaN.  */</Line>
  <Line number="42">__MATHDECL_1 (int, __issignaling,, (_Mdouble_ __value))</Line>
  <Line number="43">     __attribute__ ((__const__));</Line>
</SourceFile>
