<SourceFile>
  <Line number="1">/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */</Line>
  <Line number="2">#ifndef _LINUX_STAT_H</Line>
  <Line number="3">#define _LINUX_STAT_H</Line>
  <Line number="4"></Line>
  <Line number="5">#include &lt;linux/types.h&gt;</Line>
  <Line number="6"></Line>
  <Line number="7">#if defined(__KERNEL__) || !defined(__GLIBC__) || (__GLIBC__ &lt; 2)</Line>
  <Line number="8"></Line>
  <Line number="9">#define S_IFMT  00170000</Line>
  <Line number="10">#define S_IFSOCK 0140000</Line>
  <Line number="11">#define S_IFLNK	 0120000</Line>
  <Line number="12">#define S_IFREG  0100000</Line>
  <Line number="13">#define S_IFBLK  0060000</Line>
  <Line number="14">#define S_IFDIR  0040000</Line>
  <Line number="15">#define S_IFCHR  0020000</Line>
  <Line number="16">#define S_IFIFO  0010000</Line>
  <Line number="17">#define S_ISUID  0004000</Line>
  <Line number="18">#define S_ISGID  0002000</Line>
  <Line number="19">#define S_ISVTX  0001000</Line>
  <Line number="20"></Line>
  <Line number="21">#define S_ISLNK(m)	(((m) &amp; S_IFMT) == S_IFLNK)</Line>
  <Line number="22">#define S_ISREG(m)	(((m) &amp; S_IFMT) == S_IFREG)</Line>
  <Line number="23">#define S_ISDIR(m)	(((m) &amp; S_IFMT) == S_IFDIR)</Line>
  <Line number="24">#define S_ISCHR(m)	(((m) &amp; S_IFMT) == S_IFCHR)</Line>
  <Line number="25">#define S_ISBLK(m)	(((m) &amp; S_IFMT) == S_IFBLK)</Line>
  <Line number="26">#define S_ISFIFO(m)	(((m) &amp; S_IFMT) == S_IFIFO)</Line>
  <Line number="27">#define S_ISSOCK(m)	(((m) &amp; S_IFMT) == S_IFSOCK)</Line>
  <Line number="28"></Line>
  <Line number="29">#define S_IRWXU 00700</Line>
  <Line number="30">#define S_IRUSR 00400</Line>
  <Line number="31">#define S_IWUSR 00200</Line>
  <Line number="32">#define S_IXUSR 00100</Line>
  <Line number="33"></Line>
  <Line number="34">#define S_IRWXG 00070</Line>
  <Line number="35">#define S_IRGRP 00040</Line>
  <Line number="36">#define S_IWGRP 00020</Line>
  <Line number="37">#define S_IXGRP 00010</Line>
  <Line number="38"></Line>
  <Line number="39">#define S_IRWXO 00007</Line>
  <Line number="40">#define S_IROTH 00004</Line>
  <Line number="41">#define S_IWOTH 00002</Line>
  <Line number="42">#define S_IXOTH 00001</Line>
  <Line number="43"></Line>
  <Line number="44">#endif</Line>
  <Line number="45"></Line>
  <Line number="46">/*</Line>
  <Line number="47"> * Timestamp structure for the timestamps in struct statx.</Line>
  <Line number="48"> *</Line>
  <Line number="49"> * tv_sec holds the number of seconds before (negative) or after (positive)</Line>
  <Line number="50"> * 00:00:00 1st January 1970 UTC.</Line>
  <Line number="51"> *</Line>
  <Line number="52"> * tv_nsec holds a number of nanoseconds (0..999,999,999) after the tv_sec time.</Line>
  <Line number="53"> *</Line>
  <Line number="54"> * __reserved is held in case we need a yet finer resolution.</Line>
  <Line number="55"> */</Line>
  <Line number="56">struct statx_timestamp {</Line>
  <Line number="57">	__s64	tv_sec;</Line>
  <Line number="58">	__u32	tv_nsec;</Line>
  <Line number="59">	__s32	__reserved;</Line>
  <Line number="60">};</Line>
  <Line number="61"></Line>
  <Line number="62">/*</Line>
  <Line number="63"> * Structures for the extended file attribute retrieval system call</Line>
  <Line number="64"> * (statx()).</Line>
  <Line number="65"> *</Line>
  <Line number="66"> * The caller passes a mask of what they&apos;re specifically interested in as a</Line>
  <Line number="67"> * parameter to statx().  What statx() actually got will be indicated in</Line>
  <Line number="68"> * st_mask upon return.</Line>
  <Line number="69"> *</Line>
  <Line number="70"> * For each bit in the mask argument:</Line>
  <Line number="71"> *</Line>
  <Line number="72"> * - if the datum is not supported:</Line>
  <Line number="73"> *</Line>
  <Line number="74"> *   - the bit will be cleared, and</Line>
  <Line number="75"> *</Line>
  <Line number="76"> *   - the datum will be set to an appropriate fabricated value if one is</Line>
  <Line number="77"> *     available (eg. CIFS can take a default uid and gid), otherwise</Line>
  <Line number="78"> *</Line>
  <Line number="79"> *   - the field will be cleared;</Line>
  <Line number="80"> *</Line>
  <Line number="81"> * - otherwise, if explicitly requested:</Line>
  <Line number="82"> *</Line>
  <Line number="83"> *   - the datum will be synchronised to the server if AT_STATX_FORCE_SYNC is</Line>
  <Line number="84"> *     set or if the datum is considered out of date, and</Line>
  <Line number="85"> *</Line>
  <Line number="86"> *   - the field will be filled in and the bit will be set;</Line>
  <Line number="87"> *</Line>
  <Line number="88"> * - otherwise, if not requested, but available in approximate form without any</Line>
  <Line number="89"> *   effort, it will be filled in anyway, and the bit will be set upon return</Line>
  <Line number="90"> *   (it might not be up to date, however, and no attempt will be made to</Line>
  <Line number="91"> *   synchronise the internal state first);</Line>
  <Line number="92"> *</Line>
  <Line number="93"> * - otherwise the field and the bit will be cleared before returning.</Line>
  <Line number="94"> *</Line>
  <Line number="95"> * Items in STATX_BASIC_STATS may be marked unavailable on return, but they</Line>
  <Line number="96"> * will have values installed for compatibility purposes so that stat() and</Line>
  <Line number="97"> * co. can be emulated in userspace.</Line>
  <Line number="98"> */</Line>
  <Line number="99">struct statx {</Line>
  <Line number="100">	/* 0x00 */</Line>
  <Line number="101">	__u32	stx_mask;	/* What results were written [uncond] */</Line>
  <Line number="102">	__u32	stx_blksize;	/* Preferred general I/O size [uncond] */</Line>
  <Line number="103">	__u64	stx_attributes;	/* Flags conveying information about the file [uncond] */</Line>
  <Line number="104">	/* 0x10 */</Line>
  <Line number="105">	__u32	stx_nlink;	/* Number of hard links */</Line>
  <Line number="106">	__u32	stx_uid;	/* User ID of owner */</Line>
  <Line number="107">	__u32	stx_gid;	/* Group ID of owner */</Line>
  <Line number="108">	__u16	stx_mode;	/* File mode */</Line>
  <Line number="109">	__u16	__spare0[1];</Line>
  <Line number="110">	/* 0x20 */</Line>
  <Line number="111">	__u64	stx_ino;	/* Inode number */</Line>
  <Line number="112">	__u64	stx_size;	/* File size */</Line>
  <Line number="113">	__u64	stx_blocks;	/* Number of 512-byte blocks allocated */</Line>
  <Line number="114">	__u64	stx_attributes_mask; /* Mask to show what&apos;s supported in stx_attributes */</Line>
  <Line number="115">	/* 0x40 */</Line>
  <Line number="116">	struct statx_timestamp	stx_atime;	/* Last access time */</Line>
  <Line number="117">	struct statx_timestamp	stx_btime;	/* File creation time */</Line>
  <Line number="118">	struct statx_timestamp	stx_ctime;	/* Last attribute change time */</Line>
  <Line number="119">	struct statx_timestamp	stx_mtime;	/* Last data modification time */</Line>
  <Line number="120">	/* 0x80 */</Line>
  <Line number="121">	__u32	stx_rdev_major;	/* Device ID of special file [if bdev/cdev] */</Line>
  <Line number="122">	__u32	stx_rdev_minor;</Line>
  <Line number="123">	__u32	stx_dev_major;	/* ID of device containing file [uncond] */</Line>
  <Line number="124">	__u32	stx_dev_minor;</Line>
  <Line number="125">	/* 0x90 */</Line>
  <Line number="126">	__u64	__spare2[14];	/* Spare space for future expansion */</Line>
  <Line number="127">	/* 0x100 */</Line>
  <Line number="128">};</Line>
  <Line number="129"></Line>
  <Line number="130">/*</Line>
  <Line number="131"> * Flags to be stx_mask</Line>
  <Line number="132"> *</Line>
  <Line number="133"> * Query request/result mask for statx() and struct statx::stx_mask.</Line>
  <Line number="134"> *</Line>
  <Line number="135"> * These bits should be set in the mask argument of statx() to request</Line>
  <Line number="136"> * particular items when calling statx().</Line>
  <Line number="137"> */</Line>
  <Line number="138">#define STATX_TYPE		0x00000001U	/* Want/got stx_mode &amp; S_IFMT */</Line>
  <Line number="139">#define STATX_MODE		0x00000002U	/* Want/got stx_mode &amp; ~S_IFMT */</Line>
  <Line number="140">#define STATX_NLINK		0x00000004U	/* Want/got stx_nlink */</Line>
  <Line number="141">#define STATX_UID		0x00000008U	/* Want/got stx_uid */</Line>
  <Line number="142">#define STATX_GID		0x00000010U	/* Want/got stx_gid */</Line>
  <Line number="143">#define STATX_ATIME		0x00000020U	/* Want/got stx_atime */</Line>
  <Line number="144">#define STATX_MTIME		0x00000040U	/* Want/got stx_mtime */</Line>
  <Line number="145">#define STATX_CTIME		0x00000080U	/* Want/got stx_ctime */</Line>
  <Line number="146">#define STATX_INO		0x00000100U	/* Want/got stx_ino */</Line>
  <Line number="147">#define STATX_SIZE		0x00000200U	/* Want/got stx_size */</Line>
  <Line number="148">#define STATX_BLOCKS		0x00000400U	/* Want/got stx_blocks */</Line>
  <Line number="149">#define STATX_BASIC_STATS	0x000007ffU	/* The stuff in the normal stat struct */</Line>
  <Line number="150">#define STATX_BTIME		0x00000800U	/* Want/got stx_btime */</Line>
  <Line number="151">#define STATX_ALL		0x00000fffU	/* All currently supported flags */</Line>
  <Line number="152">#define STATX__RESERVED		0x80000000U	/* Reserved for future struct statx expansion */</Line>
  <Line number="153"></Line>
  <Line number="154">/*</Line>
  <Line number="155"> * Attributes to be found in stx_attributes and masked in stx_attributes_mask.</Line>
  <Line number="156"> *</Line>
  <Line number="157"> * These give information about the features or the state of a file that might</Line>
  <Line number="158"> * be of use to ordinary userspace programs such as GUIs or ls rather than</Line>
  <Line number="159"> * specialised tools.</Line>
  <Line number="160"> *</Line>
  <Line number="161"> * Note that the flags marked [I] correspond to generic FS_IOC_FLAGS</Line>
  <Line number="162"> * semantically.  Where possible, the numerical value is picked to correspond</Line>
  <Line number="163"> * also.</Line>
  <Line number="164"> */</Line>
  <Line number="165">#define STATX_ATTR_COMPRESSED		0x00000004 /* [I] File is compressed by the fs */</Line>
  <Line number="166">#define STATX_ATTR_IMMUTABLE		0x00000010 /* [I] File is marked immutable */</Line>
  <Line number="167">#define STATX_ATTR_APPEND		0x00000020 /* [I] File is append-only */</Line>
  <Line number="168">#define STATX_ATTR_NODUMP		0x00000040 /* [I] File is not to be dumped */</Line>
  <Line number="169">#define STATX_ATTR_ENCRYPTED		0x00000800 /* [I] File requires key to decrypt in fs */</Line>
  <Line number="170"></Line>
  <Line number="171">#define STATX_ATTR_AUTOMOUNT		0x00001000 /* Dir: Automount trigger */</Line>
  <Line number="172"></Line>
  <Line number="173"></Line>
  <Line number="174">#endif /* _LINUX_STAT_H */</Line>
</SourceFile>
