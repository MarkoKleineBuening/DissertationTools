<SourceFile>
  <Line number="1">/* Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">#ifndef __struct_FILE_defined</Line>
  <Line number="19">#define __struct_FILE_defined 1</Line>
  <Line number="20"></Line>
  <Line number="21">/* Caution: The contents of this file are not part of the official</Line>
  <Line number="22">   stdio.h API.  However, much of it is part of the official *binary*</Line>
  <Line number="23">   interface, and therefore cannot be changed.  */</Line>
  <Line number="24"></Line>
  <Line number="25">#if defined _IO_USE_OLD_IO_FILE &amp;&amp; !defined _LIBC</Line>
  <Line number="26"># error &quot;_IO_USE_OLD_IO_FILE should only be defined when building libc itself&quot;</Line>
  <Line number="27">#endif</Line>
  <Line number="28"></Line>
  <Line number="29">#if defined _IO_lock_t_defined &amp;&amp; !defined _LIBC</Line>
  <Line number="30"># error &quot;_IO_lock_t_defined should only be defined when building libc itself&quot;</Line>
  <Line number="31">#endif</Line>
  <Line number="32"></Line>
  <Line number="33">#include &lt;bits/types.h&gt;</Line>
  <Line number="34"></Line>
  <Line number="35">struct _IO_FILE;</Line>
  <Line number="36">struct _IO_marker;</Line>
  <Line number="37">struct _IO_codecvt;</Line>
  <Line number="38">struct _IO_wide_data;</Line>
  <Line number="39"></Line>
  <Line number="40">/* During the build of glibc itself, _IO_lock_t will already have been</Line>
  <Line number="41">   defined by internal headers.  */</Line>
  <Line number="42">#ifndef _IO_lock_t_defined</Line>
  <Line number="43">typedef void _IO_lock_t;</Line>
  <Line number="44">#endif</Line>
  <Line number="45"></Line>
  <Line number="46">/* The tag name of this struct is _IO_FILE to preserve historic</Line>
  <Line number="47">   C++ mangled names for functions taking FILE* arguments.</Line>
  <Line number="48">   That name should not be used in new code.  */</Line>
  <Line number="49">struct _IO_FILE</Line>
  <Line number="50">{</Line>
  <Line number="51">  int _flags;		/* High-order word is _IO_MAGIC; rest is flags. */</Line>
  <Line number="52"></Line>
  <Line number="53">  /* The following pointers correspond to the C++ streambuf protocol. */</Line>
  <Line number="54">  char *_IO_read_ptr;	/* Current read pointer */</Line>
  <Line number="55">  char *_IO_read_end;	/* End of get area. */</Line>
  <Line number="56">  char *_IO_read_base;	/* Start of putback+get area. */</Line>
  <Line number="57">  char *_IO_write_base;	/* Start of put area. */</Line>
  <Line number="58">  char *_IO_write_ptr;	/* Current put pointer. */</Line>
  <Line number="59">  char *_IO_write_end;	/* End of put area. */</Line>
  <Line number="60">  char *_IO_buf_base;	/* Start of reserve area. */</Line>
  <Line number="61">  char *_IO_buf_end;	/* End of reserve area. */</Line>
  <Line number="62"></Line>
  <Line number="63">  /* The following fields are used to support backing up and undo. */</Line>
  <Line number="64">  char *_IO_save_base; /* Pointer to start of non-current get area. */</Line>
  <Line number="65">  char *_IO_backup_base;  /* Pointer to first valid character of backup area */</Line>
  <Line number="66">  char *_IO_save_end; /* Pointer to end of non-current get area. */</Line>
  <Line number="67"></Line>
  <Line number="68">  struct _IO_marker *_markers;</Line>
  <Line number="69"></Line>
  <Line number="70">  struct _IO_FILE *_chain;</Line>
  <Line number="71"></Line>
  <Line number="72">  int _fileno;</Line>
  <Line number="73">  int _flags2;</Line>
  <Line number="74">  __off_t _old_offset; /* This used to be _offset but it&apos;s too small.  */</Line>
  <Line number="75"></Line>
  <Line number="76">  /* 1+column number of pbase(); 0 is unknown. */</Line>
  <Line number="77">  unsigned short _cur_column;</Line>
  <Line number="78">  signed char _vtable_offset;</Line>
  <Line number="79">  char _shortbuf[1];</Line>
  <Line number="80"></Line>
  <Line number="81">  _IO_lock_t *_lock;</Line>
  <Line number="82">#ifdef _IO_USE_OLD_IO_FILE</Line>
  <Line number="83">};</Line>
  <Line number="84"></Line>
  <Line number="85">struct _IO_FILE_complete</Line>
  <Line number="86">{</Line>
  <Line number="87">  struct _IO_FILE _file;</Line>
  <Line number="88">#endif</Line>
  <Line number="89">  __off64_t _offset;</Line>
  <Line number="90">  /* Wide character stream stuff.  */</Line>
  <Line number="91">  struct _IO_codecvt *_codecvt;</Line>
  <Line number="92">  struct _IO_wide_data *_wide_data;</Line>
  <Line number="93">  struct _IO_FILE *_freeres_list;</Line>
  <Line number="94">  void *_freeres_buf;</Line>
  <Line number="95">  size_t __pad5;</Line>
  <Line number="96">  int _mode;</Line>
  <Line number="97">  /* Make sure we don&apos;t get into trouble again.  */</Line>
  <Line number="98">  char _unused2[<CheckRefs ids="42">15</CheckRefs> <CheckRefs ids="41">*</CheckRefs> sizeof (int) <CheckRefs ids="40">-</CheckRefs> <CheckRefs ids="44">4</CheckRefs> <CheckRefs ids="43">*</CheckRefs> sizeof (void *) <CheckRefs ids="39">-</CheckRefs> sizeof (size_t)];</Line>
  <Line number="99">};</Line>
  <Line number="100"></Line>
  <Line number="101">/* These macros are used by bits/stdio.h and internal headers.  */</Line>
  <Line number="102">#define __getc_unlocked_body(_fp)					\</Line>
  <Line number="103">  (__glibc_unlikely ((_fp)-&gt;_IO_read_ptr &gt;= (_fp)-&gt;_IO_read_end)	\</Line>
  <Line number="104">   ? __uflow (_fp) : *(unsigned char *) (_fp)-&gt;_IO_read_ptr++)</Line>
  <Line number="105"></Line>
  <Line number="106">#define __putc_unlocked_body(_ch, _fp)					\</Line>
  <Line number="107">  (__glibc_unlikely ((_fp)-&gt;_IO_write_ptr &gt;= (_fp)-&gt;_IO_write_end)	\</Line>
  <Line number="108">   ? __overflow (_fp, (unsigned char) (_ch))				\</Line>
  <Line number="109">   : (unsigned char) (*(_fp)-&gt;_IO_write_ptr++ = (_ch)))</Line>
  <Line number="110"></Line>
  <Line number="111">#define _IO_EOF_SEEN 0x0010</Line>
  <Line number="112">#define __feof_unlocked_body(_fp) (((_fp)-&gt;_flags &amp; _IO_EOF_SEEN) != 0)</Line>
  <Line number="113"></Line>
  <Line number="114">#define _IO_ERR_SEEN 0x0020</Line>
  <Line number="115">#define __ferror_unlocked_body(_fp) (((_fp)-&gt;_flags &amp; _IO_ERR_SEEN) != 0)</Line>
  <Line number="116"></Line>
  <Line number="117">#define _IO_USER_LOCK 0x8000</Line>
  <Line number="118">/* Many more flag bits are defined internally.  */</Line>
  <Line number="119"></Line>
  <Line number="120">#endif</Line>
</SourceFile>
