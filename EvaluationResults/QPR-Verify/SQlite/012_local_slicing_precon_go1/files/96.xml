<SourceFile>
  <Line number="1">/*</Line>
  <Line number="2">** 2001-09-15</Line>
  <Line number="3">**</Line>
  <Line number="4">** The author disclaims copyright to this source code.  In place of</Line>
  <Line number="5">** a legal notice, here is a blessing:</Line>
  <Line number="6">**</Line>
  <Line number="7">**    May you do good and not evil.</Line>
  <Line number="8">**    May you find forgiveness for yourself and forgive others.</Line>
  <Line number="9">**    May you share freely, never taking more than you give.</Line>
  <Line number="10">**</Line>
  <Line number="11">*************************************************************************</Line>
  <Line number="12">** This header file defines the interface that the SQLite library</Line>
  <Line number="13">** presents to client programs.  If a C-function, structure, datatype,</Line>
  <Line number="14">** or constant definition does not appear in this file, then it is</Line>
  <Line number="15">** not a published API of SQLite, is subject to change without</Line>
  <Line number="16">** notice, and should not be referenced by programs that use SQLite.</Line>
  <Line number="17">**</Line>
  <Line number="18">** Some of the definitions that are in this file are marked as</Line>
  <Line number="19">** &quot;experimental&quot;.  Experimental interfaces are normally new</Line>
  <Line number="20">** features recently added to SQLite.  We do not anticipate changes</Line>
  <Line number="21">** to experimental interfaces but reserve the right to make minor changes</Line>
  <Line number="22">** if experience from use &quot;in the wild&quot; suggest such changes are prudent.</Line>
  <Line number="23">**</Line>
  <Line number="24">** The official C-language API documentation for SQLite is derived</Line>
  <Line number="25">** from comments in this file.  This file is the authoritative source</Line>
  <Line number="26">** on how SQLite interfaces are supposed to operate.</Line>
  <Line number="27">**</Line>
  <Line number="28">** The name of this file under configuration management is &quot;sqlite.h.in&quot;.</Line>
  <Line number="29">** The makefile makes some minor changes to this file (such as inserting</Line>
  <Line number="30">** the version number) and changes its name to &quot;sqlite3.h&quot; as</Line>
  <Line number="31">** part of the build process.</Line>
  <Line number="32">*/</Line>
  <Line number="33">#ifndef SQLITE3_H</Line>
  <Line number="34">#define SQLITE3_H</Line>
  <Line number="35">#include &lt;stdarg.h&gt;     /* Needed for the definition of va_list */</Line>
  <Line number="36"></Line>
  <Line number="37">/*</Line>
  <Line number="38">** Make sure we can call this stuff from C++.</Line>
  <Line number="39">*/</Line>
  <Line number="40">#ifdef __cplusplus</Line>
  <Line number="41">extern &quot;C&quot; {</Line>
  <Line number="42">#endif</Line>
  <Line number="43"></Line>
  <Line number="44"></Line>
  <Line number="45">/*</Line>
  <Line number="46">** Provide the ability to override linkage features of the interface.</Line>
  <Line number="47">*/</Line>
  <Line number="48">#ifndef SQLITE_EXTERN</Line>
  <Line number="49"># define SQLITE_EXTERN extern</Line>
  <Line number="50">#endif</Line>
  <Line number="51">#ifndef SQLITE_API</Line>
  <Line number="52"># define SQLITE_API</Line>
  <Line number="53">#endif</Line>
  <Line number="54">#ifndef SQLITE_CDECL</Line>
  <Line number="55"># define SQLITE_CDECL</Line>
  <Line number="56">#endif</Line>
  <Line number="57">#ifndef SQLITE_APICALL</Line>
  <Line number="58"># define SQLITE_APICALL</Line>
  <Line number="59">#endif</Line>
  <Line number="60">#ifndef SQLITE_STDCALL</Line>
  <Line number="61"># define SQLITE_STDCALL SQLITE_APICALL</Line>
  <Line number="62">#endif</Line>
  <Line number="63">#ifndef SQLITE_CALLBACK</Line>
  <Line number="64"># define SQLITE_CALLBACK</Line>
  <Line number="65">#endif</Line>
  <Line number="66">#ifndef SQLITE_SYSAPI</Line>
  <Line number="67"># define SQLITE_SYSAPI</Line>
  <Line number="68">#endif</Line>
  <Line number="69"></Line>
  <Line number="70">/*</Line>
  <Line number="71">** These no-op macros are used in front of interfaces to mark those</Line>
  <Line number="72">** interfaces as either deprecated or experimental.  New applications</Line>
  <Line number="73">** should not use deprecated interfaces - they are supported for backwards</Line>
  <Line number="74">** compatibility only.  Application writers should be aware that</Line>
  <Line number="75">** experimental interfaces are subject to change in point releases.</Line>
  <Line number="76">**</Line>
  <Line number="77">** These macros used to resolve to various kinds of compiler magic that</Line>
  <Line number="78">** would generate warning messages when they were used.  But that</Line>
  <Line number="79">** compiler magic ended up generating such a flurry of bug reports</Line>
  <Line number="80">** that we have taken it all out and gone back to using simple</Line>
  <Line number="81">** noop macros.</Line>
  <Line number="82">*/</Line>
  <Line number="83">#define SQLITE_DEPRECATED</Line>
  <Line number="84">#define SQLITE_EXPERIMENTAL</Line>
  <Line number="85"></Line>
  <Line number="86">/*</Line>
  <Line number="87">** Ensure these symbols were not defined by some previous header file.</Line>
  <Line number="88">*/</Line>
  <Line number="89">#ifdef SQLITE_VERSION</Line>
  <Line number="90"># undef SQLITE_VERSION</Line>
  <Line number="91">#endif</Line>
  <Line number="92">#ifdef SQLITE_VERSION_NUMBER</Line>
  <Line number="93"># undef SQLITE_VERSION_NUMBER</Line>
  <Line number="94">#endif</Line>
  <Line number="95"></Line>
  <Line number="96">/*</Line>
  <Line number="97">** CAPI3REF: Compile-Time Library Version Numbers</Line>
  <Line number="98">**</Line>
  <Line number="99">** ^(The [SQLITE_VERSION] C preprocessor macro in the sqlite3.h header</Line>
  <Line number="100">** evaluates to a string literal that is the SQLite version in the</Line>
  <Line number="101">** format &quot;X.Y.Z&quot; where X is the major version number (always 3 for</Line>
  <Line number="102">** SQLite3) and Y is the minor version number and Z is the release number.)^</Line>
  <Line number="103">** ^(The [SQLITE_VERSION_NUMBER] C preprocessor macro resolves to an integer</Line>
  <Line number="104">** with the value (X*1000000 + Y*1000 + Z) where X, Y, and Z are the same</Line>
  <Line number="105">** numbers used in [SQLITE_VERSION].)^</Line>
  <Line number="106">** The SQLITE_VERSION_NUMBER for any given release of SQLite will also</Line>
  <Line number="107">** be larger than the release from which it is derived.  Either Y will</Line>
  <Line number="108">** be held constant and Z will be incremented or else Y will be incremented</Line>
  <Line number="109">** and Z will be reset to zero.</Line>
  <Line number="110">**</Line>
  <Line number="111">** Since [version 3.6.18] ([dateof:3.6.18]),</Line>
  <Line number="112">** SQLite source code has been stored in the</Line>
  <Line number="113">** &lt;a href=&quot;http://www.fossil-scm.org/&quot;&gt;Fossil configuration management</Line>
  <Line number="114">** system&lt;/a&gt;.  ^The SQLITE_SOURCE_ID macro evaluates to</Line>
  <Line number="115">** a string which identifies a particular check-in of SQLite</Line>
  <Line number="116">** within its configuration management system.  ^The SQLITE_SOURCE_ID</Line>
  <Line number="117">** string contains the date and time of the check-in (UTC) and a SHA1</Line>
  <Line number="118">** or SHA3-256 hash of the entire source tree.  If the source code has</Line>
  <Line number="119">** been edited in any way since it was last checked in, then the last</Line>
  <Line number="120">** four hexadecimal digits of the hash may be modified.</Line>
  <Line number="121">**</Line>
  <Line number="122">** See also: [sqlite3_libversion()],</Line>
  <Line number="123">** [sqlite3_libversion_number()], [sqlite3_sourceid()],</Line>
  <Line number="124">** [sqlite_version()] and [sqlite_source_id()].</Line>
  <Line number="125">*/</Line>
  <Line number="126">#define SQLITE_VERSION        &quot;3.36.0&quot;</Line>
  <Line number="127">#define SQLITE_VERSION_NUMBER 3036000</Line>
  <Line number="128">#define SQLITE_SOURCE_ID      &quot;2021-06-18 18:36:39 5c9a6c06871cb9fe42814af9c039eb6da5427a6ec28f187af7ebfb62eafa66e5&quot;</Line>
  <Line number="129"></Line>
  <Line number="130">/*</Line>
  <Line number="131">** CAPI3REF: Run-Time Library Version Numbers</Line>
  <Line number="132">** KEYWORDS: sqlite3_version sqlite3_sourceid</Line>
  <Line number="133">**</Line>
  <Line number="134">** These interfaces provide the same information as the [SQLITE_VERSION],</Line>
  <Line number="135">** [SQLITE_VERSION_NUMBER], and [SQLITE_SOURCE_ID] C preprocessor macros</Line>
  <Line number="136">** but are associated with the library instead of the header file.  ^(Cautious</Line>
  <Line number="137">** programmers might include assert() statements in their application to</Line>
  <Line number="138">** verify that values returned by these interfaces match the macros in</Line>
  <Line number="139">** the header, and thus ensure that the application is</Line>
  <Line number="140">** compiled with matching library and header files.</Line>
  <Line number="141">**</Line>
  <Line number="142">** &lt;blockquote&gt;&lt;pre&gt;</Line>
  <Line number="143">** assert( sqlite3_libversion_number()==SQLITE_VERSION_NUMBER );</Line>
  <Line number="144">** assert( strncmp(sqlite3_sourceid(),SQLITE_SOURCE_ID,80)==0 );</Line>
  <Line number="145">** assert( strcmp(sqlite3_libversion(),SQLITE_VERSION)==0 );</Line>
  <Line number="146">** &lt;/pre&gt;&lt;/blockquote&gt;)^</Line>
  <Line number="147">**</Line>
  <Line number="148">** ^The sqlite3_version[] string constant contains the text of [SQLITE_VERSION]</Line>
  <Line number="149">** macro.  ^The sqlite3_libversion() function returns a pointer to the</Line>
  <Line number="150">** to the sqlite3_version[] string constant.  The sqlite3_libversion()</Line>
  <Line number="151">** function is provided for use in DLLs since DLL users usually do not have</Line>
  <Line number="152">** direct access to string constants within the DLL.  ^The</Line>
  <Line number="153">** sqlite3_libversion_number() function returns an integer equal to</Line>
  <Line number="154">** [SQLITE_VERSION_NUMBER].  ^(The sqlite3_sourceid() function returns</Line>
  <Line number="155">** a pointer to a string constant whose value is the same as the</Line>
  <Line number="156">** [SQLITE_SOURCE_ID] C preprocessor macro.  Except if SQLite is built</Line>
  <Line number="157">** using an edited copy of [the amalgamation], then the last four characters</Line>
  <Line number="158">** of the hash might be different from [SQLITE_SOURCE_ID].)^</Line>
  <Line number="159">**</Line>
  <Line number="160">** See also: [sqlite_version()] and [sqlite_source_id()].</Line>
  <Line number="161">*/</Line>
  <Line number="162">SQLITE_API SQLITE_EXTERN const char sqlite3_version[];</Line>
  <Line number="163">SQLITE_API const char *sqlite3_libversion(void);</Line>
  <Line number="164">SQLITE_API const char *sqlite3_sourceid(void);</Line>
  <Line number="165">SQLITE_API int sqlite3_libversion_number(void);</Line>
  <Line number="166"></Line>
  <Line number="167">/*</Line>
  <Line number="168">** CAPI3REF: Run-Time Library Compilation Options Diagnostics</Line>
  <Line number="169">**</Line>
  <Line number="170">** ^The sqlite3_compileoption_used() function returns 0 or 1</Line>
  <Line number="171">** indicating whether the specified option was defined at</Line>
  <Line number="172">** compile time.  ^The SQLITE_ prefix may be omitted from the</Line>
  <Line number="173">** option name passed to sqlite3_compileoption_used().</Line>
  <Line number="174">**</Line>
  <Line number="175">** ^The sqlite3_compileoption_get() function allows iterating</Line>
  <Line number="176">** over the list of options that were defined at compile time by</Line>
  <Line number="177">** returning the N-th compile time option string.  ^If N is out of range,</Line>
  <Line number="178">** sqlite3_compileoption_get() returns a NULL pointer.  ^The SQLITE_</Line>
  <Line number="179">** prefix is omitted from any strings returned by</Line>
  <Line number="180">** sqlite3_compileoption_get().</Line>
  <Line number="181">**</Line>
  <Line number="182">** ^Support for the diagnostic functions sqlite3_compileoption_used()</Line>
  <Line number="183">** and sqlite3_compileoption_get() may be omitted by specifying the</Line>
  <Line number="184">** [SQLITE_OMIT_COMPILEOPTION_DIAGS] option at compile time.</Line>
  <Line number="185">**</Line>
  <Line number="186">** See also: SQL functions [sqlite_compileoption_used()] and</Line>
  <Line number="187">** [sqlite_compileoption_get()] and the [compile_options pragma].</Line>
  <Line number="188">*/</Line>
  <Line number="189">#ifndef SQLITE_OMIT_COMPILEOPTION_DIAGS</Line>
  <Line number="190">SQLITE_API int sqlite3_compileoption_used(const char *zOptName);</Line>
  <Line number="191">SQLITE_API const char *sqlite3_compileoption_get(int N);</Line>
  <Line number="192">#else</Line>
  <Line number="193"># define sqlite3_compileoption_used(X) 0</Line>
  <Line number="194"># define sqlite3_compileoption_get(X)  ((void*)0)</Line>
  <Line number="195">#endif</Line>
  <Line number="196"></Line>
  <Line number="197">/*</Line>
  <Line number="198">** CAPI3REF: Test To See If The Library Is Threadsafe</Line>
  <Line number="199">**</Line>
  <Line number="200">** ^The sqlite3_threadsafe() function returns zero if and only if</Line>
  <Line number="201">** SQLite was compiled with mutexing code omitted due to the</Line>
  <Line number="202">** [SQLITE_THREADSAFE] compile-time option being set to 0.</Line>
  <Line number="203">**</Line>
  <Line number="204">** SQLite can be compiled with or without mutexes.  When</Line>
  <Line number="205">** the [SQLITE_THREADSAFE] C preprocessor macro is 1 or 2, mutexes</Line>
  <Line number="206">** are enabled and SQLite is threadsafe.  When the</Line>
  <Line number="207">** [SQLITE_THREADSAFE] macro is 0,</Line>
  <Line number="208">** the mutexes are omitted.  Without the mutexes, it is not safe</Line>
  <Line number="209">** to use SQLite concurrently from more than one thread.</Line>
  <Line number="210">**</Line>
  <Line number="211">** Enabling mutexes incurs a measurable performance penalty.</Line>
  <Line number="212">** So if speed is of utmost importance, it makes sense to disable</Line>
  <Line number="213">** the mutexes.  But for maximum safety, mutexes should be enabled.</Line>
  <Line number="214">** ^The default behavior is for mutexes to be enabled.</Line>
  <Line number="215">**</Line>
  <Line number="216">** This interface can be used by an application to make sure that the</Line>
  <Line number="217">** version of SQLite that it is linking against was compiled with</Line>
  <Line number="218">** the desired setting of the [SQLITE_THREADSAFE] macro.</Line>
  <Line number="219">**</Line>
  <Line number="220">** This interface only reports on the compile-time mutex setting</Line>
  <Line number="221">** of the [SQLITE_THREADSAFE] flag.  If SQLite is compiled with</Line>
  <Line number="222">** SQLITE_THREADSAFE=1 or =2 then mutexes are enabled by default but</Line>
  <Line number="223">** can be fully or partially disabled using a call to [sqlite3_config()]</Line>
  <Line number="224">** with the verbs [SQLITE_CONFIG_SINGLETHREAD], [SQLITE_CONFIG_MULTITHREAD],</Line>
  <Line number="225">** or [SQLITE_CONFIG_SERIALIZED].  ^(The return value of the</Line>
  <Line number="226">** sqlite3_threadsafe() function shows only the compile-time setting of</Line>
  <Line number="227">** thread safety, not any run-time changes to that setting made by</Line>
  <Line number="228">** sqlite3_config(). In other words, the return value from sqlite3_threadsafe()</Line>
  <Line number="229">** is unchanged by calls to sqlite3_config().)^</Line>
  <Line number="230">**</Line>
  <Line number="231">** See the [threading mode] documentation for additional information.</Line>
  <Line number="232">*/</Line>
  <Line number="233">SQLITE_API int sqlite3_threadsafe(void);</Line>
  <Line number="234"></Line>
  <Line number="235">/*</Line>
  <Line number="236">** CAPI3REF: Database Connection Handle</Line>
  <Line number="237">** KEYWORDS: {database connection} {database connections}</Line>
  <Line number="238">**</Line>
  <Line number="239">** Each open SQLite database is represented by a pointer to an instance of</Line>
  <Line number="240">** the opaque structure named &quot;sqlite3&quot;.  It is useful to think of an sqlite3</Line>
  <Line number="241">** pointer as an object.  The [sqlite3_open()], [sqlite3_open16()], and</Line>
  <Line number="242">** [sqlite3_open_v2()] interfaces are its constructors, and [sqlite3_close()]</Line>
  <Line number="243">** and [sqlite3_close_v2()] are its destructors.  There are many other</Line>
  <Line number="244">** interfaces (such as</Line>
  <Line number="245">** [sqlite3_prepare_v2()], [sqlite3_create_function()], and</Line>
  <Line number="246">** [sqlite3_busy_timeout()] to name but three) that are methods on an</Line>
  <Line number="247">** sqlite3 object.</Line>
  <Line number="248">*/</Line>
  <Line number="249">typedef struct sqlite3 sqlite3;</Line>
  <Line number="250"></Line>
  <Line number="251">/*</Line>
  <Line number="252">** CAPI3REF: 64-Bit Integer Types</Line>
  <Line number="253">** KEYWORDS: sqlite_int64 sqlite_uint64</Line>
  <Line number="254">**</Line>
  <Line number="255">** Because there is no cross-platform way to specify 64-bit integer types</Line>
  <Line number="256">** SQLite includes typedefs for 64-bit signed and unsigned integers.</Line>
  <Line number="257">**</Line>
  <Line number="258">** The sqlite3_int64 and sqlite3_uint64 are the preferred type definitions.</Line>
  <Line number="259">** The sqlite_int64 and sqlite_uint64 types are supported for backwards</Line>
  <Line number="260">** compatibility only.</Line>
  <Line number="261">**</Line>
  <Line number="262">** ^The sqlite3_int64 and sqlite_int64 types can store integer values</Line>
  <Line number="263">** between -9223372036854775808 and +9223372036854775807 inclusive.  ^The</Line>
  <Line number="264">** sqlite3_uint64 and sqlite_uint64 types can store integer values</Line>
  <Line number="265">** between 0 and +18446744073709551615 inclusive.</Line>
  <Line number="266">*/</Line>
  <Line number="267">#ifdef SQLITE_INT64_TYPE</Line>
  <Line number="268">  typedef SQLITE_INT64_TYPE sqlite_int64;</Line>
  <Line number="269"># ifdef SQLITE_UINT64_TYPE</Line>
  <Line number="270">    typedef SQLITE_UINT64_TYPE sqlite_uint64;</Line>
  <Line number="271"># else</Line>
  <Line number="272">    typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;</Line>
  <Line number="273"># endif</Line>
  <Line number="274">#elif defined(_MSC_VER) || defined(__BORLANDC__)</Line>
  <Line number="275">  typedef __int64 sqlite_int64;</Line>
  <Line number="276">  typedef unsigned __int64 sqlite_uint64;</Line>
  <Line number="277">#else</Line>
  <Line number="278">  typedef long long int sqlite_int64;</Line>
  <Line number="279">  typedef unsigned long long int sqlite_uint64;</Line>
  <Line number="280">#endif</Line>
  <Line number="281">typedef sqlite_int64 sqlite3_int64;</Line>
  <Line number="282">typedef sqlite_uint64 sqlite3_uint64;</Line>
  <Line number="283"></Line>
  <Line number="284">/*</Line>
  <Line number="285">** If compiling for a processor that lacks floating point support,</Line>
  <Line number="286">** substitute integer for floating-point.</Line>
  <Line number="287">*/</Line>
  <Line number="288">#ifdef SQLITE_OMIT_FLOATING_POINT</Line>
  <Line number="289"># define double sqlite3_int64</Line>
  <Line number="290">#endif</Line>
  <Line number="291"></Line>
  <Line number="292">/*</Line>
  <Line number="293">** CAPI3REF: Closing A Database Connection</Line>
  <Line number="294">** DESTRUCTOR: sqlite3</Line>
  <Line number="295">**</Line>
  <Line number="296">** ^The sqlite3_close() and sqlite3_close_v2() routines are destructors</Line>
  <Line number="297">** for the [sqlite3] object.</Line>
  <Line number="298">** ^Calls to sqlite3_close() and sqlite3_close_v2() return [SQLITE_OK] if</Line>
  <Line number="299">** the [sqlite3] object is successfully destroyed and all associated</Line>
  <Line number="300">** resources are deallocated.</Line>
  <Line number="301">**</Line>
  <Line number="302">** Ideally, applications should [sqlite3_finalize | finalize] all</Line>
  <Line number="303">** [prepared statements], [sqlite3_blob_close | close] all [BLOB handles], and</Line>
  <Line number="304">** [sqlite3_backup_finish | finish] all [sqlite3_backup] objects associated</Line>
  <Line number="305">** with the [sqlite3] object prior to attempting to close the object.</Line>
  <Line number="306">** ^If the database connection is associated with unfinalized prepared</Line>
  <Line number="307">** statements, BLOB handlers, and/or unfinished sqlite3_backup objects then</Line>
  <Line number="308">** sqlite3_close() will leave the database connection open and return</Line>
  <Line number="309">** [SQLITE_BUSY]. ^If sqlite3_close_v2() is called with unfinalized prepared</Line>
  <Line number="310">** statements, unclosed BLOB handlers, and/or unfinished sqlite3_backups,</Line>
  <Line number="311">** it returns [SQLITE_OK] regardless, but instead of deallocating the database</Line>
  <Line number="312">** connection immediately, it marks the database connection as an unusable</Line>
  <Line number="313">** &quot;zombie&quot; and makes arrangements to automatically deallocate the database</Line>
  <Line number="314">** connection after all prepared statements are finalized, all BLOB handles</Line>
  <Line number="315">** are closed, and all backups have finished. The sqlite3_close_v2() interface</Line>
  <Line number="316">** is intended for use with host languages that are garbage collected, and</Line>
  <Line number="317">** where the order in which destructors are called is arbitrary.</Line>
  <Line number="318">**</Line>
  <Line number="319">** ^If an [sqlite3] object is destroyed while a transaction is open,</Line>
  <Line number="320">** the transaction is automatically rolled back.</Line>
  <Line number="321">**</Line>
  <Line number="322">** The C parameter to [sqlite3_close(C)] and [sqlite3_close_v2(C)]</Line>
  <Line number="323">** must be either a NULL</Line>
  <Line number="324">** pointer or an [sqlite3] object pointer obtained</Line>
  <Line number="325">** from [sqlite3_open()], [sqlite3_open16()], or</Line>
  <Line number="326">** [sqlite3_open_v2()], and not previously closed.</Line>
  <Line number="327">** ^Calling sqlite3_close() or sqlite3_close_v2() with a NULL pointer</Line>
  <Line number="328">** argument is a harmless no-op.</Line>
  <Line number="329">*/</Line>
  <Line number="330">SQLITE_API int sqlite3_close(sqlite3*);</Line>
  <Line number="331">SQLITE_API int sqlite3_close_v2(sqlite3*);</Line>
  <Line number="332"></Line>
  <Line number="333">/*</Line>
  <Line number="334">** The type for a callback function.</Line>
  <Line number="335">** This is legacy and deprecated.  It is included for historical</Line>
  <Line number="336">** compatibility and is not documented.</Line>
  <Line number="337">*/</Line>
  <Line number="338">typedef int (*sqlite3_callback)(void*,int,char**, char**);</Line>
  <Line number="339"></Line>
  <Line number="340">/*</Line>
  <Line number="341">** CAPI3REF: One-Step Query Execution Interface</Line>
  <Line number="342">** METHOD: sqlite3</Line>
  <Line number="343">**</Line>
  <Line number="344">** The sqlite3_exec() interface is a convenience wrapper around</Line>
  <Line number="345">** [sqlite3_prepare_v2()], [sqlite3_step()], and [sqlite3_finalize()],</Line>
  <Line number="346">** that allows an application to run multiple statements of SQL</Line>
  <Line number="347">** without having to use a lot of C code.</Line>
  <Line number="348">**</Line>
  <Line number="349">** ^The sqlite3_exec() interface runs zero or more UTF-8 encoded,</Line>
  <Line number="350">** semicolon-separate SQL statements passed into its 2nd argument,</Line>
  <Line number="351">** in the context of the [database connection] passed in as its 1st</Line>
  <Line number="352">** argument.  ^If the callback function of the 3rd argument to</Line>
  <Line number="353">** sqlite3_exec() is not NULL, then it is invoked for each result row</Line>
  <Line number="354">** coming out of the evaluated SQL statements.  ^The 4th argument to</Line>
  <Line number="355">** sqlite3_exec() is relayed through to the 1st argument of each</Line>
  <Line number="356">** callback invocation.  ^If the callback pointer to sqlite3_exec()</Line>
  <Line number="357">** is NULL, then no callback is ever invoked and result rows are</Line>
  <Line number="358">** ignored.</Line>
  <Line number="359">**</Line>
  <Line number="360">** ^If an error occurs while evaluating the SQL statements passed into</Line>
  <Line number="361">** sqlite3_exec(), then execution of the current statement stops and</Line>
  <Line number="362">** subsequent statements are skipped.  ^If the 5th parameter to sqlite3_exec()</Line>
  <Line number="363">** is not NULL then any error message is written into memory obtained</Line>
  <Line number="364">** from [sqlite3_malloc()] and passed back through the 5th parameter.</Line>
  <Line number="365">** To avoid memory leaks, the application should invoke [sqlite3_free()]</Line>
  <Line number="366">** on error message strings returned through the 5th parameter of</Line>
  <Line number="367">** sqlite3_exec() after the error message string is no longer needed.</Line>
  <Line number="368">** ^If the 5th parameter to sqlite3_exec() is not NULL and no errors</Line>
  <Line number="369">** occur, then sqlite3_exec() sets the pointer in its 5th parameter to</Line>
  <Line number="370">** NULL before returning.</Line>
  <Line number="371">**</Line>
  <Line number="372">** ^If an sqlite3_exec() callback returns non-zero, the sqlite3_exec()</Line>
  <Line number="373">** routine returns SQLITE_ABORT without invoking the callback again and</Line>
  <Line number="374">** without running any subsequent SQL statements.</Line>
  <Line number="375">**</Line>
  <Line number="376">** ^The 2nd argument to the sqlite3_exec() callback function is the</Line>
  <Line number="377">** number of columns in the result.  ^The 3rd argument to the sqlite3_exec()</Line>
  <Line number="378">** callback is an array of pointers to strings obtained as if from</Line>
  <Line number="379">** [sqlite3_column_text()], one for each column.  ^If an element of a</Line>
  <Line number="380">** result row is NULL then the corresponding string pointer for the</Line>
  <Line number="381">** sqlite3_exec() callback is a NULL pointer.  ^The 4th argument to the</Line>
  <Line number="382">** sqlite3_exec() callback is an array of pointers to strings where each</Line>
  <Line number="383">** entry represents the name of corresponding result column as obtained</Line>
  <Line number="384">** from [sqlite3_column_name()].</Line>
  <Line number="385">**</Line>
  <Line number="386">** ^If the 2nd parameter to sqlite3_exec() is a NULL pointer, a pointer</Line>
  <Line number="387">** to an empty string, or a pointer that contains only whitespace and/or</Line>
  <Line number="388">** SQL comments, then no SQL statements are evaluated and the database</Line>
  <Line number="389">** is not changed.</Line>
  <Line number="390">**</Line>
  <Line number="391">** Restrictions:</Line>
  <Line number="392">**</Line>
  <Line number="393">** &lt;ul&gt;</Line>
  <Line number="394">** &lt;li&gt; The application must ensure that the 1st parameter to sqlite3_exec()</Line>
  <Line number="395">**      is a valid and open [database connection].</Line>
  <Line number="396">** &lt;li&gt; The application must not close the [database connection] specified by</Line>
  <Line number="397">**      the 1st parameter to sqlite3_exec() while sqlite3_exec() is running.</Line>
  <Line number="398">** &lt;li&gt; The application must not modify the SQL statement text passed into</Line>
  <Line number="399">**      the 2nd parameter of sqlite3_exec() while sqlite3_exec() is running.</Line>
  <Line number="400">** &lt;/ul&gt;</Line>
  <Line number="401">*/</Line>
  <Line number="402">SQLITE_API int sqlite3_exec(</Line>
  <Line number="403">  sqlite3*,                                  /* An open database */</Line>
  <Line number="404">  const char *sql,                           /* SQL to be evaluated */</Line>
  <Line number="405">  int (*callback)(void*,int,char**,char**),  /* Callback function */</Line>
  <Line number="406">  void *,                                    /* 1st argument to callback */</Line>
  <Line number="407">  char **errmsg                              /* Error msg written here */</Line>
  <Line number="408">);</Line>
  <Line number="409"></Line>
  <Line number="410">/*</Line>
  <Line number="411">** CAPI3REF: Result Codes</Line>
  <Line number="412">** KEYWORDS: {result code definitions}</Line>
  <Line number="413">**</Line>
  <Line number="414">** Many SQLite functions return an integer result code from the set shown</Line>
  <Line number="415">** here in order to indicate success or failure.</Line>
  <Line number="416">**</Line>
  <Line number="417">** New error codes may be added in future versions of SQLite.</Line>
  <Line number="418">**</Line>
  <Line number="419">** See also: [extended result code definitions]</Line>
  <Line number="420">*/</Line>
  <Line number="421">#define SQLITE_OK           0   /* Successful result */</Line>
  <Line number="422">/* beginning-of-error-codes */</Line>
  <Line number="423">#define SQLITE_ERROR        1   /* Generic error */</Line>
  <Line number="424">#define SQLITE_INTERNAL     2   /* Internal logic error in SQLite */</Line>
  <Line number="425">#define SQLITE_PERM         3   /* Access permission denied */</Line>
  <Line number="426">#define SQLITE_ABORT        4   /* Callback routine requested an abort */</Line>
  <Line number="427">#define SQLITE_BUSY         5   /* The database file is locked */</Line>
  <Line number="428">#define SQLITE_LOCKED       6   /* A table in the database is locked */</Line>
  <Line number="429">#define SQLITE_NOMEM        7   /* A malloc() failed */</Line>
  <Line number="430">#define SQLITE_READONLY     8   /* Attempt to write a readonly database */</Line>
  <Line number="431">#define SQLITE_INTERRUPT    9   /* Operation terminated by sqlite3_interrupt()*/</Line>
  <Line number="432">#define SQLITE_IOERR       10   /* Some kind of disk I/O error occurred */</Line>
  <Line number="433">#define SQLITE_CORRUPT     11   /* The database disk image is malformed */</Line>
  <Line number="434">#define SQLITE_NOTFOUND    12   /* Unknown opcode in sqlite3_file_control() */</Line>
  <Line number="435">#define SQLITE_FULL        13   /* Insertion failed because database is full */</Line>
  <Line number="436">#define SQLITE_CANTOPEN    14   /* Unable to open the database file */</Line>
  <Line number="437">#define SQLITE_PROTOCOL    15   /* Database lock protocol error */</Line>
  <Line number="438">#define SQLITE_EMPTY       16   /* Internal use only */</Line>
  <Line number="439">#define SQLITE_SCHEMA      17   /* The database schema changed */</Line>
  <Line number="440">#define SQLITE_TOOBIG      18   /* String or BLOB exceeds size limit */</Line>
  <Line number="441">#define SQLITE_CONSTRAINT  19   /* Abort due to constraint violation */</Line>
  <Line number="442">#define SQLITE_MISMATCH    20   /* Data type mismatch */</Line>
  <Line number="443">#define SQLITE_MISUSE      21   /* Library used incorrectly */</Line>
  <Line number="444">#define SQLITE_NOLFS       22   /* Uses OS features not supported on host */</Line>
  <Line number="445">#define SQLITE_AUTH        23   /* Authorization denied */</Line>
  <Line number="446">#define SQLITE_FORMAT      24   /* Not used */</Line>
  <Line number="447">#define SQLITE_RANGE       25   /* 2nd parameter to sqlite3_bind out of range */</Line>
  <Line number="448">#define SQLITE_NOTADB      26   /* File opened that is not a database file */</Line>
  <Line number="449">#define SQLITE_NOTICE      27   /* Notifications from sqlite3_log() */</Line>
  <Line number="450">#define SQLITE_WARNING     28   /* Warnings from sqlite3_log() */</Line>
  <Line number="451">#define SQLITE_ROW         100  /* sqlite3_step() has another row ready */</Line>
  <Line number="452">#define SQLITE_DONE        101  /* sqlite3_step() has finished executing */</Line>
  <Line number="453">/* end-of-error-codes */</Line>
  <Line number="454"></Line>
  <Line number="455">/*</Line>
  <Line number="456">** CAPI3REF: Extended Result Codes</Line>
  <Line number="457">** KEYWORDS: {extended result code definitions}</Line>
  <Line number="458">**</Line>
  <Line number="459">** In its default configuration, SQLite API routines return one of 30 integer</Line>
  <Line number="460">** [result codes].  However, experience has shown that many of</Line>
  <Line number="461">** these result codes are too coarse-grained.  They do not provide as</Line>
  <Line number="462">** much information about problems as programmers might like.  In an effort to</Line>
  <Line number="463">** address this, newer versions of SQLite (version 3.3.8 [dateof:3.3.8]</Line>
  <Line number="464">** and later) include</Line>
  <Line number="465">** support for additional result codes that provide more detailed information</Line>
  <Line number="466">** about errors. These [extended result codes] are enabled or disabled</Line>
  <Line number="467">** on a per database connection basis using the</Line>
  <Line number="468">** [sqlite3_extended_result_codes()] API.  Or, the extended code for</Line>
  <Line number="469">** the most recent error can be obtained using</Line>
  <Line number="470">** [sqlite3_extended_errcode()].</Line>
  <Line number="471">*/</Line>
  <Line number="472">#define SQLITE_ERROR_MISSING_COLLSEQ   (SQLITE_ERROR | (1&lt;&lt;8))</Line>
  <Line number="473">#define SQLITE_ERROR_RETRY             (SQLITE_ERROR | (2&lt;&lt;8))</Line>
  <Line number="474">#define SQLITE_ERROR_SNAPSHOT          (SQLITE_ERROR | (3&lt;&lt;8))</Line>
  <Line number="475">#define SQLITE_IOERR_READ              (SQLITE_IOERR | (1&lt;&lt;8))</Line>
  <Line number="476">#define SQLITE_IOERR_SHORT_READ        (SQLITE_IOERR | (2&lt;&lt;8))</Line>
  <Line number="477">#define SQLITE_IOERR_WRITE             (SQLITE_IOERR | (3&lt;&lt;8))</Line>
  <Line number="478">#define SQLITE_IOERR_FSYNC             (SQLITE_IOERR | (4&lt;&lt;8))</Line>
  <Line number="479">#define SQLITE_IOERR_DIR_FSYNC         (SQLITE_IOERR | (5&lt;&lt;8))</Line>
  <Line number="480">#define SQLITE_IOERR_TRUNCATE          (SQLITE_IOERR | (6&lt;&lt;8))</Line>
  <Line number="481">#define SQLITE_IOERR_FSTAT             (SQLITE_IOERR | (7&lt;&lt;8))</Line>
  <Line number="482">#define SQLITE_IOERR_UNLOCK            (SQLITE_IOERR | (8&lt;&lt;8))</Line>
  <Line number="483">#define SQLITE_IOERR_RDLOCK            (SQLITE_IOERR | (9&lt;&lt;8))</Line>
  <Line number="484">#define SQLITE_IOERR_DELETE            (SQLITE_IOERR | (10&lt;&lt;8))</Line>
  <Line number="485">#define SQLITE_IOERR_BLOCKED           (SQLITE_IOERR | (11&lt;&lt;8))</Line>
  <Line number="486">#define SQLITE_IOERR_NOMEM             (SQLITE_IOERR | (12&lt;&lt;8))</Line>
  <Line number="487">#define SQLITE_IOERR_ACCESS            (SQLITE_IOERR | (13&lt;&lt;8))</Line>
  <Line number="488">#define SQLITE_IOERR_CHECKRESERVEDLOCK (SQLITE_IOERR | (14&lt;&lt;8))</Line>
  <Line number="489">#define SQLITE_IOERR_LOCK              (SQLITE_IOERR | (15&lt;&lt;8))</Line>
  <Line number="490">#define SQLITE_IOERR_CLOSE             (SQLITE_IOERR | (16&lt;&lt;8))</Line>
  <Line number="491">#define SQLITE_IOERR_DIR_CLOSE         (SQLITE_IOERR | (17&lt;&lt;8))</Line>
  <Line number="492">#define SQLITE_IOERR_SHMOPEN           (SQLITE_IOERR | (18&lt;&lt;8))</Line>
  <Line number="493">#define SQLITE_IOERR_SHMSIZE           (SQLITE_IOERR | (19&lt;&lt;8))</Line>
  <Line number="494">#define SQLITE_IOERR_SHMLOCK           (SQLITE_IOERR | (20&lt;&lt;8))</Line>
  <Line number="495">#define SQLITE_IOERR_SHMMAP            (SQLITE_IOERR | (21&lt;&lt;8))</Line>
  <Line number="496">#define SQLITE_IOERR_SEEK              (SQLITE_IOERR | (22&lt;&lt;8))</Line>
  <Line number="497">#define SQLITE_IOERR_DELETE_NOENT      (SQLITE_IOERR | (23&lt;&lt;8))</Line>
  <Line number="498">#define SQLITE_IOERR_MMAP              (SQLITE_IOERR | (24&lt;&lt;8))</Line>
  <Line number="499">#define SQLITE_IOERR_GETTEMPPATH       (SQLITE_IOERR | (25&lt;&lt;8))</Line>
  <Line number="500">#define SQLITE_IOERR_CONVPATH          (SQLITE_IOERR | (26&lt;&lt;8))</Line>
  <Line number="501">#define SQLITE_IOERR_VNODE             (SQLITE_IOERR | (27&lt;&lt;8))</Line>
  <Line number="502">#define SQLITE_IOERR_AUTH              (SQLITE_IOERR | (28&lt;&lt;8))</Line>
  <Line number="503">#define SQLITE_IOERR_BEGIN_ATOMIC      (SQLITE_IOERR | (29&lt;&lt;8))</Line>
  <Line number="504">#define SQLITE_IOERR_COMMIT_ATOMIC     (SQLITE_IOERR | (30&lt;&lt;8))</Line>
  <Line number="505">#define SQLITE_IOERR_ROLLBACK_ATOMIC   (SQLITE_IOERR | (31&lt;&lt;8))</Line>
  <Line number="506">#define SQLITE_IOERR_DATA              (SQLITE_IOERR | (32&lt;&lt;8))</Line>
  <Line number="507">#define SQLITE_IOERR_CORRUPTFS         (SQLITE_IOERR | (33&lt;&lt;8))</Line>
  <Line number="508">#define SQLITE_LOCKED_SHAREDCACHE      (SQLITE_LOCKED |  (1&lt;&lt;8))</Line>
  <Line number="509">#define SQLITE_LOCKED_VTAB             (SQLITE_LOCKED |  (2&lt;&lt;8))</Line>
  <Line number="510">#define SQLITE_BUSY_RECOVERY           (SQLITE_BUSY   |  (1&lt;&lt;8))</Line>
  <Line number="511">#define SQLITE_BUSY_SNAPSHOT           (SQLITE_BUSY   |  (2&lt;&lt;8))</Line>
  <Line number="512">#define SQLITE_BUSY_TIMEOUT            (SQLITE_BUSY   |  (3&lt;&lt;8))</Line>
  <Line number="513">#define SQLITE_CANTOPEN_NOTEMPDIR      (SQLITE_CANTOPEN | (1&lt;&lt;8))</Line>
  <Line number="514">#define SQLITE_CANTOPEN_ISDIR          (SQLITE_CANTOPEN | (2&lt;&lt;8))</Line>
  <Line number="515">#define SQLITE_CANTOPEN_FULLPATH       (SQLITE_CANTOPEN | (3&lt;&lt;8))</Line>
  <Line number="516">#define SQLITE_CANTOPEN_CONVPATH       (SQLITE_CANTOPEN | (4&lt;&lt;8))</Line>
  <Line number="517">#define SQLITE_CANTOPEN_DIRTYWAL       (SQLITE_CANTOPEN | (5&lt;&lt;8)) /* Not Used */</Line>
  <Line number="518">#define SQLITE_CANTOPEN_SYMLINK        (SQLITE_CANTOPEN | (6&lt;&lt;8))</Line>
  <Line number="519">#define SQLITE_CORRUPT_VTAB            (SQLITE_CORRUPT | (1&lt;&lt;8))</Line>
  <Line number="520">#define SQLITE_CORRUPT_SEQUENCE        (SQLITE_CORRUPT | (2&lt;&lt;8))</Line>
  <Line number="521">#define SQLITE_CORRUPT_INDEX           (SQLITE_CORRUPT | (3&lt;&lt;8))</Line>
  <Line number="522">#define SQLITE_READONLY_RECOVERY       (SQLITE_READONLY | (1&lt;&lt;8))</Line>
  <Line number="523">#define SQLITE_READONLY_CANTLOCK       (SQLITE_READONLY | (2&lt;&lt;8))</Line>
  <Line number="524">#define SQLITE_READONLY_ROLLBACK       (SQLITE_READONLY | (3&lt;&lt;8))</Line>
  <Line number="525">#define SQLITE_READONLY_DBMOVED        (SQLITE_READONLY | (4&lt;&lt;8))</Line>
  <Line number="526">#define SQLITE_READONLY_CANTINIT       (SQLITE_READONLY | (5&lt;&lt;8))</Line>
  <Line number="527">#define SQLITE_READONLY_DIRECTORY      (SQLITE_READONLY | (6&lt;&lt;8))</Line>
  <Line number="528">#define SQLITE_ABORT_ROLLBACK          (SQLITE_ABORT | (2&lt;&lt;8))</Line>
  <Line number="529">#define SQLITE_CONSTRAINT_CHECK        (SQLITE_CONSTRAINT | (1&lt;&lt;8))</Line>
  <Line number="530">#define SQLITE_CONSTRAINT_COMMITHOOK   (SQLITE_CONSTRAINT | (2&lt;&lt;8))</Line>
  <Line number="531">#define SQLITE_CONSTRAINT_FOREIGNKEY   (SQLITE_CONSTRAINT | (3&lt;&lt;8))</Line>
  <Line number="532">#define SQLITE_CONSTRAINT_FUNCTION     (SQLITE_CONSTRAINT | (4&lt;&lt;8))</Line>
  <Line number="533">#define SQLITE_CONSTRAINT_NOTNULL      (SQLITE_CONSTRAINT | (5&lt;&lt;8))</Line>
  <Line number="534">#define SQLITE_CONSTRAINT_PRIMARYKEY   (SQLITE_CONSTRAINT | (6&lt;&lt;8))</Line>
  <Line number="535">#define SQLITE_CONSTRAINT_TRIGGER      (SQLITE_CONSTRAINT | (7&lt;&lt;8))</Line>
  <Line number="536">#define SQLITE_CONSTRAINT_UNIQUE       (SQLITE_CONSTRAINT | (8&lt;&lt;8))</Line>
  <Line number="537">#define SQLITE_CONSTRAINT_VTAB         (SQLITE_CONSTRAINT | (9&lt;&lt;8))</Line>
  <Line number="538">#define SQLITE_CONSTRAINT_ROWID        (SQLITE_CONSTRAINT |(10&lt;&lt;8))</Line>
  <Line number="539">#define SQLITE_CONSTRAINT_PINNED       (SQLITE_CONSTRAINT |(11&lt;&lt;8))</Line>
  <Line number="540">#define SQLITE_NOTICE_RECOVER_WAL      (SQLITE_NOTICE | (1&lt;&lt;8))</Line>
  <Line number="541">#define SQLITE_NOTICE_RECOVER_ROLLBACK (SQLITE_NOTICE | (2&lt;&lt;8))</Line>
  <Line number="542">#define SQLITE_WARNING_AUTOINDEX       (SQLITE_WARNING | (1&lt;&lt;8))</Line>
  <Line number="543">#define SQLITE_AUTH_USER               (SQLITE_AUTH | (1&lt;&lt;8))</Line>
  <Line number="544">#define SQLITE_OK_LOAD_PERMANENTLY     (SQLITE_OK | (1&lt;&lt;8))</Line>
  <Line number="545">#define SQLITE_OK_SYMLINK              (SQLITE_OK | (2&lt;&lt;8))</Line>
  <Line number="546"></Line>
  <Line number="547">/*</Line>
  <Line number="548">** CAPI3REF: Flags For File Open Operations</Line>
  <Line number="549">**</Line>
  <Line number="550">** These bit values are intended for use in the</Line>
  <Line number="551">** 3rd parameter to the [sqlite3_open_v2()] interface and</Line>
  <Line number="552">** in the 4th parameter to the [sqlite3_vfs.xOpen] method.</Line>
  <Line number="553">*/</Line>
  <Line number="554">#define SQLITE_OPEN_READONLY         0x00000001  /* Ok for sqlite3_open_v2() */</Line>
  <Line number="555">#define SQLITE_OPEN_READWRITE        0x00000002  /* Ok for sqlite3_open_v2() */</Line>
  <Line number="556">#define SQLITE_OPEN_CREATE           0x00000004  /* Ok for sqlite3_open_v2() */</Line>
  <Line number="557">#define SQLITE_OPEN_DELETEONCLOSE    0x00000008  /* VFS only */</Line>
  <Line number="558">#define SQLITE_OPEN_EXCLUSIVE        0x00000010  /* VFS only */</Line>
  <Line number="559">#define SQLITE_OPEN_AUTOPROXY        0x00000020  /* VFS only */</Line>
  <Line number="560">#define SQLITE_OPEN_URI              0x00000040  /* Ok for sqlite3_open_v2() */</Line>
  <Line number="561">#define SQLITE_OPEN_MEMORY           0x00000080  /* Ok for sqlite3_open_v2() */</Line>
  <Line number="562">#define SQLITE_OPEN_MAIN_DB          0x00000100  /* VFS only */</Line>
  <Line number="563">#define SQLITE_OPEN_TEMP_DB          0x00000200  /* VFS only */</Line>
  <Line number="564">#define SQLITE_OPEN_TRANSIENT_DB     0x00000400  /* VFS only */</Line>
  <Line number="565">#define SQLITE_OPEN_MAIN_JOURNAL     0x00000800  /* VFS only */</Line>
  <Line number="566">#define SQLITE_OPEN_TEMP_JOURNAL     0x00001000  /* VFS only */</Line>
  <Line number="567">#define SQLITE_OPEN_SUBJOURNAL       0x00002000  /* VFS only */</Line>
  <Line number="568">#define SQLITE_OPEN_SUPER_JOURNAL    0x00004000  /* VFS only */</Line>
  <Line number="569">#define SQLITE_OPEN_NOMUTEX          0x00008000  /* Ok for sqlite3_open_v2() */</Line>
  <Line number="570">#define SQLITE_OPEN_FULLMUTEX        0x00010000  /* Ok for sqlite3_open_v2() */</Line>
  <Line number="571">#define SQLITE_OPEN_SHAREDCACHE      0x00020000  /* Ok for sqlite3_open_v2() */</Line>
  <Line number="572">#define SQLITE_OPEN_PRIVATECACHE     0x00040000  /* Ok for sqlite3_open_v2() */</Line>
  <Line number="573">#define SQLITE_OPEN_WAL              0x00080000  /* VFS only */</Line>
  <Line number="574">#define SQLITE_OPEN_NOFOLLOW         0x01000000  /* Ok for sqlite3_open_v2() */</Line>
  <Line number="575"></Line>
  <Line number="576">/* Reserved:                         0x00F00000 */</Line>
  <Line number="577">/* Legacy compatibility: */</Line>
  <Line number="578">#define SQLITE_OPEN_MASTER_JOURNAL   0x00004000  /* VFS only */</Line>
  <Line number="579"></Line>
  <Line number="580"></Line>
  <Line number="581">/*</Line>
  <Line number="582">** CAPI3REF: Device Characteristics</Line>
  <Line number="583">**</Line>
  <Line number="584">** The xDeviceCharacteristics method of the [sqlite3_io_methods]</Line>
  <Line number="585">** object returns an integer which is a vector of these</Line>
  <Line number="586">** bit values expressing I/O characteristics of the mass storage</Line>
  <Line number="587">** device that holds the file that the [sqlite3_io_methods]</Line>
  <Line number="588">** refers to.</Line>
  <Line number="589">**</Line>
  <Line number="590">** The SQLITE_IOCAP_ATOMIC property means that all writes of</Line>
  <Line number="591">** any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values</Line>
  <Line number="592">** mean that writes of blocks that are nnn bytes in size and</Line>
  <Line number="593">** are aligned to an address which is an integer multiple of</Line>
  <Line number="594">** nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means</Line>
  <Line number="595">** that when data is appended to a file, the data is appended</Line>
  <Line number="596">** first then the size of the file is extended, never the other</Line>
  <Line number="597">** way around.  The SQLITE_IOCAP_SEQUENTIAL property means that</Line>
  <Line number="598">** information is written to disk in the same order as calls</Line>
  <Line number="599">** to xWrite().  The SQLITE_IOCAP_POWERSAFE_OVERWRITE property means that</Line>
  <Line number="600">** after reboot following a crash or power loss, the only bytes in a</Line>
  <Line number="601">** file that were written at the application level might have changed</Line>
  <Line number="602">** and that adjacent bytes, even bytes within the same sector are</Line>
  <Line number="603">** guaranteed to be unchanged.  The SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN</Line>
  <Line number="604">** flag indicates that a file cannot be deleted when open.  The</Line>
  <Line number="605">** SQLITE_IOCAP_IMMUTABLE flag indicates that the file is on</Line>
  <Line number="606">** read-only media and cannot be changed even by processes with</Line>
  <Line number="607">** elevated privileges.</Line>
  <Line number="608">**</Line>
  <Line number="609">** The SQLITE_IOCAP_BATCH_ATOMIC property means that the underlying</Line>
  <Line number="610">** filesystem supports doing multiple write operations atomically when those</Line>
  <Line number="611">** write operations are bracketed by [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE] and</Line>
  <Line number="612">** [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE].</Line>
  <Line number="613">*/</Line>
  <Line number="614">#define SQLITE_IOCAP_ATOMIC                 0x00000001</Line>
  <Line number="615">#define SQLITE_IOCAP_ATOMIC512              0x00000002</Line>
  <Line number="616">#define SQLITE_IOCAP_ATOMIC1K               0x00000004</Line>
  <Line number="617">#define SQLITE_IOCAP_ATOMIC2K               0x00000008</Line>
  <Line number="618">#define SQLITE_IOCAP_ATOMIC4K               0x00000010</Line>
  <Line number="619">#define SQLITE_IOCAP_ATOMIC8K               0x00000020</Line>
  <Line number="620">#define SQLITE_IOCAP_ATOMIC16K              0x00000040</Line>
  <Line number="621">#define SQLITE_IOCAP_ATOMIC32K              0x00000080</Line>
  <Line number="622">#define SQLITE_IOCAP_ATOMIC64K              0x00000100</Line>
  <Line number="623">#define SQLITE_IOCAP_SAFE_APPEND            0x00000200</Line>
  <Line number="624">#define SQLITE_IOCAP_SEQUENTIAL             0x00000400</Line>
  <Line number="625">#define SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN  0x00000800</Line>
  <Line number="626">#define SQLITE_IOCAP_POWERSAFE_OVERWRITE    0x00001000</Line>
  <Line number="627">#define SQLITE_IOCAP_IMMUTABLE              0x00002000</Line>
  <Line number="628">#define SQLITE_IOCAP_BATCH_ATOMIC           0x00004000</Line>
  <Line number="629"></Line>
  <Line number="630">/*</Line>
  <Line number="631">** CAPI3REF: File Locking Levels</Line>
  <Line number="632">**</Line>
  <Line number="633">** SQLite uses one of these integer values as the second</Line>
  <Line number="634">** argument to calls it makes to the xLock() and xUnlock() methods</Line>
  <Line number="635">** of an [sqlite3_io_methods] object.</Line>
  <Line number="636">*/</Line>
  <Line number="637">#define SQLITE_LOCK_NONE          0</Line>
  <Line number="638">#define SQLITE_LOCK_SHARED        1</Line>
  <Line number="639">#define SQLITE_LOCK_RESERVED      2</Line>
  <Line number="640">#define SQLITE_LOCK_PENDING       3</Line>
  <Line number="641">#define SQLITE_LOCK_EXCLUSIVE     4</Line>
  <Line number="642"></Line>
  <Line number="643">/*</Line>
  <Line number="644">** CAPI3REF: Synchronization Type Flags</Line>
  <Line number="645">**</Line>
  <Line number="646">** When SQLite invokes the xSync() method of an</Line>
  <Line number="647">** [sqlite3_io_methods] object it uses a combination of</Line>
  <Line number="648">** these integer values as the second argument.</Line>
  <Line number="649">**</Line>
  <Line number="650">** When the SQLITE_SYNC_DATAONLY flag is used, it means that the</Line>
  <Line number="651">** sync operation only needs to flush data to mass storage.  Inode</Line>
  <Line number="652">** information need not be flushed. If the lower four bits of the flag</Line>
  <Line number="653">** equal SQLITE_SYNC_NORMAL, that means to use normal fsync() semantics.</Line>
  <Line number="654">** If the lower four bits equal SQLITE_SYNC_FULL, that means</Line>
  <Line number="655">** to use Mac OS X style fullsync instead of fsync().</Line>
  <Line number="656">**</Line>
  <Line number="657">** Do not confuse the SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL flags</Line>
  <Line number="658">** with the [PRAGMA synchronous]=NORMAL and [PRAGMA synchronous]=FULL</Line>
  <Line number="659">** settings.  The [synchronous pragma] determines when calls to the</Line>
  <Line number="660">** xSync VFS method occur and applies uniformly across all platforms.</Line>
  <Line number="661">** The SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL flags determine how</Line>
  <Line number="662">** energetic or rigorous or forceful the sync operations are and</Line>
  <Line number="663">** only make a difference on Mac OSX for the default SQLite code.</Line>
  <Line number="664">** (Third-party VFS implementations might also make the distinction</Line>
  <Line number="665">** between SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL, but among the</Line>
  <Line number="666">** operating systems natively supported by SQLite, only Mac OSX</Line>
  <Line number="667">** cares about the difference.)</Line>
  <Line number="668">*/</Line>
  <Line number="669">#define SQLITE_SYNC_NORMAL        0x00002</Line>
  <Line number="670">#define SQLITE_SYNC_FULL          0x00003</Line>
  <Line number="671">#define SQLITE_SYNC_DATAONLY      0x00010</Line>
  <Line number="672"></Line>
  <Line number="673">/*</Line>
  <Line number="674">** CAPI3REF: OS Interface Open File Handle</Line>
  <Line number="675">**</Line>
  <Line number="676">** An [sqlite3_file] object represents an open file in the</Line>
  <Line number="677">** [sqlite3_vfs | OS interface layer].  Individual OS interface</Line>
  <Line number="678">** implementations will</Line>
  <Line number="679">** want to subclass this object by appending additional fields</Line>
  <Line number="680">** for their own use.  The pMethods entry is a pointer to an</Line>
  <Line number="681">** [sqlite3_io_methods] object that defines methods for performing</Line>
  <Line number="682">** I/O operations on the open file.</Line>
  <Line number="683">*/</Line>
  <Line number="684">typedef struct sqlite3_file sqlite3_file;</Line>
  <Line number="685">struct sqlite3_file {</Line>
  <Line number="686">  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */</Line>
  <Line number="687">};</Line>
  <Line number="688"></Line>
  <Line number="689">/*</Line>
  <Line number="690">** CAPI3REF: OS Interface File Virtual Methods Object</Line>
  <Line number="691">**</Line>
  <Line number="692">** Every file opened by the [sqlite3_vfs.xOpen] method populates an</Line>
  <Line number="693">** [sqlite3_file] object (or, more commonly, a subclass of the</Line>
  <Line number="694">** [sqlite3_file] object) with a pointer to an instance of this object.</Line>
  <Line number="695">** This object defines the methods used to perform various operations</Line>
  <Line number="696">** against the open file represented by the [sqlite3_file] object.</Line>
  <Line number="697">**</Line>
  <Line number="698">** If the [sqlite3_vfs.xOpen] method sets the sqlite3_file.pMethods element</Line>
  <Line number="699">** to a non-NULL pointer, then the sqlite3_io_methods.xClose method</Line>
  <Line number="700">** may be invoked even if the [sqlite3_vfs.xOpen] reported that it failed.  The</Line>
  <Line number="701">** only way to prevent a call to xClose following a failed [sqlite3_vfs.xOpen]</Line>
  <Line number="702">** is for the [sqlite3_vfs.xOpen] to set the sqlite3_file.pMethods element</Line>
  <Line number="703">** to NULL.</Line>
  <Line number="704">**</Line>
  <Line number="705">** The flags argument to xSync may be one of [SQLITE_SYNC_NORMAL] or</Line>
  <Line number="706">** [SQLITE_SYNC_FULL].  The first choice is the normal fsync().</Line>
  <Line number="707">** The second choice is a Mac OS X style fullsync.  The [SQLITE_SYNC_DATAONLY]</Line>
  <Line number="708">** flag may be ORed in to indicate that only the data of the file</Line>
  <Line number="709">** and not its inode needs to be synced.</Line>
  <Line number="710">**</Line>
  <Line number="711">** The integer values to xLock() and xUnlock() are one of</Line>
  <Line number="712">** &lt;ul&gt;</Line>
  <Line number="713">** &lt;li&gt; [SQLITE_LOCK_NONE],</Line>
  <Line number="714">** &lt;li&gt; [SQLITE_LOCK_SHARED],</Line>
  <Line number="715">** &lt;li&gt; [SQLITE_LOCK_RESERVED],</Line>
  <Line number="716">** &lt;li&gt; [SQLITE_LOCK_PENDING], or</Line>
  <Line number="717">** &lt;li&gt; [SQLITE_LOCK_EXCLUSIVE].</Line>
  <Line number="718">** &lt;/ul&gt;</Line>
  <Line number="719">** xLock() increases the lock. xUnlock() decreases the lock.</Line>
  <Line number="720">** The xCheckReservedLock() method checks whether any database connection,</Line>
  <Line number="721">** either in this process or in some other process, is holding a RESERVED,</Line>
  <Line number="722">** PENDING, or EXCLUSIVE lock on the file.  It returns true</Line>
  <Line number="723">** if such a lock exists and false otherwise.</Line>
  <Line number="724">**</Line>
  <Line number="725">** The xFileControl() method is a generic interface that allows custom</Line>
  <Line number="726">** VFS implementations to directly control an open file using the</Line>
  <Line number="727">** [sqlite3_file_control()] interface.  The second &quot;op&quot; argument is an</Line>
  <Line number="728">** integer opcode.  The third argument is a generic pointer intended to</Line>
  <Line number="729">** point to a structure that may contain arguments or space in which to</Line>
  <Line number="730">** write return values.  Potential uses for xFileControl() might be</Line>
  <Line number="731">** functions to enable blocking locks with timeouts, to change the</Line>
  <Line number="732">** locking strategy (for example to use dot-file locks), to inquire</Line>
  <Line number="733">** about the status of a lock, or to break stale locks.  The SQLite</Line>
  <Line number="734">** core reserves all opcodes less than 100 for its own use.</Line>
  <Line number="735">** A [file control opcodes | list of opcodes] less than 100 is available.</Line>
  <Line number="736">** Applications that define a custom xFileControl method should use opcodes</Line>
  <Line number="737">** greater than 100 to avoid conflicts.  VFS implementations should</Line>
  <Line number="738">** return [SQLITE_NOTFOUND] for file control opcodes that they do not</Line>
  <Line number="739">** recognize.</Line>
  <Line number="740">**</Line>
  <Line number="741">** The xSectorSize() method returns the sector size of the</Line>
  <Line number="742">** device that underlies the file.  The sector size is the</Line>
  <Line number="743">** minimum write that can be performed without disturbing</Line>
  <Line number="744">** other bytes in the file.  The xDeviceCharacteristics()</Line>
  <Line number="745">** method returns a bit vector describing behaviors of the</Line>
  <Line number="746">** underlying device:</Line>
  <Line number="747">**</Line>
  <Line number="748">** &lt;ul&gt;</Line>
  <Line number="749">** &lt;li&gt; [SQLITE_IOCAP_ATOMIC]</Line>
  <Line number="750">** &lt;li&gt; [SQLITE_IOCAP_ATOMIC512]</Line>
  <Line number="751">** &lt;li&gt; [SQLITE_IOCAP_ATOMIC1K]</Line>
  <Line number="752">** &lt;li&gt; [SQLITE_IOCAP_ATOMIC2K]</Line>
  <Line number="753">** &lt;li&gt; [SQLITE_IOCAP_ATOMIC4K]</Line>
  <Line number="754">** &lt;li&gt; [SQLITE_IOCAP_ATOMIC8K]</Line>
  <Line number="755">** &lt;li&gt; [SQLITE_IOCAP_ATOMIC16K]</Line>
  <Line number="756">** &lt;li&gt; [SQLITE_IOCAP_ATOMIC32K]</Line>
  <Line number="757">** &lt;li&gt; [SQLITE_IOCAP_ATOMIC64K]</Line>
  <Line number="758">** &lt;li&gt; [SQLITE_IOCAP_SAFE_APPEND]</Line>
  <Line number="759">** &lt;li&gt; [SQLITE_IOCAP_SEQUENTIAL]</Line>
  <Line number="760">** &lt;li&gt; [SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN]</Line>
  <Line number="761">** &lt;li&gt; [SQLITE_IOCAP_POWERSAFE_OVERWRITE]</Line>
  <Line number="762">** &lt;li&gt; [SQLITE_IOCAP_IMMUTABLE]</Line>
  <Line number="763">** &lt;li&gt; [SQLITE_IOCAP_BATCH_ATOMIC]</Line>
  <Line number="764">** &lt;/ul&gt;</Line>
  <Line number="765">**</Line>
  <Line number="766">** The SQLITE_IOCAP_ATOMIC property means that all writes of</Line>
  <Line number="767">** any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values</Line>
  <Line number="768">** mean that writes of blocks that are nnn bytes in size and</Line>
  <Line number="769">** are aligned to an address which is an integer multiple of</Line>
  <Line number="770">** nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means</Line>
  <Line number="771">** that when data is appended to a file, the data is appended</Line>
  <Line number="772">** first then the size of the file is extended, never the other</Line>
  <Line number="773">** way around.  The SQLITE_IOCAP_SEQUENTIAL property means that</Line>
  <Line number="774">** information is written to disk in the same order as calls</Line>
  <Line number="775">** to xWrite().</Line>
  <Line number="776">**</Line>
  <Line number="777">** If xRead() returns SQLITE_IOERR_SHORT_READ it must also fill</Line>
  <Line number="778">** in the unread portions of the buffer with zeros.  A VFS that</Line>
  <Line number="779">** fails to zero-fill short reads might seem to work.  However,</Line>
  <Line number="780">** failure to zero-fill short reads will eventually lead to</Line>
  <Line number="781">** database corruption.</Line>
  <Line number="782">*/</Line>
  <Line number="783">typedef struct sqlite3_io_methods sqlite3_io_methods;</Line>
  <Line number="784">struct sqlite3_io_methods {</Line>
  <Line number="785">  int iVersion;</Line>
  <Line number="786">  int (*xClose)(sqlite3_file*);</Line>
  <Line number="787">  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);</Line>
  <Line number="788">  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);</Line>
  <Line number="789">  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);</Line>
  <Line number="790">  int (*xSync)(sqlite3_file*, int flags);</Line>
  <Line number="791">  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);</Line>
  <Line number="792">  int (*xLock)(sqlite3_file*, int);</Line>
  <Line number="793">  int (*xUnlock)(sqlite3_file*, int);</Line>
  <Line number="794">  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);</Line>
  <Line number="795">  int (*xFileControl)(sqlite3_file*, int op, void *pArg);</Line>
  <Line number="796">  int (*xSectorSize)(sqlite3_file*);</Line>
  <Line number="797">  int (*xDeviceCharacteristics)(sqlite3_file*);</Line>
  <Line number="798">  /* Methods above are valid for version 1 */</Line>
  <Line number="799">  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);</Line>
  <Line number="800">  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);</Line>
  <Line number="801">  void (*xShmBarrier)(sqlite3_file*);</Line>
  <Line number="802">  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);</Line>
  <Line number="803">  /* Methods above are valid for version 2 */</Line>
  <Line number="804">  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);</Line>
  <Line number="805">  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);</Line>
  <Line number="806">  /* Methods above are valid for version 3 */</Line>
  <Line number="807">  /* Additional methods may be added in future releases */</Line>
  <Line number="808">};</Line>
  <Line number="809"></Line>
  <Line number="810">/*</Line>
  <Line number="811">** CAPI3REF: Standard File Control Opcodes</Line>
  <Line number="812">** KEYWORDS: {file control opcodes} {file control opcode}</Line>
  <Line number="813">**</Line>
  <Line number="814">** These integer constants are opcodes for the xFileControl method</Line>
  <Line number="815">** of the [sqlite3_io_methods] object and for the [sqlite3_file_control()]</Line>
  <Line number="816">** interface.</Line>
  <Line number="817">**</Line>
  <Line number="818">** &lt;ul&gt;</Line>
  <Line number="819">** &lt;li&gt;[[SQLITE_FCNTL_LOCKSTATE]]</Line>
  <Line number="820">** The [SQLITE_FCNTL_LOCKSTATE] opcode is used for debugging.  This</Line>
  <Line number="821">** opcode causes the xFileControl method to write the current state of</Line>
  <Line number="822">** the lock (one of [SQLITE_LOCK_NONE], [SQLITE_LOCK_SHARED],</Line>
  <Line number="823">** [SQLITE_LOCK_RESERVED], [SQLITE_LOCK_PENDING], or [SQLITE_LOCK_EXCLUSIVE])</Line>
  <Line number="824">** into an integer that the pArg argument points to. This capability</Line>
  <Line number="825">** is used during testing and is only available when the SQLITE_TEST</Line>
  <Line number="826">** compile-time option is used.</Line>
  <Line number="827">**</Line>
  <Line number="828">** &lt;li&gt;[[SQLITE_FCNTL_SIZE_HINT]]</Line>
  <Line number="829">** The [SQLITE_FCNTL_SIZE_HINT] opcode is used by SQLite to give the VFS</Line>
  <Line number="830">** layer a hint of how large the database file will grow to be during the</Line>
  <Line number="831">** current transaction.  This hint is not guaranteed to be accurate but it</Line>
  <Line number="832">** is often close.  The underlying VFS might choose to preallocate database</Line>
  <Line number="833">** file space based on this hint in order to help writes to the database</Line>
  <Line number="834">** file run faster.</Line>
  <Line number="835">**</Line>
  <Line number="836">** &lt;li&gt;[[SQLITE_FCNTL_SIZE_LIMIT]]</Line>
  <Line number="837">** The [SQLITE_FCNTL_SIZE_LIMIT] opcode is used by in-memory VFS that</Line>
  <Line number="838">** implements [sqlite3_deserialize()] to set an upper bound on the size</Line>
  <Line number="839">** of the in-memory database.  The argument is a pointer to a [sqlite3_int64].</Line>
  <Line number="840">** If the integer pointed to is negative, then it is filled in with the</Line>
  <Line number="841">** current limit.  Otherwise the limit is set to the larger of the value</Line>
  <Line number="842">** of the integer pointed to and the current database size.  The integer</Line>
  <Line number="843">** pointed to is set to the new limit.</Line>
  <Line number="844">**</Line>
  <Line number="845">** &lt;li&gt;[[SQLITE_FCNTL_CHUNK_SIZE]]</Line>
  <Line number="846">** The [SQLITE_FCNTL_CHUNK_SIZE] opcode is used to request that the VFS</Line>
  <Line number="847">** extends and truncates the database file in chunks of a size specified</Line>
  <Line number="848">** by the user. The fourth argument to [sqlite3_file_control()] should</Line>
  <Line number="849">** point to an integer (type int) containing the new chunk-size to use</Line>
  <Line number="850">** for the nominated database. Allocating database file space in large</Line>
  <Line number="851">** chunks (say 1MB at a time), may reduce file-system fragmentation and</Line>
  <Line number="852">** improve performance on some systems.</Line>
  <Line number="853">**</Line>
  <Line number="854">** &lt;li&gt;[[SQLITE_FCNTL_FILE_POINTER]]</Line>
  <Line number="855">** The [SQLITE_FCNTL_FILE_POINTER] opcode is used to obtain a pointer</Line>
  <Line number="856">** to the [sqlite3_file] object associated with a particular database</Line>
  <Line number="857">** connection.  See also [SQLITE_FCNTL_JOURNAL_POINTER].</Line>
  <Line number="858">**</Line>
  <Line number="859">** &lt;li&gt;[[SQLITE_FCNTL_JOURNAL_POINTER]]</Line>
  <Line number="860">** The [SQLITE_FCNTL_JOURNAL_POINTER] opcode is used to obtain a pointer</Line>
  <Line number="861">** to the [sqlite3_file] object associated with the journal file (either</Line>
  <Line number="862">** the [rollback journal] or the [write-ahead log]) for a particular database</Line>
  <Line number="863">** connection.  See also [SQLITE_FCNTL_FILE_POINTER].</Line>
  <Line number="864">**</Line>
  <Line number="865">** &lt;li&gt;[[SQLITE_FCNTL_SYNC_OMITTED]]</Line>
  <Line number="866">** No longer in use.</Line>
  <Line number="867">**</Line>
  <Line number="868">** &lt;li&gt;[[SQLITE_FCNTL_SYNC]]</Line>
  <Line number="869">** The [SQLITE_FCNTL_SYNC] opcode is generated internally by SQLite and</Line>
  <Line number="870">** sent to the VFS immediately before the xSync method is invoked on a</Line>
  <Line number="871">** database file descriptor. Or, if the xSync method is not invoked</Line>
  <Line number="872">** because the user has configured SQLite with</Line>
  <Line number="873">** [PRAGMA synchronous | PRAGMA synchronous=OFF] it is invoked in place</Line>
  <Line number="874">** of the xSync method. In most cases, the pointer argument passed with</Line>
  <Line number="875">** this file-control is NULL. However, if the database file is being synced</Line>
  <Line number="876">** as part of a multi-database commit, the argument points to a nul-terminated</Line>
  <Line number="877">** string containing the transactions super-journal file name. VFSes that</Line>
  <Line number="878">** do not need this signal should silently ignore this opcode. Applications</Line>
  <Line number="879">** should not call [sqlite3_file_control()] with this opcode as doing so may</Line>
  <Line number="880">** disrupt the operation of the specialized VFSes that do require it.</Line>
  <Line number="881">**</Line>
  <Line number="882">** &lt;li&gt;[[SQLITE_FCNTL_COMMIT_PHASETWO]]</Line>
  <Line number="883">** The [SQLITE_FCNTL_COMMIT_PHASETWO] opcode is generated internally by SQLite</Line>
  <Line number="884">** and sent to the VFS after a transaction has been committed immediately</Line>
  <Line number="885">** but before the database is unlocked. VFSes that do not need this signal</Line>
  <Line number="886">** should silently ignore this opcode. Applications should not call</Line>
  <Line number="887">** [sqlite3_file_control()] with this opcode as doing so may disrupt the</Line>
  <Line number="888">** operation of the specialized VFSes that do require it.</Line>
  <Line number="889">**</Line>
  <Line number="890">** &lt;li&gt;[[SQLITE_FCNTL_WIN32_AV_RETRY]]</Line>
  <Line number="891">** ^The [SQLITE_FCNTL_WIN32_AV_RETRY] opcode is used to configure automatic</Line>
  <Line number="892">** retry counts and intervals for certain disk I/O operations for the</Line>
  <Line number="893">** windows [VFS] in order to provide robustness in the presence of</Line>
  <Line number="894">** anti-virus programs.  By default, the windows VFS will retry file read,</Line>
  <Line number="895">** file write, and file delete operations up to 10 times, with a delay</Line>
  <Line number="896">** of 25 milliseconds before the first retry and with the delay increasing</Line>
  <Line number="897">** by an additional 25 milliseconds with each subsequent retry.  This</Line>
  <Line number="898">** opcode allows these two values (10 retries and 25 milliseconds of delay)</Line>
  <Line number="899">** to be adjusted.  The values are changed for all database connections</Line>
  <Line number="900">** within the same process.  The argument is a pointer to an array of two</Line>
  <Line number="901">** integers where the first integer is the new retry count and the second</Line>
  <Line number="902">** integer is the delay.  If either integer is negative, then the setting</Line>
  <Line number="903">** is not changed but instead the prior value of that setting is written</Line>
  <Line number="904">** into the array entry, allowing the current retry settings to be</Line>
  <Line number="905">** interrogated.  The zDbName parameter is ignored.</Line>
  <Line number="906">**</Line>
  <Line number="907">** &lt;li&gt;[[SQLITE_FCNTL_PERSIST_WAL]]</Line>
  <Line number="908">** ^The [SQLITE_FCNTL_PERSIST_WAL] opcode is used to set or query the</Line>
  <Line number="909">** persistent [WAL | Write Ahead Log] setting.  By default, the auxiliary</Line>
  <Line number="910">** write ahead log ([WAL file]) and shared memory</Line>
  <Line number="911">** files used for transaction control</Line>
  <Line number="912">** are automatically deleted when the latest connection to the database</Line>
  <Line number="913">** closes.  Setting persistent WAL mode causes those files to persist after</Line>
  <Line number="914">** close.  Persisting the files is useful when other processes that do not</Line>
  <Line number="915">** have write permission on the directory containing the database file want</Line>
  <Line number="916">** to read the database file, as the WAL and shared memory files must exist</Line>
  <Line number="917">** in order for the database to be readable.  The fourth parameter to</Line>
  <Line number="918">** [sqlite3_file_control()] for this opcode should be a pointer to an integer.</Line>
  <Line number="919">** That integer is 0 to disable persistent WAL mode or 1 to enable persistent</Line>
  <Line number="920">** WAL mode.  If the integer is -1, then it is overwritten with the current</Line>
  <Line number="921">** WAL persistence setting.</Line>
  <Line number="922">**</Line>
  <Line number="923">** &lt;li&gt;[[SQLITE_FCNTL_POWERSAFE_OVERWRITE]]</Line>
  <Line number="924">** ^The [SQLITE_FCNTL_POWERSAFE_OVERWRITE] opcode is used to set or query the</Line>
  <Line number="925">** persistent &quot;powersafe-overwrite&quot; or &quot;PSOW&quot; setting.  The PSOW setting</Line>
  <Line number="926">** determines the [SQLITE_IOCAP_POWERSAFE_OVERWRITE] bit of the</Line>
  <Line number="927">** xDeviceCharacteristics methods. The fourth parameter to</Line>
  <Line number="928">** [sqlite3_file_control()] for this opcode should be a pointer to an integer.</Line>
  <Line number="929">** That integer is 0 to disable zero-damage mode or 1 to enable zero-damage</Line>
  <Line number="930">** mode.  If the integer is -1, then it is overwritten with the current</Line>
  <Line number="931">** zero-damage mode setting.</Line>
  <Line number="932">**</Line>
  <Line number="933">** &lt;li&gt;[[SQLITE_FCNTL_OVERWRITE]]</Line>
  <Line number="934">** ^The [SQLITE_FCNTL_OVERWRITE] opcode is invoked by SQLite after opening</Line>
  <Line number="935">** a write transaction to indicate that, unless it is rolled back for some</Line>
  <Line number="936">** reason, the entire database file will be overwritten by the current</Line>
  <Line number="937">** transaction. This is used by VACUUM operations.</Line>
  <Line number="938">**</Line>
  <Line number="939">** &lt;li&gt;[[SQLITE_FCNTL_VFSNAME]]</Line>
  <Line number="940">** ^The [SQLITE_FCNTL_VFSNAME] opcode can be used to obtain the names of</Line>
  <Line number="941">** all [VFSes] in the VFS stack.  The names are of all VFS shims and the</Line>
  <Line number="942">** final bottom-level VFS are written into memory obtained from</Line>
  <Line number="943">** [sqlite3_malloc()] and the result is stored in the char* variable</Line>
  <Line number="944">** that the fourth parameter of [sqlite3_file_control()] points to.</Line>
  <Line number="945">** The caller is responsible for freeing the memory when done.  As with</Line>
  <Line number="946">** all file-control actions, there is no guarantee that this will actually</Line>
  <Line number="947">** do anything.  Callers should initialize the char* variable to a NULL</Line>
  <Line number="948">** pointer in case this file-control is not implemented.  This file-control</Line>
  <Line number="949">** is intended for diagnostic use only.</Line>
  <Line number="950">**</Line>
  <Line number="951">** &lt;li&gt;[[SQLITE_FCNTL_VFS_POINTER]]</Line>
  <Line number="952">** ^The [SQLITE_FCNTL_VFS_POINTER] opcode finds a pointer to the top-level</Line>
  <Line number="953">** [VFSes] currently in use.  ^(The argument X in</Line>
  <Line number="954">** sqlite3_file_control(db,SQLITE_FCNTL_VFS_POINTER,X) must be</Line>
  <Line number="955">** of type &quot;[sqlite3_vfs] **&quot;.  This opcodes will set *X</Line>
  <Line number="956">** to a pointer to the top-level VFS.)^</Line>
  <Line number="957">** ^When there are multiple VFS shims in the stack, this opcode finds the</Line>
  <Line number="958">** upper-most shim only.</Line>
  <Line number="959">**</Line>
  <Line number="960">** &lt;li&gt;[[SQLITE_FCNTL_PRAGMA]]</Line>
  <Line number="961">** ^Whenever a [PRAGMA] statement is parsed, an [SQLITE_FCNTL_PRAGMA]</Line>
  <Line number="962">** file control is sent to the open [sqlite3_file] object corresponding</Line>
  <Line number="963">** to the database file to which the pragma statement refers. ^The argument</Line>
  <Line number="964">** to the [SQLITE_FCNTL_PRAGMA] file control is an array of</Line>
  <Line number="965">** pointers to strings (char**) in which the second element of the array</Line>
  <Line number="966">** is the name of the pragma and the third element is the argument to the</Line>
  <Line number="967">** pragma or NULL if the pragma has no argument.  ^The handler for an</Line>
  <Line number="968">** [SQLITE_FCNTL_PRAGMA] file control can optionally make the first element</Line>
  <Line number="969">** of the char** argument point to a string obtained from [sqlite3_mprintf()]</Line>
  <Line number="970">** or the equivalent and that string will become the result of the pragma or</Line>
  <Line number="971">** the error message if the pragma fails. ^If the</Line>
  <Line number="972">** [SQLITE_FCNTL_PRAGMA] file control returns [SQLITE_NOTFOUND], then normal</Line>
  <Line number="973">** [PRAGMA] processing continues.  ^If the [SQLITE_FCNTL_PRAGMA]</Line>
  <Line number="974">** file control returns [SQLITE_OK], then the parser assumes that the</Line>
  <Line number="975">** VFS has handled the PRAGMA itself and the parser generates a no-op</Line>
  <Line number="976">** prepared statement if result string is NULL, or that returns a copy</Line>
  <Line number="977">** of the result string if the string is non-NULL.</Line>
  <Line number="978">** ^If the [SQLITE_FCNTL_PRAGMA] file control returns</Line>
  <Line number="979">** any result code other than [SQLITE_OK] or [SQLITE_NOTFOUND], that means</Line>
  <Line number="980">** that the VFS encountered an error while handling the [PRAGMA] and the</Line>
  <Line number="981">** compilation of the PRAGMA fails with an error.  ^The [SQLITE_FCNTL_PRAGMA]</Line>
  <Line number="982">** file control occurs at the beginning of pragma statement analysis and so</Line>
  <Line number="983">** it is able to override built-in [PRAGMA] statements.</Line>
  <Line number="984">**</Line>
  <Line number="985">** &lt;li&gt;[[SQLITE_FCNTL_BUSYHANDLER]]</Line>
  <Line number="986">** ^The [SQLITE_FCNTL_BUSYHANDLER]</Line>
  <Line number="987">** file-control may be invoked by SQLite on the database file handle</Line>
  <Line number="988">** shortly after it is opened in order to provide a custom VFS with access</Line>
  <Line number="989">** to the connection&apos;s busy-handler callback. The argument is of type (void**)</Line>
  <Line number="990">** - an array of two (void *) values. The first (void *) actually points</Line>
  <Line number="991">** to a function of type (int (*)(void *)). In order to invoke the connection&apos;s</Line>
  <Line number="992">** busy-handler, this function should be invoked with the second (void *) in</Line>
  <Line number="993">** the array as the only argument. If it returns non-zero, then the operation</Line>
  <Line number="994">** should be retried. If it returns zero, the custom VFS should abandon the</Line>
  <Line number="995">** current operation.</Line>
  <Line number="996">**</Line>
  <Line number="997">** &lt;li&gt;[[SQLITE_FCNTL_TEMPFILENAME]]</Line>
  <Line number="998">** ^Applications can invoke the [SQLITE_FCNTL_TEMPFILENAME] file-control</Line>
  <Line number="999">** to have SQLite generate a</Line>
  <Line number="1000">** temporary filename using the same algorithm that is followed to generate</Line>
  <Line number="1001">** temporary filenames for TEMP tables and other internal uses.  The</Line>
  <Line number="1002">** argument should be a char** which will be filled with the filename</Line>
  <Line number="1003">** written into memory obtained from [sqlite3_malloc()].  The caller should</Line>
  <Line number="1004">** invoke [sqlite3_free()] on the result to avoid a memory leak.</Line>
  <Line number="1005">**</Line>
  <Line number="1006">** &lt;li&gt;[[SQLITE_FCNTL_MMAP_SIZE]]</Line>
  <Line number="1007">** The [SQLITE_FCNTL_MMAP_SIZE] file control is used to query or set the</Line>
  <Line number="1008">** maximum number of bytes that will be used for memory-mapped I/O.</Line>
  <Line number="1009">** The argument is a pointer to a value of type sqlite3_int64 that</Line>
  <Line number="1010">** is an advisory maximum number of bytes in the file to memory map.  The</Line>
  <Line number="1011">** pointer is overwritten with the old value.  The limit is not changed if</Line>
  <Line number="1012">** the value originally pointed to is negative, and so the current limit</Line>
  <Line number="1013">** can be queried by passing in a pointer to a negative number.  This</Line>
  <Line number="1014">** file-control is used internally to implement [PRAGMA mmap_size].</Line>
  <Line number="1015">**</Line>
  <Line number="1016">** &lt;li&gt;[[SQLITE_FCNTL_TRACE]]</Line>
  <Line number="1017">** The [SQLITE_FCNTL_TRACE] file control provides advisory information</Line>
  <Line number="1018">** to the VFS about what the higher layers of the SQLite stack are doing.</Line>
  <Line number="1019">** This file control is used by some VFS activity tracing [shims].</Line>
  <Line number="1020">** The argument is a zero-terminated string.  Higher layers in the</Line>
  <Line number="1021">** SQLite stack may generate instances of this file control if</Line>
  <Line number="1022">** the [SQLITE_USE_FCNTL_TRACE] compile-time option is enabled.</Line>
  <Line number="1023">**</Line>
  <Line number="1024">** &lt;li&gt;[[SQLITE_FCNTL_HAS_MOVED]]</Line>
  <Line number="1025">** The [SQLITE_FCNTL_HAS_MOVED] file control interprets its argument as a</Line>
  <Line number="1026">** pointer to an integer and it writes a boolean into that integer depending</Line>
  <Line number="1027">** on whether or not the file has been renamed, moved, or deleted since it</Line>
  <Line number="1028">** was first opened.</Line>
  <Line number="1029">**</Line>
  <Line number="1030">** &lt;li&gt;[[SQLITE_FCNTL_WIN32_GET_HANDLE]]</Line>
  <Line number="1031">** The [SQLITE_FCNTL_WIN32_GET_HANDLE] opcode can be used to obtain the</Line>
  <Line number="1032">** underlying native file handle associated with a file handle.  This file</Line>
  <Line number="1033">** control interprets its argument as a pointer to a native file handle and</Line>
  <Line number="1034">** writes the resulting value there.</Line>
  <Line number="1035">**</Line>
  <Line number="1036">** &lt;li&gt;[[SQLITE_FCNTL_WIN32_SET_HANDLE]]</Line>
  <Line number="1037">** The [SQLITE_FCNTL_WIN32_SET_HANDLE] opcode is used for debugging.  This</Line>
  <Line number="1038">** opcode causes the xFileControl method to swap the file handle with the one</Line>
  <Line number="1039">** pointed to by the pArg argument.  This capability is used during testing</Line>
  <Line number="1040">** and only needs to be supported when SQLITE_TEST is defined.</Line>
  <Line number="1041">**</Line>
  <Line number="1042">** &lt;li&gt;[[SQLITE_FCNTL_WAL_BLOCK]]</Line>
  <Line number="1043">** The [SQLITE_FCNTL_WAL_BLOCK] is a signal to the VFS layer that it might</Line>
  <Line number="1044">** be advantageous to block on the next WAL lock if the lock is not immediately</Line>
  <Line number="1045">** available.  The WAL subsystem issues this signal during rare</Line>
  <Line number="1046">** circumstances in order to fix a problem with priority inversion.</Line>
  <Line number="1047">** Applications should &lt;em&gt;not&lt;/em&gt; use this file-control.</Line>
  <Line number="1048">**</Line>
  <Line number="1049">** &lt;li&gt;[[SQLITE_FCNTL_ZIPVFS]]</Line>
  <Line number="1050">** The [SQLITE_FCNTL_ZIPVFS] opcode is implemented by zipvfs only. All other</Line>
  <Line number="1051">** VFS should return SQLITE_NOTFOUND for this opcode.</Line>
  <Line number="1052">**</Line>
  <Line number="1053">** &lt;li&gt;[[SQLITE_FCNTL_RBU]]</Line>
  <Line number="1054">** The [SQLITE_FCNTL_RBU] opcode is implemented by the special VFS used by</Line>
  <Line number="1055">** the RBU extension only.  All other VFS should return SQLITE_NOTFOUND for</Line>
  <Line number="1056">** this opcode.</Line>
  <Line number="1057">**</Line>
  <Line number="1058">** &lt;li&gt;[[SQLITE_FCNTL_BEGIN_ATOMIC_WRITE]]</Line>
  <Line number="1059">** If the [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE] opcode returns SQLITE_OK, then</Line>
  <Line number="1060">** the file descriptor is placed in &quot;batch write mode&quot;, which</Line>
  <Line number="1061">** means all subsequent write operations will be deferred and done</Line>
  <Line number="1062">** atomically at the next [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE].  Systems</Line>
  <Line number="1063">** that do not support batch atomic writes will return SQLITE_NOTFOUND.</Line>
  <Line number="1064">** ^Following a successful SQLITE_FCNTL_BEGIN_ATOMIC_WRITE and prior to</Line>
  <Line number="1065">** the closing [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE] or</Line>
  <Line number="1066">** [SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE], SQLite will make</Line>
  <Line number="1067">** no VFS interface calls on the same [sqlite3_file] file descriptor</Line>
  <Line number="1068">** except for calls to the xWrite method and the xFileControl method</Line>
  <Line number="1069">** with [SQLITE_FCNTL_SIZE_HINT].</Line>
  <Line number="1070">**</Line>
  <Line number="1071">** &lt;li&gt;[[SQLITE_FCNTL_COMMIT_ATOMIC_WRITE]]</Line>
  <Line number="1072">** The [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE] opcode causes all write</Line>
  <Line number="1073">** operations since the previous successful call to</Line>
  <Line number="1074">** [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE] to be performed atomically.</Line>
  <Line number="1075">** This file control returns [SQLITE_OK] if and only if the writes were</Line>
  <Line number="1076">** all performed successfully and have been committed to persistent storage.</Line>
  <Line number="1077">** ^Regardless of whether or not it is successful, this file control takes</Line>
  <Line number="1078">** the file descriptor out of batch write mode so that all subsequent</Line>
  <Line number="1079">** write operations are independent.</Line>
  <Line number="1080">** ^SQLite will never invoke SQLITE_FCNTL_COMMIT_ATOMIC_WRITE without</Line>
  <Line number="1081">** a prior successful call to [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE].</Line>
  <Line number="1082">**</Line>
  <Line number="1083">** &lt;li&gt;[[SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE]]</Line>
  <Line number="1084">** The [SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE] opcode causes all write</Line>
  <Line number="1085">** operations since the previous successful call to</Line>
  <Line number="1086">** [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE] to be rolled back.</Line>
  <Line number="1087">** ^This file control takes the file descriptor out of batch write mode</Line>
  <Line number="1088">** so that all subsequent write operations are independent.</Line>
  <Line number="1089">** ^SQLite will never invoke SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE without</Line>
  <Line number="1090">** a prior successful call to [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE].</Line>
  <Line number="1091">**</Line>
  <Line number="1092">** &lt;li&gt;[[SQLITE_FCNTL_LOCK_TIMEOUT]]</Line>
  <Line number="1093">** The [SQLITE_FCNTL_LOCK_TIMEOUT] opcode is used to configure a VFS</Line>
  <Line number="1094">** to block for up to M milliseconds before failing when attempting to</Line>
  <Line number="1095">** obtain a file lock using the xLock or xShmLock methods of the VFS.</Line>
  <Line number="1096">** The parameter is a pointer to a 32-bit signed integer that contains</Line>
  <Line number="1097">** the value that M is to be set to. Before returning, the 32-bit signed</Line>
  <Line number="1098">** integer is overwritten with the previous value of M.</Line>
  <Line number="1099">**</Line>
  <Line number="1100">** &lt;li&gt;[[SQLITE_FCNTL_DATA_VERSION]]</Line>
  <Line number="1101">** The [SQLITE_FCNTL_DATA_VERSION] opcode is used to detect changes to</Line>
  <Line number="1102">** a database file.  The argument is a pointer to a 32-bit unsigned integer.</Line>
  <Line number="1103">** The &quot;data version&quot; for the pager is written into the pointer.  The</Line>
  <Line number="1104">** &quot;data version&quot; changes whenever any change occurs to the corresponding</Line>
  <Line number="1105">** database file, either through SQL statements on the same database</Line>
  <Line number="1106">** connection or through transactions committed by separate database</Line>
  <Line number="1107">** connections possibly in other processes. The [sqlite3_total_changes()]</Line>
  <Line number="1108">** interface can be used to find if any database on the connection has changed,</Line>
  <Line number="1109">** but that interface responds to changes on TEMP as well as MAIN and does</Line>
  <Line number="1110">** not provide a mechanism to detect changes to MAIN only.  Also, the</Line>
  <Line number="1111">** [sqlite3_total_changes()] interface responds to internal changes only and</Line>
  <Line number="1112">** omits changes made by other database connections.  The</Line>
  <Line number="1113">** [PRAGMA data_version] command provides a mechanism to detect changes to</Line>
  <Line number="1114">** a single attached database that occur due to other database connections,</Line>
  <Line number="1115">** but omits changes implemented by the database connection on which it is</Line>
  <Line number="1116">** called.  This file control is the only mechanism to detect changes that</Line>
  <Line number="1117">** happen either internally or externally and that are associated with</Line>
  <Line number="1118">** a particular attached database.</Line>
  <Line number="1119">**</Line>
  <Line number="1120">** &lt;li&gt;[[SQLITE_FCNTL_CKPT_START]]</Line>
  <Line number="1121">** The [SQLITE_FCNTL_CKPT_START] opcode is invoked from within a checkpoint</Line>
  <Line number="1122">** in wal mode before the client starts to copy pages from the wal</Line>
  <Line number="1123">** file to the database file.</Line>
  <Line number="1124">**</Line>
  <Line number="1125">** &lt;li&gt;[[SQLITE_FCNTL_CKPT_DONE]]</Line>
  <Line number="1126">** The [SQLITE_FCNTL_CKPT_DONE] opcode is invoked from within a checkpoint</Line>
  <Line number="1127">** in wal mode after the client has finished copying pages from the wal</Line>
  <Line number="1128">** file to the database file, but before the *-shm file is updated to</Line>
  <Line number="1129">** record the fact that the pages have been checkpointed.</Line>
  <Line number="1130">** &lt;/ul&gt;</Line>
  <Line number="1131">**</Line>
  <Line number="1132">** &lt;li&gt;[[SQLITE_FCNTL_EXTERNAL_READER]]</Line>
  <Line number="1133">** The EXPERIMENTAL [SQLITE_FCNTL_EXTERNAL_READER] opcode is used to detect</Line>
  <Line number="1134">** whether or not there is a database client in another process with a wal-mode</Line>
  <Line number="1135">** transaction open on the database or not. It is only available on unix.The</Line>
  <Line number="1136">** (void*) argument passed with this file-control should be a pointer to a</Line>
  <Line number="1137">** value of type (int). The integer value is set to 1 if the database is a wal</Line>
  <Line number="1138">** mode database and there exists at least one client in another process that</Line>
  <Line number="1139">** currently has an SQL transaction open on the database. It is set to 0 if</Line>
  <Line number="1140">** the database is not a wal-mode db, or if there is no such connection in any</Line>
  <Line number="1141">** other process. This opcode cannot be used to detect transactions opened</Line>
  <Line number="1142">** by clients within the current process, only within other processes.</Line>
  <Line number="1143">** &lt;/ul&gt;</Line>
  <Line number="1144">**</Line>
  <Line number="1145">** &lt;li&gt;[[SQLITE_FCNTL_CKSM_FILE]]</Line>
  <Line number="1146">** Used by the cksmvfs VFS module only.</Line>
  <Line number="1147">** &lt;/ul&gt;</Line>
  <Line number="1148">*/</Line>
  <Line number="1149">#define SQLITE_FCNTL_LOCKSTATE               1</Line>
  <Line number="1150">#define SQLITE_FCNTL_GET_LOCKPROXYFILE       2</Line>
  <Line number="1151">#define SQLITE_FCNTL_SET_LOCKPROXYFILE       3</Line>
  <Line number="1152">#define SQLITE_FCNTL_LAST_ERRNO              4</Line>
  <Line number="1153">#define SQLITE_FCNTL_SIZE_HINT               5</Line>
  <Line number="1154">#define SQLITE_FCNTL_CHUNK_SIZE              6</Line>
  <Line number="1155">#define SQLITE_FCNTL_FILE_POINTER            7</Line>
  <Line number="1156">#define SQLITE_FCNTL_SYNC_OMITTED            8</Line>
  <Line number="1157">#define SQLITE_FCNTL_WIN32_AV_RETRY          9</Line>
  <Line number="1158">#define SQLITE_FCNTL_PERSIST_WAL            10</Line>
  <Line number="1159">#define SQLITE_FCNTL_OVERWRITE              11</Line>
  <Line number="1160">#define SQLITE_FCNTL_VFSNAME                12</Line>
  <Line number="1161">#define SQLITE_FCNTL_POWERSAFE_OVERWRITE    13</Line>
  <Line number="1162">#define SQLITE_FCNTL_PRAGMA                 14</Line>
  <Line number="1163">#define SQLITE_FCNTL_BUSYHANDLER            15</Line>
  <Line number="1164">#define SQLITE_FCNTL_TEMPFILENAME           16</Line>
  <Line number="1165">#define SQLITE_FCNTL_MMAP_SIZE              18</Line>
  <Line number="1166">#define SQLITE_FCNTL_TRACE                  19</Line>
  <Line number="1167">#define SQLITE_FCNTL_HAS_MOVED              20</Line>
  <Line number="1168">#define SQLITE_FCNTL_SYNC                   21</Line>
  <Line number="1169">#define SQLITE_FCNTL_COMMIT_PHASETWO        22</Line>
  <Line number="1170">#define SQLITE_FCNTL_WIN32_SET_HANDLE       23</Line>
  <Line number="1171">#define SQLITE_FCNTL_WAL_BLOCK              24</Line>
  <Line number="1172">#define SQLITE_FCNTL_ZIPVFS                 25</Line>
  <Line number="1173">#define SQLITE_FCNTL_RBU                    26</Line>
  <Line number="1174">#define SQLITE_FCNTL_VFS_POINTER            27</Line>
  <Line number="1175">#define SQLITE_FCNTL_JOURNAL_POINTER        28</Line>
  <Line number="1176">#define SQLITE_FCNTL_WIN32_GET_HANDLE       29</Line>
  <Line number="1177">#define SQLITE_FCNTL_PDB                    30</Line>
  <Line number="1178">#define SQLITE_FCNTL_BEGIN_ATOMIC_WRITE     31</Line>
  <Line number="1179">#define SQLITE_FCNTL_COMMIT_ATOMIC_WRITE    32</Line>
  <Line number="1180">#define SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE  33</Line>
  <Line number="1181">#define SQLITE_FCNTL_LOCK_TIMEOUT           34</Line>
  <Line number="1182">#define SQLITE_FCNTL_DATA_VERSION           35</Line>
  <Line number="1183">#define SQLITE_FCNTL_SIZE_LIMIT             36</Line>
  <Line number="1184">#define SQLITE_FCNTL_CKPT_DONE              37</Line>
  <Line number="1185">#define SQLITE_FCNTL_RESERVE_BYTES          38</Line>
  <Line number="1186">#define SQLITE_FCNTL_CKPT_START             39</Line>
  <Line number="1187">#define SQLITE_FCNTL_EXTERNAL_READER        40</Line>
  <Line number="1188">#define SQLITE_FCNTL_CKSM_FILE              41</Line>
  <Line number="1189"></Line>
  <Line number="1190">/* deprecated names */</Line>
  <Line number="1191">#define SQLITE_GET_LOCKPROXYFILE      SQLITE_FCNTL_GET_LOCKPROXYFILE</Line>
  <Line number="1192">#define SQLITE_SET_LOCKPROXYFILE      SQLITE_FCNTL_SET_LOCKPROXYFILE</Line>
  <Line number="1193">#define SQLITE_LAST_ERRNO             SQLITE_FCNTL_LAST_ERRNO</Line>
  <Line number="1194"></Line>
  <Line number="1195"></Line>
  <Line number="1196">/*</Line>
  <Line number="1197">** CAPI3REF: Mutex Handle</Line>
  <Line number="1198">**</Line>
  <Line number="1199">** The mutex module within SQLite defines [sqlite3_mutex] to be an</Line>
  <Line number="1200">** abstract type for a mutex object.  The SQLite core never looks</Line>
  <Line number="1201">** at the internal representation of an [sqlite3_mutex].  It only</Line>
  <Line number="1202">** deals with pointers to the [sqlite3_mutex] object.</Line>
  <Line number="1203">**</Line>
  <Line number="1204">** Mutexes are created using [sqlite3_mutex_alloc()].</Line>
  <Line number="1205">*/</Line>
  <Line number="1206">typedef struct sqlite3_mutex sqlite3_mutex;</Line>
  <Line number="1207"></Line>
  <Line number="1208">/*</Line>
  <Line number="1209">** CAPI3REF: Loadable Extension Thunk</Line>
  <Line number="1210">**</Line>
  <Line number="1211">** A pointer to the opaque sqlite3_api_routines structure is passed as</Line>
  <Line number="1212">** the third parameter to entry points of [loadable extensions].  This</Line>
  <Line number="1213">** structure must be typedefed in order to work around compiler warnings</Line>
  <Line number="1214">** on some platforms.</Line>
  <Line number="1215">*/</Line>
  <Line number="1216">typedef struct sqlite3_api_routines sqlite3_api_routines;</Line>
  <Line number="1217"></Line>
  <Line number="1218">/*</Line>
  <Line number="1219">** CAPI3REF: OS Interface Object</Line>
  <Line number="1220">**</Line>
  <Line number="1221">** An instance of the sqlite3_vfs object defines the interface between</Line>
  <Line number="1222">** the SQLite core and the underlying operating system.  The &quot;vfs&quot;</Line>
  <Line number="1223">** in the name of the object stands for &quot;virtual file system&quot;.  See</Line>
  <Line number="1224">** the [VFS | VFS documentation] for further information.</Line>
  <Line number="1225">**</Line>
  <Line number="1226">** The VFS interface is sometimes extended by adding new methods onto</Line>
  <Line number="1227">** the end.  Each time such an extension occurs, the iVersion field</Line>
  <Line number="1228">** is incremented.  The iVersion value started out as 1 in</Line>
  <Line number="1229">** SQLite [version 3.5.0] on [dateof:3.5.0], then increased to 2</Line>
  <Line number="1230">** with SQLite [version 3.7.0] on [dateof:3.7.0], and then increased</Line>
  <Line number="1231">** to 3 with SQLite [version 3.7.6] on [dateof:3.7.6].  Additional fields</Line>
  <Line number="1232">** may be appended to the sqlite3_vfs object and the iVersion value</Line>
  <Line number="1233">** may increase again in future versions of SQLite.</Line>
  <Line number="1234">** Note that due to an oversight, the structure</Line>
  <Line number="1235">** of the sqlite3_vfs object changed in the transition from</Line>
  <Line number="1236">** SQLite [version 3.5.9] to [version 3.6.0] on [dateof:3.6.0]</Line>
  <Line number="1237">** and yet the iVersion field was not increased.</Line>
  <Line number="1238">**</Line>
  <Line number="1239">** The szOsFile field is the size of the subclassed [sqlite3_file]</Line>
  <Line number="1240">** structure used by this VFS.  mxPathname is the maximum length of</Line>
  <Line number="1241">** a pathname in this VFS.</Line>
  <Line number="1242">**</Line>
  <Line number="1243">** Registered sqlite3_vfs objects are kept on a linked list formed by</Line>
  <Line number="1244">** the pNext pointer.  The [sqlite3_vfs_register()]</Line>
  <Line number="1245">** and [sqlite3_vfs_unregister()] interfaces manage this list</Line>
  <Line number="1246">** in a thread-safe way.  The [sqlite3_vfs_find()] interface</Line>
  <Line number="1247">** searches the list.  Neither the application code nor the VFS</Line>
  <Line number="1248">** implementation should use the pNext pointer.</Line>
  <Line number="1249">**</Line>
  <Line number="1250">** The pNext field is the only field in the sqlite3_vfs</Line>
  <Line number="1251">** structure that SQLite will ever modify.  SQLite will only access</Line>
  <Line number="1252">** or modify this field while holding a particular static mutex.</Line>
  <Line number="1253">** The application should never modify anything within the sqlite3_vfs</Line>
  <Line number="1254">** object once the object has been registered.</Line>
  <Line number="1255">**</Line>
  <Line number="1256">** The zName field holds the name of the VFS module.  The name must</Line>
  <Line number="1257">** be unique across all VFS modules.</Line>
  <Line number="1258">**</Line>
  <Line number="1259">** [[sqlite3_vfs.xOpen]]</Line>
  <Line number="1260">** ^SQLite guarantees that the zFilename parameter to xOpen</Line>
  <Line number="1261">** is either a NULL pointer or string obtained</Line>
  <Line number="1262">** from xFullPathname() with an optional suffix added.</Line>
  <Line number="1263">** ^If a suffix is added to the zFilename parameter, it will</Line>
  <Line number="1264">** consist of a single &quot;-&quot; character followed by no more than</Line>
  <Line number="1265">** 11 alphanumeric and/or &quot;-&quot; characters.</Line>
  <Line number="1266">** ^SQLite further guarantees that</Line>
  <Line number="1267">** the string will be valid and unchanged until xClose() is</Line>
  <Line number="1268">** called. Because of the previous sentence,</Line>
  <Line number="1269">** the [sqlite3_file] can safely store a pointer to the</Line>
  <Line number="1270">** filename if it needs to remember the filename for some reason.</Line>
  <Line number="1271">** If the zFilename parameter to xOpen is a NULL pointer then xOpen</Line>
  <Line number="1272">** must invent its own temporary name for the file.  ^Whenever the</Line>
  <Line number="1273">** xFilename parameter is NULL it will also be the case that the</Line>
  <Line number="1274">** flags parameter will include [SQLITE_OPEN_DELETEONCLOSE].</Line>
  <Line number="1275">**</Line>
  <Line number="1276">** The flags argument to xOpen() includes all bits set in</Line>
  <Line number="1277">** the flags argument to [sqlite3_open_v2()].  Or if [sqlite3_open()]</Line>
  <Line number="1278">** or [sqlite3_open16()] is used, then flags includes at least</Line>
  <Line number="1279">** [SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE].</Line>
  <Line number="1280">** If xOpen() opens a file read-only then it sets *pOutFlags to</Line>
  <Line number="1281">** include [SQLITE_OPEN_READONLY].  Other bits in *pOutFlags may be set.</Line>
  <Line number="1282">**</Line>
  <Line number="1283">** ^(SQLite will also add one of the following flags to the xOpen()</Line>
  <Line number="1284">** call, depending on the object being opened:</Line>
  <Line number="1285">**</Line>
  <Line number="1286">** &lt;ul&gt;</Line>
  <Line number="1287">** &lt;li&gt;  [SQLITE_OPEN_MAIN_DB]</Line>
  <Line number="1288">** &lt;li&gt;  [SQLITE_OPEN_MAIN_JOURNAL]</Line>
  <Line number="1289">** &lt;li&gt;  [SQLITE_OPEN_TEMP_DB]</Line>
  <Line number="1290">** &lt;li&gt;  [SQLITE_OPEN_TEMP_JOURNAL]</Line>
  <Line number="1291">** &lt;li&gt;  [SQLITE_OPEN_TRANSIENT_DB]</Line>
  <Line number="1292">** &lt;li&gt;  [SQLITE_OPEN_SUBJOURNAL]</Line>
  <Line number="1293">** &lt;li&gt;  [SQLITE_OPEN_SUPER_JOURNAL]</Line>
  <Line number="1294">** &lt;li&gt;  [SQLITE_OPEN_WAL]</Line>
  <Line number="1295">** &lt;/ul&gt;)^</Line>
  <Line number="1296">**</Line>
  <Line number="1297">** The file I/O implementation can use the object type flags to</Line>
  <Line number="1298">** change the way it deals with files.  For example, an application</Line>
  <Line number="1299">** that does not care about crash recovery or rollback might make</Line>
  <Line number="1300">** the open of a journal file a no-op.  Writes to this journal would</Line>
  <Line number="1301">** also be no-ops, and any attempt to read the journal would return</Line>
  <Line number="1302">** SQLITE_IOERR.  Or the implementation might recognize that a database</Line>
  <Line number="1303">** file will be doing page-aligned sector reads and writes in a random</Line>
  <Line number="1304">** order and set up its I/O subsystem accordingly.</Line>
  <Line number="1305">**</Line>
  <Line number="1306">** SQLite might also add one of the following flags to the xOpen method:</Line>
  <Line number="1307">**</Line>
  <Line number="1308">** &lt;ul&gt;</Line>
  <Line number="1309">** &lt;li&gt; [SQLITE_OPEN_DELETEONCLOSE]</Line>
  <Line number="1310">** &lt;li&gt; [SQLITE_OPEN_EXCLUSIVE]</Line>
  <Line number="1311">** &lt;/ul&gt;</Line>
  <Line number="1312">**</Line>
  <Line number="1313">** The [SQLITE_OPEN_DELETEONCLOSE] flag means the file should be</Line>
  <Line number="1314">** deleted when it is closed.  ^The [SQLITE_OPEN_DELETEONCLOSE]</Line>
  <Line number="1315">** will be set for TEMP databases and their journals, transient</Line>
  <Line number="1316">** databases, and subjournals.</Line>
  <Line number="1317">**</Line>
  <Line number="1318">** ^The [SQLITE_OPEN_EXCLUSIVE] flag is always used in conjunction</Line>
  <Line number="1319">** with the [SQLITE_OPEN_CREATE] flag, which are both directly</Line>
  <Line number="1320">** analogous to the O_EXCL and O_CREAT flags of the POSIX open()</Line>
  <Line number="1321">** API.  The SQLITE_OPEN_EXCLUSIVE flag, when paired with the</Line>
  <Line number="1322">** SQLITE_OPEN_CREATE, is used to indicate that file should always</Line>
  <Line number="1323">** be created, and that it is an error if it already exists.</Line>
  <Line number="1324">** It is &lt;i&gt;not&lt;/i&gt; used to indicate the file should be opened</Line>
  <Line number="1325">** for exclusive access.</Line>
  <Line number="1326">**</Line>
  <Line number="1327">** ^At least szOsFile bytes of memory are allocated by SQLite</Line>
  <Line number="1328">** to hold the [sqlite3_file] structure passed as the third</Line>
  <Line number="1329">** argument to xOpen.  The xOpen method does not have to</Line>
  <Line number="1330">** allocate the structure; it should just fill it in.  Note that</Line>
  <Line number="1331">** the xOpen method must set the sqlite3_file.pMethods to either</Line>
  <Line number="1332">** a valid [sqlite3_io_methods] object or to NULL.  xOpen must do</Line>
  <Line number="1333">** this even if the open fails.  SQLite expects that the sqlite3_file.pMethods</Line>
  <Line number="1334">** element will be valid after xOpen returns regardless of the success</Line>
  <Line number="1335">** or failure of the xOpen call.</Line>
  <Line number="1336">**</Line>
  <Line number="1337">** [[sqlite3_vfs.xAccess]]</Line>
  <Line number="1338">** ^The flags argument to xAccess() may be [SQLITE_ACCESS_EXISTS]</Line>
  <Line number="1339">** to test for the existence of a file, or [SQLITE_ACCESS_READWRITE] to</Line>
  <Line number="1340">** test whether a file is readable and writable, or [SQLITE_ACCESS_READ]</Line>
  <Line number="1341">** to test whether a file is at least readable.  The SQLITE_ACCESS_READ</Line>
  <Line number="1342">** flag is never actually used and is not implemented in the built-in</Line>
  <Line number="1343">** VFSes of SQLite.  The file is named by the second argument and can be a</Line>
  <Line number="1344">** directory. The xAccess method returns [SQLITE_OK] on success or some</Line>
  <Line number="1345">** non-zero error code if there is an I/O error or if the name of</Line>
  <Line number="1346">** the file given in the second argument is illegal.  If SQLITE_OK</Line>
  <Line number="1347">** is returned, then non-zero or zero is written into *pResOut to indicate</Line>
  <Line number="1348">** whether or not the file is accessible.</Line>
  <Line number="1349">**</Line>
  <Line number="1350">** ^SQLite will always allocate at least mxPathname+1 bytes for the</Line>
  <Line number="1351">** output buffer xFullPathname.  The exact size of the output buffer</Line>
  <Line number="1352">** is also passed as a parameter to both  methods. If the output buffer</Line>
  <Line number="1353">** is not large enough, [SQLITE_CANTOPEN] should be returned. Since this is</Line>
  <Line number="1354">** handled as a fatal error by SQLite, vfs implementations should endeavor</Line>
  <Line number="1355">** to prevent this by setting mxPathname to a sufficiently large value.</Line>
  <Line number="1356">**</Line>
  <Line number="1357">** The xRandomness(), xSleep(), xCurrentTime(), and xCurrentTimeInt64()</Line>
  <Line number="1358">** interfaces are not strictly a part of the filesystem, but they are</Line>
  <Line number="1359">** included in the VFS structure for completeness.</Line>
  <Line number="1360">** The xRandomness() function attempts to return nBytes bytes</Line>
  <Line number="1361">** of good-quality randomness into zOut.  The return value is</Line>
  <Line number="1362">** the actual number of bytes of randomness obtained.</Line>
  <Line number="1363">** The xSleep() method causes the calling thread to sleep for at</Line>
  <Line number="1364">** least the number of microseconds given.  ^The xCurrentTime()</Line>
  <Line number="1365">** method returns a Julian Day Number for the current date and time as</Line>
  <Line number="1366">** a floating point value.</Line>
  <Line number="1367">** ^The xCurrentTimeInt64() method returns, as an integer, the Julian</Line>
  <Line number="1368">** Day Number multiplied by 86400000 (the number of milliseconds in</Line>
  <Line number="1369">** a 24-hour day).</Line>
  <Line number="1370">** ^SQLite will use the xCurrentTimeInt64() method to get the current</Line>
  <Line number="1371">** date and time if that method is available (if iVersion is 2 or</Line>
  <Line number="1372">** greater and the function pointer is not NULL) and will fall back</Line>
  <Line number="1373">** to xCurrentTime() if xCurrentTimeInt64() is unavailable.</Line>
  <Line number="1374">**</Line>
  <Line number="1375">** ^The xSetSystemCall(), xGetSystemCall(), and xNestSystemCall() interfaces</Line>
  <Line number="1376">** are not used by the SQLite core.  These optional interfaces are provided</Line>
  <Line number="1377">** by some VFSes to facilitate testing of the VFS code. By overriding</Line>
  <Line number="1378">** system calls with functions under its control, a test program can</Line>
  <Line number="1379">** simulate faults and error conditions that would otherwise be difficult</Line>
  <Line number="1380">** or impossible to induce.  The set of system calls that can be overridden</Line>
  <Line number="1381">** varies from one VFS to another, and from one version of the same VFS to the</Line>
  <Line number="1382">** next.  Applications that use these interfaces must be prepared for any</Line>
  <Line number="1383">** or all of these interfaces to be NULL or for their behavior to change</Line>
  <Line number="1384">** from one release to the next.  Applications must not attempt to access</Line>
  <Line number="1385">** any of these methods if the iVersion of the VFS is less than 3.</Line>
  <Line number="1386">*/</Line>
  <Line number="1387">typedef struct sqlite3_vfs sqlite3_vfs;</Line>
  <Line number="1388">typedef void (*sqlite3_syscall_ptr)(void);</Line>
  <Line number="1389">struct sqlite3_vfs {</Line>
  <Line number="1390">  int iVersion;            /* Structure version number (currently 3) */</Line>
  <Line number="1391">  int szOsFile;            /* Size of subclassed sqlite3_file */</Line>
  <Line number="1392">  int mxPathname;          /* Maximum file pathname length */</Line>
  <Line number="1393">  sqlite3_vfs *pNext;      /* Next registered VFS */</Line>
  <Line number="1394">  const char *zName;       /* Name of this virtual file system */</Line>
  <Line number="1395">  void *pAppData;          /* Pointer to application-specific data */</Line>
  <Line number="1396">  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,</Line>
  <Line number="1397">               int flags, int *pOutFlags);</Line>
  <Line number="1398">  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);</Line>
  <Line number="1399">  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);</Line>
  <Line number="1400">  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);</Line>
  <Line number="1401">  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);</Line>
  <Line number="1402">  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);</Line>
  <Line number="1403">  void (*(*xDlSym)(sqlite3_vfs*,void*, const char *zSymbol))(void);</Line>
  <Line number="1404">  void (*xDlClose)(sqlite3_vfs*, void*);</Line>
  <Line number="1405">  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);</Line>
  <Line number="1406">  int (*xSleep)(sqlite3_vfs*, int microseconds);</Line>
  <Line number="1407">  int (*xCurrentTime)(sqlite3_vfs*, double*);</Line>
  <Line number="1408">  int (*xGetLastError)(sqlite3_vfs*, int, char *);</Line>
  <Line number="1409">  /*</Line>
  <Line number="1410">  ** The methods above are in version 1 of the sqlite_vfs object</Line>
  <Line number="1411">  ** definition.  Those that follow are added in version 2 or later</Line>
  <Line number="1412">  */</Line>
  <Line number="1413">  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);</Line>
  <Line number="1414">  /*</Line>
  <Line number="1415">  ** The methods above are in versions 1 and 2 of the sqlite_vfs object.</Line>
  <Line number="1416">  ** Those below are for version 3 and greater.</Line>
  <Line number="1417">  */</Line>
  <Line number="1418">  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);</Line>
  <Line number="1419">  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);</Line>
  <Line number="1420">  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);</Line>
  <Line number="1421">  /*</Line>
  <Line number="1422">  ** The methods above are in versions 1 through 3 of the sqlite_vfs object.</Line>
  <Line number="1423">  ** New fields may be appended in future versions.  The iVersion</Line>
  <Line number="1424">  ** value will increment whenever this happens.</Line>
  <Line number="1425">  */</Line>
  <Line number="1426">};</Line>
  <Line number="1427"></Line>
  <Line number="1428">/*</Line>
  <Line number="1429">** CAPI3REF: Flags for the xAccess VFS method</Line>
  <Line number="1430">**</Line>
  <Line number="1431">** These integer constants can be used as the third parameter to</Line>
  <Line number="1432">** the xAccess method of an [sqlite3_vfs] object.  They determine</Line>
  <Line number="1433">** what kind of permissions the xAccess method is looking for.</Line>
  <Line number="1434">** With SQLITE_ACCESS_EXISTS, the xAccess method</Line>
  <Line number="1435">** simply checks whether the file exists.</Line>
  <Line number="1436">** With SQLITE_ACCESS_READWRITE, the xAccess method</Line>
  <Line number="1437">** checks whether the named directory is both readable and writable</Line>
  <Line number="1438">** (in other words, if files can be added, removed, and renamed within</Line>
  <Line number="1439">** the directory).</Line>
  <Line number="1440">** The SQLITE_ACCESS_READWRITE constant is currently used only by the</Line>
  <Line number="1441">** [temp_store_directory pragma], though this could change in a future</Line>
  <Line number="1442">** release of SQLite.</Line>
  <Line number="1443">** With SQLITE_ACCESS_READ, the xAccess method</Line>
  <Line number="1444">** checks whether the file is readable.  The SQLITE_ACCESS_READ constant is</Line>
  <Line number="1445">** currently unused, though it might be used in a future release of</Line>
  <Line number="1446">** SQLite.</Line>
  <Line number="1447">*/</Line>
  <Line number="1448">#define SQLITE_ACCESS_EXISTS    0</Line>
  <Line number="1449">#define SQLITE_ACCESS_READWRITE 1   /* Used by PRAGMA temp_store_directory */</Line>
  <Line number="1450">#define SQLITE_ACCESS_READ      2   /* Unused */</Line>
  <Line number="1451"></Line>
  <Line number="1452">/*</Line>
  <Line number="1453">** CAPI3REF: Flags for the xShmLock VFS method</Line>
  <Line number="1454">**</Line>
  <Line number="1455">** These integer constants define the various locking operations</Line>
  <Line number="1456">** allowed by the xShmLock method of [sqlite3_io_methods].  The</Line>
  <Line number="1457">** following are the only legal combinations of flags to the</Line>
  <Line number="1458">** xShmLock method:</Line>
  <Line number="1459">**</Line>
  <Line number="1460">** &lt;ul&gt;</Line>
  <Line number="1461">** &lt;li&gt;  SQLITE_SHM_LOCK | SQLITE_SHM_SHARED</Line>
  <Line number="1462">** &lt;li&gt;  SQLITE_SHM_LOCK | SQLITE_SHM_EXCLUSIVE</Line>
  <Line number="1463">** &lt;li&gt;  SQLITE_SHM_UNLOCK | SQLITE_SHM_SHARED</Line>
  <Line number="1464">** &lt;li&gt;  SQLITE_SHM_UNLOCK | SQLITE_SHM_EXCLUSIVE</Line>
  <Line number="1465">** &lt;/ul&gt;</Line>
  <Line number="1466">**</Line>
  <Line number="1467">** When unlocking, the same SHARED or EXCLUSIVE flag must be supplied as</Line>
  <Line number="1468">** was given on the corresponding lock.</Line>
  <Line number="1469">**</Line>
  <Line number="1470">** The xShmLock method can transition between unlocked and SHARED or</Line>
  <Line number="1471">** between unlocked and EXCLUSIVE.  It cannot transition between SHARED</Line>
  <Line number="1472">** and EXCLUSIVE.</Line>
  <Line number="1473">*/</Line>
  <Line number="1474">#define SQLITE_SHM_UNLOCK       1</Line>
  <Line number="1475">#define SQLITE_SHM_LOCK         2</Line>
  <Line number="1476">#define SQLITE_SHM_SHARED       4</Line>
  <Line number="1477">#define SQLITE_SHM_EXCLUSIVE    8</Line>
  <Line number="1478"></Line>
  <Line number="1479">/*</Line>
  <Line number="1480">** CAPI3REF: Maximum xShmLock index</Line>
  <Line number="1481">**</Line>
  <Line number="1482">** The xShmLock method on [sqlite3_io_methods] may use values</Line>
  <Line number="1483">** between 0 and this upper bound as its &quot;offset&quot; argument.</Line>
  <Line number="1484">** The SQLite core will never attempt to acquire or release a</Line>
  <Line number="1485">** lock outside of this range</Line>
  <Line number="1486">*/</Line>
  <Line number="1487">#define SQLITE_SHM_NLOCK        8</Line>
  <Line number="1488"></Line>
  <Line number="1489"></Line>
  <Line number="1490">/*</Line>
  <Line number="1491">** CAPI3REF: Initialize The SQLite Library</Line>
  <Line number="1492">**</Line>
  <Line number="1493">** ^The sqlite3_initialize() routine initializes the</Line>
  <Line number="1494">** SQLite library.  ^The sqlite3_shutdown() routine</Line>
  <Line number="1495">** deallocates any resources that were allocated by sqlite3_initialize().</Line>
  <Line number="1496">** These routines are designed to aid in process initialization and</Line>
  <Line number="1497">** shutdown on embedded systems.  Workstation applications using</Line>
  <Line number="1498">** SQLite normally do not need to invoke either of these routines.</Line>
  <Line number="1499">**</Line>
  <Line number="1500">** A call to sqlite3_initialize() is an &quot;effective&quot; call if it is</Line>
  <Line number="1501">** the first time sqlite3_initialize() is invoked during the lifetime of</Line>
  <Line number="1502">** the process, or if it is the first time sqlite3_initialize() is invoked</Line>
  <Line number="1503">** following a call to sqlite3_shutdown().  ^(Only an effective call</Line>
  <Line number="1504">** of sqlite3_initialize() does any initialization.  All other calls</Line>
  <Line number="1505">** are harmless no-ops.)^</Line>
  <Line number="1506">**</Line>
  <Line number="1507">** A call to sqlite3_shutdown() is an &quot;effective&quot; call if it is the first</Line>
  <Line number="1508">** call to sqlite3_shutdown() since the last sqlite3_initialize().  ^(Only</Line>
  <Line number="1509">** an effective call to sqlite3_shutdown() does any deinitialization.</Line>
  <Line number="1510">** All other valid calls to sqlite3_shutdown() are harmless no-ops.)^</Line>
  <Line number="1511">**</Line>
  <Line number="1512">** The sqlite3_initialize() interface is threadsafe, but sqlite3_shutdown()</Line>
  <Line number="1513">** is not.  The sqlite3_shutdown() interface must only be called from a</Line>
  <Line number="1514">** single thread.  All open [database connections] must be closed and all</Line>
  <Line number="1515">** other SQLite resources must be deallocated prior to invoking</Line>
  <Line number="1516">** sqlite3_shutdown().</Line>
  <Line number="1517">**</Line>
  <Line number="1518">** Among other things, ^sqlite3_initialize() will invoke</Line>
  <Line number="1519">** sqlite3_os_init().  Similarly, ^sqlite3_shutdown()</Line>
  <Line number="1520">** will invoke sqlite3_os_end().</Line>
  <Line number="1521">**</Line>
  <Line number="1522">** ^The sqlite3_initialize() routine returns [SQLITE_OK] on success.</Line>
  <Line number="1523">** ^If for some reason, sqlite3_initialize() is unable to initialize</Line>
  <Line number="1524">** the library (perhaps it is unable to allocate a needed resource such</Line>
  <Line number="1525">** as a mutex) it returns an [error code] other than [SQLITE_OK].</Line>
  <Line number="1526">**</Line>
  <Line number="1527">** ^The sqlite3_initialize() routine is called internally by many other</Line>
  <Line number="1528">** SQLite interfaces so that an application usually does not need to</Line>
  <Line number="1529">** invoke sqlite3_initialize() directly.  For example, [sqlite3_open()]</Line>
  <Line number="1530">** calls sqlite3_initialize() so the SQLite library will be automatically</Line>
  <Line number="1531">** initialized when [sqlite3_open()] is called if it has not be initialized</Line>
  <Line number="1532">** already.  ^However, if SQLite is compiled with the [SQLITE_OMIT_AUTOINIT]</Line>
  <Line number="1533">** compile-time option, then the automatic calls to sqlite3_initialize()</Line>
  <Line number="1534">** are omitted and the application must call sqlite3_initialize() directly</Line>
  <Line number="1535">** prior to using any other SQLite interface.  For maximum portability,</Line>
  <Line number="1536">** it is recommended that applications always invoke sqlite3_initialize()</Line>
  <Line number="1537">** directly prior to using any other SQLite interface.  Future releases</Line>
  <Line number="1538">** of SQLite may require this.  In other words, the behavior exhibited</Line>
  <Line number="1539">** when SQLite is compiled with [SQLITE_OMIT_AUTOINIT] might become the</Line>
  <Line number="1540">** default behavior in some future release of SQLite.</Line>
  <Line number="1541">**</Line>
  <Line number="1542">** The sqlite3_os_init() routine does operating-system specific</Line>
  <Line number="1543">** initialization of the SQLite library.  The sqlite3_os_end()</Line>
  <Line number="1544">** routine undoes the effect of sqlite3_os_init().  Typical tasks</Line>
  <Line number="1545">** performed by these routines include allocation or deallocation</Line>
  <Line number="1546">** of static resources, initialization of global variables,</Line>
  <Line number="1547">** setting up a default [sqlite3_vfs] module, or setting up</Line>
  <Line number="1548">** a default configuration using [sqlite3_config()].</Line>
  <Line number="1549">**</Line>
  <Line number="1550">** The application should never invoke either sqlite3_os_init()</Line>
  <Line number="1551">** or sqlite3_os_end() directly.  The application should only invoke</Line>
  <Line number="1552">** sqlite3_initialize() and sqlite3_shutdown().  The sqlite3_os_init()</Line>
  <Line number="1553">** interface is called automatically by sqlite3_initialize() and</Line>
  <Line number="1554">** sqlite3_os_end() is called by sqlite3_shutdown().  Appropriate</Line>
  <Line number="1555">** implementations for sqlite3_os_init() and sqlite3_os_end()</Line>
  <Line number="1556">** are built into SQLite when it is compiled for Unix, Windows, or OS/2.</Line>
  <Line number="1557">** When [custom builds | built for other platforms]</Line>
  <Line number="1558">** (using the [SQLITE_OS_OTHER=1] compile-time</Line>
  <Line number="1559">** option) the application must supply a suitable implementation for</Line>
  <Line number="1560">** sqlite3_os_init() and sqlite3_os_end().  An application-supplied</Line>
  <Line number="1561">** implementation of sqlite3_os_init() or sqlite3_os_end()</Line>
  <Line number="1562">** must return [SQLITE_OK] on success and some other [error code] upon</Line>
  <Line number="1563">** failure.</Line>
  <Line number="1564">*/</Line>
  <Line number="1565">SQLITE_API int sqlite3_initialize(void);</Line>
  <Line number="1566">SQLITE_API int sqlite3_shutdown(void);</Line>
  <Line number="1567">SQLITE_API int sqlite3_os_init(void);</Line>
  <Line number="1568">SQLITE_API int sqlite3_os_end(void);</Line>
  <Line number="1569"></Line>
  <Line number="1570">/*</Line>
  <Line number="1571">** CAPI3REF: Configuring The SQLite Library</Line>
  <Line number="1572">**</Line>
  <Line number="1573">** The sqlite3_config() interface is used to make global configuration</Line>
  <Line number="1574">** changes to SQLite in order to tune SQLite to the specific needs of</Line>
  <Line number="1575">** the application.  The default configuration is recommended for most</Line>
  <Line number="1576">** applications and so this routine is usually not necessary.  It is</Line>
  <Line number="1577">** provided to support rare applications with unusual needs.</Line>
  <Line number="1578">**</Line>
  <Line number="1579">** &lt;b&gt;The sqlite3_config() interface is not threadsafe. The application</Line>
  <Line number="1580">** must ensure that no other SQLite interfaces are invoked by other</Line>
  <Line number="1581">** threads while sqlite3_config() is running.&lt;/b&gt;</Line>
  <Line number="1582">**</Line>
  <Line number="1583">** The sqlite3_config() interface</Line>
  <Line number="1584">** may only be invoked prior to library initialization using</Line>
  <Line number="1585">** [sqlite3_initialize()] or after shutdown by [sqlite3_shutdown()].</Line>
  <Line number="1586">** ^If sqlite3_config() is called after [sqlite3_initialize()] and before</Line>
  <Line number="1587">** [sqlite3_shutdown()] then it will return SQLITE_MISUSE.</Line>
  <Line number="1588">** Note, however, that ^sqlite3_config() can be called as part of the</Line>
  <Line number="1589">** implementation of an application-defined [sqlite3_os_init()].</Line>
  <Line number="1590">**</Line>
  <Line number="1591">** The first argument to sqlite3_config() is an integer</Line>
  <Line number="1592">** [configuration option] that determines</Line>
  <Line number="1593">** what property of SQLite is to be configured.  Subsequent arguments</Line>
  <Line number="1594">** vary depending on the [configuration option]</Line>
  <Line number="1595">** in the first argument.</Line>
  <Line number="1596">**</Line>
  <Line number="1597">** ^When a configuration option is set, sqlite3_config() returns [SQLITE_OK].</Line>
  <Line number="1598">** ^If the option is unknown or SQLite is unable to set the option</Line>
  <Line number="1599">** then this routine returns a non-zero [error code].</Line>
  <Line number="1600">*/</Line>
  <Line number="1601">SQLITE_API int sqlite3_config(int, ...);</Line>
  <Line number="1602"></Line>
  <Line number="1603">/*</Line>
  <Line number="1604">** CAPI3REF: Configure database connections</Line>
  <Line number="1605">** METHOD: sqlite3</Line>
  <Line number="1606">**</Line>
  <Line number="1607">** The sqlite3_db_config() interface is used to make configuration</Line>
  <Line number="1608">** changes to a [database connection].  The interface is similar to</Line>
  <Line number="1609">** [sqlite3_config()] except that the changes apply to a single</Line>
  <Line number="1610">** [database connection] (specified in the first argument).</Line>
  <Line number="1611">**</Line>
  <Line number="1612">** The second argument to sqlite3_db_config(D,V,...)  is the</Line>
  <Line number="1613">** [SQLITE_DBCONFIG_LOOKASIDE | configuration verb] - an integer code</Line>
  <Line number="1614">** that indicates what aspect of the [database connection] is being configured.</Line>
  <Line number="1615">** Subsequent arguments vary depending on the configuration verb.</Line>
  <Line number="1616">**</Line>
  <Line number="1617">** ^Calls to sqlite3_db_config() return SQLITE_OK if and only if</Line>
  <Line number="1618">** the call is considered successful.</Line>
  <Line number="1619">*/</Line>
  <Line number="1620">SQLITE_API int sqlite3_db_config(sqlite3*, int op, ...);</Line>
  <Line number="1621"></Line>
  <Line number="1622">/*</Line>
  <Line number="1623">** CAPI3REF: Memory Allocation Routines</Line>
  <Line number="1624">**</Line>
  <Line number="1625">** An instance of this object defines the interface between SQLite</Line>
  <Line number="1626">** and low-level memory allocation routines.</Line>
  <Line number="1627">**</Line>
  <Line number="1628">** This object is used in only one place in the SQLite interface.</Line>
  <Line number="1629">** A pointer to an instance of this object is the argument to</Line>
  <Line number="1630">** [sqlite3_config()] when the configuration option is</Line>
  <Line number="1631">** [SQLITE_CONFIG_MALLOC] or [SQLITE_CONFIG_GETMALLOC].</Line>
  <Line number="1632">** By creating an instance of this object</Line>
  <Line number="1633">** and passing it to [sqlite3_config]([SQLITE_CONFIG_MALLOC])</Line>
  <Line number="1634">** during configuration, an application can specify an alternative</Line>
  <Line number="1635">** memory allocation subsystem for SQLite to use for all of its</Line>
  <Line number="1636">** dynamic memory needs.</Line>
  <Line number="1637">**</Line>
  <Line number="1638">** Note that SQLite comes with several [built-in memory allocators]</Line>
  <Line number="1639">** that are perfectly adequate for the overwhelming majority of applications</Line>
  <Line number="1640">** and that this object is only useful to a tiny minority of applications</Line>
  <Line number="1641">** with specialized memory allocation requirements.  This object is</Line>
  <Line number="1642">** also used during testing of SQLite in order to specify an alternative</Line>
  <Line number="1643">** memory allocator that simulates memory out-of-memory conditions in</Line>
  <Line number="1644">** order to verify that SQLite recovers gracefully from such</Line>
  <Line number="1645">** conditions.</Line>
  <Line number="1646">**</Line>
  <Line number="1647">** The xMalloc, xRealloc, and xFree methods must work like the</Line>
  <Line number="1648">** malloc(), realloc() and free() functions from the standard C library.</Line>
  <Line number="1649">** ^SQLite guarantees that the second argument to</Line>
  <Line number="1650">** xRealloc is always a value returned by a prior call to xRoundup.</Line>
  <Line number="1651">**</Line>
  <Line number="1652">** xSize should return the allocated size of a memory allocation</Line>
  <Line number="1653">** previously obtained from xMalloc or xRealloc.  The allocated size</Line>
  <Line number="1654">** is always at least as big as the requested size but may be larger.</Line>
  <Line number="1655">**</Line>
  <Line number="1656">** The xRoundup method returns what would be the allocated size of</Line>
  <Line number="1657">** a memory allocation given a particular requested size.  Most memory</Line>
  <Line number="1658">** allocators round up memory allocations at least to the next multiple</Line>
  <Line number="1659">** of 8.  Some allocators round up to a larger multiple or to a power of 2.</Line>
  <Line number="1660">** Every memory allocation request coming in through [sqlite3_malloc()]</Line>
  <Line number="1661">** or [sqlite3_realloc()] first calls xRoundup.  If xRoundup returns 0,</Line>
  <Line number="1662">** that causes the corresponding memory allocation to fail.</Line>
  <Line number="1663">**</Line>
  <Line number="1664">** The xInit method initializes the memory allocator.  For example,</Line>
  <Line number="1665">** it might allocate any required mutexes or initialize internal data</Line>
  <Line number="1666">** structures.  The xShutdown method is invoked (indirectly) by</Line>
  <Line number="1667">** [sqlite3_shutdown()] and should deallocate any resources acquired</Line>
  <Line number="1668">** by xInit.  The pAppData pointer is used as the only parameter to</Line>
  <Line number="1669">** xInit and xShutdown.</Line>
  <Line number="1670">**</Line>
  <Line number="1671">** SQLite holds the [SQLITE_MUTEX_STATIC_MAIN] mutex when it invokes</Line>
  <Line number="1672">** the xInit method, so the xInit method need not be threadsafe.  The</Line>
  <Line number="1673">** xShutdown method is only called from [sqlite3_shutdown()] so it does</Line>
  <Line number="1674">** not need to be threadsafe either.  For all other methods, SQLite</Line>
  <Line number="1675">** holds the [SQLITE_MUTEX_STATIC_MEM] mutex as long as the</Line>
  <Line number="1676">** [SQLITE_CONFIG_MEMSTATUS] configuration option is turned on (which</Line>
  <Line number="1677">** it is by default) and so the methods are automatically serialized.</Line>
  <Line number="1678">** However, if [SQLITE_CONFIG_MEMSTATUS] is disabled, then the other</Line>
  <Line number="1679">** methods must be threadsafe or else make their own arrangements for</Line>
  <Line number="1680">** serialization.</Line>
  <Line number="1681">**</Line>
  <Line number="1682">** SQLite will never invoke xInit() more than once without an intervening</Line>
  <Line number="1683">** call to xShutdown().</Line>
  <Line number="1684">*/</Line>
  <Line number="1685">typedef struct sqlite3_mem_methods sqlite3_mem_methods;</Line>
  <Line number="1686">struct sqlite3_mem_methods {</Line>
  <Line number="1687">  void *(*xMalloc)(int);         /* Memory allocation function */</Line>
  <Line number="1688">  void (*xFree)(void*);          /* Free a prior allocation */</Line>
  <Line number="1689">  void *(*xRealloc)(void*,int);  /* Resize an allocation */</Line>
  <Line number="1690">  int (*xSize)(void*);           /* Return the size of an allocation */</Line>
  <Line number="1691">  int (*xRoundup)(int);          /* Round up request size to allocation size */</Line>
  <Line number="1692">  int (*xInit)(void*);           /* Initialize the memory allocator */</Line>
  <Line number="1693">  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */</Line>
  <Line number="1694">  void *pAppData;                /* Argument to xInit() and xShutdown() */</Line>
  <Line number="1695">};</Line>
  <Line number="1696"></Line>
  <Line number="1697">/*</Line>
  <Line number="1698">** CAPI3REF: Configuration Options</Line>
  <Line number="1699">** KEYWORDS: {configuration option}</Line>
  <Line number="1700">**</Line>
  <Line number="1701">** These constants are the available integer configuration options that</Line>
  <Line number="1702">** can be passed as the first argument to the [sqlite3_config()] interface.</Line>
  <Line number="1703">**</Line>
  <Line number="1704">** New configuration options may be added in future releases of SQLite.</Line>
  <Line number="1705">** Existing configuration options might be discontinued.  Applications</Line>
  <Line number="1706">** should check the return code from [sqlite3_config()] to make sure that</Line>
  <Line number="1707">** the call worked.  The [sqlite3_config()] interface will return a</Line>
  <Line number="1708">** non-zero [error code] if a discontinued or unsupported configuration option</Line>
  <Line number="1709">** is invoked.</Line>
  <Line number="1710">**</Line>
  <Line number="1711">** &lt;dl&gt;</Line>
  <Line number="1712">** [[SQLITE_CONFIG_SINGLETHREAD]] &lt;dt&gt;SQLITE_CONFIG_SINGLETHREAD&lt;/dt&gt;</Line>
  <Line number="1713">** &lt;dd&gt;There are no arguments to this option.  ^This option sets the</Line>
  <Line number="1714">** [threading mode] to Single-thread.  In other words, it disables</Line>
  <Line number="1715">** all mutexing and puts SQLite into a mode where it can only be used</Line>
  <Line number="1716">** by a single thread.   ^If SQLite is compiled with</Line>
  <Line number="1717">** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then</Line>
  <Line number="1718">** it is not possible to change the [threading mode] from its default</Line>
  <Line number="1719">** value of Single-thread and so [sqlite3_config()] will return</Line>
  <Line number="1720">** [SQLITE_ERROR] if called with the SQLITE_CONFIG_SINGLETHREAD</Line>
  <Line number="1721">** configuration option.&lt;/dd&gt;</Line>
  <Line number="1722">**</Line>
  <Line number="1723">** [[SQLITE_CONFIG_MULTITHREAD]] &lt;dt&gt;SQLITE_CONFIG_MULTITHREAD&lt;/dt&gt;</Line>
  <Line number="1724">** &lt;dd&gt;There are no arguments to this option.  ^This option sets the</Line>
  <Line number="1725">** [threading mode] to Multi-thread.  In other words, it disables</Line>
  <Line number="1726">** mutexing on [database connection] and [prepared statement] objects.</Line>
  <Line number="1727">** The application is responsible for serializing access to</Line>
  <Line number="1728">** [database connections] and [prepared statements].  But other mutexes</Line>
  <Line number="1729">** are enabled so that SQLite will be safe to use in a multi-threaded</Line>
  <Line number="1730">** environment as long as no two threads attempt to use the same</Line>
  <Line number="1731">** [database connection] at the same time.  ^If SQLite is compiled with</Line>
  <Line number="1732">** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then</Line>
  <Line number="1733">** it is not possible to set the Multi-thread [threading mode] and</Line>
  <Line number="1734">** [sqlite3_config()] will return [SQLITE_ERROR] if called with the</Line>
  <Line number="1735">** SQLITE_CONFIG_MULTITHREAD configuration option.&lt;/dd&gt;</Line>
  <Line number="1736">**</Line>
  <Line number="1737">** [[SQLITE_CONFIG_SERIALIZED]] &lt;dt&gt;SQLITE_CONFIG_SERIALIZED&lt;/dt&gt;</Line>
  <Line number="1738">** &lt;dd&gt;There are no arguments to this option.  ^This option sets the</Line>
  <Line number="1739">** [threading mode] to Serialized. In other words, this option enables</Line>
  <Line number="1740">** all mutexes including the recursive</Line>
  <Line number="1741">** mutexes on [database connection] and [prepared statement] objects.</Line>
  <Line number="1742">** In this mode (which is the default when SQLite is compiled with</Line>
  <Line number="1743">** [SQLITE_THREADSAFE=1]) the SQLite library will itself serialize access</Line>
  <Line number="1744">** to [database connections] and [prepared statements] so that the</Line>
  <Line number="1745">** application is free to use the same [database connection] or the</Line>
  <Line number="1746">** same [prepared statement] in different threads at the same time.</Line>
  <Line number="1747">** ^If SQLite is compiled with</Line>
  <Line number="1748">** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then</Line>
  <Line number="1749">** it is not possible to set the Serialized [threading mode] and</Line>
  <Line number="1750">** [sqlite3_config()] will return [SQLITE_ERROR] if called with the</Line>
  <Line number="1751">** SQLITE_CONFIG_SERIALIZED configuration option.&lt;/dd&gt;</Line>
  <Line number="1752">**</Line>
  <Line number="1753">** [[SQLITE_CONFIG_MALLOC]] &lt;dt&gt;SQLITE_CONFIG_MALLOC&lt;/dt&gt;</Line>
  <Line number="1754">** &lt;dd&gt; ^(The SQLITE_CONFIG_MALLOC option takes a single argument which is</Line>
  <Line number="1755">** a pointer to an instance of the [sqlite3_mem_methods] structure.</Line>
  <Line number="1756">** The argument specifies</Line>
  <Line number="1757">** alternative low-level memory allocation routines to be used in place of</Line>
  <Line number="1758">** the memory allocation routines built into SQLite.)^ ^SQLite makes</Line>
  <Line number="1759">** its own private copy of the content of the [sqlite3_mem_methods] structure</Line>
  <Line number="1760">** before the [sqlite3_config()] call returns.&lt;/dd&gt;</Line>
  <Line number="1761">**</Line>
  <Line number="1762">** [[SQLITE_CONFIG_GETMALLOC]] &lt;dt&gt;SQLITE_CONFIG_GETMALLOC&lt;/dt&gt;</Line>
  <Line number="1763">** &lt;dd&gt; ^(The SQLITE_CONFIG_GETMALLOC option takes a single argument which</Line>
  <Line number="1764">** is a pointer to an instance of the [sqlite3_mem_methods] structure.</Line>
  <Line number="1765">** The [sqlite3_mem_methods]</Line>
  <Line number="1766">** structure is filled with the currently defined memory allocation routines.)^</Line>
  <Line number="1767">** This option can be used to overload the default memory allocation</Line>
  <Line number="1768">** routines with a wrapper that simulations memory allocation failure or</Line>
  <Line number="1769">** tracks memory usage, for example. &lt;/dd&gt;</Line>
  <Line number="1770">**</Line>
  <Line number="1771">** [[SQLITE_CONFIG_SMALL_MALLOC]] &lt;dt&gt;SQLITE_CONFIG_SMALL_MALLOC&lt;/dt&gt;</Line>
  <Line number="1772">** &lt;dd&gt; ^The SQLITE_CONFIG_SMALL_MALLOC option takes single argument of</Line>
  <Line number="1773">** type int, interpreted as a boolean, which if true provides a hint to</Line>
  <Line number="1774">** SQLite that it should avoid large memory allocations if possible.</Line>
  <Line number="1775">** SQLite will run faster if it is free to make large memory allocations,</Line>
  <Line number="1776">** but some application might prefer to run slower in exchange for</Line>
  <Line number="1777">** guarantees about memory fragmentation that are possible if large</Line>
  <Line number="1778">** allocations are avoided.  This hint is normally off.</Line>
  <Line number="1779">** &lt;/dd&gt;</Line>
  <Line number="1780">**</Line>
  <Line number="1781">** [[SQLITE_CONFIG_MEMSTATUS]] &lt;dt&gt;SQLITE_CONFIG_MEMSTATUS&lt;/dt&gt;</Line>
  <Line number="1782">** &lt;dd&gt; ^The SQLITE_CONFIG_MEMSTATUS option takes single argument of type int,</Line>
  <Line number="1783">** interpreted as a boolean, which enables or disables the collection of</Line>
  <Line number="1784">** memory allocation statistics. ^(When memory allocation statistics are</Line>
  <Line number="1785">** disabled, the following SQLite interfaces become non-operational:</Line>
  <Line number="1786">**   &lt;ul&gt;</Line>
  <Line number="1787">**   &lt;li&gt; [sqlite3_hard_heap_limit64()]</Line>
  <Line number="1788">**   &lt;li&gt; [sqlite3_memory_used()]</Line>
  <Line number="1789">**   &lt;li&gt; [sqlite3_memory_highwater()]</Line>
  <Line number="1790">**   &lt;li&gt; [sqlite3_soft_heap_limit64()]</Line>
  <Line number="1791">**   &lt;li&gt; [sqlite3_status64()]</Line>
  <Line number="1792">**   &lt;/ul&gt;)^</Line>
  <Line number="1793">** ^Memory allocation statistics are enabled by default unless SQLite is</Line>
  <Line number="1794">** compiled with [SQLITE_DEFAULT_MEMSTATUS]=0 in which case memory</Line>
  <Line number="1795">** allocation statistics are disabled by default.</Line>
  <Line number="1796">** &lt;/dd&gt;</Line>
  <Line number="1797">**</Line>
  <Line number="1798">** [[SQLITE_CONFIG_SCRATCH]] &lt;dt&gt;SQLITE_CONFIG_SCRATCH&lt;/dt&gt;</Line>
  <Line number="1799">** &lt;dd&gt; The SQLITE_CONFIG_SCRATCH option is no longer used.</Line>
  <Line number="1800">** &lt;/dd&gt;</Line>
  <Line number="1801">**</Line>
  <Line number="1802">** [[SQLITE_CONFIG_PAGECACHE]] &lt;dt&gt;SQLITE_CONFIG_PAGECACHE&lt;/dt&gt;</Line>
  <Line number="1803">** &lt;dd&gt; ^The SQLITE_CONFIG_PAGECACHE option specifies a memory pool</Line>
  <Line number="1804">** that SQLite can use for the database page cache with the default page</Line>
  <Line number="1805">** cache implementation.</Line>
  <Line number="1806">** This configuration option is a no-op if an application-defined page</Line>
  <Line number="1807">** cache implementation is loaded using the [SQLITE_CONFIG_PCACHE2].</Line>
  <Line number="1808">** ^There are three arguments to SQLITE_CONFIG_PAGECACHE: A pointer to</Line>
  <Line number="1809">** 8-byte aligned memory (pMem), the size of each page cache line (sz),</Line>
  <Line number="1810">** and the number of cache lines (N).</Line>
  <Line number="1811">** The sz argument should be the size of the largest database page</Line>
  <Line number="1812">** (a power of two between 512 and 65536) plus some extra bytes for each</Line>
  <Line number="1813">** page header.  ^The number of extra bytes needed by the page header</Line>
  <Line number="1814">** can be determined using [SQLITE_CONFIG_PCACHE_HDRSZ].</Line>
  <Line number="1815">** ^It is harmless, apart from the wasted memory,</Line>
  <Line number="1816">** for the sz parameter to be larger than necessary.  The pMem</Line>
  <Line number="1817">** argument must be either a NULL pointer or a pointer to an 8-byte</Line>
  <Line number="1818">** aligned block of memory of at least sz*N bytes, otherwise</Line>
  <Line number="1819">** subsequent behavior is undefined.</Line>
  <Line number="1820">** ^When pMem is not NULL, SQLite will strive to use the memory provided</Line>
  <Line number="1821">** to satisfy page cache needs, falling back to [sqlite3_malloc()] if</Line>
  <Line number="1822">** a page cache line is larger than sz bytes or if all of the pMem buffer</Line>
  <Line number="1823">** is exhausted.</Line>
  <Line number="1824">** ^If pMem is NULL and N is non-zero, then each database connection</Line>
  <Line number="1825">** does an initial bulk allocation for page cache memory</Line>
  <Line number="1826">** from [sqlite3_malloc()] sufficient for N cache lines if N is positive or</Line>
  <Line number="1827">** of -1024*N bytes if N is negative, . ^If additional</Line>
  <Line number="1828">** page cache memory is needed beyond what is provided by the initial</Line>
  <Line number="1829">** allocation, then SQLite goes to [sqlite3_malloc()] separately for each</Line>
  <Line number="1830">** additional cache line. &lt;/dd&gt;</Line>
  <Line number="1831">**</Line>
  <Line number="1832">** [[SQLITE_CONFIG_HEAP]] &lt;dt&gt;SQLITE_CONFIG_HEAP&lt;/dt&gt;</Line>
  <Line number="1833">** &lt;dd&gt; ^The SQLITE_CONFIG_HEAP option specifies a static memory buffer</Line>
  <Line number="1834">** that SQLite will use for all of its dynamic memory allocation needs</Line>
  <Line number="1835">** beyond those provided for by [SQLITE_CONFIG_PAGECACHE].</Line>
  <Line number="1836">** ^The SQLITE_CONFIG_HEAP option is only available if SQLite is compiled</Line>
  <Line number="1837">** with either [SQLITE_ENABLE_MEMSYS3] or [SQLITE_ENABLE_MEMSYS5] and returns</Line>
  <Line number="1838">** [SQLITE_ERROR] if invoked otherwise.</Line>
  <Line number="1839">** ^There are three arguments to SQLITE_CONFIG_HEAP:</Line>
  <Line number="1840">** An 8-byte aligned pointer to the memory,</Line>
  <Line number="1841">** the number of bytes in the memory buffer, and the minimum allocation size.</Line>
  <Line number="1842">** ^If the first pointer (the memory pointer) is NULL, then SQLite reverts</Line>
  <Line number="1843">** to using its default memory allocator (the system malloc() implementation),</Line>
  <Line number="1844">** undoing any prior invocation of [SQLITE_CONFIG_MALLOC].  ^If the</Line>
  <Line number="1845">** memory pointer is not NULL then the alternative memory</Line>
  <Line number="1846">** allocator is engaged to handle all of SQLites memory allocation needs.</Line>
  <Line number="1847">** The first pointer (the memory pointer) must be aligned to an 8-byte</Line>
  <Line number="1848">** boundary or subsequent behavior of SQLite will be undefined.</Line>
  <Line number="1849">** The minimum allocation size is capped at 2**12. Reasonable values</Line>
  <Line number="1850">** for the minimum allocation size are 2**5 through 2**8.&lt;/dd&gt;</Line>
  <Line number="1851">**</Line>
  <Line number="1852">** [[SQLITE_CONFIG_MUTEX]] &lt;dt&gt;SQLITE_CONFIG_MUTEX&lt;/dt&gt;</Line>
  <Line number="1853">** &lt;dd&gt; ^(The SQLITE_CONFIG_MUTEX option takes a single argument which is a</Line>
  <Line number="1854">** pointer to an instance of the [sqlite3_mutex_methods] structure.</Line>
  <Line number="1855">** The argument specifies alternative low-level mutex routines to be used</Line>
  <Line number="1856">** in place the mutex routines built into SQLite.)^  ^SQLite makes a copy of</Line>
  <Line number="1857">** the content of the [sqlite3_mutex_methods] structure before the call to</Line>
  <Line number="1858">** [sqlite3_config()] returns. ^If SQLite is compiled with</Line>
  <Line number="1859">** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then</Line>
  <Line number="1860">** the entire mutexing subsystem is omitted from the build and hence calls to</Line>
  <Line number="1861">** [sqlite3_config()] with the SQLITE_CONFIG_MUTEX configuration option will</Line>
  <Line number="1862">** return [SQLITE_ERROR].&lt;/dd&gt;</Line>
  <Line number="1863">**</Line>
  <Line number="1864">** [[SQLITE_CONFIG_GETMUTEX]] &lt;dt&gt;SQLITE_CONFIG_GETMUTEX&lt;/dt&gt;</Line>
  <Line number="1865">** &lt;dd&gt; ^(The SQLITE_CONFIG_GETMUTEX option takes a single argument which</Line>
  <Line number="1866">** is a pointer to an instance of the [sqlite3_mutex_methods] structure.  The</Line>
  <Line number="1867">** [sqlite3_mutex_methods]</Line>
  <Line number="1868">** structure is filled with the currently defined mutex routines.)^</Line>
  <Line number="1869">** This option can be used to overload the default mutex allocation</Line>
  <Line number="1870">** routines with a wrapper used to track mutex usage for performance</Line>
  <Line number="1871">** profiling or testing, for example.   ^If SQLite is compiled with</Line>
  <Line number="1872">** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then</Line>
  <Line number="1873">** the entire mutexing subsystem is omitted from the build and hence calls to</Line>
  <Line number="1874">** [sqlite3_config()] with the SQLITE_CONFIG_GETMUTEX configuration option will</Line>
  <Line number="1875">** return [SQLITE_ERROR].&lt;/dd&gt;</Line>
  <Line number="1876">**</Line>
  <Line number="1877">** [[SQLITE_CONFIG_LOOKASIDE]] &lt;dt&gt;SQLITE_CONFIG_LOOKASIDE&lt;/dt&gt;</Line>
  <Line number="1878">** &lt;dd&gt; ^(The SQLITE_CONFIG_LOOKASIDE option takes two arguments that determine</Line>
  <Line number="1879">** the default size of lookaside memory on each [database connection].</Line>
  <Line number="1880">** The first argument is the</Line>
  <Line number="1881">** size of each lookaside buffer slot and the second is the number of</Line>
  <Line number="1882">** slots allocated to each database connection.)^  ^(SQLITE_CONFIG_LOOKASIDE</Line>
  <Line number="1883">** sets the &lt;i&gt;default&lt;/i&gt; lookaside size. The [SQLITE_DBCONFIG_LOOKASIDE]</Line>
  <Line number="1884">** option to [sqlite3_db_config()] can be used to change the lookaside</Line>
  <Line number="1885">** configuration on individual connections.)^ &lt;/dd&gt;</Line>
  <Line number="1886">**</Line>
  <Line number="1887">** [[SQLITE_CONFIG_PCACHE2]] &lt;dt&gt;SQLITE_CONFIG_PCACHE2&lt;/dt&gt;</Line>
  <Line number="1888">** &lt;dd&gt; ^(The SQLITE_CONFIG_PCACHE2 option takes a single argument which is</Line>
  <Line number="1889">** a pointer to an [sqlite3_pcache_methods2] object.  This object specifies</Line>
  <Line number="1890">** the interface to a custom page cache implementation.)^</Line>
  <Line number="1891">** ^SQLite makes a copy of the [sqlite3_pcache_methods2] object.&lt;/dd&gt;</Line>
  <Line number="1892">**</Line>
  <Line number="1893">** [[SQLITE_CONFIG_GETPCACHE2]] &lt;dt&gt;SQLITE_CONFIG_GETPCACHE2&lt;/dt&gt;</Line>
  <Line number="1894">** &lt;dd&gt; ^(The SQLITE_CONFIG_GETPCACHE2 option takes a single argument which</Line>
  <Line number="1895">** is a pointer to an [sqlite3_pcache_methods2] object.  SQLite copies of</Line>
  <Line number="1896">** the current page cache implementation into that object.)^ &lt;/dd&gt;</Line>
  <Line number="1897">**</Line>
  <Line number="1898">** [[SQLITE_CONFIG_LOG]] &lt;dt&gt;SQLITE_CONFIG_LOG&lt;/dt&gt;</Line>
  <Line number="1899">** &lt;dd&gt; The SQLITE_CONFIG_LOG option is used to configure the SQLite</Line>
  <Line number="1900">** global [error log].</Line>
  <Line number="1901">** (^The SQLITE_CONFIG_LOG option takes two arguments: a pointer to a</Line>
  <Line number="1902">** function with a call signature of void(*)(void*,int,const char*),</Line>
  <Line number="1903">** and a pointer to void. ^If the function pointer is not NULL, it is</Line>
  <Line number="1904">** invoked by [sqlite3_log()] to process each logging event.  ^If the</Line>
  <Line number="1905">** function pointer is NULL, the [sqlite3_log()] interface becomes a no-op.</Line>
  <Line number="1906">** ^The void pointer that is the second argument to SQLITE_CONFIG_LOG is</Line>
  <Line number="1907">** passed through as the first parameter to the application-defined logger</Line>
  <Line number="1908">** function whenever that function is invoked.  ^The second parameter to</Line>
  <Line number="1909">** the logger function is a copy of the first parameter to the corresponding</Line>
  <Line number="1910">** [sqlite3_log()] call and is intended to be a [result code] or an</Line>
  <Line number="1911">** [extended result code].  ^The third parameter passed to the logger is</Line>
  <Line number="1912">** log message after formatting via [sqlite3_snprintf()].</Line>
  <Line number="1913">** The SQLite logging interface is not reentrant; the logger function</Line>
  <Line number="1914">** supplied by the application must not invoke any SQLite interface.</Line>
  <Line number="1915">** In a multi-threaded application, the application-defined logger</Line>
  <Line number="1916">** function must be threadsafe. &lt;/dd&gt;</Line>
  <Line number="1917">**</Line>
  <Line number="1918">** [[SQLITE_CONFIG_URI]] &lt;dt&gt;SQLITE_CONFIG_URI</Line>
  <Line number="1919">** &lt;dd&gt;^(The SQLITE_CONFIG_URI option takes a single argument of type int.</Line>
  <Line number="1920">** If non-zero, then URI handling is globally enabled. If the parameter is zero,</Line>
  <Line number="1921">** then URI handling is globally disabled.)^ ^If URI handling is globally</Line>
  <Line number="1922">** enabled, all filenames passed to [sqlite3_open()], [sqlite3_open_v2()],</Line>
  <Line number="1923">** [sqlite3_open16()] or</Line>
  <Line number="1924">** specified as part of [ATTACH] commands are interpreted as URIs, regardless</Line>
  <Line number="1925">** of whether or not the [SQLITE_OPEN_URI] flag is set when the database</Line>
  <Line number="1926">** connection is opened. ^If it is globally disabled, filenames are</Line>
  <Line number="1927">** only interpreted as URIs if the SQLITE_OPEN_URI flag is set when the</Line>
  <Line number="1928">** database connection is opened. ^(By default, URI handling is globally</Line>
  <Line number="1929">** disabled. The default value may be changed by compiling with the</Line>
  <Line number="1930">** [SQLITE_USE_URI] symbol defined.)^</Line>
  <Line number="1931">**</Line>
  <Line number="1932">** [[SQLITE_CONFIG_COVERING_INDEX_SCAN]] &lt;dt&gt;SQLITE_CONFIG_COVERING_INDEX_SCAN</Line>
  <Line number="1933">** &lt;dd&gt;^The SQLITE_CONFIG_COVERING_INDEX_SCAN option takes a single integer</Line>
  <Line number="1934">** argument which is interpreted as a boolean in order to enable or disable</Line>
  <Line number="1935">** the use of covering indices for full table scans in the query optimizer.</Line>
  <Line number="1936">** ^The default setting is determined</Line>
  <Line number="1937">** by the [SQLITE_ALLOW_COVERING_INDEX_SCAN] compile-time option, or is &quot;on&quot;</Line>
  <Line number="1938">** if that compile-time option is omitted.</Line>
  <Line number="1939">** The ability to disable the use of covering indices for full table scans</Line>
  <Line number="1940">** is because some incorrectly coded legacy applications might malfunction</Line>
  <Line number="1941">** when the optimization is enabled.  Providing the ability to</Line>
  <Line number="1942">** disable the optimization allows the older, buggy application code to work</Line>
  <Line number="1943">** without change even with newer versions of SQLite.</Line>
  <Line number="1944">**</Line>
  <Line number="1945">** [[SQLITE_CONFIG_PCACHE]] [[SQLITE_CONFIG_GETPCACHE]]</Line>
  <Line number="1946">** &lt;dt&gt;SQLITE_CONFIG_PCACHE and SQLITE_CONFIG_GETPCACHE</Line>
  <Line number="1947">** &lt;dd&gt; These options are obsolete and should not be used by new code.</Line>
  <Line number="1948">** They are retained for backwards compatibility but are now no-ops.</Line>
  <Line number="1949">** &lt;/dd&gt;</Line>
  <Line number="1950">**</Line>
  <Line number="1951">** [[SQLITE_CONFIG_SQLLOG]]</Line>
  <Line number="1952">** &lt;dt&gt;SQLITE_CONFIG_SQLLOG</Line>
  <Line number="1953">** &lt;dd&gt;This option is only available if sqlite is compiled with the</Line>
  <Line number="1954">** [SQLITE_ENABLE_SQLLOG] pre-processor macro defined. The first argument should</Line>
  <Line number="1955">** be a pointer to a function of type void(*)(void*,sqlite3*,const char*, int).</Line>
  <Line number="1956">** The second should be of type (void*). The callback is invoked by the library</Line>
  <Line number="1957">** in three separate circumstances, identified by the value passed as the</Line>
  <Line number="1958">** fourth parameter. If the fourth parameter is 0, then the database connection</Line>
  <Line number="1959">** passed as the second argument has just been opened. The third argument</Line>
  <Line number="1960">** points to a buffer containing the name of the main database file. If the</Line>
  <Line number="1961">** fourth parameter is 1, then the SQL statement that the third parameter</Line>
  <Line number="1962">** points to has just been executed. Or, if the fourth parameter is 2, then</Line>
  <Line number="1963">** the connection being passed as the second parameter is being closed. The</Line>
  <Line number="1964">** third parameter is passed NULL In this case.  An example of using this</Line>
  <Line number="1965">** configuration option can be seen in the &quot;test_sqllog.c&quot; source file in</Line>
  <Line number="1966">** the canonical SQLite source tree.&lt;/dd&gt;</Line>
  <Line number="1967">**</Line>
  <Line number="1968">** [[SQLITE_CONFIG_MMAP_SIZE]]</Line>
  <Line number="1969">** &lt;dt&gt;SQLITE_CONFIG_MMAP_SIZE</Line>
  <Line number="1970">** &lt;dd&gt;^SQLITE_CONFIG_MMAP_SIZE takes two 64-bit integer (sqlite3_int64) values</Line>
  <Line number="1971">** that are the default mmap size limit (the default setting for</Line>
  <Line number="1972">** [PRAGMA mmap_size]) and the maximum allowed mmap size limit.</Line>
  <Line number="1973">** ^The default setting can be overridden by each database connection using</Line>
  <Line number="1974">** either the [PRAGMA mmap_size] command, or by using the</Line>
  <Line number="1975">** [SQLITE_FCNTL_MMAP_SIZE] file control.  ^(The maximum allowed mmap size</Line>
  <Line number="1976">** will be silently truncated if necessary so that it does not exceed the</Line>
  <Line number="1977">** compile-time maximum mmap size set by the</Line>
  <Line number="1978">** [SQLITE_MAX_MMAP_SIZE] compile-time option.)^</Line>
  <Line number="1979">** ^If either argument to this option is negative, then that argument is</Line>
  <Line number="1980">** changed to its compile-time default.</Line>
  <Line number="1981">**</Line>
  <Line number="1982">** [[SQLITE_CONFIG_WIN32_HEAPSIZE]]</Line>
  <Line number="1983">** &lt;dt&gt;SQLITE_CONFIG_WIN32_HEAPSIZE</Line>
  <Line number="1984">** &lt;dd&gt;^The SQLITE_CONFIG_WIN32_HEAPSIZE option is only available if SQLite is</Line>
  <Line number="1985">** compiled for Windows with the [SQLITE_WIN32_MALLOC] pre-processor macro</Line>
  <Line number="1986">** defined. ^SQLITE_CONFIG_WIN32_HEAPSIZE takes a 32-bit unsigned integer value</Line>
  <Line number="1987">** that specifies the maximum size of the created heap.</Line>
  <Line number="1988">**</Line>
  <Line number="1989">** [[SQLITE_CONFIG_PCACHE_HDRSZ]]</Line>
  <Line number="1990">** &lt;dt&gt;SQLITE_CONFIG_PCACHE_HDRSZ</Line>
  <Line number="1991">** &lt;dd&gt;^The SQLITE_CONFIG_PCACHE_HDRSZ option takes a single parameter which</Line>
  <Line number="1992">** is a pointer to an integer and writes into that integer the number of extra</Line>
  <Line number="1993">** bytes per page required for each page in [SQLITE_CONFIG_PAGECACHE].</Line>
  <Line number="1994">** The amount of extra space required can change depending on the compiler,</Line>
  <Line number="1995">** target platform, and SQLite version.</Line>
  <Line number="1996">**</Line>
  <Line number="1997">** [[SQLITE_CONFIG_PMASZ]]</Line>
  <Line number="1998">** &lt;dt&gt;SQLITE_CONFIG_PMASZ</Line>
  <Line number="1999">** &lt;dd&gt;^The SQLITE_CONFIG_PMASZ option takes a single parameter which</Line>
  <Line number="2000">** is an unsigned integer and sets the &quot;Minimum PMA Size&quot; for the multithreaded</Line>
  <Line number="2001">** sorter to that integer.  The default minimum PMA Size is set by the</Line>
  <Line number="2002">** [SQLITE_SORTER_PMASZ] compile-time option.  New threads are launched</Line>
  <Line number="2003">** to help with sort operations when multithreaded sorting</Line>
  <Line number="2004">** is enabled (using the [PRAGMA threads] command) and the amount of content</Line>
  <Line number="2005">** to be sorted exceeds the page size times the minimum of the</Line>
  <Line number="2006">** [PRAGMA cache_size] setting and this value.</Line>
  <Line number="2007">**</Line>
  <Line number="2008">** [[SQLITE_CONFIG_STMTJRNL_SPILL]]</Line>
  <Line number="2009">** &lt;dt&gt;SQLITE_CONFIG_STMTJRNL_SPILL</Line>
  <Line number="2010">** &lt;dd&gt;^The SQLITE_CONFIG_STMTJRNL_SPILL option takes a single parameter which</Line>
  <Line number="2011">** becomes the [statement journal] spill-to-disk threshold.</Line>
  <Line number="2012">** [Statement journals] are held in memory until their size (in bytes)</Line>
  <Line number="2013">** exceeds this threshold, at which point they are written to disk.</Line>
  <Line number="2014">** Or if the threshold is -1, statement journals are always held</Line>
  <Line number="2015">** exclusively in memory.</Line>
  <Line number="2016">** Since many statement journals never become large, setting the spill</Line>
  <Line number="2017">** threshold to a value such as 64KiB can greatly reduce the amount of</Line>
  <Line number="2018">** I/O required to support statement rollback.</Line>
  <Line number="2019">** The default value for this setting is controlled by the</Line>
  <Line number="2020">** [SQLITE_STMTJRNL_SPILL] compile-time option.</Line>
  <Line number="2021">**</Line>
  <Line number="2022">** [[SQLITE_CONFIG_SORTERREF_SIZE]]</Line>
  <Line number="2023">** &lt;dt&gt;SQLITE_CONFIG_SORTERREF_SIZE</Line>
  <Line number="2024">** &lt;dd&gt;The SQLITE_CONFIG_SORTERREF_SIZE option accepts a single parameter</Line>
  <Line number="2025">** of type (int) - the new value of the sorter-reference size threshold.</Line>
  <Line number="2026">** Usually, when SQLite uses an external sort to order records according</Line>
  <Line number="2027">** to an ORDER BY clause, all fields required by the caller are present in the</Line>
  <Line number="2028">** sorted records. However, if SQLite determines based on the declared type</Line>
  <Line number="2029">** of a table column that its values are likely to be very large - larger</Line>
  <Line number="2030">** than the configured sorter-reference size threshold - then a reference</Line>
  <Line number="2031">** is stored in each sorted record and the required column values loaded</Line>
  <Line number="2032">** from the database as records are returned in sorted order. The default</Line>
  <Line number="2033">** value for this option is to never use this optimization. Specifying a</Line>
  <Line number="2034">** negative value for this option restores the default behaviour.</Line>
  <Line number="2035">** This option is only available if SQLite is compiled with the</Line>
  <Line number="2036">** [SQLITE_ENABLE_SORTER_REFERENCES] compile-time option.</Line>
  <Line number="2037">**</Line>
  <Line number="2038">** [[SQLITE_CONFIG_MEMDB_MAXSIZE]]</Line>
  <Line number="2039">** &lt;dt&gt;SQLITE_CONFIG_MEMDB_MAXSIZE</Line>
  <Line number="2040">** &lt;dd&gt;The SQLITE_CONFIG_MEMDB_MAXSIZE option accepts a single parameter</Line>
  <Line number="2041">** [sqlite3_int64] parameter which is the default maximum size for an in-memory</Line>
  <Line number="2042">** database created using [sqlite3_deserialize()].  This default maximum</Line>
  <Line number="2043">** size can be adjusted up or down for individual databases using the</Line>
  <Line number="2044">** [SQLITE_FCNTL_SIZE_LIMIT] [sqlite3_file_control|file-control].  If this</Line>
  <Line number="2045">** configuration setting is never used, then the default maximum is determined</Line>
  <Line number="2046">** by the [SQLITE_MEMDB_DEFAULT_MAXSIZE] compile-time option.  If that</Line>
  <Line number="2047">** compile-time option is not set, then the default maximum is 1073741824.</Line>
  <Line number="2048">** &lt;/dl&gt;</Line>
  <Line number="2049">*/</Line>
  <Line number="2050">#define SQLITE_CONFIG_SINGLETHREAD  1  /* nil */</Line>
  <Line number="2051">#define SQLITE_CONFIG_MULTITHREAD   2  /* nil */</Line>
  <Line number="2052">#define SQLITE_CONFIG_SERIALIZED    3  /* nil */</Line>
  <Line number="2053">#define SQLITE_CONFIG_MALLOC        4  /* sqlite3_mem_methods* */</Line>
  <Line number="2054">#define SQLITE_CONFIG_GETMALLOC     5  /* sqlite3_mem_methods* */</Line>
  <Line number="2055">#define SQLITE_CONFIG_SCRATCH       6  /* No longer used */</Line>
  <Line number="2056">#define SQLITE_CONFIG_PAGECACHE     7  /* void*, int sz, int N */</Line>
  <Line number="2057">#define SQLITE_CONFIG_HEAP          8  /* void*, int nByte, int min */</Line>
  <Line number="2058">#define SQLITE_CONFIG_MEMSTATUS     9  /* boolean */</Line>
  <Line number="2059">#define SQLITE_CONFIG_MUTEX        10  /* sqlite3_mutex_methods* */</Line>
  <Line number="2060">#define SQLITE_CONFIG_GETMUTEX     11  /* sqlite3_mutex_methods* */</Line>
  <Line number="2061">/* previously SQLITE_CONFIG_CHUNKALLOC 12 which is now unused. */</Line>
  <Line number="2062">#define SQLITE_CONFIG_LOOKASIDE    13  /* int int */</Line>
  <Line number="2063">#define SQLITE_CONFIG_PCACHE       14  /* no-op */</Line>
  <Line number="2064">#define SQLITE_CONFIG_GETPCACHE    15  /* no-op */</Line>
  <Line number="2065">#define SQLITE_CONFIG_LOG          16  /* xFunc, void* */</Line>
  <Line number="2066">#define SQLITE_CONFIG_URI          17  /* int */</Line>
  <Line number="2067">#define SQLITE_CONFIG_PCACHE2      18  /* sqlite3_pcache_methods2* */</Line>
  <Line number="2068">#define SQLITE_CONFIG_GETPCACHE2   19  /* sqlite3_pcache_methods2* */</Line>
  <Line number="2069">#define SQLITE_CONFIG_COVERING_INDEX_SCAN 20  /* int */</Line>
  <Line number="2070">#define SQLITE_CONFIG_SQLLOG       21  /* xSqllog, void* */</Line>
  <Line number="2071">#define SQLITE_CONFIG_MMAP_SIZE    22  /* sqlite3_int64, sqlite3_int64 */</Line>
  <Line number="2072">#define SQLITE_CONFIG_WIN32_HEAPSIZE      23  /* int nByte */</Line>
  <Line number="2073">#define SQLITE_CONFIG_PCACHE_HDRSZ        24  /* int *psz */</Line>
  <Line number="2074">#define SQLITE_CONFIG_PMASZ               25  /* unsigned int szPma */</Line>
  <Line number="2075">#define SQLITE_CONFIG_STMTJRNL_SPILL      26  /* int nByte */</Line>
  <Line number="2076">#define SQLITE_CONFIG_SMALL_MALLOC        27  /* boolean */</Line>
  <Line number="2077">#define SQLITE_CONFIG_SORTERREF_SIZE      28  /* int nByte */</Line>
  <Line number="2078">#define SQLITE_CONFIG_MEMDB_MAXSIZE       29  /* sqlite3_int64 */</Line>
  <Line number="2079"></Line>
  <Line number="2080">/*</Line>
  <Line number="2081">** CAPI3REF: Database Connection Configuration Options</Line>
  <Line number="2082">**</Line>
  <Line number="2083">** These constants are the available integer configuration options that</Line>
  <Line number="2084">** can be passed as the second argument to the [sqlite3_db_config()] interface.</Line>
  <Line number="2085">**</Line>
  <Line number="2086">** New configuration options may be added in future releases of SQLite.</Line>
  <Line number="2087">** Existing configuration options might be discontinued.  Applications</Line>
  <Line number="2088">** should check the return code from [sqlite3_db_config()] to make sure that</Line>
  <Line number="2089">** the call worked.  ^The [sqlite3_db_config()] interface will return a</Line>
  <Line number="2090">** non-zero [error code] if a discontinued or unsupported configuration option</Line>
  <Line number="2091">** is invoked.</Line>
  <Line number="2092">**</Line>
  <Line number="2093">** &lt;dl&gt;</Line>
  <Line number="2094">** [[SQLITE_DBCONFIG_LOOKASIDE]]</Line>
  <Line number="2095">** &lt;dt&gt;SQLITE_DBCONFIG_LOOKASIDE&lt;/dt&gt;</Line>
  <Line number="2096">** &lt;dd&gt; ^This option takes three additional arguments that determine the</Line>
  <Line number="2097">** [lookaside memory allocator] configuration for the [database connection].</Line>
  <Line number="2098">** ^The first argument (the third parameter to [sqlite3_db_config()] is a</Line>
  <Line number="2099">** pointer to a memory buffer to use for lookaside memory.</Line>
  <Line number="2100">** ^The first argument after the SQLITE_DBCONFIG_LOOKASIDE verb</Line>
  <Line number="2101">** may be NULL in which case SQLite will allocate the</Line>
  <Line number="2102">** lookaside buffer itself using [sqlite3_malloc()]. ^The second argument is the</Line>
  <Line number="2103">** size of each lookaside buffer slot.  ^The third argument is the number of</Line>
  <Line number="2104">** slots.  The size of the buffer in the first argument must be greater than</Line>
  <Line number="2105">** or equal to the product of the second and third arguments.  The buffer</Line>
  <Line number="2106">** must be aligned to an 8-byte boundary.  ^If the second argument to</Line>
  <Line number="2107">** SQLITE_DBCONFIG_LOOKASIDE is not a multiple of 8, it is internally</Line>
  <Line number="2108">** rounded down to the next smaller multiple of 8.  ^(The lookaside memory</Line>
  <Line number="2109">** configuration for a database connection can only be changed when that</Line>
  <Line number="2110">** connection is not currently using lookaside memory, or in other words</Line>
  <Line number="2111">** when the &quot;current value&quot; returned by</Line>
  <Line number="2112">** [sqlite3_db_status](D,[SQLITE_CONFIG_LOOKASIDE],...) is zero.</Line>
  <Line number="2113">** Any attempt to change the lookaside memory configuration when lookaside</Line>
  <Line number="2114">** memory is in use leaves the configuration unchanged and returns</Line>
  <Line number="2115">** [SQLITE_BUSY].)^&lt;/dd&gt;</Line>
  <Line number="2116">**</Line>
  <Line number="2117">** [[SQLITE_DBCONFIG_ENABLE_FKEY]]</Line>
  <Line number="2118">** &lt;dt&gt;SQLITE_DBCONFIG_ENABLE_FKEY&lt;/dt&gt;</Line>
  <Line number="2119">** &lt;dd&gt; ^This option is used to enable or disable the enforcement of</Line>
  <Line number="2120">** [foreign key constraints].  There should be two additional arguments.</Line>
  <Line number="2121">** The first argument is an integer which is 0 to disable FK enforcement,</Line>
  <Line number="2122">** positive to enable FK enforcement or negative to leave FK enforcement</Line>
  <Line number="2123">** unchanged.  The second parameter is a pointer to an integer into which</Line>
  <Line number="2124">** is written 0 or 1 to indicate whether FK enforcement is off or on</Line>
  <Line number="2125">** following this call.  The second parameter may be a NULL pointer, in</Line>
  <Line number="2126">** which case the FK enforcement setting is not reported back. &lt;/dd&gt;</Line>
  <Line number="2127">**</Line>
  <Line number="2128">** [[SQLITE_DBCONFIG_ENABLE_TRIGGER]]</Line>
  <Line number="2129">** &lt;dt&gt;SQLITE_DBCONFIG_ENABLE_TRIGGER&lt;/dt&gt;</Line>
  <Line number="2130">** &lt;dd&gt; ^This option is used to enable or disable [CREATE TRIGGER | triggers].</Line>
  <Line number="2131">** There should be two additional arguments.</Line>
  <Line number="2132">** The first argument is an integer which is 0 to disable triggers,</Line>
  <Line number="2133">** positive to enable triggers or negative to leave the setting unchanged.</Line>
  <Line number="2134">** The second parameter is a pointer to an integer into which</Line>
  <Line number="2135">** is written 0 or 1 to indicate whether triggers are disabled or enabled</Line>
  <Line number="2136">** following this call.  The second parameter may be a NULL pointer, in</Line>
  <Line number="2137">** which case the trigger setting is not reported back.</Line>
  <Line number="2138">**</Line>
  <Line number="2139">** &lt;p&gt;Originally this option disabled all triggers.  ^(However, since</Line>
  <Line number="2140">** SQLite version 3.35.0, TEMP triggers are still allowed even if</Line>
  <Line number="2141">** this option is off.  So, in other words, this option now only disables</Line>
  <Line number="2142">** triggers in the main database schema or in the schemas of ATTACH-ed</Line>
  <Line number="2143">** databases.)^ &lt;/dd&gt;</Line>
  <Line number="2144">**</Line>
  <Line number="2145">** [[SQLITE_DBCONFIG_ENABLE_VIEW]]</Line>
  <Line number="2146">** &lt;dt&gt;SQLITE_DBCONFIG_ENABLE_VIEW&lt;/dt&gt;</Line>
  <Line number="2147">** &lt;dd&gt; ^This option is used to enable or disable [CREATE VIEW | views].</Line>
  <Line number="2148">** There should be two additional arguments.</Line>
  <Line number="2149">** The first argument is an integer which is 0 to disable views,</Line>
  <Line number="2150">** positive to enable views or negative to leave the setting unchanged.</Line>
  <Line number="2151">** The second parameter is a pointer to an integer into which</Line>
  <Line number="2152">** is written 0 or 1 to indicate whether views are disabled or enabled</Line>
  <Line number="2153">** following this call.  The second parameter may be a NULL pointer, in</Line>
  <Line number="2154">** which case the view setting is not reported back.</Line>
  <Line number="2155">**</Line>
  <Line number="2156">** &lt;p&gt;Originally this option disabled all views.  ^(However, since</Line>
  <Line number="2157">** SQLite version 3.35.0, TEMP views are still allowed even if</Line>
  <Line number="2158">** this option is off.  So, in other words, this option now only disables</Line>
  <Line number="2159">** views in the main database schema or in the schemas of ATTACH-ed</Line>
  <Line number="2160">** databases.)^ &lt;/dd&gt;</Line>
  <Line number="2161">**</Line>
  <Line number="2162">** [[SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER]]</Line>
  <Line number="2163">** &lt;dt&gt;SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER&lt;/dt&gt;</Line>
  <Line number="2164">** &lt;dd&gt; ^This option is used to enable or disable the</Line>
  <Line number="2165">** [fts3_tokenizer()] function which is part of the</Line>
  <Line number="2166">** [FTS3] full-text search engine extension.</Line>
  <Line number="2167">** There should be two additional arguments.</Line>
  <Line number="2168">** The first argument is an integer which is 0 to disable fts3_tokenizer() or</Line>
  <Line number="2169">** positive to enable fts3_tokenizer() or negative to leave the setting</Line>
  <Line number="2170">** unchanged.</Line>
  <Line number="2171">** The second parameter is a pointer to an integer into which</Line>
  <Line number="2172">** is written 0 or 1 to indicate whether fts3_tokenizer is disabled or enabled</Line>
  <Line number="2173">** following this call.  The second parameter may be a NULL pointer, in</Line>
  <Line number="2174">** which case the new setting is not reported back. &lt;/dd&gt;</Line>
  <Line number="2175">**</Line>
  <Line number="2176">** [[SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION]]</Line>
  <Line number="2177">** &lt;dt&gt;SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION&lt;/dt&gt;</Line>
  <Line number="2178">** &lt;dd&gt; ^This option is used to enable or disable the [sqlite3_load_extension()]</Line>
  <Line number="2179">** interface independently of the [load_extension()] SQL function.</Line>
  <Line number="2180">** The [sqlite3_enable_load_extension()] API enables or disables both the</Line>
  <Line number="2181">** C-API [sqlite3_load_extension()] and the SQL function [load_extension()].</Line>
  <Line number="2182">** There should be two additional arguments.</Line>
  <Line number="2183">** When the first argument to this interface is 1, then only the C-API is</Line>
  <Line number="2184">** enabled and the SQL function remains disabled.  If the first argument to</Line>
  <Line number="2185">** this interface is 0, then both the C-API and the SQL function are disabled.</Line>
  <Line number="2186">** If the first argument is -1, then no changes are made to state of either the</Line>
  <Line number="2187">** C-API or the SQL function.</Line>
  <Line number="2188">** The second parameter is a pointer to an integer into which</Line>
  <Line number="2189">** is written 0 or 1 to indicate whether [sqlite3_load_extension()] interface</Line>
  <Line number="2190">** is disabled or enabled following this call.  The second parameter may</Line>
  <Line number="2191">** be a NULL pointer, in which case the new setting is not reported back.</Line>
  <Line number="2192">** &lt;/dd&gt;</Line>
  <Line number="2193">**</Line>
  <Line number="2194">** [[SQLITE_DBCONFIG_MAINDBNAME]] &lt;dt&gt;SQLITE_DBCONFIG_MAINDBNAME&lt;/dt&gt;</Line>
  <Line number="2195">** &lt;dd&gt; ^This option is used to change the name of the &quot;main&quot; database</Line>
  <Line number="2196">** schema.  ^The sole argument is a pointer to a constant UTF8 string</Line>
  <Line number="2197">** which will become the new schema name in place of &quot;main&quot;.  ^SQLite</Line>
  <Line number="2198">** does not make a copy of the new main schema name string, so the application</Line>
  <Line number="2199">** must ensure that the argument passed into this DBCONFIG option is unchanged</Line>
  <Line number="2200">** until after the database connection closes.</Line>
  <Line number="2201">** &lt;/dd&gt;</Line>
  <Line number="2202">**</Line>
  <Line number="2203">** [[SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE]]</Line>
  <Line number="2204">** &lt;dt&gt;SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE&lt;/dt&gt;</Line>
  <Line number="2205">** &lt;dd&gt; Usually, when a database in wal mode is closed or detached from a</Line>
  <Line number="2206">** database handle, SQLite checks if this will mean that there are now no</Line>
  <Line number="2207">** connections at all to the database. If so, it performs a checkpoint</Line>
  <Line number="2208">** operation before closing the connection. This option may be used to</Line>
  <Line number="2209">** override this behaviour. The first parameter passed to this operation</Line>
  <Line number="2210">** is an integer - positive to disable checkpoints-on-close, or zero (the</Line>
  <Line number="2211">** default) to enable them, and negative to leave the setting unchanged.</Line>
  <Line number="2212">** The second parameter is a pointer to an integer</Line>
  <Line number="2213">** into which is written 0 or 1 to indicate whether checkpoints-on-close</Line>
  <Line number="2214">** have been disabled - 0 if they are not disabled, 1 if they are.</Line>
  <Line number="2215">** &lt;/dd&gt;</Line>
  <Line number="2216">**</Line>
  <Line number="2217">** [[SQLITE_DBCONFIG_ENABLE_QPSG]] &lt;dt&gt;SQLITE_DBCONFIG_ENABLE_QPSG&lt;/dt&gt;</Line>
  <Line number="2218">** &lt;dd&gt;^(The SQLITE_DBCONFIG_ENABLE_QPSG option activates or deactivates</Line>
  <Line number="2219">** the [query planner stability guarantee] (QPSG).  When the QPSG is active,</Line>
  <Line number="2220">** a single SQL query statement will always use the same algorithm regardless</Line>
  <Line number="2221">** of values of [bound parameters].)^ The QPSG disables some query optimizations</Line>
  <Line number="2222">** that look at the values of bound parameters, which can make some queries</Line>
  <Line number="2223">** slower.  But the QPSG has the advantage of more predictable behavior.  With</Line>
  <Line number="2224">** the QPSG active, SQLite will always use the same query plan in the field as</Line>
  <Line number="2225">** was used during testing in the lab.</Line>
  <Line number="2226">** The first argument to this setting is an integer which is 0 to disable</Line>
  <Line number="2227">** the QPSG, positive to enable QPSG, or negative to leave the setting</Line>
  <Line number="2228">** unchanged. The second parameter is a pointer to an integer into which</Line>
  <Line number="2229">** is written 0 or 1 to indicate whether the QPSG is disabled or enabled</Line>
  <Line number="2230">** following this call.</Line>
  <Line number="2231">** &lt;/dd&gt;</Line>
  <Line number="2232">**</Line>
  <Line number="2233">** [[SQLITE_DBCONFIG_TRIGGER_EQP]] &lt;dt&gt;SQLITE_DBCONFIG_TRIGGER_EQP&lt;/dt&gt;</Line>
  <Line number="2234">** &lt;dd&gt; By default, the output of EXPLAIN QUERY PLAN commands does not</Line>
  <Line number="2235">** include output for any operations performed by trigger programs. This</Line>
  <Line number="2236">** option is used to set or clear (the default) a flag that governs this</Line>
  <Line number="2237">** behavior. The first parameter passed to this operation is an integer -</Line>
  <Line number="2238">** positive to enable output for trigger programs, or zero to disable it,</Line>
  <Line number="2239">** or negative to leave the setting unchanged.</Line>
  <Line number="2240">** The second parameter is a pointer to an integer into which is written</Line>
  <Line number="2241">** 0 or 1 to indicate whether output-for-triggers has been disabled - 0 if</Line>
  <Line number="2242">** it is not disabled, 1 if it is.</Line>
  <Line number="2243">** &lt;/dd&gt;</Line>
  <Line number="2244">**</Line>
  <Line number="2245">** [[SQLITE_DBCONFIG_RESET_DATABASE]] &lt;dt&gt;SQLITE_DBCONFIG_RESET_DATABASE&lt;/dt&gt;</Line>
  <Line number="2246">** &lt;dd&gt; Set the SQLITE_DBCONFIG_RESET_DATABASE flag and then run</Line>
  <Line number="2247">** [VACUUM] in order to reset a database back to an empty database</Line>
  <Line number="2248">** with no schema and no content. The following process works even for</Line>
  <Line number="2249">** a badly corrupted database file:</Line>
  <Line number="2250">** &lt;ol&gt;</Line>
  <Line number="2251">** &lt;li&gt; If the database connection is newly opened, make sure it has read the</Line>
  <Line number="2252">**      database schema by preparing then discarding some query against the</Line>
  <Line number="2253">**      database, or calling sqlite3_table_column_metadata(), ignoring any</Line>
  <Line number="2254">**      errors.  This step is only necessary if the application desires to keep</Line>
  <Line number="2255">**      the database in WAL mode after the reset if it was in WAL mode before</Line>
  <Line number="2256">**      the reset.</Line>
  <Line number="2257">** &lt;li&gt; sqlite3_db_config(db, SQLITE_DBCONFIG_RESET_DATABASE, 1, 0);</Line>
  <Line number="2258">** &lt;li&gt; [sqlite3_exec](db, &quot;[VACUUM]&quot;, 0, 0, 0);</Line>
  <Line number="2259">** &lt;li&gt; sqlite3_db_config(db, SQLITE_DBCONFIG_RESET_DATABASE, 0, 0);</Line>
  <Line number="2260">** &lt;/ol&gt;</Line>
  <Line number="2261">** Because resetting a database is destructive and irreversible, the</Line>
  <Line number="2262">** process requires the use of this obscure API and multiple steps to help</Line>
  <Line number="2263">** ensure that it does not happen by accident.</Line>
  <Line number="2264">**</Line>
  <Line number="2265">** [[SQLITE_DBCONFIG_DEFENSIVE]] &lt;dt&gt;SQLITE_DBCONFIG_DEFENSIVE&lt;/dt&gt;</Line>
  <Line number="2266">** &lt;dd&gt;The SQLITE_DBCONFIG_DEFENSIVE option activates or deactivates the</Line>
  <Line number="2267">** &quot;defensive&quot; flag for a database connection.  When the defensive</Line>
  <Line number="2268">** flag is enabled, language features that allow ordinary SQL to</Line>
  <Line number="2269">** deliberately corrupt the database file are disabled.  The disabled</Line>
  <Line number="2270">** features include but are not limited to the following:</Line>
  <Line number="2271">** &lt;ul&gt;</Line>
  <Line number="2272">** &lt;li&gt; The [PRAGMA writable_schema=ON] statement.</Line>
  <Line number="2273">** &lt;li&gt; The [PRAGMA journal_mode=OFF] statement.</Line>
  <Line number="2274">** &lt;li&gt; Writes to the [sqlite_dbpage] virtual table.</Line>
  <Line number="2275">** &lt;li&gt; Direct writes to [shadow tables].</Line>
  <Line number="2276">** &lt;/ul&gt;</Line>
  <Line number="2277">** &lt;/dd&gt;</Line>
  <Line number="2278">**</Line>
  <Line number="2279">** [[SQLITE_DBCONFIG_WRITABLE_SCHEMA]] &lt;dt&gt;SQLITE_DBCONFIG_WRITABLE_SCHEMA&lt;/dt&gt;</Line>
  <Line number="2280">** &lt;dd&gt;The SQLITE_DBCONFIG_WRITABLE_SCHEMA option activates or deactivates the</Line>
  <Line number="2281">** &quot;writable_schema&quot; flag. This has the same effect and is logically equivalent</Line>
  <Line number="2282">** to setting [PRAGMA writable_schema=ON] or [PRAGMA writable_schema=OFF].</Line>
  <Line number="2283">** The first argument to this setting is an integer which is 0 to disable</Line>
  <Line number="2284">** the writable_schema, positive to enable writable_schema, or negative to</Line>
  <Line number="2285">** leave the setting unchanged. The second parameter is a pointer to an</Line>
  <Line number="2286">** integer into which is written 0 or 1 to indicate whether the writable_schema</Line>
  <Line number="2287">** is enabled or disabled following this call.</Line>
  <Line number="2288">** &lt;/dd&gt;</Line>
  <Line number="2289">**</Line>
  <Line number="2290">** [[SQLITE_DBCONFIG_LEGACY_ALTER_TABLE]]</Line>
  <Line number="2291">** &lt;dt&gt;SQLITE_DBCONFIG_LEGACY_ALTER_TABLE&lt;/dt&gt;</Line>
  <Line number="2292">** &lt;dd&gt;The SQLITE_DBCONFIG_LEGACY_ALTER_TABLE option activates or deactivates</Line>
  <Line number="2293">** the legacy behavior of the [ALTER TABLE RENAME] command such it</Line>
  <Line number="2294">** behaves as it did prior to [version 3.24.0] (2018-06-04).  See the</Line>
  <Line number="2295">** &quot;Compatibility Notice&quot; on the [ALTER TABLE RENAME documentation] for</Line>
  <Line number="2296">** additional information. This feature can also be turned on and off</Line>
  <Line number="2297">** using the [PRAGMA legacy_alter_table] statement.</Line>
  <Line number="2298">** &lt;/dd&gt;</Line>
  <Line number="2299">**</Line>
  <Line number="2300">** [[SQLITE_DBCONFIG_DQS_DML]]</Line>
  <Line number="2301">** &lt;dt&gt;SQLITE_DBCONFIG_DQS_DML&lt;/td&gt;</Line>
  <Line number="2302">** &lt;dd&gt;The SQLITE_DBCONFIG_DQS_DML option activates or deactivates</Line>
  <Line number="2303">** the legacy [double-quoted string literal] misfeature for DML statements</Line>
  <Line number="2304">** only, that is DELETE, INSERT, SELECT, and UPDATE statements. The</Line>
  <Line number="2305">** default value of this setting is determined by the [-DSQLITE_DQS]</Line>
  <Line number="2306">** compile-time option.</Line>
  <Line number="2307">** &lt;/dd&gt;</Line>
  <Line number="2308">**</Line>
  <Line number="2309">** [[SQLITE_DBCONFIG_DQS_DDL]]</Line>
  <Line number="2310">** &lt;dt&gt;SQLITE_DBCONFIG_DQS_DDL&lt;/td&gt;</Line>
  <Line number="2311">** &lt;dd&gt;The SQLITE_DBCONFIG_DQS option activates or deactivates</Line>
  <Line number="2312">** the legacy [double-quoted string literal] misfeature for DDL statements,</Line>
  <Line number="2313">** such as CREATE TABLE and CREATE INDEX. The</Line>
  <Line number="2314">** default value of this setting is determined by the [-DSQLITE_DQS]</Line>
  <Line number="2315">** compile-time option.</Line>
  <Line number="2316">** &lt;/dd&gt;</Line>
  <Line number="2317">**</Line>
  <Line number="2318">** [[SQLITE_DBCONFIG_TRUSTED_SCHEMA]]</Line>
  <Line number="2319">** &lt;dt&gt;SQLITE_DBCONFIG_TRUSTED_SCHEMA&lt;/td&gt;</Line>
  <Line number="2320">** &lt;dd&gt;The SQLITE_DBCONFIG_TRUSTED_SCHEMA option tells SQLite to</Line>
  <Line number="2321">** assume that database schemas are untainted by malicious content.</Line>
  <Line number="2322">** When the SQLITE_DBCONFIG_TRUSTED_SCHEMA option is disabled, SQLite</Line>
  <Line number="2323">** takes additional defensive steps to protect the application from harm</Line>
  <Line number="2324">** including:</Line>
  <Line number="2325">** &lt;ul&gt;</Line>
  <Line number="2326">** &lt;li&gt; Prohibit the use of SQL functions inside triggers, views,</Line>
  <Line number="2327">** CHECK constraints, DEFAULT clauses, expression indexes,</Line>
  <Line number="2328">** partial indexes, or generated columns</Line>
  <Line number="2329">** unless those functions are tagged with [SQLITE_INNOCUOUS].</Line>
  <Line number="2330">** &lt;li&gt; Prohibit the use of virtual tables inside of triggers or views</Line>
  <Line number="2331">** unless those virtual tables are tagged with [SQLITE_VTAB_INNOCUOUS].</Line>
  <Line number="2332">** &lt;/ul&gt;</Line>
  <Line number="2333">** This setting defaults to &quot;on&quot; for legacy compatibility, however</Line>
  <Line number="2334">** all applications are advised to turn it off if possible. This setting</Line>
  <Line number="2335">** can also be controlled using the [PRAGMA trusted_schema] statement.</Line>
  <Line number="2336">** &lt;/dd&gt;</Line>
  <Line number="2337">**</Line>
  <Line number="2338">** [[SQLITE_DBCONFIG_LEGACY_FILE_FORMAT]]</Line>
  <Line number="2339">** &lt;dt&gt;SQLITE_DBCONFIG_LEGACY_FILE_FORMAT&lt;/td&gt;</Line>
  <Line number="2340">** &lt;dd&gt;The SQLITE_DBCONFIG_LEGACY_FILE_FORMAT option activates or deactivates</Line>
  <Line number="2341">** the legacy file format flag.  When activated, this flag causes all newly</Line>
  <Line number="2342">** created database file to have a schema format version number (the 4-byte</Line>
  <Line number="2343">** integer found at offset 44 into the database header) of 1.  This in turn</Line>
  <Line number="2344">** means that the resulting database file will be readable and writable by</Line>
  <Line number="2345">** any SQLite version back to 3.0.0 ([dateof:3.0.0]).  Without this setting,</Line>
  <Line number="2346">** newly created databases are generally not understandable by SQLite versions</Line>
  <Line number="2347">** prior to 3.3.0 ([dateof:3.3.0]).  As these words are written, there</Line>
  <Line number="2348">** is now scarcely any need to generated database files that are compatible</Line>
  <Line number="2349">** all the way back to version 3.0.0, and so this setting is of little</Line>
  <Line number="2350">** practical use, but is provided so that SQLite can continue to claim the</Line>
  <Line number="2351">** ability to generate new database files that are compatible with  version</Line>
  <Line number="2352">** 3.0.0.</Line>
  <Line number="2353">** &lt;p&gt;Note that when the SQLITE_DBCONFIG_LEGACY_FILE_FORMAT setting is on,</Line>
  <Line number="2354">** the [VACUUM] command will fail with an obscure error when attempting to</Line>
  <Line number="2355">** process a table with generated columns and a descending index.  This is</Line>
  <Line number="2356">** not considered a bug since SQLite versions 3.3.0 and earlier do not support</Line>
  <Line number="2357">** either generated columns or decending indexes.</Line>
  <Line number="2358">** &lt;/dd&gt;</Line>
  <Line number="2359">** &lt;/dl&gt;</Line>
  <Line number="2360">*/</Line>
  <Line number="2361">#define SQLITE_DBCONFIG_MAINDBNAME            1000 /* const char* */</Line>
  <Line number="2362">#define SQLITE_DBCONFIG_LOOKASIDE             1001 /* void* int int */</Line>
  <Line number="2363">#define SQLITE_DBCONFIG_ENABLE_FKEY           1002 /* int int* */</Line>
  <Line number="2364">#define SQLITE_DBCONFIG_ENABLE_TRIGGER        1003 /* int int* */</Line>
  <Line number="2365">#define SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1004 /* int int* */</Line>
  <Line number="2366">#define SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION 1005 /* int int* */</Line>
  <Line number="2367">#define SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      1006 /* int int* */</Line>
  <Line number="2368">#define SQLITE_DBCONFIG_ENABLE_QPSG           1007 /* int int* */</Line>
  <Line number="2369">#define SQLITE_DBCONFIG_TRIGGER_EQP           1008 /* int int* */</Line>
  <Line number="2370">#define SQLITE_DBCONFIG_RESET_DATABASE        1009 /* int int* */</Line>
  <Line number="2371">#define SQLITE_DBCONFIG_DEFENSIVE             1010 /* int int* */</Line>
  <Line number="2372">#define SQLITE_DBCONFIG_WRITABLE_SCHEMA       1011 /* int int* */</Line>
  <Line number="2373">#define SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    1012 /* int int* */</Line>
  <Line number="2374">#define SQLITE_DBCONFIG_DQS_DML               1013 /* int int* */</Line>
  <Line number="2375">#define SQLITE_DBCONFIG_DQS_DDL               1014 /* int int* */</Line>
  <Line number="2376">#define SQLITE_DBCONFIG_ENABLE_VIEW           1015 /* int int* */</Line>
  <Line number="2377">#define SQLITE_DBCONFIG_LEGACY_FILE_FORMAT    1016 /* int int* */</Line>
  <Line number="2378">#define SQLITE_DBCONFIG_TRUSTED_SCHEMA        1017 /* int int* */</Line>
  <Line number="2379">#define SQLITE_DBCONFIG_MAX                   1017 /* Largest DBCONFIG */</Line>
  <Line number="2380"></Line>
  <Line number="2381">/*</Line>
  <Line number="2382">** CAPI3REF: Enable Or Disable Extended Result Codes</Line>
  <Line number="2383">** METHOD: sqlite3</Line>
  <Line number="2384">**</Line>
  <Line number="2385">** ^The sqlite3_extended_result_codes() routine enables or disables the</Line>
  <Line number="2386">** [extended result codes] feature of SQLite. ^The extended result</Line>
  <Line number="2387">** codes are disabled by default for historical compatibility.</Line>
  <Line number="2388">*/</Line>
  <Line number="2389">SQLITE_API int sqlite3_extended_result_codes(sqlite3*, int onoff);</Line>
  <Line number="2390"></Line>
  <Line number="2391">/*</Line>
  <Line number="2392">** CAPI3REF: Last Insert Rowid</Line>
  <Line number="2393">** METHOD: sqlite3</Line>
  <Line number="2394">**</Line>
  <Line number="2395">** ^Each entry in most SQLite tables (except for [WITHOUT ROWID] tables)</Line>
  <Line number="2396">** has a unique 64-bit signed</Line>
  <Line number="2397">** integer key called the [ROWID | &quot;rowid&quot;]. ^The rowid is always available</Line>
  <Line number="2398">** as an undeclared column named ROWID, OID, or _ROWID_ as long as those</Line>
  <Line number="2399">** names are not also used by explicitly declared columns. ^If</Line>
  <Line number="2400">** the table has a column of type [INTEGER PRIMARY KEY] then that column</Line>
  <Line number="2401">** is another alias for the rowid.</Line>
  <Line number="2402">**</Line>
  <Line number="2403">** ^The sqlite3_last_insert_rowid(D) interface usually returns the [rowid] of</Line>
  <Line number="2404">** the most recent successful [INSERT] into a rowid table or [virtual table]</Line>
  <Line number="2405">** on database connection D. ^Inserts into [WITHOUT ROWID] tables are not</Line>
  <Line number="2406">** recorded. ^If no successful [INSERT]s into rowid tables have ever occurred</Line>
  <Line number="2407">** on the database connection D, then sqlite3_last_insert_rowid(D) returns</Line>
  <Line number="2408">** zero.</Line>
  <Line number="2409">**</Line>
  <Line number="2410">** As well as being set automatically as rows are inserted into database</Line>
  <Line number="2411">** tables, the value returned by this function may be set explicitly by</Line>
  <Line number="2412">** [sqlite3_set_last_insert_rowid()]</Line>
  <Line number="2413">**</Line>
  <Line number="2414">** Some virtual table implementations may INSERT rows into rowid tables as</Line>
  <Line number="2415">** part of committing a transaction (e.g. to flush data accumulated in memory</Line>
  <Line number="2416">** to disk). In this case subsequent calls to this function return the rowid</Line>
  <Line number="2417">** associated with these internal INSERT operations, which leads to</Line>
  <Line number="2418">** unintuitive results. Virtual table implementations that do write to rowid</Line>
  <Line number="2419">** tables in this way can avoid this problem by restoring the original</Line>
  <Line number="2420">** rowid value using [sqlite3_set_last_insert_rowid()] before returning</Line>
  <Line number="2421">** control to the user.</Line>
  <Line number="2422">**</Line>
  <Line number="2423">** ^(If an [INSERT] occurs within a trigger then this routine will</Line>
  <Line number="2424">** return the [rowid] of the inserted row as long as the trigger is</Line>
  <Line number="2425">** running. Once the trigger program ends, the value returned</Line>
  <Line number="2426">** by this routine reverts to what it was before the trigger was fired.)^</Line>
  <Line number="2427">**</Line>
  <Line number="2428">** ^An [INSERT] that fails due to a constraint violation is not a</Line>
  <Line number="2429">** successful [INSERT] and does not change the value returned by this</Line>
  <Line number="2430">** routine.  ^Thus INSERT OR FAIL, INSERT OR IGNORE, INSERT OR ROLLBACK,</Line>
  <Line number="2431">** and INSERT OR ABORT make no changes to the return value of this</Line>
  <Line number="2432">** routine when their insertion fails.  ^(When INSERT OR REPLACE</Line>
  <Line number="2433">** encounters a constraint violation, it does not fail.  The</Line>
  <Line number="2434">** INSERT continues to completion after deleting rows that caused</Line>
  <Line number="2435">** the constraint problem so INSERT OR REPLACE will always change</Line>
  <Line number="2436">** the return value of this interface.)^</Line>
  <Line number="2437">**</Line>
  <Line number="2438">** ^For the purposes of this routine, an [INSERT] is considered to</Line>
  <Line number="2439">** be successful even if it is subsequently rolled back.</Line>
  <Line number="2440">**</Line>
  <Line number="2441">** This function is accessible to SQL statements via the</Line>
  <Line number="2442">** [last_insert_rowid() SQL function].</Line>
  <Line number="2443">**</Line>
  <Line number="2444">** If a separate thread performs a new [INSERT] on the same</Line>
  <Line number="2445">** database connection while the [sqlite3_last_insert_rowid()]</Line>
  <Line number="2446">** function is running and thus changes the last insert [rowid],</Line>
  <Line number="2447">** then the value returned by [sqlite3_last_insert_rowid()] is</Line>
  <Line number="2448">** unpredictable and might not equal either the old or the new</Line>
  <Line number="2449">** last insert [rowid].</Line>
  <Line number="2450">*/</Line>
  <Line number="2451">SQLITE_API sqlite3_int64 sqlite3_last_insert_rowid(sqlite3*);</Line>
  <Line number="2452"></Line>
  <Line number="2453">/*</Line>
  <Line number="2454">** CAPI3REF: Set the Last Insert Rowid value.</Line>
  <Line number="2455">** METHOD: sqlite3</Line>
  <Line number="2456">**</Line>
  <Line number="2457">** The sqlite3_set_last_insert_rowid(D, R) method allows the application to</Line>
  <Line number="2458">** set the value returned by calling sqlite3_last_insert_rowid(D) to R</Line>
  <Line number="2459">** without inserting a row into the database.</Line>
  <Line number="2460">*/</Line>
  <Line number="2461">SQLITE_API void sqlite3_set_last_insert_rowid(sqlite3*,sqlite3_int64);</Line>
  <Line number="2462"></Line>
  <Line number="2463">/*</Line>
  <Line number="2464">** CAPI3REF: Count The Number Of Rows Modified</Line>
  <Line number="2465">** METHOD: sqlite3</Line>
  <Line number="2466">**</Line>
  <Line number="2467">** ^This function returns the number of rows modified, inserted or</Line>
  <Line number="2468">** deleted by the most recently completed INSERT, UPDATE or DELETE</Line>
  <Line number="2469">** statement on the database connection specified by the only parameter.</Line>
  <Line number="2470">** ^Executing any other type of SQL statement does not modify the value</Line>
  <Line number="2471">** returned by this function.</Line>
  <Line number="2472">**</Line>
  <Line number="2473">** ^Only changes made directly by the INSERT, UPDATE or DELETE statement are</Line>
  <Line number="2474">** considered - auxiliary changes caused by [CREATE TRIGGER | triggers],</Line>
  <Line number="2475">** [foreign key actions] or [REPLACE] constraint resolution are not counted.</Line>
  <Line number="2476">**</Line>
  <Line number="2477">** Changes to a view that are intercepted by</Line>
  <Line number="2478">** [INSTEAD OF trigger | INSTEAD OF triggers] are not counted. ^The value</Line>
  <Line number="2479">** returned by sqlite3_changes() immediately after an INSERT, UPDATE or</Line>
  <Line number="2480">** DELETE statement run on a view is always zero. Only changes made to real</Line>
  <Line number="2481">** tables are counted.</Line>
  <Line number="2482">**</Line>
  <Line number="2483">** Things are more complicated if the sqlite3_changes() function is</Line>
  <Line number="2484">** executed while a trigger program is running. This may happen if the</Line>
  <Line number="2485">** program uses the [changes() SQL function], or if some other callback</Line>
  <Line number="2486">** function invokes sqlite3_changes() directly. Essentially:</Line>
  <Line number="2487">**</Line>
  <Line number="2488">** &lt;ul&gt;</Line>
  <Line number="2489">**   &lt;li&gt; ^(Before entering a trigger program the value returned by</Line>
  <Line number="2490">**        sqlite3_changes() function is saved. After the trigger program</Line>
  <Line number="2491">**        has finished, the original value is restored.)^</Line>
  <Line number="2492">**</Line>
  <Line number="2493">**   &lt;li&gt; ^(Within a trigger program each INSERT, UPDATE and DELETE</Line>
  <Line number="2494">**        statement sets the value returned by sqlite3_changes()</Line>
  <Line number="2495">**        upon completion as normal. Of course, this value will not include</Line>
  <Line number="2496">**        any changes performed by sub-triggers, as the sqlite3_changes()</Line>
  <Line number="2497">**        value will be saved and restored after each sub-trigger has run.)^</Line>
  <Line number="2498">** &lt;/ul&gt;</Line>
  <Line number="2499">**</Line>
  <Line number="2500">** ^This means that if the changes() SQL function (or similar) is used</Line>
  <Line number="2501">** by the first INSERT, UPDATE or DELETE statement within a trigger, it</Line>
  <Line number="2502">** returns the value as set when the calling statement began executing.</Line>
  <Line number="2503">** ^If it is used by the second or subsequent such statement within a trigger</Line>
  <Line number="2504">** program, the value returned reflects the number of rows modified by the</Line>
  <Line number="2505">** previous INSERT, UPDATE or DELETE statement within the same trigger.</Line>
  <Line number="2506">**</Line>
  <Line number="2507">** If a separate thread makes changes on the same database connection</Line>
  <Line number="2508">** while [sqlite3_changes()] is running then the value returned</Line>
  <Line number="2509">** is unpredictable and not meaningful.</Line>
  <Line number="2510">**</Line>
  <Line number="2511">** See also:</Line>
  <Line number="2512">** &lt;ul&gt;</Line>
  <Line number="2513">** &lt;li&gt; the [sqlite3_total_changes()] interface</Line>
  <Line number="2514">** &lt;li&gt; the [count_changes pragma]</Line>
  <Line number="2515">** &lt;li&gt; the [changes() SQL function]</Line>
  <Line number="2516">** &lt;li&gt; the [data_version pragma]</Line>
  <Line number="2517">** &lt;/ul&gt;</Line>
  <Line number="2518">*/</Line>
  <Line number="2519">SQLITE_API int sqlite3_changes(sqlite3*);</Line>
  <Line number="2520"></Line>
  <Line number="2521">/*</Line>
  <Line number="2522">** CAPI3REF: Total Number Of Rows Modified</Line>
  <Line number="2523">** METHOD: sqlite3</Line>
  <Line number="2524">**</Line>
  <Line number="2525">** ^This function returns the total number of rows inserted, modified or</Line>
  <Line number="2526">** deleted by all [INSERT], [UPDATE] or [DELETE] statements completed</Line>
  <Line number="2527">** since the database connection was opened, including those executed as</Line>
  <Line number="2528">** part of trigger programs. ^Executing any other type of SQL statement</Line>
  <Line number="2529">** does not affect the value returned by sqlite3_total_changes().</Line>
  <Line number="2530">**</Line>
  <Line number="2531">** ^Changes made as part of [foreign key actions] are included in the</Line>
  <Line number="2532">** count, but those made as part of REPLACE constraint resolution are</Line>
  <Line number="2533">** not. ^Changes to a view that are intercepted by INSTEAD OF triggers</Line>
  <Line number="2534">** are not counted.</Line>
  <Line number="2535">**</Line>
  <Line number="2536">** The [sqlite3_total_changes(D)] interface only reports the number</Line>
  <Line number="2537">** of rows that changed due to SQL statement run against database</Line>
  <Line number="2538">** connection D.  Any changes by other database connections are ignored.</Line>
  <Line number="2539">** To detect changes against a database file from other database</Line>
  <Line number="2540">** connections use the [PRAGMA data_version] command or the</Line>
  <Line number="2541">** [SQLITE_FCNTL_DATA_VERSION] [file control].</Line>
  <Line number="2542">**</Line>
  <Line number="2543">** If a separate thread makes changes on the same database connection</Line>
  <Line number="2544">** while [sqlite3_total_changes()] is running then the value</Line>
  <Line number="2545">** returned is unpredictable and not meaningful.</Line>
  <Line number="2546">**</Line>
  <Line number="2547">** See also:</Line>
  <Line number="2548">** &lt;ul&gt;</Line>
  <Line number="2549">** &lt;li&gt; the [sqlite3_changes()] interface</Line>
  <Line number="2550">** &lt;li&gt; the [count_changes pragma]</Line>
  <Line number="2551">** &lt;li&gt; the [changes() SQL function]</Line>
  <Line number="2552">** &lt;li&gt; the [data_version pragma]</Line>
  <Line number="2553">** &lt;li&gt; the [SQLITE_FCNTL_DATA_VERSION] [file control]</Line>
  <Line number="2554">** &lt;/ul&gt;</Line>
  <Line number="2555">*/</Line>
  <Line number="2556">SQLITE_API int sqlite3_total_changes(sqlite3*);</Line>
  <Line number="2557"></Line>
  <Line number="2558">/*</Line>
  <Line number="2559">** CAPI3REF: Interrupt A Long-Running Query</Line>
  <Line number="2560">** METHOD: sqlite3</Line>
  <Line number="2561">**</Line>
  <Line number="2562">** ^This function causes any pending database operation to abort and</Line>
  <Line number="2563">** return at its earliest opportunity. This routine is typically</Line>
  <Line number="2564">** called in response to a user action such as pressing &quot;Cancel&quot;</Line>
  <Line number="2565">** or Ctrl-C where the user wants a long query operation to halt</Line>
  <Line number="2566">** immediately.</Line>
  <Line number="2567">**</Line>
  <Line number="2568">** ^It is safe to call this routine from a thread different from the</Line>
  <Line number="2569">** thread that is currently running the database operation.  But it</Line>
  <Line number="2570">** is not safe to call this routine with a [database connection] that</Line>
  <Line number="2571">** is closed or might close before sqlite3_interrupt() returns.</Line>
  <Line number="2572">**</Line>
  <Line number="2573">** ^If an SQL operation is very nearly finished at the time when</Line>
  <Line number="2574">** sqlite3_interrupt() is called, then it might not have an opportunity</Line>
  <Line number="2575">** to be interrupted and might continue to completion.</Line>
  <Line number="2576">**</Line>
  <Line number="2577">** ^An SQL operation that is interrupted will return [SQLITE_INTERRUPT].</Line>
  <Line number="2578">** ^If the interrupted SQL operation is an INSERT, UPDATE, or DELETE</Line>
  <Line number="2579">** that is inside an explicit transaction, then the entire transaction</Line>
  <Line number="2580">** will be rolled back automatically.</Line>
  <Line number="2581">**</Line>
  <Line number="2582">** ^The sqlite3_interrupt(D) call is in effect until all currently running</Line>
  <Line number="2583">** SQL statements on [database connection] D complete.  ^Any new SQL statements</Line>
  <Line number="2584">** that are started after the sqlite3_interrupt() call and before the</Line>
  <Line number="2585">** running statement count reaches zero are interrupted as if they had been</Line>
  <Line number="2586">** running prior to the sqlite3_interrupt() call.  ^New SQL statements</Line>
  <Line number="2587">** that are started after the running statement count reaches zero are</Line>
  <Line number="2588">** not effected by the sqlite3_interrupt().</Line>
  <Line number="2589">** ^A call to sqlite3_interrupt(D) that occurs when there are no running</Line>
  <Line number="2590">** SQL statements is a no-op and has no effect on SQL statements</Line>
  <Line number="2591">** that are started after the sqlite3_interrupt() call returns.</Line>
  <Line number="2592">*/</Line>
  <Line number="2593">SQLITE_API void sqlite3_interrupt(sqlite3*);</Line>
  <Line number="2594"></Line>
  <Line number="2595">/*</Line>
  <Line number="2596">** CAPI3REF: Determine If An SQL Statement Is Complete</Line>
  <Line number="2597">**</Line>
  <Line number="2598">** These routines are useful during command-line input to determine if the</Line>
  <Line number="2599">** currently entered text seems to form a complete SQL statement or</Line>
  <Line number="2600">** if additional input is needed before sending the text into</Line>
  <Line number="2601">** SQLite for parsing.  ^These routines return 1 if the input string</Line>
  <Line number="2602">** appears to be a complete SQL statement.  ^A statement is judged to be</Line>
  <Line number="2603">** complete if it ends with a semicolon token and is not a prefix of a</Line>
  <Line number="2604">** well-formed CREATE TRIGGER statement.  ^Semicolons that are embedded within</Line>
  <Line number="2605">** string literals or quoted identifier names or comments are not</Line>
  <Line number="2606">** independent tokens (they are part of the token in which they are</Line>
  <Line number="2607">** embedded) and thus do not count as a statement terminator.  ^Whitespace</Line>
  <Line number="2608">** and comments that follow the final semicolon are ignored.</Line>
  <Line number="2609">**</Line>
  <Line number="2610">** ^These routines return 0 if the statement is incomplete.  ^If a</Line>
  <Line number="2611">** memory allocation fails, then SQLITE_NOMEM is returned.</Line>
  <Line number="2612">**</Line>
  <Line number="2613">** ^These routines do not parse the SQL statements thus</Line>
  <Line number="2614">** will not detect syntactically incorrect SQL.</Line>
  <Line number="2615">**</Line>
  <Line number="2616">** ^(If SQLite has not been initialized using [sqlite3_initialize()] prior</Line>
  <Line number="2617">** to invoking sqlite3_complete16() then sqlite3_initialize() is invoked</Line>
  <Line number="2618">** automatically by sqlite3_complete16().  If that initialization fails,</Line>
  <Line number="2619">** then the return value from sqlite3_complete16() will be non-zero</Line>
  <Line number="2620">** regardless of whether or not the input SQL is complete.)^</Line>
  <Line number="2621">**</Line>
  <Line number="2622">** The input to [sqlite3_complete()] must be a zero-terminated</Line>
  <Line number="2623">** UTF-8 string.</Line>
  <Line number="2624">**</Line>
  <Line number="2625">** The input to [sqlite3_complete16()] must be a zero-terminated</Line>
  <Line number="2626">** UTF-16 string in native byte order.</Line>
  <Line number="2627">*/</Line>
  <Line number="2628">SQLITE_API int sqlite3_complete(const char *sql);</Line>
  <Line number="2629">SQLITE_API int sqlite3_complete16(const void *sql);</Line>
  <Line number="2630"></Line>
  <Line number="2631">/*</Line>
  <Line number="2632">** CAPI3REF: Register A Callback To Handle SQLITE_BUSY Errors</Line>
  <Line number="2633">** KEYWORDS: {busy-handler callback} {busy handler}</Line>
  <Line number="2634">** METHOD: sqlite3</Line>
  <Line number="2635">**</Line>
  <Line number="2636">** ^The sqlite3_busy_handler(D,X,P) routine sets a callback function X</Line>
  <Line number="2637">** that might be invoked with argument P whenever</Line>
  <Line number="2638">** an attempt is made to access a database table associated with</Line>
  <Line number="2639">** [database connection] D when another thread</Line>
  <Line number="2640">** or process has the table locked.</Line>
  <Line number="2641">** The sqlite3_busy_handler() interface is used to implement</Line>
  <Line number="2642">** [sqlite3_busy_timeout()] and [PRAGMA busy_timeout].</Line>
  <Line number="2643">**</Line>
  <Line number="2644">** ^If the busy callback is NULL, then [SQLITE_BUSY]</Line>
  <Line number="2645">** is returned immediately upon encountering the lock.  ^If the busy callback</Line>
  <Line number="2646">** is not NULL, then the callback might be invoked with two arguments.</Line>
  <Line number="2647">**</Line>
  <Line number="2648">** ^The first argument to the busy handler is a copy of the void* pointer which</Line>
  <Line number="2649">** is the third argument to sqlite3_busy_handler().  ^The second argument to</Line>
  <Line number="2650">** the busy handler callback is the number of times that the busy handler has</Line>
  <Line number="2651">** been invoked previously for the same locking event.  ^If the</Line>
  <Line number="2652">** busy callback returns 0, then no additional attempts are made to</Line>
  <Line number="2653">** access the database and [SQLITE_BUSY] is returned</Line>
  <Line number="2654">** to the application.</Line>
  <Line number="2655">** ^If the callback returns non-zero, then another attempt</Line>
  <Line number="2656">** is made to access the database and the cycle repeats.</Line>
  <Line number="2657">**</Line>
  <Line number="2658">** The presence of a busy handler does not guarantee that it will be invoked</Line>
  <Line number="2659">** when there is lock contention. ^If SQLite determines that invoking the busy</Line>
  <Line number="2660">** handler could result in a deadlock, it will go ahead and return [SQLITE_BUSY]</Line>
  <Line number="2661">** to the application instead of invoking the</Line>
  <Line number="2662">** busy handler.</Line>
  <Line number="2663">** Consider a scenario where one process is holding a read lock that</Line>
  <Line number="2664">** it is trying to promote to a reserved lock and</Line>
  <Line number="2665">** a second process is holding a reserved lock that it is trying</Line>
  <Line number="2666">** to promote to an exclusive lock.  The first process cannot proceed</Line>
  <Line number="2667">** because it is blocked by the second and the second process cannot</Line>
  <Line number="2668">** proceed because it is blocked by the first.  If both processes</Line>
  <Line number="2669">** invoke the busy handlers, neither will make any progress.  Therefore,</Line>
  <Line number="2670">** SQLite returns [SQLITE_BUSY] for the first process, hoping that this</Line>
  <Line number="2671">** will induce the first process to release its read lock and allow</Line>
  <Line number="2672">** the second process to proceed.</Line>
  <Line number="2673">**</Line>
  <Line number="2674">** ^The default busy callback is NULL.</Line>
  <Line number="2675">**</Line>
  <Line number="2676">** ^(There can only be a single busy handler defined for each</Line>
  <Line number="2677">** [database connection].  Setting a new busy handler clears any</Line>
  <Line number="2678">** previously set handler.)^  ^Note that calling [sqlite3_busy_timeout()]</Line>
  <Line number="2679">** or evaluating [PRAGMA busy_timeout=N] will change the</Line>
  <Line number="2680">** busy handler and thus clear any previously set busy handler.</Line>
  <Line number="2681">**</Line>
  <Line number="2682">** The busy callback should not take any actions which modify the</Line>
  <Line number="2683">** database connection that invoked the busy handler.  In other words,</Line>
  <Line number="2684">** the busy handler is not reentrant.  Any such actions</Line>
  <Line number="2685">** result in undefined behavior.</Line>
  <Line number="2686">**</Line>
  <Line number="2687">** A busy handler must not close the database connection</Line>
  <Line number="2688">** or [prepared statement] that invoked the busy handler.</Line>
  <Line number="2689">*/</Line>
  <Line number="2690">SQLITE_API int sqlite3_busy_handler(sqlite3*,int(*)(void*,int),void*);</Line>
  <Line number="2691"></Line>
  <Line number="2692">/*</Line>
  <Line number="2693">** CAPI3REF: Set A Busy Timeout</Line>
  <Line number="2694">** METHOD: sqlite3</Line>
  <Line number="2695">**</Line>
  <Line number="2696">** ^This routine sets a [sqlite3_busy_handler | busy handler] that sleeps</Line>
  <Line number="2697">** for a specified amount of time when a table is locked.  ^The handler</Line>
  <Line number="2698">** will sleep multiple times until at least &quot;ms&quot; milliseconds of sleeping</Line>
  <Line number="2699">** have accumulated.  ^After at least &quot;ms&quot; milliseconds of sleeping,</Line>
  <Line number="2700">** the handler returns 0 which causes [sqlite3_step()] to return</Line>
  <Line number="2701">** [SQLITE_BUSY].</Line>
  <Line number="2702">**</Line>
  <Line number="2703">** ^Calling this routine with an argument less than or equal to zero</Line>
  <Line number="2704">** turns off all busy handlers.</Line>
  <Line number="2705">**</Line>
  <Line number="2706">** ^(There can only be a single busy handler for a particular</Line>
  <Line number="2707">** [database connection] at any given moment.  If another busy handler</Line>
  <Line number="2708">** was defined  (using [sqlite3_busy_handler()]) prior to calling</Line>
  <Line number="2709">** this routine, that other busy handler is cleared.)^</Line>
  <Line number="2710">**</Line>
  <Line number="2711">** See also:  [PRAGMA busy_timeout]</Line>
  <Line number="2712">*/</Line>
  <Line number="2713">SQLITE_API int sqlite3_busy_timeout(sqlite3*, int ms);</Line>
  <Line number="2714"></Line>
  <Line number="2715">/*</Line>
  <Line number="2716">** CAPI3REF: Convenience Routines For Running Queries</Line>
  <Line number="2717">** METHOD: sqlite3</Line>
  <Line number="2718">**</Line>
  <Line number="2719">** This is a legacy interface that is preserved for backwards compatibility.</Line>
  <Line number="2720">** Use of this interface is not recommended.</Line>
  <Line number="2721">**</Line>
  <Line number="2722">** Definition: A &lt;b&gt;result table&lt;/b&gt; is memory data structure created by the</Line>
  <Line number="2723">** [sqlite3_get_table()] interface.  A result table records the</Line>
  <Line number="2724">** complete query results from one or more queries.</Line>
  <Line number="2725">**</Line>
  <Line number="2726">** The table conceptually has a number of rows and columns.  But</Line>
  <Line number="2727">** these numbers are not part of the result table itself.  These</Line>
  <Line number="2728">** numbers are obtained separately.  Let N be the number of rows</Line>
  <Line number="2729">** and M be the number of columns.</Line>
  <Line number="2730">**</Line>
  <Line number="2731">** A result table is an array of pointers to zero-terminated UTF-8 strings.</Line>
  <Line number="2732">** There are (N+1)*M elements in the array.  The first M pointers point</Line>
  <Line number="2733">** to zero-terminated strings that  contain the names of the columns.</Line>
  <Line number="2734">** The remaining entries all point to query results.  NULL values result</Line>
  <Line number="2735">** in NULL pointers.  All other values are in their UTF-8 zero-terminated</Line>
  <Line number="2736">** string representation as returned by [sqlite3_column_text()].</Line>
  <Line number="2737">**</Line>
  <Line number="2738">** A result table might consist of one or more memory allocations.</Line>
  <Line number="2739">** It is not safe to pass a result table directly to [sqlite3_free()].</Line>
  <Line number="2740">** A result table should be deallocated using [sqlite3_free_table()].</Line>
  <Line number="2741">**</Line>
  <Line number="2742">** ^(As an example of the result table format, suppose a query result</Line>
  <Line number="2743">** is as follows:</Line>
  <Line number="2744">**</Line>
  <Line number="2745">** &lt;blockquote&gt;&lt;pre&gt;</Line>
  <Line number="2746">**        Name        | Age</Line>
  <Line number="2747">**        -----------------------</Line>
  <Line number="2748">**        Alice       | 43</Line>
  <Line number="2749">**        Bob         | 28</Line>
  <Line number="2750">**        Cindy       | 21</Line>
  <Line number="2751">** &lt;/pre&gt;&lt;/blockquote&gt;</Line>
  <Line number="2752">**</Line>
  <Line number="2753">** There are two columns (M==2) and three rows (N==3).  Thus the</Line>
  <Line number="2754">** result table has 8 entries.  Suppose the result table is stored</Line>
  <Line number="2755">** in an array named azResult.  Then azResult holds this content:</Line>
  <Line number="2756">**</Line>
  <Line number="2757">** &lt;blockquote&gt;&lt;pre&gt;</Line>
  <Line number="2758">**        azResult&amp;#91;0] = &quot;Name&quot;;</Line>
  <Line number="2759">**        azResult&amp;#91;1] = &quot;Age&quot;;</Line>
  <Line number="2760">**        azResult&amp;#91;2] = &quot;Alice&quot;;</Line>
  <Line number="2761">**        azResult&amp;#91;3] = &quot;43&quot;;</Line>
  <Line number="2762">**        azResult&amp;#91;4] = &quot;Bob&quot;;</Line>
  <Line number="2763">**        azResult&amp;#91;5] = &quot;28&quot;;</Line>
  <Line number="2764">**        azResult&amp;#91;6] = &quot;Cindy&quot;;</Line>
  <Line number="2765">**        azResult&amp;#91;7] = &quot;21&quot;;</Line>
  <Line number="2766">** &lt;/pre&gt;&lt;/blockquote&gt;)^</Line>
  <Line number="2767">**</Line>
  <Line number="2768">** ^The sqlite3_get_table() function evaluates one or more</Line>
  <Line number="2769">** semicolon-separated SQL statements in the zero-terminated UTF-8</Line>
  <Line number="2770">** string of its 2nd parameter and returns a result table to the</Line>
  <Line number="2771">** pointer given in its 3rd parameter.</Line>
  <Line number="2772">**</Line>
  <Line number="2773">** After the application has finished with the result from sqlite3_get_table(),</Line>
  <Line number="2774">** it must pass the result table pointer to sqlite3_free_table() in order to</Line>
  <Line number="2775">** release the memory that was malloced.  Because of the way the</Line>
  <Line number="2776">** [sqlite3_malloc()] happens within sqlite3_get_table(), the calling</Line>
  <Line number="2777">** function must not try to call [sqlite3_free()] directly.  Only</Line>
  <Line number="2778">** [sqlite3_free_table()] is able to release the memory properly and safely.</Line>
  <Line number="2779">**</Line>
  <Line number="2780">** The sqlite3_get_table() interface is implemented as a wrapper around</Line>
  <Line number="2781">** [sqlite3_exec()].  The sqlite3_get_table() routine does not have access</Line>
  <Line number="2782">** to any internal data structures of SQLite.  It uses only the public</Line>
  <Line number="2783">** interface defined here.  As a consequence, errors that occur in the</Line>
  <Line number="2784">** wrapper layer outside of the internal [sqlite3_exec()] call are not</Line>
  <Line number="2785">** reflected in subsequent calls to [sqlite3_errcode()] or</Line>
  <Line number="2786">** [sqlite3_errmsg()].</Line>
  <Line number="2787">*/</Line>
  <Line number="2788">SQLITE_API int sqlite3_get_table(</Line>
  <Line number="2789">  sqlite3 *db,          /* An open database */</Line>
  <Line number="2790">  const char *zSql,     /* SQL to be evaluated */</Line>
  <Line number="2791">  char ***pazResult,    /* Results of the query */</Line>
  <Line number="2792">  int *pnRow,           /* Number of result rows written here */</Line>
  <Line number="2793">  int *pnColumn,        /* Number of result columns written here */</Line>
  <Line number="2794">  char **pzErrmsg       /* Error msg written here */</Line>
  <Line number="2795">);</Line>
  <Line number="2796">SQLITE_API void sqlite3_free_table(char **result);</Line>
  <Line number="2797"></Line>
  <Line number="2798">/*</Line>
  <Line number="2799">** CAPI3REF: Formatted String Printing Functions</Line>
  <Line number="2800">**</Line>
  <Line number="2801">** These routines are work-alikes of the &quot;printf()&quot; family of functions</Line>
  <Line number="2802">** from the standard C library.</Line>
  <Line number="2803">** These routines understand most of the common formatting options from</Line>
  <Line number="2804">** the standard library printf()</Line>
  <Line number="2805">** plus some additional non-standard formats ([%q], [%Q], [%w], and [%z]).</Line>
  <Line number="2806">** See the [built-in printf()] documentation for details.</Line>
  <Line number="2807">**</Line>
  <Line number="2808">** ^The sqlite3_mprintf() and sqlite3_vmprintf() routines write their</Line>
  <Line number="2809">** results into memory obtained from [sqlite3_malloc64()].</Line>
  <Line number="2810">** The strings returned by these two routines should be</Line>
  <Line number="2811">** released by [sqlite3_free()].  ^Both routines return a</Line>
  <Line number="2812">** NULL pointer if [sqlite3_malloc64()] is unable to allocate enough</Line>
  <Line number="2813">** memory to hold the resulting string.</Line>
  <Line number="2814">**</Line>
  <Line number="2815">** ^(The sqlite3_snprintf() routine is similar to &quot;snprintf()&quot; from</Line>
  <Line number="2816">** the standard C library.  The result is written into the</Line>
  <Line number="2817">** buffer supplied as the second parameter whose size is given by</Line>
  <Line number="2818">** the first parameter. Note that the order of the</Line>
  <Line number="2819">** first two parameters is reversed from snprintf().)^  This is an</Line>
  <Line number="2820">** historical accident that cannot be fixed without breaking</Line>
  <Line number="2821">** backwards compatibility.  ^(Note also that sqlite3_snprintf()</Line>
  <Line number="2822">** returns a pointer to its buffer instead of the number of</Line>
  <Line number="2823">** characters actually written into the buffer.)^  We admit that</Line>
  <Line number="2824">** the number of characters written would be a more useful return</Line>
  <Line number="2825">** value but we cannot change the implementation of sqlite3_snprintf()</Line>
  <Line number="2826">** now without breaking compatibility.</Line>
  <Line number="2827">**</Line>
  <Line number="2828">** ^As long as the buffer size is greater than zero, sqlite3_snprintf()</Line>
  <Line number="2829">** guarantees that the buffer is always zero-terminated.  ^The first</Line>
  <Line number="2830">** parameter &quot;n&quot; is the total size of the buffer, including space for</Line>
  <Line number="2831">** the zero terminator.  So the longest string that can be completely</Line>
  <Line number="2832">** written will be n-1 characters.</Line>
  <Line number="2833">**</Line>
  <Line number="2834">** ^The sqlite3_vsnprintf() routine is a varargs version of sqlite3_snprintf().</Line>
  <Line number="2835">**</Line>
  <Line number="2836">** See also:  [built-in printf()], [printf() SQL function]</Line>
  <Line number="2837">*/</Line>
  <Line number="2838">SQLITE_API char *sqlite3_mprintf(const char*,...);</Line>
  <Line number="2839">SQLITE_API char *sqlite3_vmprintf(const char*, va_list);</Line>
  <Line number="2840">SQLITE_API char *sqlite3_snprintf(int,char*,const char*, ...);</Line>
  <Line number="2841">SQLITE_API char *sqlite3_vsnprintf(int,char*,const char*, va_list);</Line>
  <Line number="2842"></Line>
  <Line number="2843">/*</Line>
  <Line number="2844">** CAPI3REF: Memory Allocation Subsystem</Line>
  <Line number="2845">**</Line>
  <Line number="2846">** The SQLite core uses these three routines for all of its own</Line>
  <Line number="2847">** internal memory allocation needs. &quot;Core&quot; in the previous sentence</Line>
  <Line number="2848">** does not include operating-system specific [VFS] implementation.  The</Line>
  <Line number="2849">** Windows VFS uses native malloc() and free() for some operations.</Line>
  <Line number="2850">**</Line>
  <Line number="2851">** ^The sqlite3_malloc() routine returns a pointer to a block</Line>
  <Line number="2852">** of memory at least N bytes in length, where N is the parameter.</Line>
  <Line number="2853">** ^If sqlite3_malloc() is unable to obtain sufficient free</Line>
  <Line number="2854">** memory, it returns a NULL pointer.  ^If the parameter N to</Line>
  <Line number="2855">** sqlite3_malloc() is zero or negative then sqlite3_malloc() returns</Line>
  <Line number="2856">** a NULL pointer.</Line>
  <Line number="2857">**</Line>
  <Line number="2858">** ^The sqlite3_malloc64(N) routine works just like</Line>
  <Line number="2859">** sqlite3_malloc(N) except that N is an unsigned 64-bit integer instead</Line>
  <Line number="2860">** of a signed 32-bit integer.</Line>
  <Line number="2861">**</Line>
  <Line number="2862">** ^Calling sqlite3_free() with a pointer previously returned</Line>
  <Line number="2863">** by sqlite3_malloc() or sqlite3_realloc() releases that memory so</Line>
  <Line number="2864">** that it might be reused.  ^The sqlite3_free() routine is</Line>
  <Line number="2865">** a no-op if is called with a NULL pointer.  Passing a NULL pointer</Line>
  <Line number="2866">** to sqlite3_free() is harmless.  After being freed, memory</Line>
  <Line number="2867">** should neither be read nor written.  Even reading previously freed</Line>
  <Line number="2868">** memory might result in a segmentation fault or other severe error.</Line>
  <Line number="2869">** Memory corruption, a segmentation fault, or other severe error</Line>
  <Line number="2870">** might result if sqlite3_free() is called with a non-NULL pointer that</Line>
  <Line number="2871">** was not obtained from sqlite3_malloc() or sqlite3_realloc().</Line>
  <Line number="2872">**</Line>
  <Line number="2873">** ^The sqlite3_realloc(X,N) interface attempts to resize a</Line>
  <Line number="2874">** prior memory allocation X to be at least N bytes.</Line>
  <Line number="2875">** ^If the X parameter to sqlite3_realloc(X,N)</Line>
  <Line number="2876">** is a NULL pointer then its behavior is identical to calling</Line>
  <Line number="2877">** sqlite3_malloc(N).</Line>
  <Line number="2878">** ^If the N parameter to sqlite3_realloc(X,N) is zero or</Line>
  <Line number="2879">** negative then the behavior is exactly the same as calling</Line>
  <Line number="2880">** sqlite3_free(X).</Line>
  <Line number="2881">** ^sqlite3_realloc(X,N) returns a pointer to a memory allocation</Line>
  <Line number="2882">** of at least N bytes in size or NULL if insufficient memory is available.</Line>
  <Line number="2883">** ^If M is the size of the prior allocation, then min(N,M) bytes</Line>
  <Line number="2884">** of the prior allocation are copied into the beginning of buffer returned</Line>
  <Line number="2885">** by sqlite3_realloc(X,N) and the prior allocation is freed.</Line>
  <Line number="2886">** ^If sqlite3_realloc(X,N) returns NULL and N is positive, then the</Line>
  <Line number="2887">** prior allocation is not freed.</Line>
  <Line number="2888">**</Line>
  <Line number="2889">** ^The sqlite3_realloc64(X,N) interfaces works the same as</Line>
  <Line number="2890">** sqlite3_realloc(X,N) except that N is a 64-bit unsigned integer instead</Line>
  <Line number="2891">** of a 32-bit signed integer.</Line>
  <Line number="2892">**</Line>
  <Line number="2893">** ^If X is a memory allocation previously obtained from sqlite3_malloc(),</Line>
  <Line number="2894">** sqlite3_malloc64(), sqlite3_realloc(), or sqlite3_realloc64(), then</Line>
  <Line number="2895">** sqlite3_msize(X) returns the size of that memory allocation in bytes.</Line>
  <Line number="2896">** ^The value returned by sqlite3_msize(X) might be larger than the number</Line>
  <Line number="2897">** of bytes requested when X was allocated.  ^If X is a NULL pointer then</Line>
  <Line number="2898">** sqlite3_msize(X) returns zero.  If X points to something that is not</Line>
  <Line number="2899">** the beginning of memory allocation, or if it points to a formerly</Line>
  <Line number="2900">** valid memory allocation that has now been freed, then the behavior</Line>
  <Line number="2901">** of sqlite3_msize(X) is undefined and possibly harmful.</Line>
  <Line number="2902">**</Line>
  <Line number="2903">** ^The memory returned by sqlite3_malloc(), sqlite3_realloc(),</Line>
  <Line number="2904">** sqlite3_malloc64(), and sqlite3_realloc64()</Line>
  <Line number="2905">** is always aligned to at least an 8 byte boundary, or to a</Line>
  <Line number="2906">** 4 byte boundary if the [SQLITE_4_BYTE_ALIGNED_MALLOC] compile-time</Line>
  <Line number="2907">** option is used.</Line>
  <Line number="2908">**</Line>
  <Line number="2909">** The pointer arguments to [sqlite3_free()] and [sqlite3_realloc()]</Line>
  <Line number="2910">** must be either NULL or else pointers obtained from a prior</Line>
  <Line number="2911">** invocation of [sqlite3_malloc()] or [sqlite3_realloc()] that have</Line>
  <Line number="2912">** not yet been released.</Line>
  <Line number="2913">**</Line>
  <Line number="2914">** The application must not read or write any part of</Line>
  <Line number="2915">** a block of memory after it has been released using</Line>
  <Line number="2916">** [sqlite3_free()] or [sqlite3_realloc()].</Line>
  <Line number="2917">*/</Line>
  <Line number="2918">SQLITE_API void *sqlite3_malloc(int);</Line>
  <Line number="2919">SQLITE_API void *sqlite3_malloc64(sqlite3_uint64);</Line>
  <Line number="2920">SQLITE_API void *sqlite3_realloc(void*, int);</Line>
  <Line number="2921">SQLITE_API void *sqlite3_realloc64(void*, sqlite3_uint64);</Line>
  <Line number="2922">SQLITE_API void sqlite3_free(void*);</Line>
  <Line number="2923">SQLITE_API sqlite3_uint64 sqlite3_msize(void*);</Line>
  <Line number="2924"></Line>
  <Line number="2925">/*</Line>
  <Line number="2926">** CAPI3REF: Memory Allocator Statistics</Line>
  <Line number="2927">**</Line>
  <Line number="2928">** SQLite provides these two interfaces for reporting on the status</Line>
  <Line number="2929">** of the [sqlite3_malloc()], [sqlite3_free()], and [sqlite3_realloc()]</Line>
  <Line number="2930">** routines, which form the built-in memory allocation subsystem.</Line>
  <Line number="2931">**</Line>
  <Line number="2932">** ^The [sqlite3_memory_used()] routine returns the number of bytes</Line>
  <Line number="2933">** of memory currently outstanding (malloced but not freed).</Line>
  <Line number="2934">** ^The [sqlite3_memory_highwater()] routine returns the maximum</Line>
  <Line number="2935">** value of [sqlite3_memory_used()] since the high-water mark</Line>
  <Line number="2936">** was last reset.  ^The values returned by [sqlite3_memory_used()] and</Line>
  <Line number="2937">** [sqlite3_memory_highwater()] include any overhead</Line>
  <Line number="2938">** added by SQLite in its implementation of [sqlite3_malloc()],</Line>
  <Line number="2939">** but not overhead added by the any underlying system library</Line>
  <Line number="2940">** routines that [sqlite3_malloc()] may call.</Line>
  <Line number="2941">**</Line>
  <Line number="2942">** ^The memory high-water mark is reset to the current value of</Line>
  <Line number="2943">** [sqlite3_memory_used()] if and only if the parameter to</Line>
  <Line number="2944">** [sqlite3_memory_highwater()] is true.  ^The value returned</Line>
  <Line number="2945">** by [sqlite3_memory_highwater(1)] is the high-water mark</Line>
  <Line number="2946">** prior to the reset.</Line>
  <Line number="2947">*/</Line>
  <Line number="2948">SQLITE_API sqlite3_int64 sqlite3_memory_used(void);</Line>
  <Line number="2949">SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag);</Line>
  <Line number="2950"></Line>
  <Line number="2951">/*</Line>
  <Line number="2952">** CAPI3REF: Pseudo-Random Number Generator</Line>
  <Line number="2953">**</Line>
  <Line number="2954">** SQLite contains a high-quality pseudo-random number generator (PRNG) used to</Line>
  <Line number="2955">** select random [ROWID | ROWIDs] when inserting new records into a table that</Line>
  <Line number="2956">** already uses the largest possible [ROWID].  The PRNG is also used for</Line>
  <Line number="2957">** the built-in random() and randomblob() SQL functions.  This interface allows</Line>
  <Line number="2958">** applications to access the same PRNG for other purposes.</Line>
  <Line number="2959">**</Line>
  <Line number="2960">** ^A call to this routine stores N bytes of randomness into buffer P.</Line>
  <Line number="2961">** ^The P parameter can be a NULL pointer.</Line>
  <Line number="2962">**</Line>
  <Line number="2963">** ^If this routine has not been previously called or if the previous</Line>
  <Line number="2964">** call had N less than one or a NULL pointer for P, then the PRNG is</Line>
  <Line number="2965">** seeded using randomness obtained from the xRandomness method of</Line>
  <Line number="2966">** the default [sqlite3_vfs] object.</Line>
  <Line number="2967">** ^If the previous call to this routine had an N of 1 or more and a</Line>
  <Line number="2968">** non-NULL P then the pseudo-randomness is generated</Line>
  <Line number="2969">** internally and without recourse to the [sqlite3_vfs] xRandomness</Line>
  <Line number="2970">** method.</Line>
  <Line number="2971">*/</Line>
  <Line number="2972">SQLITE_API void sqlite3_randomness(int N, void *P);</Line>
  <Line number="2973"></Line>
  <Line number="2974">/*</Line>
  <Line number="2975">** CAPI3REF: Compile-Time Authorization Callbacks</Line>
  <Line number="2976">** METHOD: sqlite3</Line>
  <Line number="2977">** KEYWORDS: {authorizer callback}</Line>
  <Line number="2978">**</Line>
  <Line number="2979">** ^This routine registers an authorizer callback with a particular</Line>
  <Line number="2980">** [database connection], supplied in the first argument.</Line>
  <Line number="2981">** ^The authorizer callback is invoked as SQL statements are being compiled</Line>
  <Line number="2982">** by [sqlite3_prepare()] or its variants [sqlite3_prepare_v2()],</Line>
  <Line number="2983">** [sqlite3_prepare_v3()], [sqlite3_prepare16()], [sqlite3_prepare16_v2()],</Line>
  <Line number="2984">** and [sqlite3_prepare16_v3()].  ^At various</Line>
  <Line number="2985">** points during the compilation process, as logic is being created</Line>
  <Line number="2986">** to perform various actions, the authorizer callback is invoked to</Line>
  <Line number="2987">** see if those actions are allowed.  ^The authorizer callback should</Line>
  <Line number="2988">** return [SQLITE_OK] to allow the action, [SQLITE_IGNORE] to disallow the</Line>
  <Line number="2989">** specific action but allow the SQL statement to continue to be</Line>
  <Line number="2990">** compiled, or [SQLITE_DENY] to cause the entire SQL statement to be</Line>
  <Line number="2991">** rejected with an error.  ^If the authorizer callback returns</Line>
  <Line number="2992">** any value other than [SQLITE_IGNORE], [SQLITE_OK], or [SQLITE_DENY]</Line>
  <Line number="2993">** then the [sqlite3_prepare_v2()] or equivalent call that triggered</Line>
  <Line number="2994">** the authorizer will fail with an error message.</Line>
  <Line number="2995">**</Line>
  <Line number="2996">** When the callback returns [SQLITE_OK], that means the operation</Line>
  <Line number="2997">** requested is ok.  ^When the callback returns [SQLITE_DENY], the</Line>
  <Line number="2998">** [sqlite3_prepare_v2()] or equivalent call that triggered the</Line>
  <Line number="2999">** authorizer will fail with an error message explaining that</Line>
  <Line number="3000">** access is denied.</Line>
  <Line number="3001">**</Line>
  <Line number="3002">** ^The first parameter to the authorizer callback is a copy of the third</Line>
  <Line number="3003">** parameter to the sqlite3_set_authorizer() interface. ^The second parameter</Line>
  <Line number="3004">** to the callback is an integer [SQLITE_COPY | action code] that specifies</Line>
  <Line number="3005">** the particular action to be authorized. ^The third through sixth parameters</Line>
  <Line number="3006">** to the callback are either NULL pointers or zero-terminated strings</Line>
  <Line number="3007">** that contain additional details about the action to be authorized.</Line>
  <Line number="3008">** Applications must always be prepared to encounter a NULL pointer in any</Line>
  <Line number="3009">** of the third through the sixth parameters of the authorization callback.</Line>
  <Line number="3010">**</Line>
  <Line number="3011">** ^If the action code is [SQLITE_READ]</Line>
  <Line number="3012">** and the callback returns [SQLITE_IGNORE] then the</Line>
  <Line number="3013">** [prepared statement] statement is constructed to substitute</Line>
  <Line number="3014">** a NULL value in place of the table column that would have</Line>
  <Line number="3015">** been read if [SQLITE_OK] had been returned.  The [SQLITE_IGNORE]</Line>
  <Line number="3016">** return can be used to deny an untrusted user access to individual</Line>
  <Line number="3017">** columns of a table.</Line>
  <Line number="3018">** ^When a table is referenced by a [SELECT] but no column values are</Line>
  <Line number="3019">** extracted from that table (for example in a query like</Line>
  <Line number="3020">** &quot;SELECT count(*) FROM tab&quot;) then the [SQLITE_READ] authorizer callback</Line>
  <Line number="3021">** is invoked once for that table with a column name that is an empty string.</Line>
  <Line number="3022">** ^If the action code is [SQLITE_DELETE] and the callback returns</Line>
  <Line number="3023">** [SQLITE_IGNORE] then the [DELETE] operation proceeds but the</Line>
  <Line number="3024">** [truncate optimization] is disabled and all rows are deleted individually.</Line>
  <Line number="3025">**</Line>
  <Line number="3026">** An authorizer is used when [sqlite3_prepare | preparing]</Line>
  <Line number="3027">** SQL statements from an untrusted source, to ensure that the SQL statements</Line>
  <Line number="3028">** do not try to access data they are not allowed to see, or that they do not</Line>
  <Line number="3029">** try to execute malicious statements that damage the database.  For</Line>
  <Line number="3030">** example, an application may allow a user to enter arbitrary</Line>
  <Line number="3031">** SQL queries for evaluation by a database.  But the application does</Line>
  <Line number="3032">** not want the user to be able to make arbitrary changes to the</Line>
  <Line number="3033">** database.  An authorizer could then be put in place while the</Line>
  <Line number="3034">** user-entered SQL is being [sqlite3_prepare | prepared] that</Line>
  <Line number="3035">** disallows everything except [SELECT] statements.</Line>
  <Line number="3036">**</Line>
  <Line number="3037">** Applications that need to process SQL from untrusted sources</Line>
  <Line number="3038">** might also consider lowering resource limits using [sqlite3_limit()]</Line>
  <Line number="3039">** and limiting database size using the [max_page_count] [PRAGMA]</Line>
  <Line number="3040">** in addition to using an authorizer.</Line>
  <Line number="3041">**</Line>
  <Line number="3042">** ^(Only a single authorizer can be in place on a database connection</Line>
  <Line number="3043">** at a time.  Each call to sqlite3_set_authorizer overrides the</Line>
  <Line number="3044">** previous call.)^  ^Disable the authorizer by installing a NULL callback.</Line>
  <Line number="3045">** The authorizer is disabled by default.</Line>
  <Line number="3046">**</Line>
  <Line number="3047">** The authorizer callback must not do anything that will modify</Line>
  <Line number="3048">** the database connection that invoked the authorizer callback.</Line>
  <Line number="3049">** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their</Line>
  <Line number="3050">** database connections for the meaning of &quot;modify&quot; in this paragraph.</Line>
  <Line number="3051">**</Line>
  <Line number="3052">** ^When [sqlite3_prepare_v2()] is used to prepare a statement, the</Line>
  <Line number="3053">** statement might be re-prepared during [sqlite3_step()] due to a</Line>
  <Line number="3054">** schema change.  Hence, the application should ensure that the</Line>
  <Line number="3055">** correct authorizer callback remains in place during the [sqlite3_step()].</Line>
  <Line number="3056">**</Line>
  <Line number="3057">** ^Note that the authorizer callback is invoked only during</Line>
  <Line number="3058">** [sqlite3_prepare()] or its variants.  Authorization is not</Line>
  <Line number="3059">** performed during statement evaluation in [sqlite3_step()], unless</Line>
  <Line number="3060">** as stated in the previous paragraph, sqlite3_step() invokes</Line>
  <Line number="3061">** sqlite3_prepare_v2() to reprepare a statement after a schema change.</Line>
  <Line number="3062">*/</Line>
  <Line number="3063">SQLITE_API int sqlite3_set_authorizer(</Line>
  <Line number="3064">  sqlite3*,</Line>
  <Line number="3065">  int (*xAuth)(void*,int,const char*,const char*,const char*,const char*),</Line>
  <Line number="3066">  void *pUserData</Line>
  <Line number="3067">);</Line>
  <Line number="3068"></Line>
  <Line number="3069">/*</Line>
  <Line number="3070">** CAPI3REF: Authorizer Return Codes</Line>
  <Line number="3071">**</Line>
  <Line number="3072">** The [sqlite3_set_authorizer | authorizer callback function] must</Line>
  <Line number="3073">** return either [SQLITE_OK] or one of these two constants in order</Line>
  <Line number="3074">** to signal SQLite whether or not the action is permitted.  See the</Line>
  <Line number="3075">** [sqlite3_set_authorizer | authorizer documentation] for additional</Line>
  <Line number="3076">** information.</Line>
  <Line number="3077">**</Line>
  <Line number="3078">** Note that SQLITE_IGNORE is also used as a [conflict resolution mode]</Line>
  <Line number="3079">** returned from the [sqlite3_vtab_on_conflict()] interface.</Line>
  <Line number="3080">*/</Line>
  <Line number="3081">#define SQLITE_DENY   1   /* Abort the SQL statement with an error */</Line>
  <Line number="3082">#define SQLITE_IGNORE 2   /* Don&apos;t allow access, but don&apos;t generate an error */</Line>
  <Line number="3083"></Line>
  <Line number="3084">/*</Line>
  <Line number="3085">** CAPI3REF: Authorizer Action Codes</Line>
  <Line number="3086">**</Line>
  <Line number="3087">** The [sqlite3_set_authorizer()] interface registers a callback function</Line>
  <Line number="3088">** that is invoked to authorize certain SQL statement actions.  The</Line>
  <Line number="3089">** second parameter to the callback is an integer code that specifies</Line>
  <Line number="3090">** what action is being authorized.  These are the integer action codes that</Line>
  <Line number="3091">** the authorizer callback may be passed.</Line>
  <Line number="3092">**</Line>
  <Line number="3093">** These action code values signify what kind of operation is to be</Line>
  <Line number="3094">** authorized.  The 3rd and 4th parameters to the authorization</Line>
  <Line number="3095">** callback function will be parameters or NULL depending on which of these</Line>
  <Line number="3096">** codes is used as the second parameter.  ^(The 5th parameter to the</Line>
  <Line number="3097">** authorizer callback is the name of the database (&quot;main&quot;, &quot;temp&quot;,</Line>
  <Line number="3098">** etc.) if applicable.)^  ^The 6th parameter to the authorizer callback</Line>
  <Line number="3099">** is the name of the inner-most trigger or view that is responsible for</Line>
  <Line number="3100">** the access attempt or NULL if this access attempt is directly from</Line>
  <Line number="3101">** top-level SQL code.</Line>
  <Line number="3102">*/</Line>
  <Line number="3103">/******************************************* 3rd ************ 4th ***********/</Line>
  <Line number="3104">#define SQLITE_CREATE_INDEX          1   /* Index Name      Table Name      */</Line>
  <Line number="3105">#define SQLITE_CREATE_TABLE          2   /* Table Name      NULL            */</Line>
  <Line number="3106">#define SQLITE_CREATE_TEMP_INDEX     3   /* Index Name      Table Name      */</Line>
  <Line number="3107">#define SQLITE_CREATE_TEMP_TABLE     4   /* Table Name      NULL            */</Line>
  <Line number="3108">#define SQLITE_CREATE_TEMP_TRIGGER   5   /* Trigger Name    Table Name      */</Line>
  <Line number="3109">#define SQLITE_CREATE_TEMP_VIEW      6   /* View Name       NULL            */</Line>
  <Line number="3110">#define SQLITE_CREATE_TRIGGER        7   /* Trigger Name    Table Name      */</Line>
  <Line number="3111">#define SQLITE_CREATE_VIEW           8   /* View Name       NULL            */</Line>
  <Line number="3112">#define SQLITE_DELETE                9   /* Table Name      NULL            */</Line>
  <Line number="3113">#define SQLITE_DROP_INDEX           10   /* Index Name      Table Name      */</Line>
  <Line number="3114">#define SQLITE_DROP_TABLE           11   /* Table Name      NULL            */</Line>
  <Line number="3115">#define SQLITE_DROP_TEMP_INDEX      12   /* Index Name      Table Name      */</Line>
  <Line number="3116">#define SQLITE_DROP_TEMP_TABLE      13   /* Table Name      NULL            */</Line>
  <Line number="3117">#define SQLITE_DROP_TEMP_TRIGGER    14   /* Trigger Name    Table Name      */</Line>
  <Line number="3118">#define SQLITE_DROP_TEMP_VIEW       15   /* View Name       NULL            */</Line>
  <Line number="3119">#define SQLITE_DROP_TRIGGER         16   /* Trigger Name    Table Name      */</Line>
  <Line number="3120">#define SQLITE_DROP_VIEW            17   /* View Name       NULL            */</Line>
  <Line number="3121">#define SQLITE_INSERT               18   /* Table Name      NULL            */</Line>
  <Line number="3122">#define SQLITE_PRAGMA               19   /* Pragma Name     1st arg or NULL */</Line>
  <Line number="3123">#define SQLITE_READ                 20   /* Table Name      Column Name     */</Line>
  <Line number="3124">#define SQLITE_SELECT               21   /* NULL            NULL            */</Line>
  <Line number="3125">#define SQLITE_TRANSACTION          22   /* Operation       NULL            */</Line>
  <Line number="3126">#define SQLITE_UPDATE               23   /* Table Name      Column Name     */</Line>
  <Line number="3127">#define SQLITE_ATTACH               24   /* Filename        NULL            */</Line>
  <Line number="3128">#define SQLITE_DETACH               25   /* Database Name   NULL            */</Line>
  <Line number="3129">#define SQLITE_ALTER_TABLE          26   /* Database Name   Table Name      */</Line>
  <Line number="3130">#define SQLITE_REINDEX              27   /* Index Name      NULL            */</Line>
  <Line number="3131">#define SQLITE_ANALYZE              28   /* Table Name      NULL            */</Line>
  <Line number="3132">#define SQLITE_CREATE_VTABLE        29   /* Table Name      Module Name     */</Line>
  <Line number="3133">#define SQLITE_DROP_VTABLE          30   /* Table Name      Module Name     */</Line>
  <Line number="3134">#define SQLITE_FUNCTION             31   /* NULL            Function Name   */</Line>
  <Line number="3135">#define SQLITE_SAVEPOINT            32   /* Operation       Savepoint Name  */</Line>
  <Line number="3136">#define SQLITE_COPY                  0   /* No longer used */</Line>
  <Line number="3137">#define SQLITE_RECURSIVE            33   /* NULL            NULL            */</Line>
  <Line number="3138"></Line>
  <Line number="3139">/*</Line>
  <Line number="3140">** CAPI3REF: Tracing And Profiling Functions</Line>
  <Line number="3141">** METHOD: sqlite3</Line>
  <Line number="3142">**</Line>
  <Line number="3143">** These routines are deprecated. Use the [sqlite3_trace_v2()] interface</Line>
  <Line number="3144">** instead of the routines described here.</Line>
  <Line number="3145">**</Line>
  <Line number="3146">** These routines register callback functions that can be used for</Line>
  <Line number="3147">** tracing and profiling the execution of SQL statements.</Line>
  <Line number="3148">**</Line>
  <Line number="3149">** ^The callback function registered by sqlite3_trace() is invoked at</Line>
  <Line number="3150">** various times when an SQL statement is being run by [sqlite3_step()].</Line>
  <Line number="3151">** ^The sqlite3_trace() callback is invoked with a UTF-8 rendering of the</Line>
  <Line number="3152">** SQL statement text as the statement first begins executing.</Line>
  <Line number="3153">** ^(Additional sqlite3_trace() callbacks might occur</Line>
  <Line number="3154">** as each triggered subprogram is entered.  The callbacks for triggers</Line>
  <Line number="3155">** contain a UTF-8 SQL comment that identifies the trigger.)^</Line>
  <Line number="3156">**</Line>
  <Line number="3157">** The [SQLITE_TRACE_SIZE_LIMIT] compile-time option can be used to limit</Line>
  <Line number="3158">** the length of [bound parameter] expansion in the output of sqlite3_trace().</Line>
  <Line number="3159">**</Line>
  <Line number="3160">** ^The callback function registered by sqlite3_profile() is invoked</Line>
  <Line number="3161">** as each SQL statement finishes.  ^The profile callback contains</Line>
  <Line number="3162">** the original statement text and an estimate of wall-clock time</Line>
  <Line number="3163">** of how long that statement took to run.  ^The profile callback</Line>
  <Line number="3164">** time is in units of nanoseconds, however the current implementation</Line>
  <Line number="3165">** is only capable of millisecond resolution so the six least significant</Line>
  <Line number="3166">** digits in the time are meaningless.  Future versions of SQLite</Line>
  <Line number="3167">** might provide greater resolution on the profiler callback.  Invoking</Line>
  <Line number="3168">** either [sqlite3_trace()] or [sqlite3_trace_v2()] will cancel the</Line>
  <Line number="3169">** profile callback.</Line>
  <Line number="3170">*/</Line>
  <Line number="3171">SQLITE_API SQLITE_DEPRECATED void *sqlite3_trace(sqlite3*,</Line>
  <Line number="3172">   void(*xTrace)(void*,const char*), void*);</Line>
  <Line number="3173">SQLITE_API SQLITE_DEPRECATED void *sqlite3_profile(sqlite3*,</Line>
  <Line number="3174">   void(*xProfile)(void*,const char*,sqlite3_uint64), void*);</Line>
  <Line number="3175"></Line>
  <Line number="3176">/*</Line>
  <Line number="3177">** CAPI3REF: SQL Trace Event Codes</Line>
  <Line number="3178">** KEYWORDS: SQLITE_TRACE</Line>
  <Line number="3179">**</Line>
  <Line number="3180">** These constants identify classes of events that can be monitored</Line>
  <Line number="3181">** using the [sqlite3_trace_v2()] tracing logic.  The M argument</Line>
  <Line number="3182">** to [sqlite3_trace_v2(D,M,X,P)] is an OR-ed combination of one or more of</Line>
  <Line number="3183">** the following constants.  ^The first argument to the trace callback</Line>
  <Line number="3184">** is one of the following constants.</Line>
  <Line number="3185">**</Line>
  <Line number="3186">** New tracing constants may be added in future releases.</Line>
  <Line number="3187">**</Line>
  <Line number="3188">** ^A trace callback has four arguments: xCallback(T,C,P,X).</Line>
  <Line number="3189">** ^The T argument is one of the integer type codes above.</Line>
  <Line number="3190">** ^The C argument is a copy of the context pointer passed in as the</Line>
  <Line number="3191">** fourth argument to [sqlite3_trace_v2()].</Line>
  <Line number="3192">** The P and X arguments are pointers whose meanings depend on T.</Line>
  <Line number="3193">**</Line>
  <Line number="3194">** &lt;dl&gt;</Line>
  <Line number="3195">** [[SQLITE_TRACE_STMT]] &lt;dt&gt;SQLITE_TRACE_STMT&lt;/dt&gt;</Line>
  <Line number="3196">** &lt;dd&gt;^An SQLITE_TRACE_STMT callback is invoked when a prepared statement</Line>
  <Line number="3197">** first begins running and possibly at other times during the</Line>
  <Line number="3198">** execution of the prepared statement, such as at the start of each</Line>
  <Line number="3199">** trigger subprogram. ^The P argument is a pointer to the</Line>
  <Line number="3200">** [prepared statement]. ^The X argument is a pointer to a string which</Line>
  <Line number="3201">** is the unexpanded SQL text of the prepared statement or an SQL comment</Line>
  <Line number="3202">** that indicates the invocation of a trigger.  ^The callback can compute</Line>
  <Line number="3203">** the same text that would have been returned by the legacy [sqlite3_trace()]</Line>
  <Line number="3204">** interface by using the X argument when X begins with &quot;--&quot; and invoking</Line>
  <Line number="3205">** [sqlite3_expanded_sql(P)] otherwise.</Line>
  <Line number="3206">**</Line>
  <Line number="3207">** [[SQLITE_TRACE_PROFILE]] &lt;dt&gt;SQLITE_TRACE_PROFILE&lt;/dt&gt;</Line>
  <Line number="3208">** &lt;dd&gt;^An SQLITE_TRACE_PROFILE callback provides approximately the same</Line>
  <Line number="3209">** information as is provided by the [sqlite3_profile()] callback.</Line>
  <Line number="3210">** ^The P argument is a pointer to the [prepared statement] and the</Line>
  <Line number="3211">** X argument points to a 64-bit integer which is the estimated of</Line>
  <Line number="3212">** the number of nanosecond that the prepared statement took to run.</Line>
  <Line number="3213">** ^The SQLITE_TRACE_PROFILE callback is invoked when the statement finishes.</Line>
  <Line number="3214">**</Line>
  <Line number="3215">** [[SQLITE_TRACE_ROW]] &lt;dt&gt;SQLITE_TRACE_ROW&lt;/dt&gt;</Line>
  <Line number="3216">** &lt;dd&gt;^An SQLITE_TRACE_ROW callback is invoked whenever a prepared</Line>
  <Line number="3217">** statement generates a single row of result.</Line>
  <Line number="3218">** ^The P argument is a pointer to the [prepared statement] and the</Line>
  <Line number="3219">** X argument is unused.</Line>
  <Line number="3220">**</Line>
  <Line number="3221">** [[SQLITE_TRACE_CLOSE]] &lt;dt&gt;SQLITE_TRACE_CLOSE&lt;/dt&gt;</Line>
  <Line number="3222">** &lt;dd&gt;^An SQLITE_TRACE_CLOSE callback is invoked when a database</Line>
  <Line number="3223">** connection closes.</Line>
  <Line number="3224">** ^The P argument is a pointer to the [database connection] object</Line>
  <Line number="3225">** and the X argument is unused.</Line>
  <Line number="3226">** &lt;/dl&gt;</Line>
  <Line number="3227">*/</Line>
  <Line number="3228">#define SQLITE_TRACE_STMT       0x01</Line>
  <Line number="3229">#define SQLITE_TRACE_PROFILE    0x02</Line>
  <Line number="3230">#define SQLITE_TRACE_ROW        0x04</Line>
  <Line number="3231">#define SQLITE_TRACE_CLOSE      0x08</Line>
  <Line number="3232"></Line>
  <Line number="3233">/*</Line>
  <Line number="3234">** CAPI3REF: SQL Trace Hook</Line>
  <Line number="3235">** METHOD: sqlite3</Line>
  <Line number="3236">**</Line>
  <Line number="3237">** ^The sqlite3_trace_v2(D,M,X,P) interface registers a trace callback</Line>
  <Line number="3238">** function X against [database connection] D, using property mask M</Line>
  <Line number="3239">** and context pointer P.  ^If the X callback is</Line>
  <Line number="3240">** NULL or if the M mask is zero, then tracing is disabled.  The</Line>
  <Line number="3241">** M argument should be the bitwise OR-ed combination of</Line>
  <Line number="3242">** zero or more [SQLITE_TRACE] constants.</Line>
  <Line number="3243">**</Line>
  <Line number="3244">** ^Each call to either sqlite3_trace() or sqlite3_trace_v2() overrides</Line>
  <Line number="3245">** (cancels) any prior calls to sqlite3_trace() or sqlite3_trace_v2().</Line>
  <Line number="3246">**</Line>
  <Line number="3247">** ^The X callback is invoked whenever any of the events identified by</Line>
  <Line number="3248">** mask M occur.  ^The integer return value from the callback is currently</Line>
  <Line number="3249">** ignored, though this may change in future releases.  Callback</Line>
  <Line number="3250">** implementations should return zero to ensure future compatibility.</Line>
  <Line number="3251">**</Line>
  <Line number="3252">** ^A trace callback is invoked with four arguments: callback(T,C,P,X).</Line>
  <Line number="3253">** ^The T argument is one of the [SQLITE_TRACE]</Line>
  <Line number="3254">** constants to indicate why the callback was invoked.</Line>
  <Line number="3255">** ^The C argument is a copy of the context pointer.</Line>
  <Line number="3256">** The P and X arguments are pointers whose meanings depend on T.</Line>
  <Line number="3257">**</Line>
  <Line number="3258">** The sqlite3_trace_v2() interface is intended to replace the legacy</Line>
  <Line number="3259">** interfaces [sqlite3_trace()] and [sqlite3_profile()], both of which</Line>
  <Line number="3260">** are deprecated.</Line>
  <Line number="3261">*/</Line>
  <Line number="3262">SQLITE_API int sqlite3_trace_v2(</Line>
  <Line number="3263">  sqlite3*,</Line>
  <Line number="3264">  unsigned uMask,</Line>
  <Line number="3265">  int(*xCallback)(unsigned,void*,void*,void*),</Line>
  <Line number="3266">  void *pCtx</Line>
  <Line number="3267">);</Line>
  <Line number="3268"></Line>
  <Line number="3269">/*</Line>
  <Line number="3270">** CAPI3REF: Query Progress Callbacks</Line>
  <Line number="3271">** METHOD: sqlite3</Line>
  <Line number="3272">**</Line>
  <Line number="3273">** ^The sqlite3_progress_handler(D,N,X,P) interface causes the callback</Line>
  <Line number="3274">** function X to be invoked periodically during long running calls to</Line>
  <Line number="3275">** [sqlite3_exec()], [sqlite3_step()] and [sqlite3_get_table()] for</Line>
  <Line number="3276">** database connection D.  An example use for this</Line>
  <Line number="3277">** interface is to keep a GUI updated during a large query.</Line>
  <Line number="3278">**</Line>
  <Line number="3279">** ^The parameter P is passed through as the only parameter to the</Line>
  <Line number="3280">** callback function X.  ^The parameter N is the approximate number of</Line>
  <Line number="3281">** [virtual machine instructions] that are evaluated between successive</Line>
  <Line number="3282">** invocations of the callback X.  ^If N is less than one then the progress</Line>
  <Line number="3283">** handler is disabled.</Line>
  <Line number="3284">**</Line>
  <Line number="3285">** ^Only a single progress handler may be defined at one time per</Line>
  <Line number="3286">** [database connection]; setting a new progress handler cancels the</Line>
  <Line number="3287">** old one.  ^Setting parameter X to NULL disables the progress handler.</Line>
  <Line number="3288">** ^The progress handler is also disabled by setting N to a value less</Line>
  <Line number="3289">** than 1.</Line>
  <Line number="3290">**</Line>
  <Line number="3291">** ^If the progress callback returns non-zero, the operation is</Line>
  <Line number="3292">** interrupted.  This feature can be used to implement a</Line>
  <Line number="3293">** &quot;Cancel&quot; button on a GUI progress dialog box.</Line>
  <Line number="3294">**</Line>
  <Line number="3295">** The progress handler callback must not do anything that will modify</Line>
  <Line number="3296">** the database connection that invoked the progress handler.</Line>
  <Line number="3297">** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their</Line>
  <Line number="3298">** database connections for the meaning of &quot;modify&quot; in this paragraph.</Line>
  <Line number="3299">**</Line>
  <Line number="3300">*/</Line>
  <Line number="3301">SQLITE_API void sqlite3_progress_handler(sqlite3*, int, int(*)(void*), void*);</Line>
  <Line number="3302"></Line>
  <Line number="3303">/*</Line>
  <Line number="3304">** CAPI3REF: Opening A New Database Connection</Line>
  <Line number="3305">** CONSTRUCTOR: sqlite3</Line>
  <Line number="3306">**</Line>
  <Line number="3307">** ^These routines open an SQLite database file as specified by the</Line>
  <Line number="3308">** filename argument. ^The filename argument is interpreted as UTF-8 for</Line>
  <Line number="3309">** sqlite3_open() and sqlite3_open_v2() and as UTF-16 in the native byte</Line>
  <Line number="3310">** order for sqlite3_open16(). ^(A [database connection] handle is usually</Line>
  <Line number="3311">** returned in *ppDb, even if an error occurs.  The only exception is that</Line>
  <Line number="3312">** if SQLite is unable to allocate memory to hold the [sqlite3] object,</Line>
  <Line number="3313">** a NULL will be written into *ppDb instead of a pointer to the [sqlite3]</Line>
  <Line number="3314">** object.)^ ^(If the database is opened (and/or created) successfully, then</Line>
  <Line number="3315">** [SQLITE_OK] is returned.  Otherwise an [error code] is returned.)^ ^The</Line>
  <Line number="3316">** [sqlite3_errmsg()] or [sqlite3_errmsg16()] routines can be used to obtain</Line>
  <Line number="3317">** an English language description of the error following a failure of any</Line>
  <Line number="3318">** of the sqlite3_open() routines.</Line>
  <Line number="3319">**</Line>
  <Line number="3320">** ^The default encoding will be UTF-8 for databases created using</Line>
  <Line number="3321">** sqlite3_open() or sqlite3_open_v2().  ^The default encoding for databases</Line>
  <Line number="3322">** created using sqlite3_open16() will be UTF-16 in the native byte order.</Line>
  <Line number="3323">**</Line>
  <Line number="3324">** Whether or not an error occurs when it is opened, resources</Line>
  <Line number="3325">** associated with the [database connection] handle should be released by</Line>
  <Line number="3326">** passing it to [sqlite3_close()] when it is no longer required.</Line>
  <Line number="3327">**</Line>
  <Line number="3328">** The sqlite3_open_v2() interface works like sqlite3_open()</Line>
  <Line number="3329">** except that it accepts two additional parameters for additional control</Line>
  <Line number="3330">** over the new database connection.  ^(The flags parameter to</Line>
  <Line number="3331">** sqlite3_open_v2() must include, at a minimum, one of the following</Line>
  <Line number="3332">** three flag combinations:)^</Line>
  <Line number="3333">**</Line>
  <Line number="3334">** &lt;dl&gt;</Line>
  <Line number="3335">** ^(&lt;dt&gt;[SQLITE_OPEN_READONLY]&lt;/dt&gt;</Line>
  <Line number="3336">** &lt;dd&gt;The database is opened in read-only mode.  If the database does not</Line>
  <Line number="3337">** already exist, an error is returned.&lt;/dd&gt;)^</Line>
  <Line number="3338">**</Line>
  <Line number="3339">** ^(&lt;dt&gt;[SQLITE_OPEN_READWRITE]&lt;/dt&gt;</Line>
  <Line number="3340">** &lt;dd&gt;The database is opened for reading and writing if possible, or reading</Line>
  <Line number="3341">** only if the file is write protected by the operating system.  In either</Line>
  <Line number="3342">** case the database must already exist, otherwise an error is returned.&lt;/dd&gt;)^</Line>
  <Line number="3343">**</Line>
  <Line number="3344">** ^(&lt;dt&gt;[SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE]&lt;/dt&gt;</Line>
  <Line number="3345">** &lt;dd&gt;The database is opened for reading and writing, and is created if</Line>
  <Line number="3346">** it does not already exist. This is the behavior that is always used for</Line>
  <Line number="3347">** sqlite3_open() and sqlite3_open16().&lt;/dd&gt;)^</Line>
  <Line number="3348">** &lt;/dl&gt;</Line>
  <Line number="3349">**</Line>
  <Line number="3350">** In addition to the required flags, the following optional flags are</Line>
  <Line number="3351">** also supported:</Line>
  <Line number="3352">**</Line>
  <Line number="3353">** &lt;dl&gt;</Line>
  <Line number="3354">** ^(&lt;dt&gt;[SQLITE_OPEN_URI]&lt;/dt&gt;</Line>
  <Line number="3355">** &lt;dd&gt;The filename can be interpreted as a URI if this flag is set.&lt;/dd&gt;)^</Line>
  <Line number="3356">**</Line>
  <Line number="3357">** ^(&lt;dt&gt;[SQLITE_OPEN_MEMORY]&lt;/dt&gt;</Line>
  <Line number="3358">** &lt;dd&gt;The database will be opened as an in-memory database.  The database</Line>
  <Line number="3359">** is named by the &quot;filename&quot; argument for the purposes of cache-sharing,</Line>
  <Line number="3360">** if shared cache mode is enabled, but the &quot;filename&quot; is otherwise ignored.</Line>
  <Line number="3361">** &lt;/dd&gt;)^</Line>
  <Line number="3362">**</Line>
  <Line number="3363">** ^(&lt;dt&gt;[SQLITE_OPEN_NOMUTEX]&lt;/dt&gt;</Line>
  <Line number="3364">** &lt;dd&gt;The new database connection will use the &quot;multi-thread&quot;</Line>
  <Line number="3365">** [threading mode].)^  This means that separate threads are allowed</Line>
  <Line number="3366">** to use SQLite at the same time, as long as each thread is using</Line>
  <Line number="3367">** a different [database connection].</Line>
  <Line number="3368">**</Line>
  <Line number="3369">** ^(&lt;dt&gt;[SQLITE_OPEN_FULLMUTEX]&lt;/dt&gt;</Line>
  <Line number="3370">** &lt;dd&gt;The new database connection will use the &quot;serialized&quot;</Line>
  <Line number="3371">** [threading mode].)^  This means the multiple threads can safely</Line>
  <Line number="3372">** attempt to use the same database connection at the same time.</Line>
  <Line number="3373">** (Mutexes will block any actual concurrency, but in this mode</Line>
  <Line number="3374">** there is no harm in trying.)</Line>
  <Line number="3375">**</Line>
  <Line number="3376">** ^(&lt;dt&gt;[SQLITE_OPEN_SHAREDCACHE]&lt;/dt&gt;</Line>
  <Line number="3377">** &lt;dd&gt;The database is opened [shared cache] enabled, overriding</Line>
  <Line number="3378">** the default shared cache setting provided by</Line>
  <Line number="3379">** [sqlite3_enable_shared_cache()].)^</Line>
  <Line number="3380">**</Line>
  <Line number="3381">** ^(&lt;dt&gt;[SQLITE_OPEN_PRIVATECACHE]&lt;/dt&gt;</Line>
  <Line number="3382">** &lt;dd&gt;The database is opened [shared cache] disabled, overriding</Line>
  <Line number="3383">** the default shared cache setting provided by</Line>
  <Line number="3384">** [sqlite3_enable_shared_cache()].)^</Line>
  <Line number="3385">**</Line>
  <Line number="3386">** [[OPEN_NOFOLLOW]] ^(&lt;dt&gt;[SQLITE_OPEN_NOFOLLOW]&lt;/dt&gt;</Line>
  <Line number="3387">** &lt;dd&gt;The database filename is not allowed to be a symbolic link&lt;/dd&gt;</Line>
  <Line number="3388">** &lt;/dl&gt;)^</Line>
  <Line number="3389">**</Line>
  <Line number="3390">** If the 3rd parameter to sqlite3_open_v2() is not one of the</Line>
  <Line number="3391">** required combinations shown above optionally combined with other</Line>
  <Line number="3392">** [SQLITE_OPEN_READONLY | SQLITE_OPEN_* bits]</Line>
  <Line number="3393">** then the behavior is undefined.</Line>
  <Line number="3394">**</Line>
  <Line number="3395">** ^The fourth parameter to sqlite3_open_v2() is the name of the</Line>
  <Line number="3396">** [sqlite3_vfs] object that defines the operating system interface that</Line>
  <Line number="3397">** the new database connection should use.  ^If the fourth parameter is</Line>
  <Line number="3398">** a NULL pointer then the default [sqlite3_vfs] object is used.</Line>
  <Line number="3399">**</Line>
  <Line number="3400">** ^If the filename is &quot;:memory:&quot;, then a private, temporary in-memory database</Line>
  <Line number="3401">** is created for the connection.  ^This in-memory database will vanish when</Line>
  <Line number="3402">** the database connection is closed.  Future versions of SQLite might</Line>
  <Line number="3403">** make use of additional special filenames that begin with the &quot;:&quot; character.</Line>
  <Line number="3404">** It is recommended that when a database filename actually does begin with</Line>
  <Line number="3405">** a &quot;:&quot; character you should prefix the filename with a pathname such as</Line>
  <Line number="3406">** &quot;./&quot; to avoid ambiguity.</Line>
  <Line number="3407">**</Line>
  <Line number="3408">** ^If the filename is an empty string, then a private, temporary</Line>
  <Line number="3409">** on-disk database will be created.  ^This private database will be</Line>
  <Line number="3410">** automatically deleted as soon as the database connection is closed.</Line>
  <Line number="3411">**</Line>
  <Line number="3412">** [[URI filenames in sqlite3_open()]] &lt;h3&gt;URI Filenames&lt;/h3&gt;</Line>
  <Line number="3413">**</Line>
  <Line number="3414">** ^If [URI filename] interpretation is enabled, and the filename argument</Line>
  <Line number="3415">** begins with &quot;file:&quot;, then the filename is interpreted as a URI. ^URI</Line>
  <Line number="3416">** filename interpretation is enabled if the [SQLITE_OPEN_URI] flag is</Line>
  <Line number="3417">** set in the third argument to sqlite3_open_v2(), or if it has</Line>
  <Line number="3418">** been enabled globally using the [SQLITE_CONFIG_URI] option with the</Line>
  <Line number="3419">** [sqlite3_config()] method or by the [SQLITE_USE_URI] compile-time option.</Line>
  <Line number="3420">** URI filename interpretation is turned off</Line>
  <Line number="3421">** by default, but future releases of SQLite might enable URI filename</Line>
  <Line number="3422">** interpretation by default.  See &quot;[URI filenames]&quot; for additional</Line>
  <Line number="3423">** information.</Line>
  <Line number="3424">**</Line>
  <Line number="3425">** URI filenames are parsed according to RFC 3986. ^If the URI contains an</Line>
  <Line number="3426">** authority, then it must be either an empty string or the string</Line>
  <Line number="3427">** &quot;localhost&quot;. ^If the authority is not an empty string or &quot;localhost&quot;, an</Line>
  <Line number="3428">** error is returned to the caller. ^The fragment component of a URI, if</Line>
  <Line number="3429">** present, is ignored.</Line>
  <Line number="3430">**</Line>
  <Line number="3431">** ^SQLite uses the path component of the URI as the name of the disk file</Line>
  <Line number="3432">** which contains the database. ^If the path begins with a &apos;/&apos; character,</Line>
  <Line number="3433">** then it is interpreted as an absolute path. ^If the path does not begin</Line>
  <Line number="3434">** with a &apos;/&apos; (meaning that the authority section is omitted from the URI)</Line>
  <Line number="3435">** then the path is interpreted as a relative path.</Line>
  <Line number="3436">** ^(On windows, the first component of an absolute path</Line>
  <Line number="3437">** is a drive specification (e.g. &quot;C:&quot;).)^</Line>
  <Line number="3438">**</Line>
  <Line number="3439">** [[core URI query parameters]]</Line>
  <Line number="3440">** The query component of a URI may contain parameters that are interpreted</Line>
  <Line number="3441">** either by SQLite itself, or by a [VFS | custom VFS implementation].</Line>
  <Line number="3442">** SQLite and its built-in [VFSes] interpret the</Line>
  <Line number="3443">** following query parameters:</Line>
  <Line number="3444">**</Line>
  <Line number="3445">** &lt;ul&gt;</Line>
  <Line number="3446">**   &lt;li&gt; &lt;b&gt;vfs&lt;/b&gt;: ^The &quot;vfs&quot; parameter may be used to specify the name of</Line>
  <Line number="3447">**     a VFS object that provides the operating system interface that should</Line>
  <Line number="3448">**     be used to access the database file on disk. ^If this option is set to</Line>
  <Line number="3449">**     an empty string the default VFS object is used. ^Specifying an unknown</Line>
  <Line number="3450">**     VFS is an error. ^If sqlite3_open_v2() is used and the vfs option is</Line>
  <Line number="3451">**     present, then the VFS specified by the option takes precedence over</Line>
  <Line number="3452">**     the value passed as the fourth parameter to sqlite3_open_v2().</Line>
  <Line number="3453">**</Line>
  <Line number="3454">**   &lt;li&gt; &lt;b&gt;mode&lt;/b&gt;: ^(The mode parameter may be set to either &quot;ro&quot;, &quot;rw&quot;,</Line>
  <Line number="3455">**     &quot;rwc&quot;, or &quot;memory&quot;. Attempting to set it to any other value is</Line>
  <Line number="3456">**     an error)^.</Line>
  <Line number="3457">**     ^If &quot;ro&quot; is specified, then the database is opened for read-only</Line>
  <Line number="3458">**     access, just as if the [SQLITE_OPEN_READONLY] flag had been set in the</Line>
  <Line number="3459">**     third argument to sqlite3_open_v2(). ^If the mode option is set to</Line>
  <Line number="3460">**     &quot;rw&quot;, then the database is opened for read-write (but not create)</Line>
  <Line number="3461">**     access, as if SQLITE_OPEN_READWRITE (but not SQLITE_OPEN_CREATE) had</Line>
  <Line number="3462">**     been set. ^Value &quot;rwc&quot; is equivalent to setting both</Line>
  <Line number="3463">**     SQLITE_OPEN_READWRITE and SQLITE_OPEN_CREATE.  ^If the mode option is</Line>
  <Line number="3464">**     set to &quot;memory&quot; then a pure [in-memory database] that never reads</Line>
  <Line number="3465">**     or writes from disk is used. ^It is an error to specify a value for</Line>
  <Line number="3466">**     the mode parameter that is less restrictive than that specified by</Line>
  <Line number="3467">**     the flags passed in the third parameter to sqlite3_open_v2().</Line>
  <Line number="3468">**</Line>
  <Line number="3469">**   &lt;li&gt; &lt;b&gt;cache&lt;/b&gt;: ^The cache parameter may be set to either &quot;shared&quot; or</Line>
  <Line number="3470">**     &quot;private&quot;. ^Setting it to &quot;shared&quot; is equivalent to setting the</Line>
  <Line number="3471">**     SQLITE_OPEN_SHAREDCACHE bit in the flags argument passed to</Line>
  <Line number="3472">**     sqlite3_open_v2(). ^Setting the cache parameter to &quot;private&quot; is</Line>
  <Line number="3473">**     equivalent to setting the SQLITE_OPEN_PRIVATECACHE bit.</Line>
  <Line number="3474">**     ^If sqlite3_open_v2() is used and the &quot;cache&quot; parameter is present in</Line>
  <Line number="3475">**     a URI filename, its value overrides any behavior requested by setting</Line>
  <Line number="3476">**     SQLITE_OPEN_PRIVATECACHE or SQLITE_OPEN_SHAREDCACHE flag.</Line>
  <Line number="3477">**</Line>
  <Line number="3478">**  &lt;li&gt; &lt;b&gt;psow&lt;/b&gt;: ^The psow parameter indicates whether or not the</Line>
  <Line number="3479">**     [powersafe overwrite] property does or does not apply to the</Line>
  <Line number="3480">**     storage media on which the database file resides.</Line>
  <Line number="3481">**</Line>
  <Line number="3482">**  &lt;li&gt; &lt;b&gt;nolock&lt;/b&gt;: ^The nolock parameter is a boolean query parameter</Line>
  <Line number="3483">**     which if set disables file locking in rollback journal modes.  This</Line>
  <Line number="3484">**     is useful for accessing a database on a filesystem that does not</Line>
  <Line number="3485">**     support locking.  Caution:  Database corruption might result if two</Line>
  <Line number="3486">**     or more processes write to the same database and any one of those</Line>
  <Line number="3487">**     processes uses nolock=1.</Line>
  <Line number="3488">**</Line>
  <Line number="3489">**  &lt;li&gt; &lt;b&gt;immutable&lt;/b&gt;: ^The immutable parameter is a boolean query</Line>
  <Line number="3490">**     parameter that indicates that the database file is stored on</Line>
  <Line number="3491">**     read-only media.  ^When immutable is set, SQLite assumes that the</Line>
  <Line number="3492">**     database file cannot be changed, even by a process with higher</Line>
  <Line number="3493">**     privilege, and so the database is opened read-only and all locking</Line>
  <Line number="3494">**     and change detection is disabled.  Caution: Setting the immutable</Line>
  <Line number="3495">**     property on a database file that does in fact change can result</Line>
  <Line number="3496">**     in incorrect query results and/or [SQLITE_CORRUPT] errors.</Line>
  <Line number="3497">**     See also: [SQLITE_IOCAP_IMMUTABLE].</Line>
  <Line number="3498">**</Line>
  <Line number="3499">** &lt;/ul&gt;</Line>
  <Line number="3500">**</Line>
  <Line number="3501">** ^Specifying an unknown parameter in the query component of a URI is not an</Line>
  <Line number="3502">** error.  Future versions of SQLite might understand additional query</Line>
  <Line number="3503">** parameters.  See &quot;[query parameters with special meaning to SQLite]&quot; for</Line>
  <Line number="3504">** additional information.</Line>
  <Line number="3505">**</Line>
  <Line number="3506">** [[URI filename examples]] &lt;h3&gt;URI filename examples&lt;/h3&gt;</Line>
  <Line number="3507">**</Line>
  <Line number="3508">** &lt;table border=&quot;1&quot; align=center cellpadding=5&gt;</Line>
  <Line number="3509">** &lt;tr&gt;&lt;th&gt; URI filenames &lt;th&gt; Results</Line>
  <Line number="3510">** &lt;tr&gt;&lt;td&gt; file:data.db &lt;td&gt;</Line>
  <Line number="3511">**          Open the file &quot;data.db&quot; in the current directory.</Line>
  <Line number="3512">** &lt;tr&gt;&lt;td&gt; file:/home/fred/data.db&lt;br&gt;</Line>
  <Line number="3513">**          file:///home/fred/data.db &lt;br&gt;</Line>
  <Line number="3514">**          file://localhost/home/fred/data.db &lt;br&gt; &lt;td&gt;</Line>
  <Line number="3515">**          Open the database file &quot;/home/fred/data.db&quot;.</Line>
  <Line number="3516">** &lt;tr&gt;&lt;td&gt; file://darkstar/home/fred/data.db &lt;td&gt;</Line>
  <Line number="3517">**          An error. &quot;darkstar&quot; is not a recognized authority.</Line>
  <Line number="3518">** &lt;tr&gt;&lt;td style=&quot;white-space:nowrap&quot;&gt;</Line>
  <Line number="3519">**          file:///C:/Documents%20and%20Settings/fred/Desktop/data.db</Line>
  <Line number="3520">**     &lt;td&gt; Windows only: Open the file &quot;data.db&quot; on fred&apos;s desktop on drive</Line>
  <Line number="3521">**          C:. Note that the %20 escaping in this example is not strictly</Line>
  <Line number="3522">**          necessary - space characters can be used literally</Line>
  <Line number="3523">**          in URI filenames.</Line>
  <Line number="3524">** &lt;tr&gt;&lt;td&gt; file:data.db?mode=ro&amp;cache=private &lt;td&gt;</Line>
  <Line number="3525">**          Open file &quot;data.db&quot; in the current directory for read-only access.</Line>
  <Line number="3526">**          Regardless of whether or not shared-cache mode is enabled by</Line>
  <Line number="3527">**          default, use a private cache.</Line>
  <Line number="3528">** &lt;tr&gt;&lt;td&gt; file:/home/fred/data.db?vfs=unix-dotfile &lt;td&gt;</Line>
  <Line number="3529">**          Open file &quot;/home/fred/data.db&quot;. Use the special VFS &quot;unix-dotfile&quot;</Line>
  <Line number="3530">**          that uses dot-files in place of posix advisory locking.</Line>
  <Line number="3531">** &lt;tr&gt;&lt;td&gt; file:data.db?mode=readonly &lt;td&gt;</Line>
  <Line number="3532">**          An error. &quot;readonly&quot; is not a valid option for the &quot;mode&quot; parameter.</Line>
  <Line number="3533">**          Use &quot;ro&quot; instead:  &quot;file:data.db?mode=ro&quot;.</Line>
  <Line number="3534">** &lt;/table&gt;</Line>
  <Line number="3535">**</Line>
  <Line number="3536">** ^URI hexadecimal escape sequences (%HH) are supported within the path and</Line>
  <Line number="3537">** query components of a URI. A hexadecimal escape sequence consists of a</Line>
  <Line number="3538">** percent sign - &quot;%&quot; - followed by exactly two hexadecimal digits</Line>
  <Line number="3539">** specifying an octet value. ^Before the path or query components of a</Line>
  <Line number="3540">** URI filename are interpreted, they are encoded using UTF-8 and all</Line>
  <Line number="3541">** hexadecimal escape sequences replaced by a single byte containing the</Line>
  <Line number="3542">** corresponding octet. If this process generates an invalid UTF-8 encoding,</Line>
  <Line number="3543">** the results are undefined.</Line>
  <Line number="3544">**</Line>
  <Line number="3545">** &lt;b&gt;Note to Windows users:&lt;/b&gt;  The encoding used for the filename argument</Line>
  <Line number="3546">** of sqlite3_open() and sqlite3_open_v2() must be UTF-8, not whatever</Line>
  <Line number="3547">** codepage is currently defined.  Filenames containing international</Line>
  <Line number="3548">** characters must be converted to UTF-8 prior to passing them into</Line>
  <Line number="3549">** sqlite3_open() or sqlite3_open_v2().</Line>
  <Line number="3550">**</Line>
  <Line number="3551">** &lt;b&gt;Note to Windows Runtime users:&lt;/b&gt;  The temporary directory must be set</Line>
  <Line number="3552">** prior to calling sqlite3_open() or sqlite3_open_v2().  Otherwise, various</Line>
  <Line number="3553">** features that require the use of temporary files may fail.</Line>
  <Line number="3554">**</Line>
  <Line number="3555">** See also: [sqlite3_temp_directory]</Line>
  <Line number="3556">*/</Line>
  <Line number="3557">SQLITE_API int sqlite3_open(</Line>
  <Line number="3558">  const char *filename,   /* Database filename (UTF-8) */</Line>
  <Line number="3559">  sqlite3 **ppDb          /* OUT: SQLite db handle */</Line>
  <Line number="3560">);</Line>
  <Line number="3561">SQLITE_API int sqlite3_open16(</Line>
  <Line number="3562">  const void *filename,   /* Database filename (UTF-16) */</Line>
  <Line number="3563">  sqlite3 **ppDb          /* OUT: SQLite db handle */</Line>
  <Line number="3564">);</Line>
  <Line number="3565">SQLITE_API int sqlite3_open_v2(</Line>
  <Line number="3566">  const char *filename,   /* Database filename (UTF-8) */</Line>
  <Line number="3567">  sqlite3 **ppDb,         /* OUT: SQLite db handle */</Line>
  <Line number="3568">  int flags,              /* Flags */</Line>
  <Line number="3569">  const char *zVfs        /* Name of VFS module to use */</Line>
  <Line number="3570">);</Line>
  <Line number="3571"></Line>
  <Line number="3572">/*</Line>
  <Line number="3573">** CAPI3REF: Obtain Values For URI Parameters</Line>
  <Line number="3574">**</Line>
  <Line number="3575">** These are utility routines, useful to [VFS|custom VFS implementations],</Line>
  <Line number="3576">** that check if a database file was a URI that contained a specific query</Line>
  <Line number="3577">** parameter, and if so obtains the value of that query parameter.</Line>
  <Line number="3578">**</Line>
  <Line number="3579">** The first parameter to these interfaces (hereafter referred to</Line>
  <Line number="3580">** as F) must be one of:</Line>
  <Line number="3581">** &lt;ul&gt;</Line>
  <Line number="3582">** &lt;li&gt; A database filename pointer created by the SQLite core and</Line>
  <Line number="3583">** passed into the xOpen() method of a VFS implemention, or</Line>
  <Line number="3584">** &lt;li&gt; A filename obtained from [sqlite3_db_filename()], or</Line>
  <Line number="3585">** &lt;li&gt; A new filename constructed using [sqlite3_create_filename()].</Line>
  <Line number="3586">** &lt;/ul&gt;</Line>
  <Line number="3587">** If the F parameter is not one of the above, then the behavior is</Line>
  <Line number="3588">** undefined and probably undesirable.  Older versions of SQLite were</Line>
  <Line number="3589">** more tolerant of invalid F parameters than newer versions.</Line>
  <Line number="3590">**</Line>
  <Line number="3591">** If F is a suitable filename (as described in the previous paragraph)</Line>
  <Line number="3592">** and if P is the name of the query parameter, then</Line>
  <Line number="3593">** sqlite3_uri_parameter(F,P) returns the value of the P</Line>
  <Line number="3594">** parameter if it exists or a NULL pointer if P does not appear as a</Line>
  <Line number="3595">** query parameter on F.  If P is a query parameter of F and it</Line>
  <Line number="3596">** has no explicit value, then sqlite3_uri_parameter(F,P) returns</Line>
  <Line number="3597">** a pointer to an empty string.</Line>
  <Line number="3598">**</Line>
  <Line number="3599">** The sqlite3_uri_boolean(F,P,B) routine assumes that P is a boolean</Line>
  <Line number="3600">** parameter and returns true (1) or false (0) according to the value</Line>
  <Line number="3601">** of P.  The sqlite3_uri_boolean(F,P,B) routine returns true (1) if the</Line>
  <Line number="3602">** value of query parameter P is one of &quot;yes&quot;, &quot;true&quot;, or &quot;on&quot; in any</Line>
  <Line number="3603">** case or if the value begins with a non-zero number.  The</Line>
  <Line number="3604">** sqlite3_uri_boolean(F,P,B) routines returns false (0) if the value of</Line>
  <Line number="3605">** query parameter P is one of &quot;no&quot;, &quot;false&quot;, or &quot;off&quot; in any case or</Line>
  <Line number="3606">** if the value begins with a numeric zero.  If P is not a query</Line>
  <Line number="3607">** parameter on F or if the value of P does not match any of the</Line>
  <Line number="3608">** above, then sqlite3_uri_boolean(F,P,B) returns (B!=0).</Line>
  <Line number="3609">**</Line>
  <Line number="3610">** The sqlite3_uri_int64(F,P,D) routine converts the value of P into a</Line>
  <Line number="3611">** 64-bit signed integer and returns that integer, or D if P does not</Line>
  <Line number="3612">** exist.  If the value of P is something other than an integer, then</Line>
  <Line number="3613">** zero is returned.</Line>
  <Line number="3614">**</Line>
  <Line number="3615">** The sqlite3_uri_key(F,N) returns a pointer to the name (not</Line>
  <Line number="3616">** the value) of the N-th query parameter for filename F, or a NULL</Line>
  <Line number="3617">** pointer if N is less than zero or greater than the number of query</Line>
  <Line number="3618">** parameters minus 1.  The N value is zero-based so N should be 0 to obtain</Line>
  <Line number="3619">** the name of the first query parameter, 1 for the second parameter, and</Line>
  <Line number="3620">** so forth.</Line>
  <Line number="3621">**</Line>
  <Line number="3622">** If F is a NULL pointer, then sqlite3_uri_parameter(F,P) returns NULL and</Line>
  <Line number="3623">** sqlite3_uri_boolean(F,P,B) returns B.  If F is not a NULL pointer and</Line>
  <Line number="3624">** is not a database file pathname pointer that the SQLite core passed</Line>
  <Line number="3625">** into the xOpen VFS method, then the behavior of this routine is undefined</Line>
  <Line number="3626">** and probably undesirable.</Line>
  <Line number="3627">**</Line>
  <Line number="3628">** Beginning with SQLite [version 3.31.0] ([dateof:3.31.0]) the input F</Line>
  <Line number="3629">** parameter can also be the name of a rollback journal file or WAL file</Line>
  <Line number="3630">** in addition to the main database file.  Prior to version 3.31.0, these</Line>
  <Line number="3631">** routines would only work if F was the name of the main database file.</Line>
  <Line number="3632">** When the F parameter is the name of the rollback journal or WAL file,</Line>
  <Line number="3633">** it has access to all the same query parameters as were found on the</Line>
  <Line number="3634">** main database file.</Line>
  <Line number="3635">**</Line>
  <Line number="3636">** See the [URI filename] documentation for additional information.</Line>
  <Line number="3637">*/</Line>
  <Line number="3638">SQLITE_API const char *sqlite3_uri_parameter(const char *zFilename, const char *zParam);</Line>
  <Line number="3639">SQLITE_API int sqlite3_uri_boolean(const char *zFile, const char *zParam, int bDefault);</Line>
  <Line number="3640">SQLITE_API sqlite3_int64 sqlite3_uri_int64(const char*, const char*, sqlite3_int64);</Line>
  <Line number="3641">SQLITE_API const char *sqlite3_uri_key(const char *zFilename, int N);</Line>
  <Line number="3642"></Line>
  <Line number="3643">/*</Line>
  <Line number="3644">** CAPI3REF:  Translate filenames</Line>
  <Line number="3645">**</Line>
  <Line number="3646">** These routines are available to [VFS|custom VFS implementations] for</Line>
  <Line number="3647">** translating filenames between the main database file, the journal file,</Line>
  <Line number="3648">** and the WAL file.</Line>
  <Line number="3649">**</Line>
  <Line number="3650">** If F is the name of an sqlite database file, journal file, or WAL file</Line>
  <Line number="3651">** passed by the SQLite core into the VFS, then sqlite3_filename_database(F)</Line>
  <Line number="3652">** returns the name of the corresponding database file.</Line>
  <Line number="3653">**</Line>
  <Line number="3654">** If F is the name of an sqlite database file, journal file, or WAL file</Line>
  <Line number="3655">** passed by the SQLite core into the VFS, or if F is a database filename</Line>
  <Line number="3656">** obtained from [sqlite3_db_filename()], then sqlite3_filename_journal(F)</Line>
  <Line number="3657">** returns the name of the corresponding rollback journal file.</Line>
  <Line number="3658">**</Line>
  <Line number="3659">** If F is the name of an sqlite database file, journal file, or WAL file</Line>
  <Line number="3660">** that was passed by the SQLite core into the VFS, or if F is a database</Line>
  <Line number="3661">** filename obtained from [sqlite3_db_filename()], then</Line>
  <Line number="3662">** sqlite3_filename_wal(F) returns the name of the corresponding</Line>
  <Line number="3663">** WAL file.</Line>
  <Line number="3664">**</Line>
  <Line number="3665">** In all of the above, if F is not the name of a database, journal or WAL</Line>
  <Line number="3666">** filename passed into the VFS from the SQLite core and F is not the</Line>
  <Line number="3667">** return value from [sqlite3_db_filename()], then the result is</Line>
  <Line number="3668">** undefined and is likely a memory access violation.</Line>
  <Line number="3669">*/</Line>
  <Line number="3670">SQLITE_API const char *sqlite3_filename_database(const char*);</Line>
  <Line number="3671">SQLITE_API const char *sqlite3_filename_journal(const char*);</Line>
  <Line number="3672">SQLITE_API const char *sqlite3_filename_wal(const char*);</Line>
  <Line number="3673"></Line>
  <Line number="3674">/*</Line>
  <Line number="3675">** CAPI3REF:  Database File Corresponding To A Journal</Line>
  <Line number="3676">**</Line>
  <Line number="3677">** ^If X is the name of a rollback or WAL-mode journal file that is</Line>
  <Line number="3678">** passed into the xOpen method of [sqlite3_vfs], then</Line>
  <Line number="3679">** sqlite3_database_file_object(X) returns a pointer to the [sqlite3_file]</Line>
  <Line number="3680">** object that represents the main database file.</Line>
  <Line number="3681">**</Line>
  <Line number="3682">** This routine is intended for use in custom [VFS] implementations</Line>
  <Line number="3683">** only.  It is not a general-purpose interface.</Line>
  <Line number="3684">** The argument sqlite3_file_object(X) must be a filename pointer that</Line>
  <Line number="3685">** has been passed into [sqlite3_vfs].xOpen method where the</Line>
  <Line number="3686">** flags parameter to xOpen contains one of the bits</Line>
  <Line number="3687">** [SQLITE_OPEN_MAIN_JOURNAL] or [SQLITE_OPEN_WAL].  Any other use</Line>
  <Line number="3688">** of this routine results in undefined and probably undesirable</Line>
  <Line number="3689">** behavior.</Line>
  <Line number="3690">*/</Line>
  <Line number="3691">SQLITE_API sqlite3_file *sqlite3_database_file_object(const char*);</Line>
  <Line number="3692"></Line>
  <Line number="3693">/*</Line>
  <Line number="3694">** CAPI3REF: Create and Destroy VFS Filenames</Line>
  <Line number="3695">**</Line>
  <Line number="3696">** These interfces are provided for use by [VFS shim] implementations and</Line>
  <Line number="3697">** are not useful outside of that context.</Line>
  <Line number="3698">**</Line>
  <Line number="3699">** The sqlite3_create_filename(D,J,W,N,P) allocates memory to hold a version of</Line>
  <Line number="3700">** database filename D with corresponding journal file J and WAL file W and</Line>
  <Line number="3701">** with N URI parameters key/values pairs in the array P.  The result from</Line>
  <Line number="3702">** sqlite3_create_filename(D,J,W,N,P) is a pointer to a database filename that</Line>
  <Line number="3703">** is safe to pass to routines like:</Line>
  <Line number="3704">** &lt;ul&gt;</Line>
  <Line number="3705">** &lt;li&gt; [sqlite3_uri_parameter()],</Line>
  <Line number="3706">** &lt;li&gt; [sqlite3_uri_boolean()],</Line>
  <Line number="3707">** &lt;li&gt; [sqlite3_uri_int64()],</Line>
  <Line number="3708">** &lt;li&gt; [sqlite3_uri_key()],</Line>
  <Line number="3709">** &lt;li&gt; [sqlite3_filename_database()],</Line>
  <Line number="3710">** &lt;li&gt; [sqlite3_filename_journal()], or</Line>
  <Line number="3711">** &lt;li&gt; [sqlite3_filename_wal()].</Line>
  <Line number="3712">** &lt;/ul&gt;</Line>
  <Line number="3713">** If a memory allocation error occurs, sqlite3_create_filename() might</Line>
  <Line number="3714">** return a NULL pointer.  The memory obtained from sqlite3_create_filename(X)</Line>
  <Line number="3715">** must be released by a corresponding call to sqlite3_free_filename(Y).</Line>
  <Line number="3716">**</Line>
  <Line number="3717">** The P parameter in sqlite3_create_filename(D,J,W,N,P) should be an array</Line>
  <Line number="3718">** of 2*N pointers to strings.  Each pair of pointers in this array corresponds</Line>
  <Line number="3719">** to a key and value for a query parameter.  The P parameter may be a NULL</Line>
  <Line number="3720">** pointer if N is zero.  None of the 2*N pointers in the P array may be</Line>
  <Line number="3721">** NULL pointers and key pointers should not be empty strings.</Line>
  <Line number="3722">** None of the D, J, or W parameters to sqlite3_create_filename(D,J,W,N,P) may</Line>
  <Line number="3723">** be NULL pointers, though they can be empty strings.</Line>
  <Line number="3724">**</Line>
  <Line number="3725">** The sqlite3_free_filename(Y) routine releases a memory allocation</Line>
  <Line number="3726">** previously obtained from sqlite3_create_filename().  Invoking</Line>
  <Line number="3727">** sqlite3_free_filename(Y) where Y is a NULL pointer is a harmless no-op.</Line>
  <Line number="3728">**</Line>
  <Line number="3729">** If the Y parameter to sqlite3_free_filename(Y) is anything other</Line>
  <Line number="3730">** than a NULL pointer or a pointer previously acquired from</Line>
  <Line number="3731">** sqlite3_create_filename(), then bad things such as heap</Line>
  <Line number="3732">** corruption or segfaults may occur. The value Y should not be</Line>
  <Line number="3733">** used again after sqlite3_free_filename(Y) has been called.  This means</Line>
  <Line number="3734">** that if the [sqlite3_vfs.xOpen()] method of a VFS has been called using Y,</Line>
  <Line number="3735">** then the corresponding [sqlite3_module.xClose() method should also be</Line>
  <Line number="3736">** invoked prior to calling sqlite3_free_filename(Y).</Line>
  <Line number="3737">*/</Line>
  <Line number="3738">SQLITE_API char *sqlite3_create_filename(</Line>
  <Line number="3739">  const char *zDatabase,</Line>
  <Line number="3740">  const char *zJournal,</Line>
  <Line number="3741">  const char *zWal,</Line>
  <Line number="3742">  int nParam,</Line>
  <Line number="3743">  const char **azParam</Line>
  <Line number="3744">);</Line>
  <Line number="3745">SQLITE_API void sqlite3_free_filename(char*);</Line>
  <Line number="3746"></Line>
  <Line number="3747">/*</Line>
  <Line number="3748">** CAPI3REF: Error Codes And Messages</Line>
  <Line number="3749">** METHOD: sqlite3</Line>
  <Line number="3750">**</Line>
  <Line number="3751">** ^If the most recent sqlite3_* API call associated with</Line>
  <Line number="3752">** [database connection] D failed, then the sqlite3_errcode(D) interface</Line>
  <Line number="3753">** returns the numeric [result code] or [extended result code] for that</Line>
  <Line number="3754">** API call.</Line>
  <Line number="3755">** ^The sqlite3_extended_errcode()</Line>
  <Line number="3756">** interface is the same except that it always returns the</Line>
  <Line number="3757">** [extended result code] even when extended result codes are</Line>
  <Line number="3758">** disabled.</Line>
  <Line number="3759">**</Line>
  <Line number="3760">** The values returned by sqlite3_errcode() and/or</Line>
  <Line number="3761">** sqlite3_extended_errcode() might change with each API call.</Line>
  <Line number="3762">** Except, there are some interfaces that are guaranteed to never</Line>
  <Line number="3763">** change the value of the error code.  The error-code preserving</Line>
  <Line number="3764">** interfaces are:</Line>
  <Line number="3765">**</Line>
  <Line number="3766">** &lt;ul&gt;</Line>
  <Line number="3767">** &lt;li&gt; sqlite3_errcode()</Line>
  <Line number="3768">** &lt;li&gt; sqlite3_extended_errcode()</Line>
  <Line number="3769">** &lt;li&gt; sqlite3_errmsg()</Line>
  <Line number="3770">** &lt;li&gt; sqlite3_errmsg16()</Line>
  <Line number="3771">** &lt;/ul&gt;</Line>
  <Line number="3772">**</Line>
  <Line number="3773">** ^The sqlite3_errmsg() and sqlite3_errmsg16() return English-language</Line>
  <Line number="3774">** text that describes the error, as either UTF-8 or UTF-16 respectively.</Line>
  <Line number="3775">** ^(Memory to hold the error message string is managed internally.</Line>
  <Line number="3776">** The application does not need to worry about freeing the result.</Line>
  <Line number="3777">** However, the error string might be overwritten or deallocated by</Line>
  <Line number="3778">** subsequent calls to other SQLite interface functions.)^</Line>
  <Line number="3779">**</Line>
  <Line number="3780">** ^The sqlite3_errstr() interface returns the English-language text</Line>
  <Line number="3781">** that describes the [result code], as UTF-8.</Line>
  <Line number="3782">** ^(Memory to hold the error message string is managed internally</Line>
  <Line number="3783">** and must not be freed by the application)^.</Line>
  <Line number="3784">**</Line>
  <Line number="3785">** When the serialized [threading mode] is in use, it might be the</Line>
  <Line number="3786">** case that a second error occurs on a separate thread in between</Line>
  <Line number="3787">** the time of the first error and the call to these interfaces.</Line>
  <Line number="3788">** When that happens, the second error will be reported since these</Line>
  <Line number="3789">** interfaces always report the most recent result.  To avoid</Line>
  <Line number="3790">** this, each thread can obtain exclusive use of the [database connection] D</Line>
  <Line number="3791">** by invoking [sqlite3_mutex_enter]([sqlite3_db_mutex](D)) before beginning</Line>
  <Line number="3792">** to use D and invoking [sqlite3_mutex_leave]([sqlite3_db_mutex](D)) after</Line>
  <Line number="3793">** all calls to the interfaces listed here are completed.</Line>
  <Line number="3794">**</Line>
  <Line number="3795">** If an interface fails with SQLITE_MISUSE, that means the interface</Line>
  <Line number="3796">** was invoked incorrectly by the application.  In that case, the</Line>
  <Line number="3797">** error code and message may or may not be set.</Line>
  <Line number="3798">*/</Line>
  <Line number="3799">SQLITE_API int sqlite3_errcode(sqlite3 *db);</Line>
  <Line number="3800">SQLITE_API int sqlite3_extended_errcode(sqlite3 *db);</Line>
  <Line number="3801">SQLITE_API const char *sqlite3_errmsg(sqlite3*);</Line>
  <Line number="3802">SQLITE_API const void *sqlite3_errmsg16(sqlite3*);</Line>
  <Line number="3803">SQLITE_API const char *sqlite3_errstr(int);</Line>
  <Line number="3804"></Line>
  <Line number="3805">/*</Line>
  <Line number="3806">** CAPI3REF: Prepared Statement Object</Line>
  <Line number="3807">** KEYWORDS: {prepared statement} {prepared statements}</Line>
  <Line number="3808">**</Line>
  <Line number="3809">** An instance of this object represents a single SQL statement that</Line>
  <Line number="3810">** has been compiled into binary form and is ready to be evaluated.</Line>
  <Line number="3811">**</Line>
  <Line number="3812">** Think of each SQL statement as a separate computer program.  The</Line>
  <Line number="3813">** original SQL text is source code.  A prepared statement object</Line>
  <Line number="3814">** is the compiled object code.  All SQL must be converted into a</Line>
  <Line number="3815">** prepared statement before it can be run.</Line>
  <Line number="3816">**</Line>
  <Line number="3817">** The life-cycle of a prepared statement object usually goes like this:</Line>
  <Line number="3818">**</Line>
  <Line number="3819">** &lt;ol&gt;</Line>
  <Line number="3820">** &lt;li&gt; Create the prepared statement object using [sqlite3_prepare_v2()].</Line>
  <Line number="3821">** &lt;li&gt; Bind values to [parameters] using the sqlite3_bind_*()</Line>
  <Line number="3822">**      interfaces.</Line>
  <Line number="3823">** &lt;li&gt; Run the SQL by calling [sqlite3_step()] one or more times.</Line>
  <Line number="3824">** &lt;li&gt; Reset the prepared statement using [sqlite3_reset()] then go back</Line>
  <Line number="3825">**      to step 2.  Do this zero or more times.</Line>
  <Line number="3826">** &lt;li&gt; Destroy the object using [sqlite3_finalize()].</Line>
  <Line number="3827">** &lt;/ol&gt;</Line>
  <Line number="3828">*/</Line>
  <Line number="3829">typedef struct sqlite3_stmt sqlite3_stmt;</Line>
  <Line number="3830"></Line>
  <Line number="3831">/*</Line>
  <Line number="3832">** CAPI3REF: Run-time Limits</Line>
  <Line number="3833">** METHOD: sqlite3</Line>
  <Line number="3834">**</Line>
  <Line number="3835">** ^(This interface allows the size of various constructs to be limited</Line>
  <Line number="3836">** on a connection by connection basis.  The first parameter is the</Line>
  <Line number="3837">** [database connection] whose limit is to be set or queried.  The</Line>
  <Line number="3838">** second parameter is one of the [limit categories] that define a</Line>
  <Line number="3839">** class of constructs to be size limited.  The third parameter is the</Line>
  <Line number="3840">** new limit for that construct.)^</Line>
  <Line number="3841">**</Line>
  <Line number="3842">** ^If the new limit is a negative number, the limit is unchanged.</Line>
  <Line number="3843">** ^(For each limit category SQLITE_LIMIT_&lt;i&gt;NAME&lt;/i&gt; there is a</Line>
  <Line number="3844">** [limits | hard upper bound]</Line>
  <Line number="3845">** set at compile-time by a C preprocessor macro called</Line>
  <Line number="3846">** [limits | SQLITE_MAX_&lt;i&gt;NAME&lt;/i&gt;].</Line>
  <Line number="3847">** (The &quot;_LIMIT_&quot; in the name is changed to &quot;_MAX_&quot;.))^</Line>
  <Line number="3848">** ^Attempts to increase a limit above its hard upper bound are</Line>
  <Line number="3849">** silently truncated to the hard upper bound.</Line>
  <Line number="3850">**</Line>
  <Line number="3851">** ^Regardless of whether or not the limit was changed, the</Line>
  <Line number="3852">** [sqlite3_limit()] interface returns the prior value of the limit.</Line>
  <Line number="3853">** ^Hence, to find the current value of a limit without changing it,</Line>
  <Line number="3854">** simply invoke this interface with the third parameter set to -1.</Line>
  <Line number="3855">**</Line>
  <Line number="3856">** Run-time limits are intended for use in applications that manage</Line>
  <Line number="3857">** both their own internal database and also databases that are controlled</Line>
  <Line number="3858">** by untrusted external sources.  An example application might be a</Line>
  <Line number="3859">** web browser that has its own databases for storing history and</Line>
  <Line number="3860">** separate databases controlled by JavaScript applications downloaded</Line>
  <Line number="3861">** off the Internet.  The internal databases can be given the</Line>
  <Line number="3862">** large, default limits.  Databases managed by external sources can</Line>
  <Line number="3863">** be given much smaller limits designed to prevent a denial of service</Line>
  <Line number="3864">** attack.  Developers might also want to use the [sqlite3_set_authorizer()]</Line>
  <Line number="3865">** interface to further control untrusted SQL.  The size of the database</Line>
  <Line number="3866">** created by an untrusted script can be contained using the</Line>
  <Line number="3867">** [max_page_count] [PRAGMA].</Line>
  <Line number="3868">**</Line>
  <Line number="3869">** New run-time limit categories may be added in future releases.</Line>
  <Line number="3870">*/</Line>
  <Line number="3871">SQLITE_API int sqlite3_limit(sqlite3*, int id, int newVal);</Line>
  <Line number="3872"></Line>
  <Line number="3873">/*</Line>
  <Line number="3874">** CAPI3REF: Run-Time Limit Categories</Line>
  <Line number="3875">** KEYWORDS: {limit category} {*limit categories}</Line>
  <Line number="3876">**</Line>
  <Line number="3877">** These constants define various performance limits</Line>
  <Line number="3878">** that can be lowered at run-time using [sqlite3_limit()].</Line>
  <Line number="3879">** The synopsis of the meanings of the various limits is shown below.</Line>
  <Line number="3880">** Additional information is available at [limits | Limits in SQLite].</Line>
  <Line number="3881">**</Line>
  <Line number="3882">** &lt;dl&gt;</Line>
  <Line number="3883">** [[SQLITE_LIMIT_LENGTH]] ^(&lt;dt&gt;SQLITE_LIMIT_LENGTH&lt;/dt&gt;</Line>
  <Line number="3884">** &lt;dd&gt;The maximum size of any string or BLOB or table row, in bytes.&lt;dd&gt;)^</Line>
  <Line number="3885">**</Line>
  <Line number="3886">** [[SQLITE_LIMIT_SQL_LENGTH]] ^(&lt;dt&gt;SQLITE_LIMIT_SQL_LENGTH&lt;/dt&gt;</Line>
  <Line number="3887">** &lt;dd&gt;The maximum length of an SQL statement, in bytes.&lt;/dd&gt;)^</Line>
  <Line number="3888">**</Line>
  <Line number="3889">** [[SQLITE_LIMIT_COLUMN]] ^(&lt;dt&gt;SQLITE_LIMIT_COLUMN&lt;/dt&gt;</Line>
  <Line number="3890">** &lt;dd&gt;The maximum number of columns in a table definition or in the</Line>
  <Line number="3891">** result set of a [SELECT] or the maximum number of columns in an index</Line>
  <Line number="3892">** or in an ORDER BY or GROUP BY clause.&lt;/dd&gt;)^</Line>
  <Line number="3893">**</Line>
  <Line number="3894">** [[SQLITE_LIMIT_EXPR_DEPTH]] ^(&lt;dt&gt;SQLITE_LIMIT_EXPR_DEPTH&lt;/dt&gt;</Line>
  <Line number="3895">** &lt;dd&gt;The maximum depth of the parse tree on any expression.&lt;/dd&gt;)^</Line>
  <Line number="3896">**</Line>
  <Line number="3897">** [[SQLITE_LIMIT_COMPOUND_SELECT]] ^(&lt;dt&gt;SQLITE_LIMIT_COMPOUND_SELECT&lt;/dt&gt;</Line>
  <Line number="3898">** &lt;dd&gt;The maximum number of terms in a compound SELECT statement.&lt;/dd&gt;)^</Line>
  <Line number="3899">**</Line>
  <Line number="3900">** [[SQLITE_LIMIT_VDBE_OP]] ^(&lt;dt&gt;SQLITE_LIMIT_VDBE_OP&lt;/dt&gt;</Line>
  <Line number="3901">** &lt;dd&gt;The maximum number of instructions in a virtual machine program</Line>
  <Line number="3902">** used to implement an SQL statement.  If [sqlite3_prepare_v2()] or</Line>
  <Line number="3903">** the equivalent tries to allocate space for more than this many opcodes</Line>
  <Line number="3904">** in a single prepared statement, an SQLITE_NOMEM error is returned.&lt;/dd&gt;)^</Line>
  <Line number="3905">**</Line>
  <Line number="3906">** [[SQLITE_LIMIT_FUNCTION_ARG]] ^(&lt;dt&gt;SQLITE_LIMIT_FUNCTION_ARG&lt;/dt&gt;</Line>
  <Line number="3907">** &lt;dd&gt;The maximum number of arguments on a function.&lt;/dd&gt;)^</Line>
  <Line number="3908">**</Line>
  <Line number="3909">** [[SQLITE_LIMIT_ATTACHED]] ^(&lt;dt&gt;SQLITE_LIMIT_ATTACHED&lt;/dt&gt;</Line>
  <Line number="3910">** &lt;dd&gt;The maximum number of [ATTACH | attached databases].)^&lt;/dd&gt;</Line>
  <Line number="3911">**</Line>
  <Line number="3912">** [[SQLITE_LIMIT_LIKE_PATTERN_LENGTH]]</Line>
  <Line number="3913">** ^(&lt;dt&gt;SQLITE_LIMIT_LIKE_PATTERN_LENGTH&lt;/dt&gt;</Line>
  <Line number="3914">** &lt;dd&gt;The maximum length of the pattern argument to the [LIKE] or</Line>
  <Line number="3915">** [GLOB] operators.&lt;/dd&gt;)^</Line>
  <Line number="3916">**</Line>
  <Line number="3917">** [[SQLITE_LIMIT_VARIABLE_NUMBER]]</Line>
  <Line number="3918">** ^(&lt;dt&gt;SQLITE_LIMIT_VARIABLE_NUMBER&lt;/dt&gt;</Line>
  <Line number="3919">** &lt;dd&gt;The maximum index number of any [parameter] in an SQL statement.)^</Line>
  <Line number="3920">**</Line>
  <Line number="3921">** [[SQLITE_LIMIT_TRIGGER_DEPTH]] ^(&lt;dt&gt;SQLITE_LIMIT_TRIGGER_DEPTH&lt;/dt&gt;</Line>
  <Line number="3922">** &lt;dd&gt;The maximum depth of recursion for triggers.&lt;/dd&gt;)^</Line>
  <Line number="3923">**</Line>
  <Line number="3924">** [[SQLITE_LIMIT_WORKER_THREADS]] ^(&lt;dt&gt;SQLITE_LIMIT_WORKER_THREADS&lt;/dt&gt;</Line>
  <Line number="3925">** &lt;dd&gt;The maximum number of auxiliary worker threads that a single</Line>
  <Line number="3926">** [prepared statement] may start.&lt;/dd&gt;)^</Line>
  <Line number="3927">** &lt;/dl&gt;</Line>
  <Line number="3928">*/</Line>
  <Line number="3929">#define SQLITE_LIMIT_LENGTH                    0</Line>
  <Line number="3930">#define SQLITE_LIMIT_SQL_LENGTH                1</Line>
  <Line number="3931">#define SQLITE_LIMIT_COLUMN                    2</Line>
  <Line number="3932">#define SQLITE_LIMIT_EXPR_DEPTH                3</Line>
  <Line number="3933">#define SQLITE_LIMIT_COMPOUND_SELECT           4</Line>
  <Line number="3934">#define SQLITE_LIMIT_VDBE_OP                   5</Line>
  <Line number="3935">#define SQLITE_LIMIT_FUNCTION_ARG              6</Line>
  <Line number="3936">#define SQLITE_LIMIT_ATTACHED                  7</Line>
  <Line number="3937">#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH       8</Line>
  <Line number="3938">#define SQLITE_LIMIT_VARIABLE_NUMBER           9</Line>
  <Line number="3939">#define SQLITE_LIMIT_TRIGGER_DEPTH            10</Line>
  <Line number="3940">#define SQLITE_LIMIT_WORKER_THREADS           11</Line>
  <Line number="3941"></Line>
  <Line number="3942">/*</Line>
  <Line number="3943">** CAPI3REF: Prepare Flags</Line>
  <Line number="3944">**</Line>
  <Line number="3945">** These constants define various flags that can be passed into</Line>
  <Line number="3946">** &quot;prepFlags&quot; parameter of the [sqlite3_prepare_v3()] and</Line>
  <Line number="3947">** [sqlite3_prepare16_v3()] interfaces.</Line>
  <Line number="3948">**</Line>
  <Line number="3949">** New flags may be added in future releases of SQLite.</Line>
  <Line number="3950">**</Line>
  <Line number="3951">** &lt;dl&gt;</Line>
  <Line number="3952">** [[SQLITE_PREPARE_PERSISTENT]] ^(&lt;dt&gt;SQLITE_PREPARE_PERSISTENT&lt;/dt&gt;</Line>
  <Line number="3953">** &lt;dd&gt;The SQLITE_PREPARE_PERSISTENT flag is a hint to the query planner</Line>
  <Line number="3954">** that the prepared statement will be retained for a long time and</Line>
  <Line number="3955">** probably reused many times.)^ ^Without this flag, [sqlite3_prepare_v3()]</Line>
  <Line number="3956">** and [sqlite3_prepare16_v3()] assume that the prepared statement will</Line>
  <Line number="3957">** be used just once or at most a few times and then destroyed using</Line>
  <Line number="3958">** [sqlite3_finalize()] relatively soon. The current implementation acts</Line>
  <Line number="3959">** on this hint by avoiding the use of [lookaside memory] so as not to</Line>
  <Line number="3960">** deplete the limited store of lookaside memory. Future versions of</Line>
  <Line number="3961">** SQLite may act on this hint differently.</Line>
  <Line number="3962">**</Line>
  <Line number="3963">** [[SQLITE_PREPARE_NORMALIZE]] &lt;dt&gt;SQLITE_PREPARE_NORMALIZE&lt;/dt&gt;</Line>
  <Line number="3964">** &lt;dd&gt;The SQLITE_PREPARE_NORMALIZE flag is a no-op. This flag used</Line>
  <Line number="3965">** to be required for any prepared statement that wanted to use the</Line>
  <Line number="3966">** [sqlite3_normalized_sql()] interface.  However, the</Line>
  <Line number="3967">** [sqlite3_normalized_sql()] interface is now available to all</Line>
  <Line number="3968">** prepared statements, regardless of whether or not they use this</Line>
  <Line number="3969">** flag.</Line>
  <Line number="3970">**</Line>
  <Line number="3971">** [[SQLITE_PREPARE_NO_VTAB]] &lt;dt&gt;SQLITE_PREPARE_NO_VTAB&lt;/dt&gt;</Line>
  <Line number="3972">** &lt;dd&gt;The SQLITE_PREPARE_NO_VTAB flag causes the SQL compiler</Line>
  <Line number="3973">** to return an error (error code SQLITE_ERROR) if the statement uses</Line>
  <Line number="3974">** any virtual tables.</Line>
  <Line number="3975">** &lt;/dl&gt;</Line>
  <Line number="3976">*/</Line>
  <Line number="3977">#define SQLITE_PREPARE_PERSISTENT              0x01</Line>
  <Line number="3978">#define SQLITE_PREPARE_NORMALIZE               0x02</Line>
  <Line number="3979">#define SQLITE_PREPARE_NO_VTAB                 0x04</Line>
  <Line number="3980"></Line>
  <Line number="3981">/*</Line>
  <Line number="3982">** CAPI3REF: Compiling An SQL Statement</Line>
  <Line number="3983">** KEYWORDS: {SQL statement compiler}</Line>
  <Line number="3984">** METHOD: sqlite3</Line>
  <Line number="3985">** CONSTRUCTOR: sqlite3_stmt</Line>
  <Line number="3986">**</Line>
  <Line number="3987">** To execute an SQL statement, it must first be compiled into a byte-code</Line>
  <Line number="3988">** program using one of these routines.  Or, in other words, these routines</Line>
  <Line number="3989">** are constructors for the [prepared statement] object.</Line>
  <Line number="3990">**</Line>
  <Line number="3991">** The preferred routine to use is [sqlite3_prepare_v2()].  The</Line>
  <Line number="3992">** [sqlite3_prepare()] interface is legacy and should be avoided.</Line>
  <Line number="3993">** [sqlite3_prepare_v3()] has an extra &quot;prepFlags&quot; option that is used</Line>
  <Line number="3994">** for special purposes.</Line>
  <Line number="3995">**</Line>
  <Line number="3996">** The use of the UTF-8 interfaces is preferred, as SQLite currently</Line>
  <Line number="3997">** does all parsing using UTF-8.  The UTF-16 interfaces are provided</Line>
  <Line number="3998">** as a convenience.  The UTF-16 interfaces work by converting the</Line>
  <Line number="3999">** input text into UTF-8, then invoking the corresponding UTF-8 interface.</Line>
  <Line number="4000">**</Line>
  <Line number="4001">** The first argument, &quot;db&quot;, is a [database connection] obtained from a</Line>
  <Line number="4002">** prior successful call to [sqlite3_open()], [sqlite3_open_v2()] or</Line>
  <Line number="4003">** [sqlite3_open16()].  The database connection must not have been closed.</Line>
  <Line number="4004">**</Line>
  <Line number="4005">** The second argument, &quot;zSql&quot;, is the statement to be compiled, encoded</Line>
  <Line number="4006">** as either UTF-8 or UTF-16.  The sqlite3_prepare(), sqlite3_prepare_v2(),</Line>
  <Line number="4007">** and sqlite3_prepare_v3()</Line>
  <Line number="4008">** interfaces use UTF-8, and sqlite3_prepare16(), sqlite3_prepare16_v2(),</Line>
  <Line number="4009">** and sqlite3_prepare16_v3() use UTF-16.</Line>
  <Line number="4010">**</Line>
  <Line number="4011">** ^If the nByte argument is negative, then zSql is read up to the</Line>
  <Line number="4012">** first zero terminator. ^If nByte is positive, then it is the</Line>
  <Line number="4013">** number of bytes read from zSql.  ^If nByte is zero, then no prepared</Line>
  <Line number="4014">** statement is generated.</Line>
  <Line number="4015">** If the caller knows that the supplied string is nul-terminated, then</Line>
  <Line number="4016">** there is a small performance advantage to passing an nByte parameter that</Line>
  <Line number="4017">** is the number of bytes in the input string &lt;i&gt;including&lt;/i&gt;</Line>
  <Line number="4018">** the nul-terminator.</Line>
  <Line number="4019">**</Line>
  <Line number="4020">** ^If pzTail is not NULL then *pzTail is made to point to the first byte</Line>
  <Line number="4021">** past the end of the first SQL statement in zSql.  These routines only</Line>
  <Line number="4022">** compile the first statement in zSql, so *pzTail is left pointing to</Line>
  <Line number="4023">** what remains uncompiled.</Line>
  <Line number="4024">**</Line>
  <Line number="4025">** ^*ppStmt is left pointing to a compiled [prepared statement] that can be</Line>
  <Line number="4026">** executed using [sqlite3_step()].  ^If there is an error, *ppStmt is set</Line>
  <Line number="4027">** to NULL.  ^If the input text contains no SQL (if the input is an empty</Line>
  <Line number="4028">** string or a comment) then *ppStmt is set to NULL.</Line>
  <Line number="4029">** The calling procedure is responsible for deleting the compiled</Line>
  <Line number="4030">** SQL statement using [sqlite3_finalize()] after it has finished with it.</Line>
  <Line number="4031">** ppStmt may not be NULL.</Line>
  <Line number="4032">**</Line>
  <Line number="4033">** ^On success, the sqlite3_prepare() family of routines return [SQLITE_OK];</Line>
  <Line number="4034">** otherwise an [error code] is returned.</Line>
  <Line number="4035">**</Line>
  <Line number="4036">** The sqlite3_prepare_v2(), sqlite3_prepare_v3(), sqlite3_prepare16_v2(),</Line>
  <Line number="4037">** and sqlite3_prepare16_v3() interfaces are recommended for all new programs.</Line>
  <Line number="4038">** The older interfaces (sqlite3_prepare() and sqlite3_prepare16())</Line>
  <Line number="4039">** are retained for backwards compatibility, but their use is discouraged.</Line>
  <Line number="4040">** ^In the &quot;vX&quot; interfaces, the prepared statement</Line>
  <Line number="4041">** that is returned (the [sqlite3_stmt] object) contains a copy of the</Line>
  <Line number="4042">** original SQL text. This causes the [sqlite3_step()] interface to</Line>
  <Line number="4043">** behave differently in three ways:</Line>
  <Line number="4044">**</Line>
  <Line number="4045">** &lt;ol&gt;</Line>
  <Line number="4046">** &lt;li&gt;</Line>
  <Line number="4047">** ^If the database schema changes, instead of returning [SQLITE_SCHEMA] as it</Line>
  <Line number="4048">** always used to do, [sqlite3_step()] will automatically recompile the SQL</Line>
  <Line number="4049">** statement and try to run it again. As many as [SQLITE_MAX_SCHEMA_RETRY]</Line>
  <Line number="4050">** retries will occur before sqlite3_step() gives up and returns an error.</Line>
  <Line number="4051">** &lt;/li&gt;</Line>
  <Line number="4052">**</Line>
  <Line number="4053">** &lt;li&gt;</Line>
  <Line number="4054">** ^When an error occurs, [sqlite3_step()] will return one of the detailed</Line>
  <Line number="4055">** [error codes] or [extended error codes].  ^The legacy behavior was that</Line>
  <Line number="4056">** [sqlite3_step()] would only return a generic [SQLITE_ERROR] result code</Line>
  <Line number="4057">** and the application would have to make a second call to [sqlite3_reset()]</Line>
  <Line number="4058">** in order to find the underlying cause of the problem. With the &quot;v2&quot; prepare</Line>
  <Line number="4059">** interfaces, the underlying reason for the error is returned immediately.</Line>
  <Line number="4060">** &lt;/li&gt;</Line>
  <Line number="4061">**</Line>
  <Line number="4062">** &lt;li&gt;</Line>
  <Line number="4063">** ^If the specific value bound to a [parameter | host parameter] in the</Line>
  <Line number="4064">** WHERE clause might influence the choice of query plan for a statement,</Line>
  <Line number="4065">** then the statement will be automatically recompiled, as if there had been</Line>
  <Line number="4066">** a schema change, on the first [sqlite3_step()] call following any change</Line>
  <Line number="4067">** to the [sqlite3_bind_text | bindings] of that [parameter].</Line>
  <Line number="4068">** ^The specific value of a WHERE-clause [parameter] might influence the</Line>
  <Line number="4069">** choice of query plan if the parameter is the left-hand side of a [LIKE]</Line>
  <Line number="4070">** or [GLOB] operator or if the parameter is compared to an indexed column</Line>
  <Line number="4071">** and the [SQLITE_ENABLE_STAT4] compile-time option is enabled.</Line>
  <Line number="4072">** &lt;/li&gt;</Line>
  <Line number="4073">** &lt;/ol&gt;</Line>
  <Line number="4074">**</Line>
  <Line number="4075">** &lt;p&gt;^sqlite3_prepare_v3() differs from sqlite3_prepare_v2() only in having</Line>
  <Line number="4076">** the extra prepFlags parameter, which is a bit array consisting of zero or</Line>
  <Line number="4077">** more of the [SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_*] flags.  ^The</Line>
  <Line number="4078">** sqlite3_prepare_v2() interface works exactly the same as</Line>
  <Line number="4079">** sqlite3_prepare_v3() with a zero prepFlags parameter.</Line>
  <Line number="4080">*/</Line>
  <Line number="4081">SQLITE_API int sqlite3_prepare(</Line>
  <Line number="4082">  sqlite3 *db,            /* Database handle */</Line>
  <Line number="4083">  const char *zSql,       /* SQL statement, UTF-8 encoded */</Line>
  <Line number="4084">  int nByte,              /* Maximum length of zSql in bytes. */</Line>
  <Line number="4085">  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */</Line>
  <Line number="4086">  const char **pzTail     /* OUT: Pointer to unused portion of zSql */</Line>
  <Line number="4087">);</Line>
  <Line number="4088">SQLITE_API int sqlite3_prepare_v2(</Line>
  <Line number="4089">  sqlite3 *db,            /* Database handle */</Line>
  <Line number="4090">  const char *zSql,       /* SQL statement, UTF-8 encoded */</Line>
  <Line number="4091">  int nByte,              /* Maximum length of zSql in bytes. */</Line>
  <Line number="4092">  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */</Line>
  <Line number="4093">  const char **pzTail     /* OUT: Pointer to unused portion of zSql */</Line>
  <Line number="4094">);</Line>
  <Line number="4095">SQLITE_API int sqlite3_prepare_v3(</Line>
  <Line number="4096">  sqlite3 *db,            /* Database handle */</Line>
  <Line number="4097">  const char *zSql,       /* SQL statement, UTF-8 encoded */</Line>
  <Line number="4098">  int nByte,              /* Maximum length of zSql in bytes. */</Line>
  <Line number="4099">  unsigned int prepFlags, /* Zero or more SQLITE_PREPARE_ flags */</Line>
  <Line number="4100">  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */</Line>
  <Line number="4101">  const char **pzTail     /* OUT: Pointer to unused portion of zSql */</Line>
  <Line number="4102">);</Line>
  <Line number="4103">SQLITE_API int sqlite3_prepare16(</Line>
  <Line number="4104">  sqlite3 *db,            /* Database handle */</Line>
  <Line number="4105">  const void *zSql,       /* SQL statement, UTF-16 encoded */</Line>
  <Line number="4106">  int nByte,              /* Maximum length of zSql in bytes. */</Line>
  <Line number="4107">  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */</Line>
  <Line number="4108">  const void **pzTail     /* OUT: Pointer to unused portion of zSql */</Line>
  <Line number="4109">);</Line>
  <Line number="4110">SQLITE_API int sqlite3_prepare16_v2(</Line>
  <Line number="4111">  sqlite3 *db,            /* Database handle */</Line>
  <Line number="4112">  const void *zSql,       /* SQL statement, UTF-16 encoded */</Line>
  <Line number="4113">  int nByte,              /* Maximum length of zSql in bytes. */</Line>
  <Line number="4114">  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */</Line>
  <Line number="4115">  const void **pzTail     /* OUT: Pointer to unused portion of zSql */</Line>
  <Line number="4116">);</Line>
  <Line number="4117">SQLITE_API int sqlite3_prepare16_v3(</Line>
  <Line number="4118">  sqlite3 *db,            /* Database handle */</Line>
  <Line number="4119">  const void *zSql,       /* SQL statement, UTF-16 encoded */</Line>
  <Line number="4120">  int nByte,              /* Maximum length of zSql in bytes. */</Line>
  <Line number="4121">  unsigned int prepFlags, /* Zero or more SQLITE_PREPARE_ flags */</Line>
  <Line number="4122">  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */</Line>
  <Line number="4123">  const void **pzTail     /* OUT: Pointer to unused portion of zSql */</Line>
  <Line number="4124">);</Line>
  <Line number="4125"></Line>
  <Line number="4126">/*</Line>
  <Line number="4127">** CAPI3REF: Retrieving Statement SQL</Line>
  <Line number="4128">** METHOD: sqlite3_stmt</Line>
  <Line number="4129">**</Line>
  <Line number="4130">** ^The sqlite3_sql(P) interface returns a pointer to a copy of the UTF-8</Line>
  <Line number="4131">** SQL text used to create [prepared statement] P if P was</Line>
  <Line number="4132">** created by [sqlite3_prepare_v2()], [sqlite3_prepare_v3()],</Line>
  <Line number="4133">** [sqlite3_prepare16_v2()], or [sqlite3_prepare16_v3()].</Line>
  <Line number="4134">** ^The sqlite3_expanded_sql(P) interface returns a pointer to a UTF-8</Line>
  <Line number="4135">** string containing the SQL text of prepared statement P with</Line>
  <Line number="4136">** [bound parameters] expanded.</Line>
  <Line number="4137">** ^The sqlite3_normalized_sql(P) interface returns a pointer to a UTF-8</Line>
  <Line number="4138">** string containing the normalized SQL text of prepared statement P.  The</Line>
  <Line number="4139">** semantics used to normalize a SQL statement are unspecified and subject</Line>
  <Line number="4140">** to change.  At a minimum, literal values will be replaced with suitable</Line>
  <Line number="4141">** placeholders.</Line>
  <Line number="4142">**</Line>
  <Line number="4143">** ^(For example, if a prepared statement is created using the SQL</Line>
  <Line number="4144">** text &quot;SELECT $abc,:xyz&quot; and if parameter $abc is bound to integer 2345</Line>
  <Line number="4145">** and parameter :xyz is unbound, then sqlite3_sql() will return</Line>
  <Line number="4146">** the original string, &quot;SELECT $abc,:xyz&quot; but sqlite3_expanded_sql()</Line>
  <Line number="4147">** will return &quot;SELECT 2345,NULL&quot;.)^</Line>
  <Line number="4148">**</Line>
  <Line number="4149">** ^The sqlite3_expanded_sql() interface returns NULL if insufficient memory</Line>
  <Line number="4150">** is available to hold the result, or if the result would exceed the</Line>
  <Line number="4151">** the maximum string length determined by the [SQLITE_LIMIT_LENGTH].</Line>
  <Line number="4152">**</Line>
  <Line number="4153">** ^The [SQLITE_TRACE_SIZE_LIMIT] compile-time option limits the size of</Line>
  <Line number="4154">** bound parameter expansions.  ^The [SQLITE_OMIT_TRACE] compile-time</Line>
  <Line number="4155">** option causes sqlite3_expanded_sql() to always return NULL.</Line>
  <Line number="4156">**</Line>
  <Line number="4157">** ^The strings returned by sqlite3_sql(P) and sqlite3_normalized_sql(P)</Line>
  <Line number="4158">** are managed by SQLite and are automatically freed when the prepared</Line>
  <Line number="4159">** statement is finalized.</Line>
  <Line number="4160">** ^The string returned by sqlite3_expanded_sql(P), on the other hand,</Line>
  <Line number="4161">** is obtained from [sqlite3_malloc()] and must be free by the application</Line>
  <Line number="4162">** by passing it to [sqlite3_free()].</Line>
  <Line number="4163">*/</Line>
  <Line number="4164">SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt);</Line>
  <Line number="4165">SQLITE_API char *sqlite3_expanded_sql(sqlite3_stmt *pStmt);</Line>
  <Line number="4166">SQLITE_API const char *sqlite3_normalized_sql(sqlite3_stmt *pStmt);</Line>
  <Line number="4167"></Line>
  <Line number="4168">/*</Line>
  <Line number="4169">** CAPI3REF: Determine If An SQL Statement Writes The Database</Line>
  <Line number="4170">** METHOD: sqlite3_stmt</Line>
  <Line number="4171">**</Line>
  <Line number="4172">** ^The sqlite3_stmt_readonly(X) interface returns true (non-zero) if</Line>
  <Line number="4173">** and only if the [prepared statement] X makes no direct changes to</Line>
  <Line number="4174">** the content of the database file.</Line>
  <Line number="4175">**</Line>
  <Line number="4176">** Note that [application-defined SQL functions] or</Line>
  <Line number="4177">** [virtual tables] might change the database indirectly as a side effect.</Line>
  <Line number="4178">** ^(For example, if an application defines a function &quot;eval()&quot; that</Line>
  <Line number="4179">** calls [sqlite3_exec()], then the following SQL statement would</Line>
  <Line number="4180">** change the database file through side-effects:</Line>
  <Line number="4181">**</Line>
  <Line number="4182">** &lt;blockquote&gt;&lt;pre&gt;</Line>
  <Line number="4183">**    SELECT eval(&apos;DELETE FROM t1&apos;) FROM t2;</Line>
  <Line number="4184">** &lt;/pre&gt;&lt;/blockquote&gt;</Line>
  <Line number="4185">**</Line>
  <Line number="4186">** But because the [SELECT] statement does not change the database file</Line>
  <Line number="4187">** directly, sqlite3_stmt_readonly() would still return true.)^</Line>
  <Line number="4188">**</Line>
  <Line number="4189">** ^Transaction control statements such as [BEGIN], [COMMIT], [ROLLBACK],</Line>
  <Line number="4190">** [SAVEPOINT], and [RELEASE] cause sqlite3_stmt_readonly() to return true,</Line>
  <Line number="4191">** since the statements themselves do not actually modify the database but</Line>
  <Line number="4192">** rather they control the timing of when other statements modify the</Line>
  <Line number="4193">** database.  ^The [ATTACH] and [DETACH] statements also cause</Line>
  <Line number="4194">** sqlite3_stmt_readonly() to return true since, while those statements</Line>
  <Line number="4195">** change the configuration of a database connection, they do not make</Line>
  <Line number="4196">** changes to the content of the database files on disk.</Line>
  <Line number="4197">** ^The sqlite3_stmt_readonly() interface returns true for [BEGIN] since</Line>
  <Line number="4198">** [BEGIN] merely sets internal flags, but the [BEGIN|BEGIN IMMEDIATE] and</Line>
  <Line number="4199">** [BEGIN|BEGIN EXCLUSIVE] commands do touch the database and so</Line>
  <Line number="4200">** sqlite3_stmt_readonly() returns false for those commands.</Line>
  <Line number="4201">**</Line>
  <Line number="4202">** ^This routine returns false if there is any possibility that the</Line>
  <Line number="4203">** statement might change the database file.  ^A false return does</Line>
  <Line number="4204">** not guarantee that the statement will change the database file.</Line>
  <Line number="4205">** ^For example, an UPDATE statement might have a WHERE clause that</Line>
  <Line number="4206">** makes it a no-op, but the sqlite3_stmt_readonly() result would still</Line>
  <Line number="4207">** be false.  ^Similarly, a CREATE TABLE IF NOT EXISTS statement is a</Line>
  <Line number="4208">** read-only no-op if the table already exists, but</Line>
  <Line number="4209">** sqlite3_stmt_readonly() still returns false for such a statement.</Line>
  <Line number="4210">*/</Line>
  <Line number="4211">SQLITE_API int sqlite3_stmt_readonly(sqlite3_stmt *pStmt);</Line>
  <Line number="4212"></Line>
  <Line number="4213">/*</Line>
  <Line number="4214">** CAPI3REF: Query The EXPLAIN Setting For A Prepared Statement</Line>
  <Line number="4215">** METHOD: sqlite3_stmt</Line>
  <Line number="4216">**</Line>
  <Line number="4217">** ^The sqlite3_stmt_isexplain(S) interface returns 1 if the</Line>
  <Line number="4218">** prepared statement S is an EXPLAIN statement, or 2 if the</Line>
  <Line number="4219">** statement S is an EXPLAIN QUERY PLAN.</Line>
  <Line number="4220">** ^The sqlite3_stmt_isexplain(S) interface returns 0 if S is</Line>
  <Line number="4221">** an ordinary statement or a NULL pointer.</Line>
  <Line number="4222">*/</Line>
  <Line number="4223">SQLITE_API int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt);</Line>
  <Line number="4224"></Line>
  <Line number="4225">/*</Line>
  <Line number="4226">** CAPI3REF: Determine If A Prepared Statement Has Been Reset</Line>
  <Line number="4227">** METHOD: sqlite3_stmt</Line>
  <Line number="4228">**</Line>
  <Line number="4229">** ^The sqlite3_stmt_busy(S) interface returns true (non-zero) if the</Line>
  <Line number="4230">** [prepared statement] S has been stepped at least once using</Line>
  <Line number="4231">** [sqlite3_step(S)] but has neither run to completion (returned</Line>
  <Line number="4232">** [SQLITE_DONE] from [sqlite3_step(S)]) nor</Line>
  <Line number="4233">** been reset using [sqlite3_reset(S)].  ^The sqlite3_stmt_busy(S)</Line>
  <Line number="4234">** interface returns false if S is a NULL pointer.  If S is not a</Line>
  <Line number="4235">** NULL pointer and is not a pointer to a valid [prepared statement]</Line>
  <Line number="4236">** object, then the behavior is undefined and probably undesirable.</Line>
  <Line number="4237">**</Line>
  <Line number="4238">** This interface can be used in combination [sqlite3_next_stmt()]</Line>
  <Line number="4239">** to locate all prepared statements associated with a database</Line>
  <Line number="4240">** connection that are in need of being reset.  This can be used,</Line>
  <Line number="4241">** for example, in diagnostic routines to search for prepared</Line>
  <Line number="4242">** statements that are holding a transaction open.</Line>
  <Line number="4243">*/</Line>
  <Line number="4244">SQLITE_API int sqlite3_stmt_busy(sqlite3_stmt*);</Line>
  <Line number="4245"></Line>
  <Line number="4246">/*</Line>
  <Line number="4247">** CAPI3REF: Dynamically Typed Value Object</Line>
  <Line number="4248">** KEYWORDS: {protected sqlite3_value} {unprotected sqlite3_value}</Line>
  <Line number="4249">**</Line>
  <Line number="4250">** SQLite uses the sqlite3_value object to represent all values</Line>
  <Line number="4251">** that can be stored in a database table. SQLite uses dynamic typing</Line>
  <Line number="4252">** for the values it stores.  ^Values stored in sqlite3_value objects</Line>
  <Line number="4253">** can be integers, floating point values, strings, BLOBs, or NULL.</Line>
  <Line number="4254">**</Line>
  <Line number="4255">** An sqlite3_value object may be either &quot;protected&quot; or &quot;unprotected&quot;.</Line>
  <Line number="4256">** Some interfaces require a protected sqlite3_value.  Other interfaces</Line>
  <Line number="4257">** will accept either a protected or an unprotected sqlite3_value.</Line>
  <Line number="4258">** Every interface that accepts sqlite3_value arguments specifies</Line>
  <Line number="4259">** whether or not it requires a protected sqlite3_value.  The</Line>
  <Line number="4260">** [sqlite3_value_dup()] interface can be used to construct a new</Line>
  <Line number="4261">** protected sqlite3_value from an unprotected sqlite3_value.</Line>
  <Line number="4262">**</Line>
  <Line number="4263">** The terms &quot;protected&quot; and &quot;unprotected&quot; refer to whether or not</Line>
  <Line number="4264">** a mutex is held.  An internal mutex is held for a protected</Line>
  <Line number="4265">** sqlite3_value object but no mutex is held for an unprotected</Line>
  <Line number="4266">** sqlite3_value object.  If SQLite is compiled to be single-threaded</Line>
  <Line number="4267">** (with [SQLITE_THREADSAFE=0] and with [sqlite3_threadsafe()] returning 0)</Line>
  <Line number="4268">** or if SQLite is run in one of reduced mutex modes</Line>
  <Line number="4269">** [SQLITE_CONFIG_SINGLETHREAD] or [SQLITE_CONFIG_MULTITHREAD]</Line>
  <Line number="4270">** then there is no distinction between protected and unprotected</Line>
  <Line number="4271">** sqlite3_value objects and they can be used interchangeably.  However,</Line>
  <Line number="4272">** for maximum code portability it is recommended that applications</Line>
  <Line number="4273">** still make the distinction between protected and unprotected</Line>
  <Line number="4274">** sqlite3_value objects even when not strictly required.</Line>
  <Line number="4275">**</Line>
  <Line number="4276">** ^The sqlite3_value objects that are passed as parameters into the</Line>
  <Line number="4277">** implementation of [application-defined SQL functions] are protected.</Line>
  <Line number="4278">** ^The sqlite3_value object returned by</Line>
  <Line number="4279">** [sqlite3_column_value()] is unprotected.</Line>
  <Line number="4280">** Unprotected sqlite3_value objects may only be used as arguments</Line>
  <Line number="4281">** to [sqlite3_result_value()], [sqlite3_bind_value()], and</Line>
  <Line number="4282">** [sqlite3_value_dup()].</Line>
  <Line number="4283">** The [sqlite3_value_blob | sqlite3_value_type()] family of</Line>
  <Line number="4284">** interfaces require protected sqlite3_value objects.</Line>
  <Line number="4285">*/</Line>
  <Line number="4286">typedef struct sqlite3_value sqlite3_value;</Line>
  <Line number="4287"></Line>
  <Line number="4288">/*</Line>
  <Line number="4289">** CAPI3REF: SQL Function Context Object</Line>
  <Line number="4290">**</Line>
  <Line number="4291">** The context in which an SQL function executes is stored in an</Line>
  <Line number="4292">** sqlite3_context object.  ^A pointer to an sqlite3_context object</Line>
  <Line number="4293">** is always first parameter to [application-defined SQL functions].</Line>
  <Line number="4294">** The application-defined SQL function implementation will pass this</Line>
  <Line number="4295">** pointer through into calls to [sqlite3_result_int | sqlite3_result()],</Line>
  <Line number="4296">** [sqlite3_aggregate_context()], [sqlite3_user_data()],</Line>
  <Line number="4297">** [sqlite3_context_db_handle()], [sqlite3_get_auxdata()],</Line>
  <Line number="4298">** and/or [sqlite3_set_auxdata()].</Line>
  <Line number="4299">*/</Line>
  <Line number="4300">typedef struct sqlite3_context sqlite3_context;</Line>
  <Line number="4301"></Line>
  <Line number="4302">/*</Line>
  <Line number="4303">** CAPI3REF: Binding Values To Prepared Statements</Line>
  <Line number="4304">** KEYWORDS: {host parameter} {host parameters} {host parameter name}</Line>
  <Line number="4305">** KEYWORDS: {SQL parameter} {SQL parameters} {parameter binding}</Line>
  <Line number="4306">** METHOD: sqlite3_stmt</Line>
  <Line number="4307">**</Line>
  <Line number="4308">** ^(In the SQL statement text input to [sqlite3_prepare_v2()] and its variants,</Line>
  <Line number="4309">** literals may be replaced by a [parameter] that matches one of following</Line>
  <Line number="4310">** templates:</Line>
  <Line number="4311">**</Line>
  <Line number="4312">** &lt;ul&gt;</Line>
  <Line number="4313">** &lt;li&gt;  ?</Line>
  <Line number="4314">** &lt;li&gt;  ?NNN</Line>
  <Line number="4315">** &lt;li&gt;  :VVV</Line>
  <Line number="4316">** &lt;li&gt;  @VVV</Line>
  <Line number="4317">** &lt;li&gt;  $VVV</Line>
  <Line number="4318">** &lt;/ul&gt;</Line>
  <Line number="4319">**</Line>
  <Line number="4320">** In the templates above, NNN represents an integer literal,</Line>
  <Line number="4321">** and VVV represents an alphanumeric identifier.)^  ^The values of these</Line>
  <Line number="4322">** parameters (also called &quot;host parameter names&quot; or &quot;SQL parameters&quot;)</Line>
  <Line number="4323">** can be set using the sqlite3_bind_*() routines defined here.</Line>
  <Line number="4324">**</Line>
  <Line number="4325">** ^The first argument to the sqlite3_bind_*() routines is always</Line>
  <Line number="4326">** a pointer to the [sqlite3_stmt] object returned from</Line>
  <Line number="4327">** [sqlite3_prepare_v2()] or its variants.</Line>
  <Line number="4328">**</Line>
  <Line number="4329">** ^The second argument is the index of the SQL parameter to be set.</Line>
  <Line number="4330">** ^The leftmost SQL parameter has an index of 1.  ^When the same named</Line>
  <Line number="4331">** SQL parameter is used more than once, second and subsequent</Line>
  <Line number="4332">** occurrences have the same index as the first occurrence.</Line>
  <Line number="4333">** ^The index for named parameters can be looked up using the</Line>
  <Line number="4334">** [sqlite3_bind_parameter_index()] API if desired.  ^The index</Line>
  <Line number="4335">** for &quot;?NNN&quot; parameters is the value of NNN.</Line>
  <Line number="4336">** ^The NNN value must be between 1 and the [sqlite3_limit()]</Line>
  <Line number="4337">** parameter [SQLITE_LIMIT_VARIABLE_NUMBER] (default value: 32766).</Line>
  <Line number="4338">**</Line>
  <Line number="4339">** ^The third argument is the value to bind to the parameter.</Line>
  <Line number="4340">** ^If the third parameter to sqlite3_bind_text() or sqlite3_bind_text16()</Line>
  <Line number="4341">** or sqlite3_bind_blob() is a NULL pointer then the fourth parameter</Line>
  <Line number="4342">** is ignored and the end result is the same as sqlite3_bind_null().</Line>
  <Line number="4343">** ^If the third parameter to sqlite3_bind_text() is not NULL, then</Line>
  <Line number="4344">** it should be a pointer to well-formed UTF8 text.</Line>
  <Line number="4345">** ^If the third parameter to sqlite3_bind_text16() is not NULL, then</Line>
  <Line number="4346">** it should be a pointer to well-formed UTF16 text.</Line>
  <Line number="4347">** ^If the third parameter to sqlite3_bind_text64() is not NULL, then</Line>
  <Line number="4348">** it should be a pointer to a well-formed unicode string that is</Line>
  <Line number="4349">** either UTF8 if the sixth parameter is SQLITE_UTF8, or UTF16</Line>
  <Line number="4350">** otherwise.</Line>
  <Line number="4351">**</Line>
  <Line number="4352">** [[byte-order determination rules]] ^The byte-order of</Line>
  <Line number="4353">** UTF16 input text is determined by the byte-order mark (BOM, U+FEFF)</Line>
  <Line number="4354">** found in first character, which is removed, or in the absence of a BOM</Line>
  <Line number="4355">** the byte order is the native byte order of the host</Line>
  <Line number="4356">** machine for sqlite3_bind_text16() or the byte order specified in</Line>
  <Line number="4357">** the 6th parameter for sqlite3_bind_text64().)^</Line>
  <Line number="4358">** ^If UTF16 input text contains invalid unicode</Line>
  <Line number="4359">** characters, then SQLite might change those invalid characters</Line>
  <Line number="4360">** into the unicode replacement character: U+FFFD.</Line>
  <Line number="4361">**</Line>
  <Line number="4362">** ^(In those routines that have a fourth argument, its value is the</Line>
  <Line number="4363">** number of bytes in the parameter.  To be clear: the value is the</Line>
  <Line number="4364">** number of &lt;u&gt;bytes&lt;/u&gt; in the value, not the number of characters.)^</Line>
  <Line number="4365">** ^If the fourth parameter to sqlite3_bind_text() or sqlite3_bind_text16()</Line>
  <Line number="4366">** is negative, then the length of the string is</Line>
  <Line number="4367">** the number of bytes up to the first zero terminator.</Line>
  <Line number="4368">** If the fourth parameter to sqlite3_bind_blob() is negative, then</Line>
  <Line number="4369">** the behavior is undefined.</Line>
  <Line number="4370">** If a non-negative fourth parameter is provided to sqlite3_bind_text()</Line>
  <Line number="4371">** or sqlite3_bind_text16() or sqlite3_bind_text64() then</Line>
  <Line number="4372">** that parameter must be the byte offset</Line>
  <Line number="4373">** where the NUL terminator would occur assuming the string were NUL</Line>
  <Line number="4374">** terminated.  If any NUL characters occurs at byte offsets less than</Line>
  <Line number="4375">** the value of the fourth parameter then the resulting string value will</Line>
  <Line number="4376">** contain embedded NULs.  The result of expressions involving strings</Line>
  <Line number="4377">** with embedded NULs is undefined.</Line>
  <Line number="4378">**</Line>
  <Line number="4379">** ^The fifth argument to the BLOB and string binding interfaces controls</Line>
  <Line number="4380">** or indicates the lifetime of the object referenced by the third parameter.</Line>
  <Line number="4381">** These three options exist:</Line>
  <Line number="4382">** ^ (1) A destructor to dispose of the BLOB or string after SQLite has finished</Line>
  <Line number="4383">** with it may be passed. ^It is called to dispose of the BLOB or string even</Line>
  <Line number="4384">** if the call to the bind API fails, except the destructor is not called if</Line>
  <Line number="4385">** the third parameter is a NULL pointer or the fourth parameter is negative.</Line>
  <Line number="4386">** ^ (2) The special constant, [SQLITE_STATIC], may be passsed to indicate that</Line>
  <Line number="4387">** the application remains responsible for disposing of the object. ^In this</Line>
  <Line number="4388">** case, the object and the provided pointer to it must remain valid until</Line>
  <Line number="4389">** either the prepared statement is finalized or the same SQL parameter is</Line>
  <Line number="4390">** bound to something else, whichever occurs sooner.</Line>
  <Line number="4391">** ^ (3) The constant, [SQLITE_TRANSIENT], may be passed to indicate that the</Line>
  <Line number="4392">** object is to be copied prior to the return from sqlite3_bind_*(). ^The</Line>
  <Line number="4393">** object and pointer to it must remain valid until then. ^SQLite will then</Line>
  <Line number="4394">** manage the lifetime of its private copy.</Line>
  <Line number="4395">**</Line>
  <Line number="4396">** ^The sixth argument to sqlite3_bind_text64() must be one of</Line>
  <Line number="4397">** [SQLITE_UTF8], [SQLITE_UTF16], [SQLITE_UTF16BE], or [SQLITE_UTF16LE]</Line>
  <Line number="4398">** to specify the encoding of the text in the third parameter.  If</Line>
  <Line number="4399">** the sixth argument to sqlite3_bind_text64() is not one of the</Line>
  <Line number="4400">** allowed values shown above, or if the text encoding is different</Line>
  <Line number="4401">** from the encoding specified by the sixth parameter, then the behavior</Line>
  <Line number="4402">** is undefined.</Line>
  <Line number="4403">**</Line>
  <Line number="4404">** ^The sqlite3_bind_zeroblob() routine binds a BLOB of length N that</Line>
  <Line number="4405">** is filled with zeroes.  ^A zeroblob uses a fixed amount of memory</Line>
  <Line number="4406">** (just an integer to hold its size) while it is being processed.</Line>
  <Line number="4407">** Zeroblobs are intended to serve as placeholders for BLOBs whose</Line>
  <Line number="4408">** content is later written using</Line>
  <Line number="4409">** [sqlite3_blob_open | incremental BLOB I/O] routines.</Line>
  <Line number="4410">** ^A negative value for the zeroblob results in a zero-length BLOB.</Line>
  <Line number="4411">**</Line>
  <Line number="4412">** ^The sqlite3_bind_pointer(S,I,P,T,D) routine causes the I-th parameter in</Line>
  <Line number="4413">** [prepared statement] S to have an SQL value of NULL, but to also be</Line>
  <Line number="4414">** associated with the pointer P of type T.  ^D is either a NULL pointer or</Line>
  <Line number="4415">** a pointer to a destructor function for P. ^SQLite will invoke the</Line>
  <Line number="4416">** destructor D with a single argument of P when it is finished using</Line>
  <Line number="4417">** P.  The T parameter should be a static string, preferably a string</Line>
  <Line number="4418">** literal. The sqlite3_bind_pointer() routine is part of the</Line>
  <Line number="4419">** [pointer passing interface] added for SQLite 3.20.0.</Line>
  <Line number="4420">**</Line>
  <Line number="4421">** ^If any of the sqlite3_bind_*() routines are called with a NULL pointer</Line>
  <Line number="4422">** for the [prepared statement] or with a prepared statement for which</Line>
  <Line number="4423">** [sqlite3_step()] has been called more recently than [sqlite3_reset()],</Line>
  <Line number="4424">** then the call will return [SQLITE_MISUSE].  If any sqlite3_bind_()</Line>
  <Line number="4425">** routine is passed a [prepared statement] that has been finalized, the</Line>
  <Line number="4426">** result is undefined and probably harmful.</Line>
  <Line number="4427">**</Line>
  <Line number="4428">** ^Bindings are not cleared by the [sqlite3_reset()] routine.</Line>
  <Line number="4429">** ^Unbound parameters are interpreted as NULL.</Line>
  <Line number="4430">**</Line>
  <Line number="4431">** ^The sqlite3_bind_* routines return [SQLITE_OK] on success or an</Line>
  <Line number="4432">** [error code] if anything goes wrong.</Line>
  <Line number="4433">** ^[SQLITE_TOOBIG] might be returned if the size of a string or BLOB</Line>
  <Line number="4434">** exceeds limits imposed by [sqlite3_limit]([SQLITE_LIMIT_LENGTH]) or</Line>
  <Line number="4435">** [SQLITE_MAX_LENGTH].</Line>
  <Line number="4436">** ^[SQLITE_RANGE] is returned if the parameter</Line>
  <Line number="4437">** index is out of range.  ^[SQLITE_NOMEM] is returned if malloc() fails.</Line>
  <Line number="4438">**</Line>
  <Line number="4439">** See also: [sqlite3_bind_parameter_count()],</Line>
  <Line number="4440">** [sqlite3_bind_parameter_name()], and [sqlite3_bind_parameter_index()].</Line>
  <Line number="4441">*/</Line>
  <Line number="4442">SQLITE_API int sqlite3_bind_blob(sqlite3_stmt*, int, const void*, int n, void(*)(void*));</Line>
  <Line number="4443">SQLITE_API int sqlite3_bind_blob64(sqlite3_stmt*, int, const void*, sqlite3_uint64,</Line>
  <Line number="4444">                        void(*)(void*));</Line>
  <Line number="4445">SQLITE_API int sqlite3_bind_double(sqlite3_stmt*, int, double);</Line>
  <Line number="4446">SQLITE_API int sqlite3_bind_int(sqlite3_stmt*, int, int);</Line>
  <Line number="4447">SQLITE_API int sqlite3_bind_int64(sqlite3_stmt*, int, sqlite3_int64);</Line>
  <Line number="4448">SQLITE_API int sqlite3_bind_null(sqlite3_stmt*, int);</Line>
  <Line number="4449">SQLITE_API int sqlite3_bind_text(sqlite3_stmt*,int,const char*,int,void(*)(void*));</Line>
  <Line number="4450">SQLITE_API int sqlite3_bind_text16(sqlite3_stmt*, int, const void*, int, void(*)(void*));</Line>
  <Line number="4451">SQLITE_API int sqlite3_bind_text64(sqlite3_stmt*, int, const char*, sqlite3_uint64,</Line>
  <Line number="4452">                         void(*)(void*), unsigned char encoding);</Line>
  <Line number="4453">SQLITE_API int sqlite3_bind_value(sqlite3_stmt*, int, const sqlite3_value*);</Line>
  <Line number="4454">SQLITE_API int sqlite3_bind_pointer(sqlite3_stmt*, int, void*, const char*,void(*)(void*));</Line>
  <Line number="4455">SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt*, int, int n);</Line>
  <Line number="4456">SQLITE_API int sqlite3_bind_zeroblob64(sqlite3_stmt*, int, sqlite3_uint64);</Line>
  <Line number="4457"></Line>
  <Line number="4458">/*</Line>
  <Line number="4459">** CAPI3REF: Number Of SQL Parameters</Line>
  <Line number="4460">** METHOD: sqlite3_stmt</Line>
  <Line number="4461">**</Line>
  <Line number="4462">** ^This routine can be used to find the number of [SQL parameters]</Line>
  <Line number="4463">** in a [prepared statement].  SQL parameters are tokens of the</Line>
  <Line number="4464">** form &quot;?&quot;, &quot;?NNN&quot;, &quot;:AAA&quot;, &quot;$AAA&quot;, or &quot;@AAA&quot; that serve as</Line>
  <Line number="4465">** placeholders for values that are [sqlite3_bind_blob | bound]</Line>
  <Line number="4466">** to the parameters at a later time.</Line>
  <Line number="4467">**</Line>
  <Line number="4468">** ^(This routine actually returns the index of the largest (rightmost)</Line>
  <Line number="4469">** parameter. For all forms except ?NNN, this will correspond to the</Line>
  <Line number="4470">** number of unique parameters.  If parameters of the ?NNN form are used,</Line>
  <Line number="4471">** there may be gaps in the list.)^</Line>
  <Line number="4472">**</Line>
  <Line number="4473">** See also: [sqlite3_bind_blob|sqlite3_bind()],</Line>
  <Line number="4474">** [sqlite3_bind_parameter_name()], and</Line>
  <Line number="4475">** [sqlite3_bind_parameter_index()].</Line>
  <Line number="4476">*/</Line>
  <Line number="4477">SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt*);</Line>
  <Line number="4478"></Line>
  <Line number="4479">/*</Line>
  <Line number="4480">** CAPI3REF: Name Of A Host Parameter</Line>
  <Line number="4481">** METHOD: sqlite3_stmt</Line>
  <Line number="4482">**</Line>
  <Line number="4483">** ^The sqlite3_bind_parameter_name(P,N) interface returns</Line>
  <Line number="4484">** the name of the N-th [SQL parameter] in the [prepared statement] P.</Line>
  <Line number="4485">** ^(SQL parameters of the form &quot;?NNN&quot; or &quot;:AAA&quot; or &quot;@AAA&quot; or &quot;$AAA&quot;</Line>
  <Line number="4486">** have a name which is the string &quot;?NNN&quot; or &quot;:AAA&quot; or &quot;@AAA&quot; or &quot;$AAA&quot;</Line>
  <Line number="4487">** respectively.</Line>
  <Line number="4488">** In other words, the initial &quot;:&quot; or &quot;$&quot; or &quot;@&quot; or &quot;?&quot;</Line>
  <Line number="4489">** is included as part of the name.)^</Line>
  <Line number="4490">** ^Parameters of the form &quot;?&quot; without a following integer have no name</Line>
  <Line number="4491">** and are referred to as &quot;nameless&quot; or &quot;anonymous parameters&quot;.</Line>
  <Line number="4492">**</Line>
  <Line number="4493">** ^The first host parameter has an index of 1, not 0.</Line>
  <Line number="4494">**</Line>
  <Line number="4495">** ^If the value N is out of range or if the N-th parameter is</Line>
  <Line number="4496">** nameless, then NULL is returned.  ^The returned string is</Line>
  <Line number="4497">** always in UTF-8 encoding even if the named parameter was</Line>
  <Line number="4498">** originally specified as UTF-16 in [sqlite3_prepare16()],</Line>
  <Line number="4499">** [sqlite3_prepare16_v2()], or [sqlite3_prepare16_v3()].</Line>
  <Line number="4500">**</Line>
  <Line number="4501">** See also: [sqlite3_bind_blob|sqlite3_bind()],</Line>
  <Line number="4502">** [sqlite3_bind_parameter_count()], and</Line>
  <Line number="4503">** [sqlite3_bind_parameter_index()].</Line>
  <Line number="4504">*/</Line>
  <Line number="4505">SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt*, int);</Line>
  <Line number="4506"></Line>
  <Line number="4507">/*</Line>
  <Line number="4508">** CAPI3REF: Index Of A Parameter With A Given Name</Line>
  <Line number="4509">** METHOD: sqlite3_stmt</Line>
  <Line number="4510">**</Line>
  <Line number="4511">** ^Return the index of an SQL parameter given its name.  ^The</Line>
  <Line number="4512">** index value returned is suitable for use as the second</Line>
  <Line number="4513">** parameter to [sqlite3_bind_blob|sqlite3_bind()].  ^A zero</Line>
  <Line number="4514">** is returned if no matching parameter is found.  ^The parameter</Line>
  <Line number="4515">** name must be given in UTF-8 even if the original statement</Line>
  <Line number="4516">** was prepared from UTF-16 text using [sqlite3_prepare16_v2()] or</Line>
  <Line number="4517">** [sqlite3_prepare16_v3()].</Line>
  <Line number="4518">**</Line>
  <Line number="4519">** See also: [sqlite3_bind_blob|sqlite3_bind()],</Line>
  <Line number="4520">** [sqlite3_bind_parameter_count()], and</Line>
  <Line number="4521">** [sqlite3_bind_parameter_name()].</Line>
  <Line number="4522">*/</Line>
  <Line number="4523">SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt*, const char *zName);</Line>
  <Line number="4524"></Line>
  <Line number="4525">/*</Line>
  <Line number="4526">** CAPI3REF: Reset All Bindings On A Prepared Statement</Line>
  <Line number="4527">** METHOD: sqlite3_stmt</Line>
  <Line number="4528">**</Line>
  <Line number="4529">** ^Contrary to the intuition of many, [sqlite3_reset()] does not reset</Line>
  <Line number="4530">** the [sqlite3_bind_blob | bindings] on a [prepared statement].</Line>
  <Line number="4531">** ^Use this routine to reset all host parameters to NULL.</Line>
  <Line number="4532">*/</Line>
  <Line number="4533">SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt*);</Line>
  <Line number="4534"></Line>
  <Line number="4535">/*</Line>
  <Line number="4536">** CAPI3REF: Number Of Columns In A Result Set</Line>
  <Line number="4537">** METHOD: sqlite3_stmt</Line>
  <Line number="4538">**</Line>
  <Line number="4539">** ^Return the number of columns in the result set returned by the</Line>
  <Line number="4540">** [prepared statement]. ^If this routine returns 0, that means the</Line>
  <Line number="4541">** [prepared statement] returns no data (for example an [UPDATE]).</Line>
  <Line number="4542">** ^However, just because this routine returns a positive number does not</Line>
  <Line number="4543">** mean that one or more rows of data will be returned.  ^A SELECT statement</Line>
  <Line number="4544">** will always have a positive sqlite3_column_count() but depending on the</Line>
  <Line number="4545">** WHERE clause constraints and the table content, it might return no rows.</Line>
  <Line number="4546">**</Line>
  <Line number="4547">** See also: [sqlite3_data_count()]</Line>
  <Line number="4548">*/</Line>
  <Line number="4549">SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt);</Line>
  <Line number="4550"></Line>
  <Line number="4551">/*</Line>
  <Line number="4552">** CAPI3REF: Column Names In A Result Set</Line>
  <Line number="4553">** METHOD: sqlite3_stmt</Line>
  <Line number="4554">**</Line>
  <Line number="4555">** ^These routines return the name assigned to a particular column</Line>
  <Line number="4556">** in the result set of a [SELECT] statement.  ^The sqlite3_column_name()</Line>
  <Line number="4557">** interface returns a pointer to a zero-terminated UTF-8 string</Line>
  <Line number="4558">** and sqlite3_column_name16() returns a pointer to a zero-terminated</Line>
  <Line number="4559">** UTF-16 string.  ^The first parameter is the [prepared statement]</Line>
  <Line number="4560">** that implements the [SELECT] statement. ^The second parameter is the</Line>
  <Line number="4561">** column number.  ^The leftmost column is number 0.</Line>
  <Line number="4562">**</Line>
  <Line number="4563">** ^The returned string pointer is valid until either the [prepared statement]</Line>
  <Line number="4564">** is destroyed by [sqlite3_finalize()] or until the statement is automatically</Line>
  <Line number="4565">** reprepared by the first call to [sqlite3_step()] for a particular run</Line>
  <Line number="4566">** or until the next call to</Line>
  <Line number="4567">** sqlite3_column_name() or sqlite3_column_name16() on the same column.</Line>
  <Line number="4568">**</Line>
  <Line number="4569">** ^If sqlite3_malloc() fails during the processing of either routine</Line>
  <Line number="4570">** (for example during a conversion from UTF-8 to UTF-16) then a</Line>
  <Line number="4571">** NULL pointer is returned.</Line>
  <Line number="4572">**</Line>
  <Line number="4573">** ^The name of a result column is the value of the &quot;AS&quot; clause for</Line>
  <Line number="4574">** that column, if there is an AS clause.  If there is no AS clause</Line>
  <Line number="4575">** then the name of the column is unspecified and may change from</Line>
  <Line number="4576">** one release of SQLite to the next.</Line>
  <Line number="4577">*/</Line>
  <Line number="4578">SQLITE_API const char *sqlite3_column_name(sqlite3_stmt*, int N);</Line>
  <Line number="4579">SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt*, int N);</Line>
  <Line number="4580"></Line>
  <Line number="4581">/*</Line>
  <Line number="4582">** CAPI3REF: Source Of Data In A Query Result</Line>
  <Line number="4583">** METHOD: sqlite3_stmt</Line>
  <Line number="4584">**</Line>
  <Line number="4585">** ^These routines provide a means to determine the database, table, and</Line>
  <Line number="4586">** table column that is the origin of a particular result column in</Line>
  <Line number="4587">** [SELECT] statement.</Line>
  <Line number="4588">** ^The name of the database or table or column can be returned as</Line>
  <Line number="4589">** either a UTF-8 or UTF-16 string.  ^The _database_ routines return</Line>
  <Line number="4590">** the database name, the _table_ routines return the table name, and</Line>
  <Line number="4591">** the origin_ routines return the column name.</Line>
  <Line number="4592">** ^The returned string is valid until the [prepared statement] is destroyed</Line>
  <Line number="4593">** using [sqlite3_finalize()] or until the statement is automatically</Line>
  <Line number="4594">** reprepared by the first call to [sqlite3_step()] for a particular run</Line>
  <Line number="4595">** or until the same information is requested</Line>
  <Line number="4596">** again in a different encoding.</Line>
  <Line number="4597">**</Line>
  <Line number="4598">** ^The names returned are the original un-aliased names of the</Line>
  <Line number="4599">** database, table, and column.</Line>
  <Line number="4600">**</Line>
  <Line number="4601">** ^The first argument to these interfaces is a [prepared statement].</Line>
  <Line number="4602">** ^These functions return information about the Nth result column returned by</Line>
  <Line number="4603">** the statement, where N is the second function argument.</Line>
  <Line number="4604">** ^The left-most column is column 0 for these routines.</Line>
  <Line number="4605">**</Line>
  <Line number="4606">** ^If the Nth column returned by the statement is an expression or</Line>
  <Line number="4607">** subquery and is not a column value, then all of these functions return</Line>
  <Line number="4608">** NULL.  ^These routines might also return NULL if a memory allocation error</Line>
  <Line number="4609">** occurs.  ^Otherwise, they return the name of the attached database, table,</Line>
  <Line number="4610">** or column that query result column was extracted from.</Line>
  <Line number="4611">**</Line>
  <Line number="4612">** ^As with all other SQLite APIs, those whose names end with &quot;16&quot; return</Line>
  <Line number="4613">** UTF-16 encoded strings and the other functions return UTF-8.</Line>
  <Line number="4614">**</Line>
  <Line number="4615">** ^These APIs are only available if the library was compiled with the</Line>
  <Line number="4616">** [SQLITE_ENABLE_COLUMN_METADATA] C-preprocessor symbol.</Line>
  <Line number="4617">**</Line>
  <Line number="4618">** If two or more threads call one or more</Line>
  <Line number="4619">** [sqlite3_column_database_name | column metadata interfaces]</Line>
  <Line number="4620">** for the same [prepared statement] and result column</Line>
  <Line number="4621">** at the same time then the results are undefined.</Line>
  <Line number="4622">*/</Line>
  <Line number="4623">SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt*,int);</Line>
  <Line number="4624">SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt*,int);</Line>
  <Line number="4625">SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt*,int);</Line>
  <Line number="4626">SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt*,int);</Line>
  <Line number="4627">SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt*,int);</Line>
  <Line number="4628">SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt*,int);</Line>
  <Line number="4629"></Line>
  <Line number="4630">/*</Line>
  <Line number="4631">** CAPI3REF: Declared Datatype Of A Query Result</Line>
  <Line number="4632">** METHOD: sqlite3_stmt</Line>
  <Line number="4633">**</Line>
  <Line number="4634">** ^(The first parameter is a [prepared statement].</Line>
  <Line number="4635">** If this statement is a [SELECT] statement and the Nth column of the</Line>
  <Line number="4636">** returned result set of that [SELECT] is a table column (not an</Line>
  <Line number="4637">** expression or subquery) then the declared type of the table</Line>
  <Line number="4638">** column is returned.)^  ^If the Nth column of the result set is an</Line>
  <Line number="4639">** expression or subquery, then a NULL pointer is returned.</Line>
  <Line number="4640">** ^The returned string is always UTF-8 encoded.</Line>
  <Line number="4641">**</Line>
  <Line number="4642">** ^(For example, given the database schema:</Line>
  <Line number="4643">**</Line>
  <Line number="4644">** CREATE TABLE t1(c1 VARIANT);</Line>
  <Line number="4645">**</Line>
  <Line number="4646">** and the following statement to be compiled:</Line>
  <Line number="4647">**</Line>
  <Line number="4648">** SELECT c1 + 1, c1 FROM t1;</Line>
  <Line number="4649">**</Line>
  <Line number="4650">** this routine would return the string &quot;VARIANT&quot; for the second result</Line>
  <Line number="4651">** column (i==1), and a NULL pointer for the first result column (i==0).)^</Line>
  <Line number="4652">**</Line>
  <Line number="4653">** ^SQLite uses dynamic run-time typing.  ^So just because a column</Line>
  <Line number="4654">** is declared to contain a particular type does not mean that the</Line>
  <Line number="4655">** data stored in that column is of the declared type.  SQLite is</Line>
  <Line number="4656">** strongly typed, but the typing is dynamic not static.  ^Type</Line>
  <Line number="4657">** is associated with individual values, not with the containers</Line>
  <Line number="4658">** used to hold those values.</Line>
  <Line number="4659">*/</Line>
  <Line number="4660">SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt*,int);</Line>
  <Line number="4661">SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt*,int);</Line>
  <Line number="4662"></Line>
  <Line number="4663">/*</Line>
  <Line number="4664">** CAPI3REF: Evaluate An SQL Statement</Line>
  <Line number="4665">** METHOD: sqlite3_stmt</Line>
  <Line number="4666">**</Line>
  <Line number="4667">** After a [prepared statement] has been prepared using any of</Line>
  <Line number="4668">** [sqlite3_prepare_v2()], [sqlite3_prepare_v3()], [sqlite3_prepare16_v2()],</Line>
  <Line number="4669">** or [sqlite3_prepare16_v3()] or one of the legacy</Line>
  <Line number="4670">** interfaces [sqlite3_prepare()] or [sqlite3_prepare16()], this function</Line>
  <Line number="4671">** must be called one or more times to evaluate the statement.</Line>
  <Line number="4672">**</Line>
  <Line number="4673">** The details of the behavior of the sqlite3_step() interface depend</Line>
  <Line number="4674">** on whether the statement was prepared using the newer &quot;vX&quot; interfaces</Line>
  <Line number="4675">** [sqlite3_prepare_v3()], [sqlite3_prepare_v2()], [sqlite3_prepare16_v3()],</Line>
  <Line number="4676">** [sqlite3_prepare16_v2()] or the older legacy</Line>
  <Line number="4677">** interfaces [sqlite3_prepare()] and [sqlite3_prepare16()].  The use of the</Line>
  <Line number="4678">** new &quot;vX&quot; interface is recommended for new applications but the legacy</Line>
  <Line number="4679">** interface will continue to be supported.</Line>
  <Line number="4680">**</Line>
  <Line number="4681">** ^In the legacy interface, the return value will be either [SQLITE_BUSY],</Line>
  <Line number="4682">** [SQLITE_DONE], [SQLITE_ROW], [SQLITE_ERROR], or [SQLITE_MISUSE].</Line>
  <Line number="4683">** ^With the &quot;v2&quot; interface, any of the other [result codes] or</Line>
  <Line number="4684">** [extended result codes] might be returned as well.</Line>
  <Line number="4685">**</Line>
  <Line number="4686">** ^[SQLITE_BUSY] means that the database engine was unable to acquire the</Line>
  <Line number="4687">** database locks it needs to do its job.  ^If the statement is a [COMMIT]</Line>
  <Line number="4688">** or occurs outside of an explicit transaction, then you can retry the</Line>
  <Line number="4689">** statement.  If the statement is not a [COMMIT] and occurs within an</Line>
  <Line number="4690">** explicit transaction then you should rollback the transaction before</Line>
  <Line number="4691">** continuing.</Line>
  <Line number="4692">**</Line>
  <Line number="4693">** ^[SQLITE_DONE] means that the statement has finished executing</Line>
  <Line number="4694">** successfully.  sqlite3_step() should not be called again on this virtual</Line>
  <Line number="4695">** machine without first calling [sqlite3_reset()] to reset the virtual</Line>
  <Line number="4696">** machine back to its initial state.</Line>
  <Line number="4697">**</Line>
  <Line number="4698">** ^If the SQL statement being executed returns any data, then [SQLITE_ROW]</Line>
  <Line number="4699">** is returned each time a new row of data is ready for processing by the</Line>
  <Line number="4700">** caller. The values may be accessed using the [column access functions].</Line>
  <Line number="4701">** sqlite3_step() is called again to retrieve the next row of data.</Line>
  <Line number="4702">**</Line>
  <Line number="4703">** ^[SQLITE_ERROR] means that a run-time error (such as a constraint</Line>
  <Line number="4704">** violation) has occurred.  sqlite3_step() should not be called again on</Line>
  <Line number="4705">** the VM. More information may be found by calling [sqlite3_errmsg()].</Line>
  <Line number="4706">** ^With the legacy interface, a more specific error code (for example,</Line>
  <Line number="4707">** [SQLITE_INTERRUPT], [SQLITE_SCHEMA], [SQLITE_CORRUPT], and so forth)</Line>
  <Line number="4708">** can be obtained by calling [sqlite3_reset()] on the</Line>
  <Line number="4709">** [prepared statement].  ^In the &quot;v2&quot; interface,</Line>
  <Line number="4710">** the more specific error code is returned directly by sqlite3_step().</Line>
  <Line number="4711">**</Line>
  <Line number="4712">** [SQLITE_MISUSE] means that the this routine was called inappropriately.</Line>
  <Line number="4713">** Perhaps it was called on a [prepared statement] that has</Line>
  <Line number="4714">** already been [sqlite3_finalize | finalized] or on one that had</Line>
  <Line number="4715">** previously returned [SQLITE_ERROR] or [SQLITE_DONE].  Or it could</Line>
  <Line number="4716">** be the case that the same database connection is being used by two or</Line>
  <Line number="4717">** more threads at the same moment in time.</Line>
  <Line number="4718">**</Line>
  <Line number="4719">** For all versions of SQLite up to and including 3.6.23.1, a call to</Line>
  <Line number="4720">** [sqlite3_reset()] was required after sqlite3_step() returned anything</Line>
  <Line number="4721">** other than [SQLITE_ROW] before any subsequent invocation of</Line>
  <Line number="4722">** sqlite3_step().  Failure to reset the prepared statement using</Line>
  <Line number="4723">** [sqlite3_reset()] would result in an [SQLITE_MISUSE] return from</Line>
  <Line number="4724">** sqlite3_step().  But after [version 3.6.23.1] ([dateof:3.6.23.1],</Line>
  <Line number="4725">** sqlite3_step() began</Line>
  <Line number="4726">** calling [sqlite3_reset()] automatically in this circumstance rather</Line>
  <Line number="4727">** than returning [SQLITE_MISUSE].  This is not considered a compatibility</Line>
  <Line number="4728">** break because any application that ever receives an SQLITE_MISUSE error</Line>
  <Line number="4729">** is broken by definition.  The [SQLITE_OMIT_AUTORESET] compile-time option</Line>
  <Line number="4730">** can be used to restore the legacy behavior.</Line>
  <Line number="4731">**</Line>
  <Line number="4732">** &lt;b&gt;Goofy Interface Alert:&lt;/b&gt; In the legacy interface, the sqlite3_step()</Line>
  <Line number="4733">** API always returns a generic error code, [SQLITE_ERROR], following any</Line>
  <Line number="4734">** error other than [SQLITE_BUSY] and [SQLITE_MISUSE].  You must call</Line>
  <Line number="4735">** [sqlite3_reset()] or [sqlite3_finalize()] in order to find one of the</Line>
  <Line number="4736">** specific [error codes] that better describes the error.</Line>
  <Line number="4737">** We admit that this is a goofy design.  The problem has been fixed</Line>
  <Line number="4738">** with the &quot;v2&quot; interface.  If you prepare all of your SQL statements</Line>
  <Line number="4739">** using [sqlite3_prepare_v3()] or [sqlite3_prepare_v2()]</Line>
  <Line number="4740">** or [sqlite3_prepare16_v2()] or [sqlite3_prepare16_v3()] instead</Line>
  <Line number="4741">** of the legacy [sqlite3_prepare()] and [sqlite3_prepare16()] interfaces,</Line>
  <Line number="4742">** then the more specific [error codes] are returned directly</Line>
  <Line number="4743">** by sqlite3_step().  The use of the &quot;vX&quot; interfaces is recommended.</Line>
  <Line number="4744">*/</Line>
  <Line number="4745">SQLITE_API int sqlite3_step(sqlite3_stmt*);</Line>
  <Line number="4746"></Line>
  <Line number="4747">/*</Line>
  <Line number="4748">** CAPI3REF: Number of columns in a result set</Line>
  <Line number="4749">** METHOD: sqlite3_stmt</Line>
  <Line number="4750">**</Line>
  <Line number="4751">** ^The sqlite3_data_count(P) interface returns the number of columns in the</Line>
  <Line number="4752">** current row of the result set of [prepared statement] P.</Line>
  <Line number="4753">** ^If prepared statement P does not have results ready to return</Line>
  <Line number="4754">** (via calls to the [sqlite3_column_int | sqlite3_column()] family of</Line>
  <Line number="4755">** interfaces) then sqlite3_data_count(P) returns 0.</Line>
  <Line number="4756">** ^The sqlite3_data_count(P) routine also returns 0 if P is a NULL pointer.</Line>
  <Line number="4757">** ^The sqlite3_data_count(P) routine returns 0 if the previous call to</Line>
  <Line number="4758">** [sqlite3_step](P) returned [SQLITE_DONE].  ^The sqlite3_data_count(P)</Line>
  <Line number="4759">** will return non-zero if previous call to [sqlite3_step](P) returned</Line>
  <Line number="4760">** [SQLITE_ROW], except in the case of the [PRAGMA incremental_vacuum]</Line>
  <Line number="4761">** where it always returns zero since each step of that multi-step</Line>
  <Line number="4762">** pragma returns 0 columns of data.</Line>
  <Line number="4763">**</Line>
  <Line number="4764">** See also: [sqlite3_column_count()]</Line>
  <Line number="4765">*/</Line>
  <Line number="4766">SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt);</Line>
  <Line number="4767"></Line>
  <Line number="4768">/*</Line>
  <Line number="4769">** CAPI3REF: Fundamental Datatypes</Line>
  <Line number="4770">** KEYWORDS: SQLITE_TEXT</Line>
  <Line number="4771">**</Line>
  <Line number="4772">** ^(Every value in SQLite has one of five fundamental datatypes:</Line>
  <Line number="4773">**</Line>
  <Line number="4774">** &lt;ul&gt;</Line>
  <Line number="4775">** &lt;li&gt; 64-bit signed integer</Line>
  <Line number="4776">** &lt;li&gt; 64-bit IEEE floating point number</Line>
  <Line number="4777">** &lt;li&gt; string</Line>
  <Line number="4778">** &lt;li&gt; BLOB</Line>
  <Line number="4779">** &lt;li&gt; NULL</Line>
  <Line number="4780">** &lt;/ul&gt;)^</Line>
  <Line number="4781">**</Line>
  <Line number="4782">** These constants are codes for each of those types.</Line>
  <Line number="4783">**</Line>
  <Line number="4784">** Note that the SQLITE_TEXT constant was also used in SQLite version 2</Line>
  <Line number="4785">** for a completely different meaning.  Software that links against both</Line>
  <Line number="4786">** SQLite version 2 and SQLite version 3 should use SQLITE3_TEXT, not</Line>
  <Line number="4787">** SQLITE_TEXT.</Line>
  <Line number="4788">*/</Line>
  <Line number="4789">#define SQLITE_INTEGER  1</Line>
  <Line number="4790">#define SQLITE_FLOAT    2</Line>
  <Line number="4791">#define SQLITE_BLOB     4</Line>
  <Line number="4792">#define SQLITE_NULL     5</Line>
  <Line number="4793">#ifdef SQLITE_TEXT</Line>
  <Line number="4794"># undef SQLITE_TEXT</Line>
  <Line number="4795">#else</Line>
  <Line number="4796"># define SQLITE_TEXT     3</Line>
  <Line number="4797">#endif</Line>
  <Line number="4798">#define SQLITE3_TEXT     3</Line>
  <Line number="4799"></Line>
  <Line number="4800">/*</Line>
  <Line number="4801">** CAPI3REF: Result Values From A Query</Line>
  <Line number="4802">** KEYWORDS: {column access functions}</Line>
  <Line number="4803">** METHOD: sqlite3_stmt</Line>
  <Line number="4804">**</Line>
  <Line number="4805">** &lt;b&gt;Summary:&lt;/b&gt;</Line>
  <Line number="4806">** &lt;blockquote&gt;&lt;table border=0 cellpadding=0 cellspacing=0&gt;</Line>
  <Line number="4807">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_column_blob&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;BLOB result</Line>
  <Line number="4808">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_column_double&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;REAL result</Line>
  <Line number="4809">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_column_int&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;32-bit INTEGER result</Line>
  <Line number="4810">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_column_int64&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;64-bit INTEGER result</Line>
  <Line number="4811">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_column_text&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-8 TEXT result</Line>
  <Line number="4812">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_column_text16&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-16 TEXT result</Line>
  <Line number="4813">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_column_value&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;The result as an</Line>
  <Line number="4814">** [sqlite3_value|unprotected sqlite3_value] object.</Line>
  <Line number="4815">** &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;td&gt;&amp;nbsp;&lt;td&gt;&amp;nbsp;</Line>
  <Line number="4816">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_column_bytes&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Size of a BLOB</Line>
  <Line number="4817">** or a UTF-8 TEXT result in bytes</Line>
  <Line number="4818">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_column_bytes16&amp;nbsp;&amp;nbsp;&lt;/b&gt;</Line>
  <Line number="4819">** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;Size of UTF-16</Line>
  <Line number="4820">** TEXT in bytes</Line>
  <Line number="4821">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_column_type&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Default</Line>
  <Line number="4822">** datatype of the result</Line>
  <Line number="4823">** &lt;/table&gt;&lt;/blockquote&gt;</Line>
  <Line number="4824">**</Line>
  <Line number="4825">** &lt;b&gt;Details:&lt;/b&gt;</Line>
  <Line number="4826">**</Line>
  <Line number="4827">** ^These routines return information about a single column of the current</Line>
  <Line number="4828">** result row of a query.  ^In every case the first argument is a pointer</Line>
  <Line number="4829">** to the [prepared statement] that is being evaluated (the [sqlite3_stmt*]</Line>
  <Line number="4830">** that was returned from [sqlite3_prepare_v2()] or one of its variants)</Line>
  <Line number="4831">** and the second argument is the index of the column for which information</Line>
  <Line number="4832">** should be returned. ^The leftmost column of the result set has the index 0.</Line>
  <Line number="4833">** ^The number of columns in the result can be determined using</Line>
  <Line number="4834">** [sqlite3_column_count()].</Line>
  <Line number="4835">**</Line>
  <Line number="4836">** If the SQL statement does not currently point to a valid row, or if the</Line>
  <Line number="4837">** column index is out of range, the result is undefined.</Line>
  <Line number="4838">** These routines may only be called when the most recent call to</Line>
  <Line number="4839">** [sqlite3_step()] has returned [SQLITE_ROW] and neither</Line>
  <Line number="4840">** [sqlite3_reset()] nor [sqlite3_finalize()] have been called subsequently.</Line>
  <Line number="4841">** If any of these routines are called after [sqlite3_reset()] or</Line>
  <Line number="4842">** [sqlite3_finalize()] or after [sqlite3_step()] has returned</Line>
  <Line number="4843">** something other than [SQLITE_ROW], the results are undefined.</Line>
  <Line number="4844">** If [sqlite3_step()] or [sqlite3_reset()] or [sqlite3_finalize()]</Line>
  <Line number="4845">** are called from a different thread while any of these routines</Line>
  <Line number="4846">** are pending, then the results are undefined.</Line>
  <Line number="4847">**</Line>
  <Line number="4848">** The first six interfaces (_blob, _double, _int, _int64, _text, and _text16)</Line>
  <Line number="4849">** each return the value of a result column in a specific data format.  If</Line>
  <Line number="4850">** the result column is not initially in the requested format (for example,</Line>
  <Line number="4851">** if the query returns an integer but the sqlite3_column_text() interface</Line>
  <Line number="4852">** is used to extract the value) then an automatic type conversion is performed.</Line>
  <Line number="4853">**</Line>
  <Line number="4854">** ^The sqlite3_column_type() routine returns the</Line>
  <Line number="4855">** [SQLITE_INTEGER | datatype code] for the initial data type</Line>
  <Line number="4856">** of the result column.  ^The returned value is one of [SQLITE_INTEGER],</Line>
  <Line number="4857">** [SQLITE_FLOAT], [SQLITE_TEXT], [SQLITE_BLOB], or [SQLITE_NULL].</Line>
  <Line number="4858">** The return value of sqlite3_column_type() can be used to decide which</Line>
  <Line number="4859">** of the first six interface should be used to extract the column value.</Line>
  <Line number="4860">** The value returned by sqlite3_column_type() is only meaningful if no</Line>
  <Line number="4861">** automatic type conversions have occurred for the value in question.</Line>
  <Line number="4862">** After a type conversion, the result of calling sqlite3_column_type()</Line>
  <Line number="4863">** is undefined, though harmless.  Future</Line>
  <Line number="4864">** versions of SQLite may change the behavior of sqlite3_column_type()</Line>
  <Line number="4865">** following a type conversion.</Line>
  <Line number="4866">**</Line>
  <Line number="4867">** If the result is a BLOB or a TEXT string, then the sqlite3_column_bytes()</Line>
  <Line number="4868">** or sqlite3_column_bytes16() interfaces can be used to determine the size</Line>
  <Line number="4869">** of that BLOB or string.</Line>
  <Line number="4870">**</Line>
  <Line number="4871">** ^If the result is a BLOB or UTF-8 string then the sqlite3_column_bytes()</Line>
  <Line number="4872">** routine returns the number of bytes in that BLOB or string.</Line>
  <Line number="4873">** ^If the result is a UTF-16 string, then sqlite3_column_bytes() converts</Line>
  <Line number="4874">** the string to UTF-8 and then returns the number of bytes.</Line>
  <Line number="4875">** ^If the result is a numeric value then sqlite3_column_bytes() uses</Line>
  <Line number="4876">** [sqlite3_snprintf()] to convert that value to a UTF-8 string and returns</Line>
  <Line number="4877">** the number of bytes in that string.</Line>
  <Line number="4878">** ^If the result is NULL, then sqlite3_column_bytes() returns zero.</Line>
  <Line number="4879">**</Line>
  <Line number="4880">** ^If the result is a BLOB or UTF-16 string then the sqlite3_column_bytes16()</Line>
  <Line number="4881">** routine returns the number of bytes in that BLOB or string.</Line>
  <Line number="4882">** ^If the result is a UTF-8 string, then sqlite3_column_bytes16() converts</Line>
  <Line number="4883">** the string to UTF-16 and then returns the number of bytes.</Line>
  <Line number="4884">** ^If the result is a numeric value then sqlite3_column_bytes16() uses</Line>
  <Line number="4885">** [sqlite3_snprintf()] to convert that value to a UTF-16 string and returns</Line>
  <Line number="4886">** the number of bytes in that string.</Line>
  <Line number="4887">** ^If the result is NULL, then sqlite3_column_bytes16() returns zero.</Line>
  <Line number="4888">**</Line>
  <Line number="4889">** ^The values returned by [sqlite3_column_bytes()] and</Line>
  <Line number="4890">** [sqlite3_column_bytes16()] do not include the zero terminators at the end</Line>
  <Line number="4891">** of the string.  ^For clarity: the values returned by</Line>
  <Line number="4892">** [sqlite3_column_bytes()] and [sqlite3_column_bytes16()] are the number of</Line>
  <Line number="4893">** bytes in the string, not the number of characters.</Line>
  <Line number="4894">**</Line>
  <Line number="4895">** ^Strings returned by sqlite3_column_text() and sqlite3_column_text16(),</Line>
  <Line number="4896">** even empty strings, are always zero-terminated.  ^The return</Line>
  <Line number="4897">** value from sqlite3_column_blob() for a zero-length BLOB is a NULL pointer.</Line>
  <Line number="4898">**</Line>
  <Line number="4899">** &lt;b&gt;Warning:&lt;/b&gt; ^The object returned by [sqlite3_column_value()] is an</Line>
  <Line number="4900">** [unprotected sqlite3_value] object.  In a multithreaded environment,</Line>
  <Line number="4901">** an unprotected sqlite3_value object may only be used safely with</Line>
  <Line number="4902">** [sqlite3_bind_value()] and [sqlite3_result_value()].</Line>
  <Line number="4903">** If the [unprotected sqlite3_value] object returned by</Line>
  <Line number="4904">** [sqlite3_column_value()] is used in any other way, including calls</Line>
  <Line number="4905">** to routines like [sqlite3_value_int()], [sqlite3_value_text()],</Line>
  <Line number="4906">** or [sqlite3_value_bytes()], the behavior is not threadsafe.</Line>
  <Line number="4907">** Hence, the sqlite3_column_value() interface</Line>
  <Line number="4908">** is normally only useful within the implementation of</Line>
  <Line number="4909">** [application-defined SQL functions] or [virtual tables], not within</Line>
  <Line number="4910">** top-level application code.</Line>
  <Line number="4911">**</Line>
  <Line number="4912">** The these routines may attempt to convert the datatype of the result.</Line>
  <Line number="4913">** ^For example, if the internal representation is FLOAT and a text result</Line>
  <Line number="4914">** is requested, [sqlite3_snprintf()] is used internally to perform the</Line>
  <Line number="4915">** conversion automatically.  ^(The following table details the conversions</Line>
  <Line number="4916">** that are applied:</Line>
  <Line number="4917">**</Line>
  <Line number="4918">** &lt;blockquote&gt;</Line>
  <Line number="4919">** &lt;table border=&quot;1&quot;&gt;</Line>
  <Line number="4920">** &lt;tr&gt;&lt;th&gt; Internal&lt;br&gt;Type &lt;th&gt; Requested&lt;br&gt;Type &lt;th&gt;  Conversion</Line>
  <Line number="4921">**</Line>
  <Line number="4922">** &lt;tr&gt;&lt;td&gt;  NULL    &lt;td&gt; INTEGER   &lt;td&gt; Result is 0</Line>
  <Line number="4923">** &lt;tr&gt;&lt;td&gt;  NULL    &lt;td&gt;  FLOAT    &lt;td&gt; Result is 0.0</Line>
  <Line number="4924">** &lt;tr&gt;&lt;td&gt;  NULL    &lt;td&gt;   TEXT    &lt;td&gt; Result is a NULL pointer</Line>
  <Line number="4925">** &lt;tr&gt;&lt;td&gt;  NULL    &lt;td&gt;   BLOB    &lt;td&gt; Result is a NULL pointer</Line>
  <Line number="4926">** &lt;tr&gt;&lt;td&gt; INTEGER  &lt;td&gt;  FLOAT    &lt;td&gt; Convert from integer to float</Line>
  <Line number="4927">** &lt;tr&gt;&lt;td&gt; INTEGER  &lt;td&gt;   TEXT    &lt;td&gt; ASCII rendering of the integer</Line>
  <Line number="4928">** &lt;tr&gt;&lt;td&gt; INTEGER  &lt;td&gt;   BLOB    &lt;td&gt; Same as INTEGER-&gt;TEXT</Line>
  <Line number="4929">** &lt;tr&gt;&lt;td&gt;  FLOAT   &lt;td&gt; INTEGER   &lt;td&gt; [CAST] to INTEGER</Line>
  <Line number="4930">** &lt;tr&gt;&lt;td&gt;  FLOAT   &lt;td&gt;   TEXT    &lt;td&gt; ASCII rendering of the float</Line>
  <Line number="4931">** &lt;tr&gt;&lt;td&gt;  FLOAT   &lt;td&gt;   BLOB    &lt;td&gt; [CAST] to BLOB</Line>
  <Line number="4932">** &lt;tr&gt;&lt;td&gt;  TEXT    &lt;td&gt; INTEGER   &lt;td&gt; [CAST] to INTEGER</Line>
  <Line number="4933">** &lt;tr&gt;&lt;td&gt;  TEXT    &lt;td&gt;  FLOAT    &lt;td&gt; [CAST] to REAL</Line>
  <Line number="4934">** &lt;tr&gt;&lt;td&gt;  TEXT    &lt;td&gt;   BLOB    &lt;td&gt; No change</Line>
  <Line number="4935">** &lt;tr&gt;&lt;td&gt;  BLOB    &lt;td&gt; INTEGER   &lt;td&gt; [CAST] to INTEGER</Line>
  <Line number="4936">** &lt;tr&gt;&lt;td&gt;  BLOB    &lt;td&gt;  FLOAT    &lt;td&gt; [CAST] to REAL</Line>
  <Line number="4937">** &lt;tr&gt;&lt;td&gt;  BLOB    &lt;td&gt;   TEXT    &lt;td&gt; Add a zero terminator if needed</Line>
  <Line number="4938">** &lt;/table&gt;</Line>
  <Line number="4939">** &lt;/blockquote&gt;)^</Line>
  <Line number="4940">**</Line>
  <Line number="4941">** Note that when type conversions occur, pointers returned by prior</Line>
  <Line number="4942">** calls to sqlite3_column_blob(), sqlite3_column_text(), and/or</Line>
  <Line number="4943">** sqlite3_column_text16() may be invalidated.</Line>
  <Line number="4944">** Type conversions and pointer invalidations might occur</Line>
  <Line number="4945">** in the following cases:</Line>
  <Line number="4946">**</Line>
  <Line number="4947">** &lt;ul&gt;</Line>
  <Line number="4948">** &lt;li&gt; The initial content is a BLOB and sqlite3_column_text() or</Line>
  <Line number="4949">**      sqlite3_column_text16() is called.  A zero-terminator might</Line>
  <Line number="4950">**      need to be added to the string.&lt;/li&gt;</Line>
  <Line number="4951">** &lt;li&gt; The initial content is UTF-8 text and sqlite3_column_bytes16() or</Line>
  <Line number="4952">**      sqlite3_column_text16() is called.  The content must be converted</Line>
  <Line number="4953">**      to UTF-16.&lt;/li&gt;</Line>
  <Line number="4954">** &lt;li&gt; The initial content is UTF-16 text and sqlite3_column_bytes() or</Line>
  <Line number="4955">**      sqlite3_column_text() is called.  The content must be converted</Line>
  <Line number="4956">**      to UTF-8.&lt;/li&gt;</Line>
  <Line number="4957">** &lt;/ul&gt;</Line>
  <Line number="4958">**</Line>
  <Line number="4959">** ^Conversions between UTF-16be and UTF-16le are always done in place and do</Line>
  <Line number="4960">** not invalidate a prior pointer, though of course the content of the buffer</Line>
  <Line number="4961">** that the prior pointer references will have been modified.  Other kinds</Line>
  <Line number="4962">** of conversion are done in place when it is possible, but sometimes they</Line>
  <Line number="4963">** are not possible and in those cases prior pointers are invalidated.</Line>
  <Line number="4964">**</Line>
  <Line number="4965">** The safest policy is to invoke these routines</Line>
  <Line number="4966">** in one of the following ways:</Line>
  <Line number="4967">**</Line>
  <Line number="4968">** &lt;ul&gt;</Line>
  <Line number="4969">**  &lt;li&gt;sqlite3_column_text() followed by sqlite3_column_bytes()&lt;/li&gt;</Line>
  <Line number="4970">**  &lt;li&gt;sqlite3_column_blob() followed by sqlite3_column_bytes()&lt;/li&gt;</Line>
  <Line number="4971">**  &lt;li&gt;sqlite3_column_text16() followed by sqlite3_column_bytes16()&lt;/li&gt;</Line>
  <Line number="4972">** &lt;/ul&gt;</Line>
  <Line number="4973">**</Line>
  <Line number="4974">** In other words, you should call sqlite3_column_text(),</Line>
  <Line number="4975">** sqlite3_column_blob(), or sqlite3_column_text16() first to force the result</Line>
  <Line number="4976">** into the desired format, then invoke sqlite3_column_bytes() or</Line>
  <Line number="4977">** sqlite3_column_bytes16() to find the size of the result.  Do not mix calls</Line>
  <Line number="4978">** to sqlite3_column_text() or sqlite3_column_blob() with calls to</Line>
  <Line number="4979">** sqlite3_column_bytes16(), and do not mix calls to sqlite3_column_text16()</Line>
  <Line number="4980">** with calls to sqlite3_column_bytes().</Line>
  <Line number="4981">**</Line>
  <Line number="4982">** ^The pointers returned are valid until a type conversion occurs as</Line>
  <Line number="4983">** described above, or until [sqlite3_step()] or [sqlite3_reset()] or</Line>
  <Line number="4984">** [sqlite3_finalize()] is called.  ^The memory space used to hold strings</Line>
  <Line number="4985">** and BLOBs is freed automatically.  Do not pass the pointers returned</Line>
  <Line number="4986">** from [sqlite3_column_blob()], [sqlite3_column_text()], etc. into</Line>
  <Line number="4987">** [sqlite3_free()].</Line>
  <Line number="4988">**</Line>
  <Line number="4989">** As long as the input parameters are correct, these routines will only</Line>
  <Line number="4990">** fail if an out-of-memory error occurs during a format conversion.</Line>
  <Line number="4991">** Only the following subset of interfaces are subject to out-of-memory</Line>
  <Line number="4992">** errors:</Line>
  <Line number="4993">**</Line>
  <Line number="4994">** &lt;ul&gt;</Line>
  <Line number="4995">** &lt;li&gt; sqlite3_column_blob()</Line>
  <Line number="4996">** &lt;li&gt; sqlite3_column_text()</Line>
  <Line number="4997">** &lt;li&gt; sqlite3_column_text16()</Line>
  <Line number="4998">** &lt;li&gt; sqlite3_column_bytes()</Line>
  <Line number="4999">** &lt;li&gt; sqlite3_column_bytes16()</Line>
  <Line number="5000">** &lt;/ul&gt;</Line>
  <Line number="5001">**</Line>
  <Line number="5002">** If an out-of-memory error occurs, then the return value from these</Line>
  <Line number="5003">** routines is the same as if the column had contained an SQL NULL value.</Line>
  <Line number="5004">** Valid SQL NULL returns can be distinguished from out-of-memory errors</Line>
  <Line number="5005">** by invoking the [sqlite3_errcode()] immediately after the suspect</Line>
  <Line number="5006">** return value is obtained and before any</Line>
  <Line number="5007">** other SQLite interface is called on the same [database connection].</Line>
  <Line number="5008">*/</Line>
  <Line number="5009">SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);</Line>
  <Line number="5010">SQLITE_API double sqlite3_column_double(sqlite3_stmt*, int iCol);</Line>
  <Line number="5011">SQLITE_API int sqlite3_column_int(sqlite3_stmt*, int iCol);</Line>
  <Line number="5012">SQLITE_API sqlite3_int64 sqlite3_column_int64(sqlite3_stmt*, int iCol);</Line>
  <Line number="5013">SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);</Line>
  <Line number="5014">SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);</Line>
  <Line number="5015">SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt*, int iCol);</Line>
  <Line number="5016">SQLITE_API int sqlite3_column_bytes(sqlite3_stmt*, int iCol);</Line>
  <Line number="5017">SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);</Line>
  <Line number="5018">SQLITE_API int sqlite3_column_type(sqlite3_stmt*, int iCol);</Line>
  <Line number="5019"></Line>
  <Line number="5020">/*</Line>
  <Line number="5021">** CAPI3REF: Destroy A Prepared Statement Object</Line>
  <Line number="5022">** DESTRUCTOR: sqlite3_stmt</Line>
  <Line number="5023">**</Line>
  <Line number="5024">** ^The sqlite3_finalize() function is called to delete a [prepared statement].</Line>
  <Line number="5025">** ^If the most recent evaluation of the statement encountered no errors</Line>
  <Line number="5026">** or if the statement is never been evaluated, then sqlite3_finalize() returns</Line>
  <Line number="5027">** SQLITE_OK.  ^If the most recent evaluation of statement S failed, then</Line>
  <Line number="5028">** sqlite3_finalize(S) returns the appropriate [error code] or</Line>
  <Line number="5029">** [extended error code].</Line>
  <Line number="5030">**</Line>
  <Line number="5031">** ^The sqlite3_finalize(S) routine can be called at any point during</Line>
  <Line number="5032">** the life cycle of [prepared statement] S:</Line>
  <Line number="5033">** before statement S is ever evaluated, after</Line>
  <Line number="5034">** one or more calls to [sqlite3_reset()], or after any call</Line>
  <Line number="5035">** to [sqlite3_step()] regardless of whether or not the statement has</Line>
  <Line number="5036">** completed execution.</Line>
  <Line number="5037">**</Line>
  <Line number="5038">** ^Invoking sqlite3_finalize() on a NULL pointer is a harmless no-op.</Line>
  <Line number="5039">**</Line>
  <Line number="5040">** The application must finalize every [prepared statement] in order to avoid</Line>
  <Line number="5041">** resource leaks.  It is a grievous error for the application to try to use</Line>
  <Line number="5042">** a prepared statement after it has been finalized.  Any use of a prepared</Line>
  <Line number="5043">** statement after it has been finalized can result in undefined and</Line>
  <Line number="5044">** undesirable behavior such as segfaults and heap corruption.</Line>
  <Line number="5045">*/</Line>
  <Line number="5046">SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt);</Line>
  <Line number="5047"></Line>
  <Line number="5048">/*</Line>
  <Line number="5049">** CAPI3REF: Reset A Prepared Statement Object</Line>
  <Line number="5050">** METHOD: sqlite3_stmt</Line>
  <Line number="5051">**</Line>
  <Line number="5052">** The sqlite3_reset() function is called to reset a [prepared statement]</Line>
  <Line number="5053">** object back to its initial state, ready to be re-executed.</Line>
  <Line number="5054">** ^Any SQL statement variables that had values bound to them using</Line>
  <Line number="5055">** the [sqlite3_bind_blob | sqlite3_bind_*() API] retain their values.</Line>
  <Line number="5056">** Use [sqlite3_clear_bindings()] to reset the bindings.</Line>
  <Line number="5057">**</Line>
  <Line number="5058">** ^The [sqlite3_reset(S)] interface resets the [prepared statement] S</Line>
  <Line number="5059">** back to the beginning of its program.</Line>
  <Line number="5060">**</Line>
  <Line number="5061">** ^If the most recent call to [sqlite3_step(S)] for the</Line>
  <Line number="5062">** [prepared statement] S returned [SQLITE_ROW] or [SQLITE_DONE],</Line>
  <Line number="5063">** or if [sqlite3_step(S)] has never before been called on S,</Line>
  <Line number="5064">** then [sqlite3_reset(S)] returns [SQLITE_OK].</Line>
  <Line number="5065">**</Line>
  <Line number="5066">** ^If the most recent call to [sqlite3_step(S)] for the</Line>
  <Line number="5067">** [prepared statement] S indicated an error, then</Line>
  <Line number="5068">** [sqlite3_reset(S)] returns an appropriate [error code].</Line>
  <Line number="5069">**</Line>
  <Line number="5070">** ^The [sqlite3_reset(S)] interface does not change the values</Line>
  <Line number="5071">** of any [sqlite3_bind_blob|bindings] on the [prepared statement] S.</Line>
  <Line number="5072">*/</Line>
  <Line number="5073">SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt);</Line>
  <Line number="5074"></Line>
  <Line number="5075">/*</Line>
  <Line number="5076">** CAPI3REF: Create Or Redefine SQL Functions</Line>
  <Line number="5077">** KEYWORDS: {function creation routines}</Line>
  <Line number="5078">** METHOD: sqlite3</Line>
  <Line number="5079">**</Line>
  <Line number="5080">** ^These functions (collectively known as &quot;function creation routines&quot;)</Line>
  <Line number="5081">** are used to add SQL functions or aggregates or to redefine the behavior</Line>
  <Line number="5082">** of existing SQL functions or aggregates. The only differences between</Line>
  <Line number="5083">** the three &quot;sqlite3_create_function*&quot; routines are the text encoding</Line>
  <Line number="5084">** expected for the second parameter (the name of the function being</Line>
  <Line number="5085">** created) and the presence or absence of a destructor callback for</Line>
  <Line number="5086">** the application data pointer. Function sqlite3_create_window_function()</Line>
  <Line number="5087">** is similar, but allows the user to supply the extra callback functions</Line>
  <Line number="5088">** needed by [aggregate window functions].</Line>
  <Line number="5089">**</Line>
  <Line number="5090">** ^The first parameter is the [database connection] to which the SQL</Line>
  <Line number="5091">** function is to be added.  ^If an application uses more than one database</Line>
  <Line number="5092">** connection then application-defined SQL functions must be added</Line>
  <Line number="5093">** to each database connection separately.</Line>
  <Line number="5094">**</Line>
  <Line number="5095">** ^The second parameter is the name of the SQL function to be created or</Line>
  <Line number="5096">** redefined.  ^The length of the name is limited to 255 bytes in a UTF-8</Line>
  <Line number="5097">** representation, exclusive of the zero-terminator.  ^Note that the name</Line>
  <Line number="5098">** length limit is in UTF-8 bytes, not characters nor UTF-16 bytes.</Line>
  <Line number="5099">** ^Any attempt to create a function with a longer name</Line>
  <Line number="5100">** will result in [SQLITE_MISUSE] being returned.</Line>
  <Line number="5101">**</Line>
  <Line number="5102">** ^The third parameter (nArg)</Line>
  <Line number="5103">** is the number of arguments that the SQL function or</Line>
  <Line number="5104">** aggregate takes. ^If this parameter is -1, then the SQL function or</Line>
  <Line number="5105">** aggregate may take any number of arguments between 0 and the limit</Line>
  <Line number="5106">** set by [sqlite3_limit]([SQLITE_LIMIT_FUNCTION_ARG]).  If the third</Line>
  <Line number="5107">** parameter is less than -1 or greater than 127 then the behavior is</Line>
  <Line number="5108">** undefined.</Line>
  <Line number="5109">**</Line>
  <Line number="5110">** ^The fourth parameter, eTextRep, specifies what</Line>
  <Line number="5111">** [SQLITE_UTF8 | text encoding] this SQL function prefers for</Line>
  <Line number="5112">** its parameters.  The application should set this parameter to</Line>
  <Line number="5113">** [SQLITE_UTF16LE] if the function implementation invokes</Line>
  <Line number="5114">** [sqlite3_value_text16le()] on an input, or [SQLITE_UTF16BE] if the</Line>
  <Line number="5115">** implementation invokes [sqlite3_value_text16be()] on an input, or</Line>
  <Line number="5116">** [SQLITE_UTF16] if [sqlite3_value_text16()] is used, or [SQLITE_UTF8]</Line>
  <Line number="5117">** otherwise.  ^The same SQL function may be registered multiple times using</Line>
  <Line number="5118">** different preferred text encodings, with different implementations for</Line>
  <Line number="5119">** each encoding.</Line>
  <Line number="5120">** ^When multiple implementations of the same function are available, SQLite</Line>
  <Line number="5121">** will pick the one that involves the least amount of data conversion.</Line>
  <Line number="5122">**</Line>
  <Line number="5123">** ^The fourth parameter may optionally be ORed with [SQLITE_DETERMINISTIC]</Line>
  <Line number="5124">** to signal that the function will always return the same result given</Line>
  <Line number="5125">** the same inputs within a single SQL statement.  Most SQL functions are</Line>
  <Line number="5126">** deterministic.  The built-in [random()] SQL function is an example of a</Line>
  <Line number="5127">** function that is not deterministic.  The SQLite query planner is able to</Line>
  <Line number="5128">** perform additional optimizations on deterministic functions, so use</Line>
  <Line number="5129">** of the [SQLITE_DETERMINISTIC] flag is recommended where possible.</Line>
  <Line number="5130">**</Line>
  <Line number="5131">** ^The fourth parameter may also optionally include the [SQLITE_DIRECTONLY]</Line>
  <Line number="5132">** flag, which if present prevents the function from being invoked from</Line>
  <Line number="5133">** within VIEWs, TRIGGERs, CHECK constraints, generated column expressions,</Line>
  <Line number="5134">** index expressions, or the WHERE clause of partial indexes.</Line>
  <Line number="5135">**</Line>
  <Line number="5136">** For best security, the [SQLITE_DIRECTONLY] flag is recommended for</Line>
  <Line number="5137">** all application-defined SQL functions that do not need to be</Line>
  <Line number="5138">** used inside of triggers, view, CHECK constraints, or other elements of</Line>
  <Line number="5139">** the database schema.  This flags is especially recommended for SQL</Line>
  <Line number="5140">** functions that have side effects or reveal internal application state.</Line>
  <Line number="5141">** Without this flag, an attacker might be able to modify the schema of</Line>
  <Line number="5142">** a database file to include invocations of the function with parameters</Line>
  <Line number="5143">** chosen by the attacker, which the application will then execute when</Line>
  <Line number="5144">** the database file is opened and read.</Line>
  <Line number="5145">**</Line>
  <Line number="5146">** ^(The fifth parameter is an arbitrary pointer.  The implementation of the</Line>
  <Line number="5147">** function can gain access to this pointer using [sqlite3_user_data()].)^</Line>
  <Line number="5148">**</Line>
  <Line number="5149">** ^The sixth, seventh and eighth parameters passed to the three</Line>
  <Line number="5150">** &quot;sqlite3_create_function*&quot; functions, xFunc, xStep and xFinal, are</Line>
  <Line number="5151">** pointers to C-language functions that implement the SQL function or</Line>
  <Line number="5152">** aggregate. ^A scalar SQL function requires an implementation of the xFunc</Line>
  <Line number="5153">** callback only; NULL pointers must be passed as the xStep and xFinal</Line>
  <Line number="5154">** parameters. ^An aggregate SQL function requires an implementation of xStep</Line>
  <Line number="5155">** and xFinal and NULL pointer must be passed for xFunc. ^To delete an existing</Line>
  <Line number="5156">** SQL function or aggregate, pass NULL pointers for all three function</Line>
  <Line number="5157">** callbacks.</Line>
  <Line number="5158">**</Line>
  <Line number="5159">** ^The sixth, seventh, eighth and ninth parameters (xStep, xFinal, xValue</Line>
  <Line number="5160">** and xInverse) passed to sqlite3_create_window_function are pointers to</Line>
  <Line number="5161">** C-language callbacks that implement the new function. xStep and xFinal</Line>
  <Line number="5162">** must both be non-NULL. xValue and xInverse may either both be NULL, in</Line>
  <Line number="5163">** which case a regular aggregate function is created, or must both be</Line>
  <Line number="5164">** non-NULL, in which case the new function may be used as either an aggregate</Line>
  <Line number="5165">** or aggregate window function. More details regarding the implementation</Line>
  <Line number="5166">** of aggregate window functions are</Line>
  <Line number="5167">** [user-defined window functions|available here].</Line>
  <Line number="5168">**</Line>
  <Line number="5169">** ^(If the final parameter to sqlite3_create_function_v2() or</Line>
  <Line number="5170">** sqlite3_create_window_function() is not NULL, then it is destructor for</Line>
  <Line number="5171">** the application data pointer. The destructor is invoked when the function</Line>
  <Line number="5172">** is deleted, either by being overloaded or when the database connection</Line>
  <Line number="5173">** closes.)^ ^The destructor is also invoked if the call to</Line>
  <Line number="5174">** sqlite3_create_function_v2() fails.  ^When the destructor callback is</Line>
  <Line number="5175">** invoked, it is passed a single argument which is a copy of the application</Line>
  <Line number="5176">** data pointer which was the fifth parameter to sqlite3_create_function_v2().</Line>
  <Line number="5177">**</Line>
  <Line number="5178">** ^It is permitted to register multiple implementations of the same</Line>
  <Line number="5179">** functions with the same name but with either differing numbers of</Line>
  <Line number="5180">** arguments or differing preferred text encodings.  ^SQLite will use</Line>
  <Line number="5181">** the implementation that most closely matches the way in which the</Line>
  <Line number="5182">** SQL function is used.  ^A function implementation with a non-negative</Line>
  <Line number="5183">** nArg parameter is a better match than a function implementation with</Line>
  <Line number="5184">** a negative nArg.  ^A function where the preferred text encoding</Line>
  <Line number="5185">** matches the database encoding is a better</Line>
  <Line number="5186">** match than a function where the encoding is different.</Line>
  <Line number="5187">** ^A function where the encoding difference is between UTF16le and UTF16be</Line>
  <Line number="5188">** is a closer match than a function where the encoding difference is</Line>
  <Line number="5189">** between UTF8 and UTF16.</Line>
  <Line number="5190">**</Line>
  <Line number="5191">** ^Built-in functions may be overloaded by new application-defined functions.</Line>
  <Line number="5192">**</Line>
  <Line number="5193">** ^An application-defined function is permitted to call other</Line>
  <Line number="5194">** SQLite interfaces.  However, such calls must not</Line>
  <Line number="5195">** close the database connection nor finalize or reset the prepared</Line>
  <Line number="5196">** statement in which the function is running.</Line>
  <Line number="5197">*/</Line>
  <Line number="5198">SQLITE_API int sqlite3_create_function(</Line>
  <Line number="5199">  sqlite3 *db,</Line>
  <Line number="5200">  const char *zFunctionName,</Line>
  <Line number="5201">  int nArg,</Line>
  <Line number="5202">  int eTextRep,</Line>
  <Line number="5203">  void *pApp,</Line>
  <Line number="5204">  void (*xFunc)(sqlite3_context*,int,sqlite3_value**),</Line>
  <Line number="5205">  void (*xStep)(sqlite3_context*,int,sqlite3_value**),</Line>
  <Line number="5206">  void (*xFinal)(sqlite3_context*)</Line>
  <Line number="5207">);</Line>
  <Line number="5208">SQLITE_API int sqlite3_create_function16(</Line>
  <Line number="5209">  sqlite3 *db,</Line>
  <Line number="5210">  const void *zFunctionName,</Line>
  <Line number="5211">  int nArg,</Line>
  <Line number="5212">  int eTextRep,</Line>
  <Line number="5213">  void *pApp,</Line>
  <Line number="5214">  void (*xFunc)(sqlite3_context*,int,sqlite3_value**),</Line>
  <Line number="5215">  void (*xStep)(sqlite3_context*,int,sqlite3_value**),</Line>
  <Line number="5216">  void (*xFinal)(sqlite3_context*)</Line>
  <Line number="5217">);</Line>
  <Line number="5218">SQLITE_API int sqlite3_create_function_v2(</Line>
  <Line number="5219">  sqlite3 *db,</Line>
  <Line number="5220">  const char *zFunctionName,</Line>
  <Line number="5221">  int nArg,</Line>
  <Line number="5222">  int eTextRep,</Line>
  <Line number="5223">  void *pApp,</Line>
  <Line number="5224">  void (*xFunc)(sqlite3_context*,int,sqlite3_value**),</Line>
  <Line number="5225">  void (*xStep)(sqlite3_context*,int,sqlite3_value**),</Line>
  <Line number="5226">  void (*xFinal)(sqlite3_context*),</Line>
  <Line number="5227">  void(*xDestroy)(void*)</Line>
  <Line number="5228">);</Line>
  <Line number="5229">SQLITE_API int sqlite3_create_window_function(</Line>
  <Line number="5230">  sqlite3 *db,</Line>
  <Line number="5231">  const char *zFunctionName,</Line>
  <Line number="5232">  int nArg,</Line>
  <Line number="5233">  int eTextRep,</Line>
  <Line number="5234">  void *pApp,</Line>
  <Line number="5235">  void (*xStep)(sqlite3_context*,int,sqlite3_value**),</Line>
  <Line number="5236">  void (*xFinal)(sqlite3_context*),</Line>
  <Line number="5237">  void (*xValue)(sqlite3_context*),</Line>
  <Line number="5238">  void (*xInverse)(sqlite3_context*,int,sqlite3_value**),</Line>
  <Line number="5239">  void(*xDestroy)(void*)</Line>
  <Line number="5240">);</Line>
  <Line number="5241"></Line>
  <Line number="5242">/*</Line>
  <Line number="5243">** CAPI3REF: Text Encodings</Line>
  <Line number="5244">**</Line>
  <Line number="5245">** These constant define integer codes that represent the various</Line>
  <Line number="5246">** text encodings supported by SQLite.</Line>
  <Line number="5247">*/</Line>
  <Line number="5248">#define SQLITE_UTF8           1    /* IMP: R-37514-35566 */</Line>
  <Line number="5249">#define SQLITE_UTF16LE        2    /* IMP: R-03371-37637 */</Line>
  <Line number="5250">#define SQLITE_UTF16BE        3    /* IMP: R-51971-34154 */</Line>
  <Line number="5251">#define SQLITE_UTF16          4    /* Use native byte order */</Line>
  <Line number="5252">#define SQLITE_ANY            5    /* Deprecated */</Line>
  <Line number="5253">#define SQLITE_UTF16_ALIGNED  8    /* sqlite3_create_collation only */</Line>
  <Line number="5254"></Line>
  <Line number="5255">/*</Line>
  <Line number="5256">** CAPI3REF: Function Flags</Line>
  <Line number="5257">**</Line>
  <Line number="5258">** These constants may be ORed together with the</Line>
  <Line number="5259">** [SQLITE_UTF8 | preferred text encoding] as the fourth argument</Line>
  <Line number="5260">** to [sqlite3_create_function()], [sqlite3_create_function16()], or</Line>
  <Line number="5261">** [sqlite3_create_function_v2()].</Line>
  <Line number="5262">**</Line>
  <Line number="5263">** &lt;dl&gt;</Line>
  <Line number="5264">** [[SQLITE_DETERMINISTIC]] &lt;dt&gt;SQLITE_DETERMINISTIC&lt;/dt&gt;&lt;dd&gt;</Line>
  <Line number="5265">** The SQLITE_DETERMINISTIC flag means that the new function always gives</Line>
  <Line number="5266">** the same output when the input parameters are the same.</Line>
  <Line number="5267">** The [abs|abs() function] is deterministic, for example, but</Line>
  <Line number="5268">** [randomblob|randomblob()] is not.  Functions must</Line>
  <Line number="5269">** be deterministic in order to be used in certain contexts such as</Line>
  <Line number="5270">** with the WHERE clause of [partial indexes] or in [generated columns].</Line>
  <Line number="5271">** SQLite might also optimize deterministic functions by factoring them</Line>
  <Line number="5272">** out of inner loops.</Line>
  <Line number="5273">** &lt;/dd&gt;</Line>
  <Line number="5274">**</Line>
  <Line number="5275">** [[SQLITE_DIRECTONLY]] &lt;dt&gt;SQLITE_DIRECTONLY&lt;/dt&gt;&lt;dd&gt;</Line>
  <Line number="5276">** The SQLITE_DIRECTONLY flag means that the function may only be invoked</Line>
  <Line number="5277">** from top-level SQL, and cannot be used in VIEWs or TRIGGERs nor in</Line>
  <Line number="5278">** schema structures such as [CHECK constraints], [DEFAULT clauses],</Line>
  <Line number="5279">** [expression indexes], [partial indexes], or [generated columns].</Line>
  <Line number="5280">** The SQLITE_DIRECTONLY flags is a security feature which is recommended</Line>
  <Line number="5281">** for all [application-defined SQL functions], and especially for functions</Line>
  <Line number="5282">** that have side-effects or that could potentially leak sensitive</Line>
  <Line number="5283">** information.</Line>
  <Line number="5284">** &lt;/dd&gt;</Line>
  <Line number="5285">**</Line>
  <Line number="5286">** [[SQLITE_INNOCUOUS]] &lt;dt&gt;SQLITE_INNOCUOUS&lt;/dt&gt;&lt;dd&gt;</Line>
  <Line number="5287">** The SQLITE_INNOCUOUS flag means that the function is unlikely</Line>
  <Line number="5288">** to cause problems even if misused.  An innocuous function should have</Line>
  <Line number="5289">** no side effects and should not depend on any values other than its</Line>
  <Line number="5290">** input parameters. The [abs|abs() function] is an example of an</Line>
  <Line number="5291">** innocuous function.</Line>
  <Line number="5292">** The [load_extension() SQL function] is not innocuous because of its</Line>
  <Line number="5293">** side effects.</Line>
  <Line number="5294">** &lt;p&gt; SQLITE_INNOCUOUS is similar to SQLITE_DETERMINISTIC, but is not</Line>
  <Line number="5295">** exactly the same.  The [random|random() function] is an example of a</Line>
  <Line number="5296">** function that is innocuous but not deterministic.</Line>
  <Line number="5297">** &lt;p&gt;Some heightened security settings</Line>
  <Line number="5298">** ([SQLITE_DBCONFIG_TRUSTED_SCHEMA] and [PRAGMA trusted_schema=OFF])</Line>
  <Line number="5299">** disable the use of SQL functions inside views and triggers and in</Line>
  <Line number="5300">** schema structures such as [CHECK constraints], [DEFAULT clauses],</Line>
  <Line number="5301">** [expression indexes], [partial indexes], and [generated columns] unless</Line>
  <Line number="5302">** the function is tagged with SQLITE_INNOCUOUS.  Most built-in functions</Line>
  <Line number="5303">** are innocuous.  Developers are advised to avoid using the</Line>
  <Line number="5304">** SQLITE_INNOCUOUS flag for application-defined functions unless the</Line>
  <Line number="5305">** function has been carefully audited and found to be free of potentially</Line>
  <Line number="5306">** security-adverse side-effects and information-leaks.</Line>
  <Line number="5307">** &lt;/dd&gt;</Line>
  <Line number="5308">**</Line>
  <Line number="5309">** [[SQLITE_SUBTYPE]] &lt;dt&gt;SQLITE_SUBTYPE&lt;/dt&gt;&lt;dd&gt;</Line>
  <Line number="5310">** The SQLITE_SUBTYPE flag indicates to SQLite that a function may call</Line>
  <Line number="5311">** [sqlite3_value_subtype()] to inspect the sub-types of its arguments.</Line>
  <Line number="5312">** Specifying this flag makes no difference for scalar or aggregate user</Line>
  <Line number="5313">** functions. However, if it is not specified for a user-defined window</Line>
  <Line number="5314">** function, then any sub-types belonging to arguments passed to the window</Line>
  <Line number="5315">** function may be discarded before the window function is called (i.e.</Line>
  <Line number="5316">** sqlite3_value_subtype() will always return 0).</Line>
  <Line number="5317">** &lt;/dd&gt;</Line>
  <Line number="5318">** &lt;/dl&gt;</Line>
  <Line number="5319">*/</Line>
  <Line number="5320">#define SQLITE_DETERMINISTIC    0x000000800</Line>
  <Line number="5321">#define SQLITE_DIRECTONLY       0x000080000</Line>
  <Line number="5322">#define SQLITE_SUBTYPE          0x000100000</Line>
  <Line number="5323">#define SQLITE_INNOCUOUS        0x000200000</Line>
  <Line number="5324"></Line>
  <Line number="5325">/*</Line>
  <Line number="5326">** CAPI3REF: Deprecated Functions</Line>
  <Line number="5327">** DEPRECATED</Line>
  <Line number="5328">**</Line>
  <Line number="5329">** These functions are [deprecated].  In order to maintain</Line>
  <Line number="5330">** backwards compatibility with older code, these functions continue</Line>
  <Line number="5331">** to be supported.  However, new applications should avoid</Line>
  <Line number="5332">** the use of these functions.  To encourage programmers to avoid</Line>
  <Line number="5333">** these functions, we will not explain what they do.</Line>
  <Line number="5334">*/</Line>
  <Line number="5335">#ifndef SQLITE_OMIT_DEPRECATED</Line>
  <Line number="5336">SQLITE_API SQLITE_DEPRECATED int sqlite3_aggregate_count(sqlite3_context*);</Line>
  <Line number="5337">SQLITE_API SQLITE_DEPRECATED int sqlite3_expired(sqlite3_stmt*);</Line>
  <Line number="5338">SQLITE_API SQLITE_DEPRECATED int sqlite3_transfer_bindings(sqlite3_stmt*, sqlite3_stmt*);</Line>
  <Line number="5339">SQLITE_API SQLITE_DEPRECATED int sqlite3_global_recover(void);</Line>
  <Line number="5340">SQLITE_API SQLITE_DEPRECATED void sqlite3_thread_cleanup(void);</Line>
  <Line number="5341">SQLITE_API SQLITE_DEPRECATED int sqlite3_memory_alarm(void(*)(void*,sqlite3_int64,int),</Line>
  <Line number="5342">                      void*,sqlite3_int64);</Line>
  <Line number="5343">#endif</Line>
  <Line number="5344"></Line>
  <Line number="5345">/*</Line>
  <Line number="5346">** CAPI3REF: Obtaining SQL Values</Line>
  <Line number="5347">** METHOD: sqlite3_value</Line>
  <Line number="5348">**</Line>
  <Line number="5349">** &lt;b&gt;Summary:&lt;/b&gt;</Line>
  <Line number="5350">** &lt;blockquote&gt;&lt;table border=0 cellpadding=0 cellspacing=0&gt;</Line>
  <Line number="5351">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_blob&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;BLOB value</Line>
  <Line number="5352">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_double&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;REAL value</Line>
  <Line number="5353">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_int&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;32-bit INTEGER value</Line>
  <Line number="5354">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_int64&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;64-bit INTEGER value</Line>
  <Line number="5355">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_pointer&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Pointer value</Line>
  <Line number="5356">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-8 TEXT value</Line>
  <Line number="5357">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text16&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-16 TEXT value in</Line>
  <Line number="5358">** the native byteorder</Line>
  <Line number="5359">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text16be&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-16be TEXT value</Line>
  <Line number="5360">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text16le&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-16le TEXT value</Line>
  <Line number="5361">** &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;td&gt;&amp;nbsp;&lt;td&gt;&amp;nbsp;</Line>
  <Line number="5362">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_bytes&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Size of a BLOB</Line>
  <Line number="5363">** or a UTF-8 TEXT in bytes</Line>
  <Line number="5364">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_bytes16&amp;nbsp;&amp;nbsp;&lt;/b&gt;</Line>
  <Line number="5365">** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;Size of UTF-16</Line>
  <Line number="5366">** TEXT in bytes</Line>
  <Line number="5367">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_type&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Default</Line>
  <Line number="5368">** datatype of the value</Line>
  <Line number="5369">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_numeric_type&amp;nbsp;&amp;nbsp;&lt;/b&gt;</Line>
  <Line number="5370">** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;Best numeric datatype of the value</Line>
  <Line number="5371">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_nochange&amp;nbsp;&amp;nbsp;&lt;/b&gt;</Line>
  <Line number="5372">** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;True if the column is unchanged in an UPDATE</Line>
  <Line number="5373">** against a virtual table.</Line>
  <Line number="5374">** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_frombind&amp;nbsp;&amp;nbsp;&lt;/b&gt;</Line>
  <Line number="5375">** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;True if value originated from a [bound parameter]</Line>
  <Line number="5376">** &lt;/table&gt;&lt;/blockquote&gt;</Line>
  <Line number="5377">**</Line>
  <Line number="5378">** &lt;b&gt;Details:&lt;/b&gt;</Line>
  <Line number="5379">**</Line>
  <Line number="5380">** These routines extract type, size, and content information from</Line>
  <Line number="5381">** [protected sqlite3_value] objects.  Protected sqlite3_value objects</Line>
  <Line number="5382">** are used to pass parameter information into the functions that</Line>
  <Line number="5383">** implement [application-defined SQL functions] and [virtual tables].</Line>
  <Line number="5384">**</Line>
  <Line number="5385">** These routines work only with [protected sqlite3_value] objects.</Line>
  <Line number="5386">** Any attempt to use these routines on an [unprotected sqlite3_value]</Line>
  <Line number="5387">** is not threadsafe.</Line>
  <Line number="5388">**</Line>
  <Line number="5389">** ^These routines work just like the corresponding [column access functions]</Line>
  <Line number="5390">** except that these routines take a single [protected sqlite3_value] object</Line>
  <Line number="5391">** pointer instead of a [sqlite3_stmt*] pointer and an integer column number.</Line>
  <Line number="5392">**</Line>
  <Line number="5393">** ^The sqlite3_value_text16() interface extracts a UTF-16 string</Line>
  <Line number="5394">** in the native byte-order of the host machine.  ^The</Line>
  <Line number="5395">** sqlite3_value_text16be() and sqlite3_value_text16le() interfaces</Line>
  <Line number="5396">** extract UTF-16 strings as big-endian and little-endian respectively.</Line>
  <Line number="5397">**</Line>
  <Line number="5398">** ^If [sqlite3_value] object V was initialized</Line>
  <Line number="5399">** using [sqlite3_bind_pointer(S,I,P,X,D)] or [sqlite3_result_pointer(C,P,X,D)]</Line>
  <Line number="5400">** and if X and Y are strings that compare equal according to strcmp(X,Y),</Line>
  <Line number="5401">** then sqlite3_value_pointer(V,Y) will return the pointer P.  ^Otherwise,</Line>
  <Line number="5402">** sqlite3_value_pointer(V,Y) returns a NULL. The sqlite3_bind_pointer()</Line>
  <Line number="5403">** routine is part of the [pointer passing interface] added for SQLite 3.20.0.</Line>
  <Line number="5404">**</Line>
  <Line number="5405">** ^(The sqlite3_value_type(V) interface returns the</Line>
  <Line number="5406">** [SQLITE_INTEGER | datatype code] for the initial datatype of the</Line>
  <Line number="5407">** [sqlite3_value] object V. The returned value is one of [SQLITE_INTEGER],</Line>
  <Line number="5408">** [SQLITE_FLOAT], [SQLITE_TEXT], [SQLITE_BLOB], or [SQLITE_NULL].)^</Line>
  <Line number="5409">** Other interfaces might change the datatype for an sqlite3_value object.</Line>
  <Line number="5410">** For example, if the datatype is initially SQLITE_INTEGER and</Line>
  <Line number="5411">** sqlite3_value_text(V) is called to extract a text value for that</Line>
  <Line number="5412">** integer, then subsequent calls to sqlite3_value_type(V) might return</Line>
  <Line number="5413">** SQLITE_TEXT.  Whether or not a persistent internal datatype conversion</Line>
  <Line number="5414">** occurs is undefined and may change from one release of SQLite to the next.</Line>
  <Line number="5415">**</Line>
  <Line number="5416">** ^(The sqlite3_value_numeric_type() interface attempts to apply</Line>
  <Line number="5417">** numeric affinity to the value.  This means that an attempt is</Line>
  <Line number="5418">** made to convert the value to an integer or floating point.  If</Line>
  <Line number="5419">** such a conversion is possible without loss of information (in other</Line>
  <Line number="5420">** words, if the value is a string that looks like a number)</Line>
  <Line number="5421">** then the conversion is performed.  Otherwise no conversion occurs.</Line>
  <Line number="5422">** The [SQLITE_INTEGER | datatype] after conversion is returned.)^</Line>
  <Line number="5423">**</Line>
  <Line number="5424">** ^Within the [xUpdate] method of a [virtual table], the</Line>
  <Line number="5425">** sqlite3_value_nochange(X) interface returns true if and only if</Line>
  <Line number="5426">** the column corresponding to X is unchanged by the UPDATE operation</Line>
  <Line number="5427">** that the xUpdate method call was invoked to implement and if</Line>
  <Line number="5428">** and the prior [xColumn] method call that was invoked to extracted</Line>
  <Line number="5429">** the value for that column returned without setting a result (probably</Line>
  <Line number="5430">** because it queried [sqlite3_vtab_nochange()] and found that the column</Line>
  <Line number="5431">** was unchanging).  ^Within an [xUpdate] method, any value for which</Line>
  <Line number="5432">** sqlite3_value_nochange(X) is true will in all other respects appear</Line>
  <Line number="5433">** to be a NULL value.  If sqlite3_value_nochange(X) is invoked anywhere other</Line>
  <Line number="5434">** than within an [xUpdate] method call for an UPDATE statement, then</Line>
  <Line number="5435">** the return value is arbitrary and meaningless.</Line>
  <Line number="5436">**</Line>
  <Line number="5437">** ^The sqlite3_value_frombind(X) interface returns non-zero if the</Line>
  <Line number="5438">** value X originated from one of the [sqlite3_bind_int|sqlite3_bind()]</Line>
  <Line number="5439">** interfaces.  ^If X comes from an SQL literal value, or a table column,</Line>
  <Line number="5440">** or an expression, then sqlite3_value_frombind(X) returns zero.</Line>
  <Line number="5441">**</Line>
  <Line number="5442">** Please pay particular attention to the fact that the pointer returned</Line>
  <Line number="5443">** from [sqlite3_value_blob()], [sqlite3_value_text()], or</Line>
  <Line number="5444">** [sqlite3_value_text16()] can be invalidated by a subsequent call to</Line>
  <Line number="5445">** [sqlite3_value_bytes()], [sqlite3_value_bytes16()], [sqlite3_value_text()],</Line>
  <Line number="5446">** or [sqlite3_value_text16()].</Line>
  <Line number="5447">**</Line>
  <Line number="5448">** These routines must be called from the same thread as</Line>
  <Line number="5449">** the SQL function that supplied the [sqlite3_value*] parameters.</Line>
  <Line number="5450">**</Line>
  <Line number="5451">** As long as the input parameter is correct, these routines can only</Line>
  <Line number="5452">** fail if an out-of-memory error occurs during a format conversion.</Line>
  <Line number="5453">** Only the following subset of interfaces are subject to out-of-memory</Line>
  <Line number="5454">** errors:</Line>
  <Line number="5455">**</Line>
  <Line number="5456">** &lt;ul&gt;</Line>
  <Line number="5457">** &lt;li&gt; sqlite3_value_blob()</Line>
  <Line number="5458">** &lt;li&gt; sqlite3_value_text()</Line>
  <Line number="5459">** &lt;li&gt; sqlite3_value_text16()</Line>
  <Line number="5460">** &lt;li&gt; sqlite3_value_text16le()</Line>
  <Line number="5461">** &lt;li&gt; sqlite3_value_text16be()</Line>
  <Line number="5462">** &lt;li&gt; sqlite3_value_bytes()</Line>
  <Line number="5463">** &lt;li&gt; sqlite3_value_bytes16()</Line>
  <Line number="5464">** &lt;/ul&gt;</Line>
  <Line number="5465">**</Line>
  <Line number="5466">** If an out-of-memory error occurs, then the return value from these</Line>
  <Line number="5467">** routines is the same as if the column had contained an SQL NULL value.</Line>
  <Line number="5468">** Valid SQL NULL returns can be distinguished from out-of-memory errors</Line>
  <Line number="5469">** by invoking the [sqlite3_errcode()] immediately after the suspect</Line>
  <Line number="5470">** return value is obtained and before any</Line>
  <Line number="5471">** other SQLite interface is called on the same [database connection].</Line>
  <Line number="5472">*/</Line>
  <Line number="5473">SQLITE_API const void *sqlite3_value_blob(sqlite3_value*);</Line>
  <Line number="5474">SQLITE_API double sqlite3_value_double(sqlite3_value*);</Line>
  <Line number="5475">SQLITE_API int sqlite3_value_int(sqlite3_value*);</Line>
  <Line number="5476">SQLITE_API sqlite3_int64 sqlite3_value_int64(sqlite3_value*);</Line>
  <Line number="5477">SQLITE_API void *sqlite3_value_pointer(sqlite3_value*, const char*);</Line>
  <Line number="5478">SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value*);</Line>
  <Line number="5479">SQLITE_API const void *sqlite3_value_text16(sqlite3_value*);</Line>
  <Line number="5480">SQLITE_API const void *sqlite3_value_text16le(sqlite3_value*);</Line>
  <Line number="5481">SQLITE_API const void *sqlite3_value_text16be(sqlite3_value*);</Line>
  <Line number="5482">SQLITE_API int sqlite3_value_bytes(sqlite3_value*);</Line>
  <Line number="5483">SQLITE_API int sqlite3_value_bytes16(sqlite3_value*);</Line>
  <Line number="5484">SQLITE_API int sqlite3_value_type(sqlite3_value*);</Line>
  <Line number="5485">SQLITE_API int sqlite3_value_numeric_type(sqlite3_value*);</Line>
  <Line number="5486">SQLITE_API int sqlite3_value_nochange(sqlite3_value*);</Line>
  <Line number="5487">SQLITE_API int sqlite3_value_frombind(sqlite3_value*);</Line>
  <Line number="5488"></Line>
  <Line number="5489">/*</Line>
  <Line number="5490">** CAPI3REF: Finding The Subtype Of SQL Values</Line>
  <Line number="5491">** METHOD: sqlite3_value</Line>
  <Line number="5492">**</Line>
  <Line number="5493">** The sqlite3_value_subtype(V) function returns the subtype for</Line>
  <Line number="5494">** an [application-defined SQL function] argument V.  The subtype</Line>
  <Line number="5495">** information can be used to pass a limited amount of context from</Line>
  <Line number="5496">** one SQL function to another.  Use the [sqlite3_result_subtype()]</Line>
  <Line number="5497">** routine to set the subtype for the return value of an SQL function.</Line>
  <Line number="5498">*/</Line>
  <Line number="5499">SQLITE_API unsigned int sqlite3_value_subtype(sqlite3_value*);</Line>
  <Line number="5500"></Line>
  <Line number="5501">/*</Line>
  <Line number="5502">** CAPI3REF: Copy And Free SQL Values</Line>
  <Line number="5503">** METHOD: sqlite3_value</Line>
  <Line number="5504">**</Line>
  <Line number="5505">** ^The sqlite3_value_dup(V) interface makes a copy of the [sqlite3_value]</Line>
  <Line number="5506">** object D and returns a pointer to that copy.  ^The [sqlite3_value] returned</Line>
  <Line number="5507">** is a [protected sqlite3_value] object even if the input is not.</Line>
  <Line number="5508">** ^The sqlite3_value_dup(V) interface returns NULL if V is NULL or if a</Line>
  <Line number="5509">** memory allocation fails.</Line>
  <Line number="5510">**</Line>
  <Line number="5511">** ^The sqlite3_value_free(V) interface frees an [sqlite3_value] object</Line>
  <Line number="5512">** previously obtained from [sqlite3_value_dup()].  ^If V is a NULL pointer</Line>
  <Line number="5513">** then sqlite3_value_free(V) is a harmless no-op.</Line>
  <Line number="5514">*/</Line>
  <Line number="5515">SQLITE_API sqlite3_value *sqlite3_value_dup(const sqlite3_value*);</Line>
  <Line number="5516">SQLITE_API void sqlite3_value_free(sqlite3_value*);</Line>
  <Line number="5517"></Line>
  <Line number="5518">/*</Line>
  <Line number="5519">** CAPI3REF: Obtain Aggregate Function Context</Line>
  <Line number="5520">** METHOD: sqlite3_context</Line>
  <Line number="5521">**</Line>
  <Line number="5522">** Implementations of aggregate SQL functions use this</Line>
  <Line number="5523">** routine to allocate memory for storing their state.</Line>
  <Line number="5524">**</Line>
  <Line number="5525">** ^The first time the sqlite3_aggregate_context(C,N) routine is called</Line>
  <Line number="5526">** for a particular aggregate function, SQLite allocates</Line>
  <Line number="5527">** N bytes of memory, zeroes out that memory, and returns a pointer</Line>
  <Line number="5528">** to the new memory. ^On second and subsequent calls to</Line>
  <Line number="5529">** sqlite3_aggregate_context() for the same aggregate function instance,</Line>
  <Line number="5530">** the same buffer is returned.  Sqlite3_aggregate_context() is normally</Line>
  <Line number="5531">** called once for each invocation of the xStep callback and then one</Line>
  <Line number="5532">** last time when the xFinal callback is invoked.  ^(When no rows match</Line>
  <Line number="5533">** an aggregate query, the xStep() callback of the aggregate function</Line>
  <Line number="5534">** implementation is never called and xFinal() is called exactly once.</Line>
  <Line number="5535">** In those cases, sqlite3_aggregate_context() might be called for the</Line>
  <Line number="5536">** first time from within xFinal().)^</Line>
  <Line number="5537">**</Line>
  <Line number="5538">** ^The sqlite3_aggregate_context(C,N) routine returns a NULL pointer</Line>
  <Line number="5539">** when first called if N is less than or equal to zero or if a memory</Line>
  <Line number="5540">** allocate error occurs.</Line>
  <Line number="5541">**</Line>
  <Line number="5542">** ^(The amount of space allocated by sqlite3_aggregate_context(C,N) is</Line>
  <Line number="5543">** determined by the N parameter on first successful call.  Changing the</Line>
  <Line number="5544">** value of N in any subsequent call to sqlite3_aggregate_context() within</Line>
  <Line number="5545">** the same aggregate function instance will not resize the memory</Line>
  <Line number="5546">** allocation.)^  Within the xFinal callback, it is customary to set</Line>
  <Line number="5547">** N=0 in calls to sqlite3_aggregate_context(C,N) so that no</Line>
  <Line number="5548">** pointless memory allocations occur.</Line>
  <Line number="5549">**</Line>
  <Line number="5550">** ^SQLite automatically frees the memory allocated by</Line>
  <Line number="5551">** sqlite3_aggregate_context() when the aggregate query concludes.</Line>
  <Line number="5552">**</Line>
  <Line number="5553">** The first parameter must be a copy of the</Line>
  <Line number="5554">** [sqlite3_context | SQL function context] that is the first parameter</Line>
  <Line number="5555">** to the xStep or xFinal callback routine that implements the aggregate</Line>
  <Line number="5556">** function.</Line>
  <Line number="5557">**</Line>
  <Line number="5558">** This routine must be called from the same thread in which</Line>
  <Line number="5559">** the aggregate SQL function is running.</Line>
  <Line number="5560">*/</Line>
  <Line number="5561">SQLITE_API void *sqlite3_aggregate_context(sqlite3_context*, int nBytes);</Line>
  <Line number="5562"></Line>
  <Line number="5563">/*</Line>
  <Line number="5564">** CAPI3REF: User Data For Functions</Line>
  <Line number="5565">** METHOD: sqlite3_context</Line>
  <Line number="5566">**</Line>
  <Line number="5567">** ^The sqlite3_user_data() interface returns a copy of</Line>
  <Line number="5568">** the pointer that was the pUserData parameter (the 5th parameter)</Line>
  <Line number="5569">** of the [sqlite3_create_function()]</Line>
  <Line number="5570">** and [sqlite3_create_function16()] routines that originally</Line>
  <Line number="5571">** registered the application defined function.</Line>
  <Line number="5572">**</Line>
  <Line number="5573">** This routine must be called from the same thread in which</Line>
  <Line number="5574">** the application-defined function is running.</Line>
  <Line number="5575">*/</Line>
  <Line number="5576">SQLITE_API void *sqlite3_user_data(sqlite3_context*);</Line>
  <Line number="5577"></Line>
  <Line number="5578">/*</Line>
  <Line number="5579">** CAPI3REF: Database Connection For Functions</Line>
  <Line number="5580">** METHOD: sqlite3_context</Line>
  <Line number="5581">**</Line>
  <Line number="5582">** ^The sqlite3_context_db_handle() interface returns a copy of</Line>
  <Line number="5583">** the pointer to the [database connection] (the 1st parameter)</Line>
  <Line number="5584">** of the [sqlite3_create_function()]</Line>
  <Line number="5585">** and [sqlite3_create_function16()] routines that originally</Line>
  <Line number="5586">** registered the application defined function.</Line>
  <Line number="5587">*/</Line>
  <Line number="5588">SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context*);</Line>
  <Line number="5589"></Line>
  <Line number="5590">/*</Line>
  <Line number="5591">** CAPI3REF: Function Auxiliary Data</Line>
  <Line number="5592">** METHOD: sqlite3_context</Line>
  <Line number="5593">**</Line>
  <Line number="5594">** These functions may be used by (non-aggregate) SQL functions to</Line>
  <Line number="5595">** associate metadata with argument values. If the same value is passed to</Line>
  <Line number="5596">** multiple invocations of the same SQL function during query execution, under</Line>
  <Line number="5597">** some circumstances the associated metadata may be preserved.  An example</Line>
  <Line number="5598">** of where this might be useful is in a regular-expression matching</Line>
  <Line number="5599">** function. The compiled version of the regular expression can be stored as</Line>
  <Line number="5600">** metadata associated with the pattern string.</Line>
  <Line number="5601">** Then as long as the pattern string remains the same,</Line>
  <Line number="5602">** the compiled regular expression can be reused on multiple</Line>
  <Line number="5603">** invocations of the same function.</Line>
  <Line number="5604">**</Line>
  <Line number="5605">** ^The sqlite3_get_auxdata(C,N) interface returns a pointer to the metadata</Line>
  <Line number="5606">** associated by the sqlite3_set_auxdata(C,N,P,X) function with the Nth argument</Line>
  <Line number="5607">** value to the application-defined function.  ^N is zero for the left-most</Line>
  <Line number="5608">** function argument.  ^If there is no metadata</Line>
  <Line number="5609">** associated with the function argument, the sqlite3_get_auxdata(C,N) interface</Line>
  <Line number="5610">** returns a NULL pointer.</Line>
  <Line number="5611">**</Line>
  <Line number="5612">** ^The sqlite3_set_auxdata(C,N,P,X) interface saves P as metadata for the N-th</Line>
  <Line number="5613">** argument of the application-defined function.  ^Subsequent</Line>
  <Line number="5614">** calls to sqlite3_get_auxdata(C,N) return P from the most recent</Line>
  <Line number="5615">** sqlite3_set_auxdata(C,N,P,X) call if the metadata is still valid or</Line>
  <Line number="5616">** NULL if the metadata has been discarded.</Line>
  <Line number="5617">** ^After each call to sqlite3_set_auxdata(C,N,P,X) where X is not NULL,</Line>
  <Line number="5618">** SQLite will invoke the destructor function X with parameter P exactly</Line>
  <Line number="5619">** once, when the metadata is discarded.</Line>
  <Line number="5620">** SQLite is free to discard the metadata at any time, including: &lt;ul&gt;</Line>
  <Line number="5621">** &lt;li&gt; ^(when the corresponding function parameter changes)^, or</Line>
  <Line number="5622">** &lt;li&gt; ^(when [sqlite3_reset()] or [sqlite3_finalize()] is called for the</Line>
  <Line number="5623">**      SQL statement)^, or</Line>
  <Line number="5624">** &lt;li&gt; ^(when sqlite3_set_auxdata() is invoked again on the same</Line>
  <Line number="5625">**       parameter)^, or</Line>
  <Line number="5626">** &lt;li&gt; ^(during the original sqlite3_set_auxdata() call when a memory</Line>
  <Line number="5627">**      allocation error occurs.)^ &lt;/ul&gt;</Line>
  <Line number="5628">**</Line>
  <Line number="5629">** Note the last bullet in particular.  The destructor X in</Line>
  <Line number="5630">** sqlite3_set_auxdata(C,N,P,X) might be called immediately, before the</Line>
  <Line number="5631">** sqlite3_set_auxdata() interface even returns.  Hence sqlite3_set_auxdata()</Line>
  <Line number="5632">** should be called near the end of the function implementation and the</Line>
  <Line number="5633">** function implementation should not make any use of P after</Line>
  <Line number="5634">** sqlite3_set_auxdata() has been called.</Line>
  <Line number="5635">**</Line>
  <Line number="5636">** ^(In practice, metadata is preserved between function calls for</Line>
  <Line number="5637">** function parameters that are compile-time constants, including literal</Line>
  <Line number="5638">** values and [parameters] and expressions composed from the same.)^</Line>
  <Line number="5639">**</Line>
  <Line number="5640">** The value of the N parameter to these interfaces should be non-negative.</Line>
  <Line number="5641">** Future enhancements may make use of negative N values to define new</Line>
  <Line number="5642">** kinds of function caching behavior.</Line>
  <Line number="5643">**</Line>
  <Line number="5644">** These routines must be called from the same thread in which</Line>
  <Line number="5645">** the SQL function is running.</Line>
  <Line number="5646">*/</Line>
  <Line number="5647">SQLITE_API void *sqlite3_get_auxdata(sqlite3_context*, int N);</Line>
  <Line number="5648">SQLITE_API void sqlite3_set_auxdata(sqlite3_context*, int N, void*, void (*)(void*));</Line>
  <Line number="5649"></Line>
  <Line number="5650"></Line>
  <Line number="5651">/*</Line>
  <Line number="5652">** CAPI3REF: Constants Defining Special Destructor Behavior</Line>
  <Line number="5653">**</Line>
  <Line number="5654">** These are special values for the destructor that is passed in as the</Line>
  <Line number="5655">** final argument to routines like [sqlite3_result_blob()].  ^If the destructor</Line>
  <Line number="5656">** argument is SQLITE_STATIC, it means that the content pointer is constant</Line>
  <Line number="5657">** and will never change.  It does not need to be destroyed.  ^The</Line>
  <Line number="5658">** SQLITE_TRANSIENT value means that the content will likely change in</Line>
  <Line number="5659">** the near future and that SQLite should make its own private copy of</Line>
  <Line number="5660">** the content before returning.</Line>
  <Line number="5661">**</Line>
  <Line number="5662">** The typedef is necessary to work around problems in certain</Line>
  <Line number="5663">** C++ compilers.</Line>
  <Line number="5664">*/</Line>
  <Line number="5665">typedef void (*sqlite3_destructor_type)(void*);</Line>
  <Line number="5666">#define SQLITE_STATIC      ((sqlite3_destructor_type)0)</Line>
  <Line number="5667">#define SQLITE_TRANSIENT   ((sqlite3_destructor_type)-1)</Line>
  <Line number="5668"></Line>
  <Line number="5669">/*</Line>
  <Line number="5670">** CAPI3REF: Setting The Result Of An SQL Function</Line>
  <Line number="5671">** METHOD: sqlite3_context</Line>
  <Line number="5672">**</Line>
  <Line number="5673">** These routines are used by the xFunc or xFinal callbacks that</Line>
  <Line number="5674">** implement SQL functions and aggregates.  See</Line>
  <Line number="5675">** [sqlite3_create_function()] and [sqlite3_create_function16()]</Line>
  <Line number="5676">** for additional information.</Line>
  <Line number="5677">**</Line>
  <Line number="5678">** These functions work very much like the [parameter binding] family of</Line>
  <Line number="5679">** functions used to bind values to host parameters in prepared statements.</Line>
  <Line number="5680">** Refer to the [SQL parameter] documentation for additional information.</Line>
  <Line number="5681">**</Line>
  <Line number="5682">** ^The sqlite3_result_blob() interface sets the result from</Line>
  <Line number="5683">** an application-defined function to be the BLOB whose content is pointed</Line>
  <Line number="5684">** to by the second parameter and which is N bytes long where N is the</Line>
  <Line number="5685">** third parameter.</Line>
  <Line number="5686">**</Line>
  <Line number="5687">** ^The sqlite3_result_zeroblob(C,N) and sqlite3_result_zeroblob64(C,N)</Line>
  <Line number="5688">** interfaces set the result of the application-defined function to be</Line>
  <Line number="5689">** a BLOB containing all zero bytes and N bytes in size.</Line>
  <Line number="5690">**</Line>
  <Line number="5691">** ^The sqlite3_result_double() interface sets the result from</Line>
  <Line number="5692">** an application-defined function to be a floating point value specified</Line>
  <Line number="5693">** by its 2nd argument.</Line>
  <Line number="5694">**</Line>
  <Line number="5695">** ^The sqlite3_result_error() and sqlite3_result_error16() functions</Line>
  <Line number="5696">** cause the implemented SQL function to throw an exception.</Line>
  <Line number="5697">** ^SQLite uses the string pointed to by the</Line>
  <Line number="5698">** 2nd parameter of sqlite3_result_error() or sqlite3_result_error16()</Line>
  <Line number="5699">** as the text of an error message.  ^SQLite interprets the error</Line>
  <Line number="5700">** message string from sqlite3_result_error() as UTF-8. ^SQLite</Line>
  <Line number="5701">** interprets the string from sqlite3_result_error16() as UTF-16 using</Line>
  <Line number="5702">** the same [byte-order determination rules] as [sqlite3_bind_text16()].</Line>
  <Line number="5703">** ^If the third parameter to sqlite3_result_error()</Line>
  <Line number="5704">** or sqlite3_result_error16() is negative then SQLite takes as the error</Line>
  <Line number="5705">** message all text up through the first zero character.</Line>
  <Line number="5706">** ^If the third parameter to sqlite3_result_error() or</Line>
  <Line number="5707">** sqlite3_result_error16() is non-negative then SQLite takes that many</Line>
  <Line number="5708">** bytes (not characters) from the 2nd parameter as the error message.</Line>
  <Line number="5709">** ^The sqlite3_result_error() and sqlite3_result_error16()</Line>
  <Line number="5710">** routines make a private copy of the error message text before</Line>
  <Line number="5711">** they return.  Hence, the calling function can deallocate or</Line>
  <Line number="5712">** modify the text after they return without harm.</Line>
  <Line number="5713">** ^The sqlite3_result_error_code() function changes the error code</Line>
  <Line number="5714">** returned by SQLite as a result of an error in a function.  ^By default,</Line>
  <Line number="5715">** the error code is SQLITE_ERROR.  ^A subsequent call to sqlite3_result_error()</Line>
  <Line number="5716">** or sqlite3_result_error16() resets the error code to SQLITE_ERROR.</Line>
  <Line number="5717">**</Line>
  <Line number="5718">** ^The sqlite3_result_error_toobig() interface causes SQLite to throw an</Line>
  <Line number="5719">** error indicating that a string or BLOB is too long to represent.</Line>
  <Line number="5720">**</Line>
  <Line number="5721">** ^The sqlite3_result_error_nomem() interface causes SQLite to throw an</Line>
  <Line number="5722">** error indicating that a memory allocation failed.</Line>
  <Line number="5723">**</Line>
  <Line number="5724">** ^The sqlite3_result_int() interface sets the return value</Line>
  <Line number="5725">** of the application-defined function to be the 32-bit signed integer</Line>
  <Line number="5726">** value given in the 2nd argument.</Line>
  <Line number="5727">** ^The sqlite3_result_int64() interface sets the return value</Line>
  <Line number="5728">** of the application-defined function to be the 64-bit signed integer</Line>
  <Line number="5729">** value given in the 2nd argument.</Line>
  <Line number="5730">**</Line>
  <Line number="5731">** ^The sqlite3_result_null() interface sets the return value</Line>
  <Line number="5732">** of the application-defined function to be NULL.</Line>
  <Line number="5733">**</Line>
  <Line number="5734">** ^The sqlite3_result_text(), sqlite3_result_text16(),</Line>
  <Line number="5735">** sqlite3_result_text16le(), and sqlite3_result_text16be() interfaces</Line>
  <Line number="5736">** set the return value of the application-defined function to be</Line>
  <Line number="5737">** a text string which is represented as UTF-8, UTF-16 native byte order,</Line>
  <Line number="5738">** UTF-16 little endian, or UTF-16 big endian, respectively.</Line>
  <Line number="5739">** ^The sqlite3_result_text64() interface sets the return value of an</Line>
  <Line number="5740">** application-defined function to be a text string in an encoding</Line>
  <Line number="5741">** specified by the fifth (and last) parameter, which must be one</Line>
  <Line number="5742">** of [SQLITE_UTF8], [SQLITE_UTF16], [SQLITE_UTF16BE], or [SQLITE_UTF16LE].</Line>
  <Line number="5743">** ^SQLite takes the text result from the application from</Line>
  <Line number="5744">** the 2nd parameter of the sqlite3_result_text* interfaces.</Line>
  <Line number="5745">** ^If the 3rd parameter to the sqlite3_result_text* interfaces</Line>
  <Line number="5746">** is negative, then SQLite takes result text from the 2nd parameter</Line>
  <Line number="5747">** through the first zero character.</Line>
  <Line number="5748">** ^If the 3rd parameter to the sqlite3_result_text* interfaces</Line>
  <Line number="5749">** is non-negative, then as many bytes (not characters) of the text</Line>
  <Line number="5750">** pointed to by the 2nd parameter are taken as the application-defined</Line>
  <Line number="5751">** function result.  If the 3rd parameter is non-negative, then it</Line>
  <Line number="5752">** must be the byte offset into the string where the NUL terminator would</Line>
  <Line number="5753">** appear if the string where NUL terminated.  If any NUL characters occur</Line>
  <Line number="5754">** in the string at a byte offset that is less than the value of the 3rd</Line>
  <Line number="5755">** parameter, then the resulting string will contain embedded NULs and the</Line>
  <Line number="5756">** result of expressions operating on strings with embedded NULs is undefined.</Line>
  <Line number="5757">** ^If the 4th parameter to the sqlite3_result_text* interfaces</Line>
  <Line number="5758">** or sqlite3_result_blob is a non-NULL pointer, then SQLite calls that</Line>
  <Line number="5759">** function as the destructor on the text or BLOB result when it has</Line>
  <Line number="5760">** finished using that result.</Line>
  <Line number="5761">** ^If the 4th parameter to the sqlite3_result_text* interfaces or to</Line>
  <Line number="5762">** sqlite3_result_blob is the special constant SQLITE_STATIC, then SQLite</Line>
  <Line number="5763">** assumes that the text or BLOB result is in constant space and does not</Line>
  <Line number="5764">** copy the content of the parameter nor call a destructor on the content</Line>
  <Line number="5765">** when it has finished using that result.</Line>
  <Line number="5766">** ^If the 4th parameter to the sqlite3_result_text* interfaces</Line>
  <Line number="5767">** or sqlite3_result_blob is the special constant SQLITE_TRANSIENT</Line>
  <Line number="5768">** then SQLite makes a copy of the result into space obtained</Line>
  <Line number="5769">** from [sqlite3_malloc()] before it returns.</Line>
  <Line number="5770">**</Line>
  <Line number="5771">** ^For the sqlite3_result_text16(), sqlite3_result_text16le(), and</Line>
  <Line number="5772">** sqlite3_result_text16be() routines, and for sqlite3_result_text64()</Line>
  <Line number="5773">** when the encoding is not UTF8, if the input UTF16 begins with a</Line>
  <Line number="5774">** byte-order mark (BOM, U+FEFF) then the BOM is removed from the</Line>
  <Line number="5775">** string and the rest of the string is interpreted according to the</Line>
  <Line number="5776">** byte-order specified by the BOM.  ^The byte-order specified by</Line>
  <Line number="5777">** the BOM at the beginning of the text overrides the byte-order</Line>
  <Line number="5778">** specified by the interface procedure.  ^So, for example, if</Line>
  <Line number="5779">** sqlite3_result_text16le() is invoked with text that begins</Line>
  <Line number="5780">** with bytes 0xfe, 0xff (a big-endian byte-order mark) then the</Line>
  <Line number="5781">** first two bytes of input are skipped and the remaining input</Line>
  <Line number="5782">** is interpreted as UTF16BE text.</Line>
  <Line number="5783">**</Line>
  <Line number="5784">** ^For UTF16 input text to the sqlite3_result_text16(),</Line>
  <Line number="5785">** sqlite3_result_text16be(), sqlite3_result_text16le(), and</Line>
  <Line number="5786">** sqlite3_result_text64() routines, if the text contains invalid</Line>
  <Line number="5787">** UTF16 characters, the invalid characters might be converted</Line>
  <Line number="5788">** into the unicode replacement character, U+FFFD.</Line>
  <Line number="5789">**</Line>
  <Line number="5790">** ^The sqlite3_result_value() interface sets the result of</Line>
  <Line number="5791">** the application-defined function to be a copy of the</Line>
  <Line number="5792">** [unprotected sqlite3_value] object specified by the 2nd parameter.  ^The</Line>
  <Line number="5793">** sqlite3_result_value() interface makes a copy of the [sqlite3_value]</Line>
  <Line number="5794">** so that the [sqlite3_value] specified in the parameter may change or</Line>
  <Line number="5795">** be deallocated after sqlite3_result_value() returns without harm.</Line>
  <Line number="5796">** ^A [protected sqlite3_value] object may always be used where an</Line>
  <Line number="5797">** [unprotected sqlite3_value] object is required, so either</Line>
  <Line number="5798">** kind of [sqlite3_value] object can be used with this interface.</Line>
  <Line number="5799">**</Line>
  <Line number="5800">** ^The sqlite3_result_pointer(C,P,T,D) interface sets the result to an</Line>
  <Line number="5801">** SQL NULL value, just like [sqlite3_result_null(C)], except that it</Line>
  <Line number="5802">** also associates the host-language pointer P or type T with that</Line>
  <Line number="5803">** NULL value such that the pointer can be retrieved within an</Line>
  <Line number="5804">** [application-defined SQL function] using [sqlite3_value_pointer()].</Line>
  <Line number="5805">** ^If the D parameter is not NULL, then it is a pointer to a destructor</Line>
  <Line number="5806">** for the P parameter.  ^SQLite invokes D with P as its only argument</Line>
  <Line number="5807">** when SQLite is finished with P.  The T parameter should be a static</Line>
  <Line number="5808">** string and preferably a string literal. The sqlite3_result_pointer()</Line>
  <Line number="5809">** routine is part of the [pointer passing interface] added for SQLite 3.20.0.</Line>
  <Line number="5810">**</Line>
  <Line number="5811">** If these routines are called from within the different thread</Line>
  <Line number="5812">** than the one containing the application-defined function that received</Line>
  <Line number="5813">** the [sqlite3_context] pointer, the results are undefined.</Line>
  <Line number="5814">*/</Line>
  <Line number="5815">SQLITE_API void sqlite3_result_blob(sqlite3_context*, const void*, int, void(*)(void*));</Line>
  <Line number="5816">SQLITE_API void sqlite3_result_blob64(sqlite3_context*,const void*,</Line>
  <Line number="5817">                           sqlite3_uint64,void(*)(void*));</Line>
  <Line number="5818">SQLITE_API void sqlite3_result_double(sqlite3_context*, double);</Line>
  <Line number="5819">SQLITE_API void sqlite3_result_error(sqlite3_context*, const char*, int);</Line>
  <Line number="5820">SQLITE_API void sqlite3_result_error16(sqlite3_context*, const void*, int);</Line>
  <Line number="5821">SQLITE_API void sqlite3_result_error_toobig(sqlite3_context*);</Line>
  <Line number="5822">SQLITE_API void sqlite3_result_error_nomem(sqlite3_context*);</Line>
  <Line number="5823">SQLITE_API void sqlite3_result_error_code(sqlite3_context*, int);</Line>
  <Line number="5824">SQLITE_API void sqlite3_result_int(sqlite3_context*, int);</Line>
  <Line number="5825">SQLITE_API void sqlite3_result_int64(sqlite3_context*, sqlite3_int64);</Line>
  <Line number="5826">SQLITE_API void sqlite3_result_null(sqlite3_context*);</Line>
  <Line number="5827">SQLITE_API void sqlite3_result_text(sqlite3_context*, const char*, int, void(*)(void*));</Line>
  <Line number="5828">SQLITE_API void sqlite3_result_text64(sqlite3_context*, const char*,sqlite3_uint64,</Line>
  <Line number="5829">                           void(*)(void*), unsigned char encoding);</Line>
  <Line number="5830">SQLITE_API void sqlite3_result_text16(sqlite3_context*, const void*, int, void(*)(void*));</Line>
  <Line number="5831">SQLITE_API void sqlite3_result_text16le(sqlite3_context*, const void*, int,void(*)(void*));</Line>
  <Line number="5832">SQLITE_API void sqlite3_result_text16be(sqlite3_context*, const void*, int,void(*)(void*));</Line>
  <Line number="5833">SQLITE_API void sqlite3_result_value(sqlite3_context*, sqlite3_value*);</Line>
  <Line number="5834">SQLITE_API void sqlite3_result_pointer(sqlite3_context*, void*,const char*,void(*)(void*));</Line>
  <Line number="5835">SQLITE_API void sqlite3_result_zeroblob(sqlite3_context*, int n);</Line>
  <Line number="5836">SQLITE_API int sqlite3_result_zeroblob64(sqlite3_context*, sqlite3_uint64 n);</Line>
  <Line number="5837"></Line>
  <Line number="5838"></Line>
  <Line number="5839">/*</Line>
  <Line number="5840">** CAPI3REF: Setting The Subtype Of An SQL Function</Line>
  <Line number="5841">** METHOD: sqlite3_context</Line>
  <Line number="5842">**</Line>
  <Line number="5843">** The sqlite3_result_subtype(C,T) function causes the subtype of</Line>
  <Line number="5844">** the result from the [application-defined SQL function] with</Line>
  <Line number="5845">** [sqlite3_context] C to be the value T.  Only the lower 8 bits</Line>
  <Line number="5846">** of the subtype T are preserved in current versions of SQLite;</Line>
  <Line number="5847">** higher order bits are discarded.</Line>
  <Line number="5848">** The number of subtype bytes preserved by SQLite might increase</Line>
  <Line number="5849">** in future releases of SQLite.</Line>
  <Line number="5850">*/</Line>
  <Line number="5851">SQLITE_API void sqlite3_result_subtype(sqlite3_context*,unsigned int);</Line>
  <Line number="5852"></Line>
  <Line number="5853">/*</Line>
  <Line number="5854">** CAPI3REF: Define New Collating Sequences</Line>
  <Line number="5855">** METHOD: sqlite3</Line>
  <Line number="5856">**</Line>
  <Line number="5857">** ^These functions add, remove, or modify a [collation] associated</Line>
  <Line number="5858">** with the [database connection] specified as the first argument.</Line>
  <Line number="5859">**</Line>
  <Line number="5860">** ^The name of the collation is a UTF-8 string</Line>
  <Line number="5861">** for sqlite3_create_collation() and sqlite3_create_collation_v2()</Line>
  <Line number="5862">** and a UTF-16 string in native byte order for sqlite3_create_collation16().</Line>
  <Line number="5863">** ^Collation names that compare equal according to [sqlite3_strnicmp()] are</Line>
  <Line number="5864">** considered to be the same name.</Line>
  <Line number="5865">**</Line>
  <Line number="5866">** ^(The third argument (eTextRep) must be one of the constants:</Line>
  <Line number="5867">** &lt;ul&gt;</Line>
  <Line number="5868">** &lt;li&gt; [SQLITE_UTF8],</Line>
  <Line number="5869">** &lt;li&gt; [SQLITE_UTF16LE],</Line>
  <Line number="5870">** &lt;li&gt; [SQLITE_UTF16BE],</Line>
  <Line number="5871">** &lt;li&gt; [SQLITE_UTF16], or</Line>
  <Line number="5872">** &lt;li&gt; [SQLITE_UTF16_ALIGNED].</Line>
  <Line number="5873">** &lt;/ul&gt;)^</Line>
  <Line number="5874">** ^The eTextRep argument determines the encoding of strings passed</Line>
  <Line number="5875">** to the collating function callback, xCompare.</Line>
  <Line number="5876">** ^The [SQLITE_UTF16] and [SQLITE_UTF16_ALIGNED] values for eTextRep</Line>
  <Line number="5877">** force strings to be UTF16 with native byte order.</Line>
  <Line number="5878">** ^The [SQLITE_UTF16_ALIGNED] value for eTextRep forces strings to begin</Line>
  <Line number="5879">** on an even byte address.</Line>
  <Line number="5880">**</Line>
  <Line number="5881">** ^The fourth argument, pArg, is an application data pointer that is passed</Line>
  <Line number="5882">** through as the first argument to the collating function callback.</Line>
  <Line number="5883">**</Line>
  <Line number="5884">** ^The fifth argument, xCompare, is a pointer to the collating function.</Line>
  <Line number="5885">** ^Multiple collating functions can be registered using the same name but</Line>
  <Line number="5886">** with different eTextRep parameters and SQLite will use whichever</Line>
  <Line number="5887">** function requires the least amount of data transformation.</Line>
  <Line number="5888">** ^If the xCompare argument is NULL then the collating function is</Line>
  <Line number="5889">** deleted.  ^When all collating functions having the same name are deleted,</Line>
  <Line number="5890">** that collation is no longer usable.</Line>
  <Line number="5891">**</Line>
  <Line number="5892">** ^The collating function callback is invoked with a copy of the pArg</Line>
  <Line number="5893">** application data pointer and with two strings in the encoding specified</Line>
  <Line number="5894">** by the eTextRep argument.  The two integer parameters to the collating</Line>
  <Line number="5895">** function callback are the length of the two strings, in bytes. The collating</Line>
  <Line number="5896">** function must return an integer that is negative, zero, or positive</Line>
  <Line number="5897">** if the first string is less than, equal to, or greater than the second,</Line>
  <Line number="5898">** respectively.  A collating function must always return the same answer</Line>
  <Line number="5899">** given the same inputs.  If two or more collating functions are registered</Line>
  <Line number="5900">** to the same collation name (using different eTextRep values) then all</Line>
  <Line number="5901">** must give an equivalent answer when invoked with equivalent strings.</Line>
  <Line number="5902">** The collating function must obey the following properties for all</Line>
  <Line number="5903">** strings A, B, and C:</Line>
  <Line number="5904">**</Line>
  <Line number="5905">** &lt;ol&gt;</Line>
  <Line number="5906">** &lt;li&gt; If A==B then B==A.</Line>
  <Line number="5907">** &lt;li&gt; If A==B and B==C then A==C.</Line>
  <Line number="5908">** &lt;li&gt; If A&amp;lt;B THEN B&amp;gt;A.</Line>
  <Line number="5909">** &lt;li&gt; If A&amp;lt;B and B&amp;lt;C then A&amp;lt;C.</Line>
  <Line number="5910">** &lt;/ol&gt;</Line>
  <Line number="5911">**</Line>
  <Line number="5912">** If a collating function fails any of the above constraints and that</Line>
  <Line number="5913">** collating function is registered and used, then the behavior of SQLite</Line>
  <Line number="5914">** is undefined.</Line>
  <Line number="5915">**</Line>
  <Line number="5916">** ^The sqlite3_create_collation_v2() works like sqlite3_create_collation()</Line>
  <Line number="5917">** with the addition that the xDestroy callback is invoked on pArg when</Line>
  <Line number="5918">** the collating function is deleted.</Line>
  <Line number="5919">** ^Collating functions are deleted when they are overridden by later</Line>
  <Line number="5920">** calls to the collation creation functions or when the</Line>
  <Line number="5921">** [database connection] is closed using [sqlite3_close()].</Line>
  <Line number="5922">**</Line>
  <Line number="5923">** ^The xDestroy callback is &lt;u&gt;not&lt;/u&gt; called if the</Line>
  <Line number="5924">** sqlite3_create_collation_v2() function fails.  Applications that invoke</Line>
  <Line number="5925">** sqlite3_create_collation_v2() with a non-NULL xDestroy argument should</Line>
  <Line number="5926">** check the return code and dispose of the application data pointer</Line>
  <Line number="5927">** themselves rather than expecting SQLite to deal with it for them.</Line>
  <Line number="5928">** This is different from every other SQLite interface.  The inconsistency</Line>
  <Line number="5929">** is unfortunate but cannot be changed without breaking backwards</Line>
  <Line number="5930">** compatibility.</Line>
  <Line number="5931">**</Line>
  <Line number="5932">** See also:  [sqlite3_collation_needed()] and [sqlite3_collation_needed16()].</Line>
  <Line number="5933">*/</Line>
  <Line number="5934">SQLITE_API int sqlite3_create_collation(</Line>
  <Line number="5935">  sqlite3*,</Line>
  <Line number="5936">  const char *zName,</Line>
  <Line number="5937">  int eTextRep,</Line>
  <Line number="5938">  void *pArg,</Line>
  <Line number="5939">  int(*xCompare)(void*,int,const void*,int,const void*)</Line>
  <Line number="5940">);</Line>
  <Line number="5941">SQLITE_API int sqlite3_create_collation_v2(</Line>
  <Line number="5942">  sqlite3*,</Line>
  <Line number="5943">  const char *zName,</Line>
  <Line number="5944">  int eTextRep,</Line>
  <Line number="5945">  void *pArg,</Line>
  <Line number="5946">  int(*xCompare)(void*,int,const void*,int,const void*),</Line>
  <Line number="5947">  void(*xDestroy)(void*)</Line>
  <Line number="5948">);</Line>
  <Line number="5949">SQLITE_API int sqlite3_create_collation16(</Line>
  <Line number="5950">  sqlite3*,</Line>
  <Line number="5951">  const void *zName,</Line>
  <Line number="5952">  int eTextRep,</Line>
  <Line number="5953">  void *pArg,</Line>
  <Line number="5954">  int(*xCompare)(void*,int,const void*,int,const void*)</Line>
  <Line number="5955">);</Line>
  <Line number="5956"></Line>
  <Line number="5957">/*</Line>
  <Line number="5958">** CAPI3REF: Collation Needed Callbacks</Line>
  <Line number="5959">** METHOD: sqlite3</Line>
  <Line number="5960">**</Line>
  <Line number="5961">** ^To avoid having to register all collation sequences before a database</Line>
  <Line number="5962">** can be used, a single callback function may be registered with the</Line>
  <Line number="5963">** [database connection] to be invoked whenever an undefined collation</Line>
  <Line number="5964">** sequence is required.</Line>
  <Line number="5965">**</Line>
  <Line number="5966">** ^If the function is registered using the sqlite3_collation_needed() API,</Line>
  <Line number="5967">** then it is passed the names of undefined collation sequences as strings</Line>
  <Line number="5968">** encoded in UTF-8. ^If sqlite3_collation_needed16() is used,</Line>
  <Line number="5969">** the names are passed as UTF-16 in machine native byte order.</Line>
  <Line number="5970">** ^A call to either function replaces the existing collation-needed callback.</Line>
  <Line number="5971">**</Line>
  <Line number="5972">** ^(When the callback is invoked, the first argument passed is a copy</Line>
  <Line number="5973">** of the second argument to sqlite3_collation_needed() or</Line>
  <Line number="5974">** sqlite3_collation_needed16().  The second argument is the database</Line>
  <Line number="5975">** connection.  The third argument is one of [SQLITE_UTF8], [SQLITE_UTF16BE],</Line>
  <Line number="5976">** or [SQLITE_UTF16LE], indicating the most desirable form of the collation</Line>
  <Line number="5977">** sequence function required.  The fourth parameter is the name of the</Line>
  <Line number="5978">** required collation sequence.)^</Line>
  <Line number="5979">**</Line>
  <Line number="5980">** The callback function should register the desired collation using</Line>
  <Line number="5981">** [sqlite3_create_collation()], [sqlite3_create_collation16()], or</Line>
  <Line number="5982">** [sqlite3_create_collation_v2()].</Line>
  <Line number="5983">*/</Line>
  <Line number="5984">SQLITE_API int sqlite3_collation_needed(</Line>
  <Line number="5985">  sqlite3*,</Line>
  <Line number="5986">  void*,</Line>
  <Line number="5987">  void(*)(void*,sqlite3*,int eTextRep,const char*)</Line>
  <Line number="5988">);</Line>
  <Line number="5989">SQLITE_API int sqlite3_collation_needed16(</Line>
  <Line number="5990">  sqlite3*,</Line>
  <Line number="5991">  void*,</Line>
  <Line number="5992">  void(*)(void*,sqlite3*,int eTextRep,const void*)</Line>
  <Line number="5993">);</Line>
  <Line number="5994"></Line>
  <Line number="5995">#ifdef SQLITE_ENABLE_CEROD</Line>
  <Line number="5996">/*</Line>
  <Line number="5997">** Specify the activation key for a CEROD database.  Unless</Line>
  <Line number="5998">** activated, none of the CEROD routines will work.</Line>
  <Line number="5999">*/</Line>
  <Line number="6000">SQLITE_API void sqlite3_activate_cerod(</Line>
  <Line number="6001">  const char *zPassPhrase        /* Activation phrase */</Line>
  <Line number="6002">);</Line>
  <Line number="6003">#endif</Line>
  <Line number="6004"></Line>
  <Line number="6005">/*</Line>
  <Line number="6006">** CAPI3REF: Suspend Execution For A Short Time</Line>
  <Line number="6007">**</Line>
  <Line number="6008">** The sqlite3_sleep() function causes the current thread to suspend execution</Line>
  <Line number="6009">** for at least a number of milliseconds specified in its parameter.</Line>
  <Line number="6010">**</Line>
  <Line number="6011">** If the operating system does not support sleep requests with</Line>
  <Line number="6012">** millisecond time resolution, then the time will be rounded up to</Line>
  <Line number="6013">** the nearest second. The number of milliseconds of sleep actually</Line>
  <Line number="6014">** requested from the operating system is returned.</Line>
  <Line number="6015">**</Line>
  <Line number="6016">** ^SQLite implements this interface by calling the xSleep()</Line>
  <Line number="6017">** method of the default [sqlite3_vfs] object.  If the xSleep() method</Line>
  <Line number="6018">** of the default VFS is not implemented correctly, or not implemented at</Line>
  <Line number="6019">** all, then the behavior of sqlite3_sleep() may deviate from the description</Line>
  <Line number="6020">** in the previous paragraphs.</Line>
  <Line number="6021">*/</Line>
  <Line number="6022">SQLITE_API int sqlite3_sleep(int);</Line>
  <Line number="6023"></Line>
  <Line number="6024">/*</Line>
  <Line number="6025">** CAPI3REF: Name Of The Folder Holding Temporary Files</Line>
  <Line number="6026">**</Line>
  <Line number="6027">** ^(If this global variable is made to point to a string which is</Line>
  <Line number="6028">** the name of a folder (a.k.a. directory), then all temporary files</Line>
  <Line number="6029">** created by SQLite when using a built-in [sqlite3_vfs | VFS]</Line>
  <Line number="6030">** will be placed in that directory.)^  ^If this variable</Line>
  <Line number="6031">** is a NULL pointer, then SQLite performs a search for an appropriate</Line>
  <Line number="6032">** temporary file directory.</Line>
  <Line number="6033">**</Line>
  <Line number="6034">** Applications are strongly discouraged from using this global variable.</Line>
  <Line number="6035">** It is required to set a temporary folder on Windows Runtime (WinRT).</Line>
  <Line number="6036">** But for all other platforms, it is highly recommended that applications</Line>
  <Line number="6037">** neither read nor write this variable.  This global variable is a relic</Line>
  <Line number="6038">** that exists for backwards compatibility of legacy applications and should</Line>
  <Line number="6039">** be avoided in new projects.</Line>
  <Line number="6040">**</Line>
  <Line number="6041">** It is not safe to read or modify this variable in more than one</Line>
  <Line number="6042">** thread at a time.  It is not safe to read or modify this variable</Line>
  <Line number="6043">** if a [database connection] is being used at the same time in a separate</Line>
  <Line number="6044">** thread.</Line>
  <Line number="6045">** It is intended that this variable be set once</Line>
  <Line number="6046">** as part of process initialization and before any SQLite interface</Line>
  <Line number="6047">** routines have been called and that this variable remain unchanged</Line>
  <Line number="6048">** thereafter.</Line>
  <Line number="6049">**</Line>
  <Line number="6050">** ^The [temp_store_directory pragma] may modify this variable and cause</Line>
  <Line number="6051">** it to point to memory obtained from [sqlite3_malloc].  ^Furthermore,</Line>
  <Line number="6052">** the [temp_store_directory pragma] always assumes that any string</Line>
  <Line number="6053">** that this variable points to is held in memory obtained from</Line>
  <Line number="6054">** [sqlite3_malloc] and the pragma may attempt to free that memory</Line>
  <Line number="6055">** using [sqlite3_free].</Line>
  <Line number="6056">** Hence, if this variable is modified directly, either it should be</Line>
  <Line number="6057">** made NULL or made to point to memory obtained from [sqlite3_malloc]</Line>
  <Line number="6058">** or else the use of the [temp_store_directory pragma] should be avoided.</Line>
  <Line number="6059">** Except when requested by the [temp_store_directory pragma], SQLite</Line>
  <Line number="6060">** does not free the memory that sqlite3_temp_directory points to.  If</Line>
  <Line number="6061">** the application wants that memory to be freed, it must do</Line>
  <Line number="6062">** so itself, taking care to only do so after all [database connection]</Line>
  <Line number="6063">** objects have been destroyed.</Line>
  <Line number="6064">**</Line>
  <Line number="6065">** &lt;b&gt;Note to Windows Runtime users:&lt;/b&gt;  The temporary directory must be set</Line>
  <Line number="6066">** prior to calling [sqlite3_open] or [sqlite3_open_v2].  Otherwise, various</Line>
  <Line number="6067">** features that require the use of temporary files may fail.  Here is an</Line>
  <Line number="6068">** example of how to do this using C++ with the Windows Runtime:</Line>
  <Line number="6069">**</Line>
  <Line number="6070">** &lt;blockquote&gt;&lt;pre&gt;</Line>
  <Line number="6071">** LPCWSTR zPath = Windows::Storage::ApplicationData::Current-&gt;</Line>
  <Line number="6072">** &amp;nbsp;     TemporaryFolder-&gt;Path-&gt;Data();</Line>
  <Line number="6073">** char zPathBuf&amp;#91;MAX_PATH + 1&amp;#93;;</Line>
  <Line number="6074">** memset(zPathBuf, 0, sizeof(zPathBuf));</Line>
  <Line number="6075">** WideCharToMultiByte(CP_UTF8, 0, zPath, -1, zPathBuf, sizeof(zPathBuf),</Line>
  <Line number="6076">** &amp;nbsp;     NULL, NULL);</Line>
  <Line number="6077">** sqlite3_temp_directory = sqlite3_mprintf(&quot;%s&quot;, zPathBuf);</Line>
  <Line number="6078">** &lt;/pre&gt;&lt;/blockquote&gt;</Line>
  <Line number="6079">*/</Line>
  <Line number="6080">SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;</Line>
  <Line number="6081"></Line>
  <Line number="6082">/*</Line>
  <Line number="6083">** CAPI3REF: Name Of The Folder Holding Database Files</Line>
  <Line number="6084">**</Line>
  <Line number="6085">** ^(If this global variable is made to point to a string which is</Line>
  <Line number="6086">** the name of a folder (a.k.a. directory), then all database files</Line>
  <Line number="6087">** specified with a relative pathname and created or accessed by</Line>
  <Line number="6088">** SQLite when using a built-in windows [sqlite3_vfs | VFS] will be assumed</Line>
  <Line number="6089">** to be relative to that directory.)^ ^If this variable is a NULL</Line>
  <Line number="6090">** pointer, then SQLite assumes that all database files specified</Line>
  <Line number="6091">** with a relative pathname are relative to the current directory</Line>
  <Line number="6092">** for the process.  Only the windows VFS makes use of this global</Line>
  <Line number="6093">** variable; it is ignored by the unix VFS.</Line>
  <Line number="6094">**</Line>
  <Line number="6095">** Changing the value of this variable while a database connection is</Line>
  <Line number="6096">** open can result in a corrupt database.</Line>
  <Line number="6097">**</Line>
  <Line number="6098">** It is not safe to read or modify this variable in more than one</Line>
  <Line number="6099">** thread at a time.  It is not safe to read or modify this variable</Line>
  <Line number="6100">** if a [database connection] is being used at the same time in a separate</Line>
  <Line number="6101">** thread.</Line>
  <Line number="6102">** It is intended that this variable be set once</Line>
  <Line number="6103">** as part of process initialization and before any SQLite interface</Line>
  <Line number="6104">** routines have been called and that this variable remain unchanged</Line>
  <Line number="6105">** thereafter.</Line>
  <Line number="6106">**</Line>
  <Line number="6107">** ^The [data_store_directory pragma] may modify this variable and cause</Line>
  <Line number="6108">** it to point to memory obtained from [sqlite3_malloc].  ^Furthermore,</Line>
  <Line number="6109">** the [data_store_directory pragma] always assumes that any string</Line>
  <Line number="6110">** that this variable points to is held in memory obtained from</Line>
  <Line number="6111">** [sqlite3_malloc] and the pragma may attempt to free that memory</Line>
  <Line number="6112">** using [sqlite3_free].</Line>
  <Line number="6113">** Hence, if this variable is modified directly, either it should be</Line>
  <Line number="6114">** made NULL or made to point to memory obtained from [sqlite3_malloc]</Line>
  <Line number="6115">** or else the use of the [data_store_directory pragma] should be avoided.</Line>
  <Line number="6116">*/</Line>
  <Line number="6117">SQLITE_API SQLITE_EXTERN char *sqlite3_data_directory;</Line>
  <Line number="6118"></Line>
  <Line number="6119">/*</Line>
  <Line number="6120">** CAPI3REF: Win32 Specific Interface</Line>
  <Line number="6121">**</Line>
  <Line number="6122">** These interfaces are available only on Windows.  The</Line>
  <Line number="6123">** [sqlite3_win32_set_directory] interface is used to set the value associated</Line>
  <Line number="6124">** with the [sqlite3_temp_directory] or [sqlite3_data_directory] variable, to</Line>
  <Line number="6125">** zValue, depending on the value of the type parameter.  The zValue parameter</Line>
  <Line number="6126">** should be NULL to cause the previous value to be freed via [sqlite3_free];</Line>
  <Line number="6127">** a non-NULL value will be copied into memory obtained from [sqlite3_malloc]</Line>
  <Line number="6128">** prior to being used.  The [sqlite3_win32_set_directory] interface returns</Line>
  <Line number="6129">** [SQLITE_OK] to indicate success, [SQLITE_ERROR] if the type is unsupported,</Line>
  <Line number="6130">** or [SQLITE_NOMEM] if memory could not be allocated.  The value of the</Line>
  <Line number="6131">** [sqlite3_data_directory] variable is intended to act as a replacement for</Line>
  <Line number="6132">** the current directory on the sub-platforms of Win32 where that concept is</Line>
  <Line number="6133">** not present, e.g. WinRT and UWP.  The [sqlite3_win32_set_directory8] and</Line>
  <Line number="6134">** [sqlite3_win32_set_directory16] interfaces behave exactly the same as the</Line>
  <Line number="6135">** sqlite3_win32_set_directory interface except the string parameter must be</Line>
  <Line number="6136">** UTF-8 or UTF-16, respectively.</Line>
  <Line number="6137">*/</Line>
  <Line number="6138">SQLITE_API int sqlite3_win32_set_directory(</Line>
  <Line number="6139">  unsigned long type, /* Identifier for directory being set or reset */</Line>
  <Line number="6140">  void *zValue        /* New value for directory being set or reset */</Line>
  <Line number="6141">);</Line>
  <Line number="6142">SQLITE_API int sqlite3_win32_set_directory8(unsigned long type, const char *zValue);</Line>
  <Line number="6143">SQLITE_API int sqlite3_win32_set_directory16(unsigned long type, const void *zValue);</Line>
  <Line number="6144"></Line>
  <Line number="6145">/*</Line>
  <Line number="6146">** CAPI3REF: Win32 Directory Types</Line>
  <Line number="6147">**</Line>
  <Line number="6148">** These macros are only available on Windows.  They define the allowed values</Line>
  <Line number="6149">** for the type argument to the [sqlite3_win32_set_directory] interface.</Line>
  <Line number="6150">*/</Line>
  <Line number="6151">#define SQLITE_WIN32_DATA_DIRECTORY_TYPE  1</Line>
  <Line number="6152">#define SQLITE_WIN32_TEMP_DIRECTORY_TYPE  2</Line>
  <Line number="6153"></Line>
  <Line number="6154">/*</Line>
  <Line number="6155">** CAPI3REF: Test For Auto-Commit Mode</Line>
  <Line number="6156">** KEYWORDS: {autocommit mode}</Line>
  <Line number="6157">** METHOD: sqlite3</Line>
  <Line number="6158">**</Line>
  <Line number="6159">** ^The sqlite3_get_autocommit() interface returns non-zero or</Line>
  <Line number="6160">** zero if the given database connection is or is not in autocommit mode,</Line>
  <Line number="6161">** respectively.  ^Autocommit mode is on by default.</Line>
  <Line number="6162">** ^Autocommit mode is disabled by a [BEGIN] statement.</Line>
  <Line number="6163">** ^Autocommit mode is re-enabled by a [COMMIT] or [ROLLBACK].</Line>
  <Line number="6164">**</Line>
  <Line number="6165">** If certain kinds of errors occur on a statement within a multi-statement</Line>
  <Line number="6166">** transaction (errors including [SQLITE_FULL], [SQLITE_IOERR],</Line>
  <Line number="6167">** [SQLITE_NOMEM], [SQLITE_BUSY], and [SQLITE_INTERRUPT]) then the</Line>
  <Line number="6168">** transaction might be rolled back automatically.  The only way to</Line>
  <Line number="6169">** find out whether SQLite automatically rolled back the transaction after</Line>
  <Line number="6170">** an error is to use this function.</Line>
  <Line number="6171">**</Line>
  <Line number="6172">** If another thread changes the autocommit status of the database</Line>
  <Line number="6173">** connection while this routine is running, then the return value</Line>
  <Line number="6174">** is undefined.</Line>
  <Line number="6175">*/</Line>
  <Line number="6176">SQLITE_API int sqlite3_get_autocommit(sqlite3*);</Line>
  <Line number="6177"></Line>
  <Line number="6178">/*</Line>
  <Line number="6179">** CAPI3REF: Find The Database Handle Of A Prepared Statement</Line>
  <Line number="6180">** METHOD: sqlite3_stmt</Line>
  <Line number="6181">**</Line>
  <Line number="6182">** ^The sqlite3_db_handle interface returns the [database connection] handle</Line>
  <Line number="6183">** to which a [prepared statement] belongs.  ^The [database connection]</Line>
  <Line number="6184">** returned by sqlite3_db_handle is the same [database connection]</Line>
  <Line number="6185">** that was the first argument</Line>
  <Line number="6186">** to the [sqlite3_prepare_v2()] call (or its variants) that was used to</Line>
  <Line number="6187">** create the statement in the first place.</Line>
  <Line number="6188">*/</Line>
  <Line number="6189">SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt*);</Line>
  <Line number="6190"></Line>
  <Line number="6191">/*</Line>
  <Line number="6192">** CAPI3REF: Return The Filename For A Database Connection</Line>
  <Line number="6193">** METHOD: sqlite3</Line>
  <Line number="6194">**</Line>
  <Line number="6195">** ^The sqlite3_db_filename(D,N) interface returns a pointer to the filename</Line>
  <Line number="6196">** associated with database N of connection D.</Line>
  <Line number="6197">** ^If there is no attached database N on the database</Line>
  <Line number="6198">** connection D, or if database N is a temporary or in-memory database, then</Line>
  <Line number="6199">** this function will return either a NULL pointer or an empty string.</Line>
  <Line number="6200">**</Line>
  <Line number="6201">** ^The string value returned by this routine is owned and managed by</Line>
  <Line number="6202">** the database connection.  ^The value will be valid until the database N</Line>
  <Line number="6203">** is [DETACH]-ed or until the database connection closes.</Line>
  <Line number="6204">**</Line>
  <Line number="6205">** ^The filename returned by this function is the output of the</Line>
  <Line number="6206">** xFullPathname method of the [VFS].  ^In other words, the filename</Line>
  <Line number="6207">** will be an absolute pathname, even if the filename used</Line>
  <Line number="6208">** to open the database originally was a URI or relative pathname.</Line>
  <Line number="6209">**</Line>
  <Line number="6210">** If the filename pointer returned by this routine is not NULL, then it</Line>
  <Line number="6211">** can be used as the filename input parameter to these routines:</Line>
  <Line number="6212">** &lt;ul&gt;</Line>
  <Line number="6213">** &lt;li&gt; [sqlite3_uri_parameter()]</Line>
  <Line number="6214">** &lt;li&gt; [sqlite3_uri_boolean()]</Line>
  <Line number="6215">** &lt;li&gt; [sqlite3_uri_int64()]</Line>
  <Line number="6216">** &lt;li&gt; [sqlite3_filename_database()]</Line>
  <Line number="6217">** &lt;li&gt; [sqlite3_filename_journal()]</Line>
  <Line number="6218">** &lt;li&gt; [sqlite3_filename_wal()]</Line>
  <Line number="6219">** &lt;/ul&gt;</Line>
  <Line number="6220">*/</Line>
  <Line number="6221">SQLITE_API const char *sqlite3_db_filename(sqlite3 *db, const char *zDbName);</Line>
  <Line number="6222"></Line>
  <Line number="6223">/*</Line>
  <Line number="6224">** CAPI3REF: Determine if a database is read-only</Line>
  <Line number="6225">** METHOD: sqlite3</Line>
  <Line number="6226">**</Line>
  <Line number="6227">** ^The sqlite3_db_readonly(D,N) interface returns 1 if the database N</Line>
  <Line number="6228">** of connection D is read-only, 0 if it is read/write, or -1 if N is not</Line>
  <Line number="6229">** the name of a database on connection D.</Line>
  <Line number="6230">*/</Line>
  <Line number="6231">SQLITE_API int sqlite3_db_readonly(sqlite3 *db, const char *zDbName);</Line>
  <Line number="6232"></Line>
  <Line number="6233">/*</Line>
  <Line number="6234">** CAPI3REF: Determine the transaction state of a database</Line>
  <Line number="6235">** METHOD: sqlite3</Line>
  <Line number="6236">**</Line>
  <Line number="6237">** ^The sqlite3_txn_state(D,S) interface returns the current</Line>
  <Line number="6238">** [transaction state] of schema S in database connection D.  ^If S is NULL,</Line>
  <Line number="6239">** then the highest transaction state of any schema on database connection D</Line>
  <Line number="6240">** is returned.  Transaction states are (in order of lowest to highest):</Line>
  <Line number="6241">** &lt;ol&gt;</Line>
  <Line number="6242">** &lt;li value=&quot;0&quot;&gt; SQLITE_TXN_NONE</Line>
  <Line number="6243">** &lt;li value=&quot;1&quot;&gt; SQLITE_TXN_READ</Line>
  <Line number="6244">** &lt;li value=&quot;2&quot;&gt; SQLITE_TXN_WRITE</Line>
  <Line number="6245">** &lt;/ol&gt;</Line>
  <Line number="6246">** ^If the S argument to sqlite3_txn_state(D,S) is not the name of</Line>
  <Line number="6247">** a valid schema, then -1 is returned.</Line>
  <Line number="6248">*/</Line>
  <Line number="6249">SQLITE_API int sqlite3_txn_state(sqlite3*,const char *zSchema);</Line>
  <Line number="6250"></Line>
  <Line number="6251">/*</Line>
  <Line number="6252">** CAPI3REF: Allowed return values from [sqlite3_txn_state()]</Line>
  <Line number="6253">** KEYWORDS: {transaction state}</Line>
  <Line number="6254">**</Line>
  <Line number="6255">** These constants define the current transaction state of a database file.</Line>
  <Line number="6256">** ^The [sqlite3_txn_state(D,S)] interface returns one of these</Line>
  <Line number="6257">** constants in order to describe the transaction state of schema S</Line>
  <Line number="6258">** in [database connection] D.</Line>
  <Line number="6259">**</Line>
  <Line number="6260">** &lt;dl&gt;</Line>
  <Line number="6261">** [[SQLITE_TXN_NONE]] &lt;dt&gt;SQLITE_TXN_NONE&lt;/dt&gt;</Line>
  <Line number="6262">** &lt;dd&gt;The SQLITE_TXN_NONE state means that no transaction is currently</Line>
  <Line number="6263">** pending.&lt;/dd&gt;</Line>
  <Line number="6264">**</Line>
  <Line number="6265">** [[SQLITE_TXN_READ]] &lt;dt&gt;SQLITE_TXN_READ&lt;/dt&gt;</Line>
  <Line number="6266">** &lt;dd&gt;The SQLITE_TXN_READ state means that the database is currently</Line>
  <Line number="6267">** in a read transaction.  Content has been read from the database file</Line>
  <Line number="6268">** but nothing in the database file has changed.  The transaction state</Line>
  <Line number="6269">** will advanced to SQLITE_TXN_WRITE if any changes occur and there are</Line>
  <Line number="6270">** no other conflicting concurrent write transactions.  The transaction</Line>
  <Line number="6271">** state will revert to SQLITE_TXN_NONE following a [ROLLBACK] or</Line>
  <Line number="6272">** [COMMIT].&lt;/dd&gt;</Line>
  <Line number="6273">**</Line>
  <Line number="6274">** [[SQLITE_TXN_WRITE]] &lt;dt&gt;SQLITE_TXN_WRITE&lt;/dt&gt;</Line>
  <Line number="6275">** &lt;dd&gt;The SQLITE_TXN_WRITE state means that the database is currently</Line>
  <Line number="6276">** in a write transaction.  Content has been written to the database file</Line>
  <Line number="6277">** but has not yet committed.  The transaction state will change to</Line>
  <Line number="6278">** to SQLITE_TXN_NONE at the next [ROLLBACK] or [COMMIT].&lt;/dd&gt;</Line>
  <Line number="6279">*/</Line>
  <Line number="6280">#define SQLITE_TXN_NONE  0</Line>
  <Line number="6281">#define SQLITE_TXN_READ  1</Line>
  <Line number="6282">#define SQLITE_TXN_WRITE 2</Line>
  <Line number="6283"></Line>
  <Line number="6284">/*</Line>
  <Line number="6285">** CAPI3REF: Find the next prepared statement</Line>
  <Line number="6286">** METHOD: sqlite3</Line>
  <Line number="6287">**</Line>
  <Line number="6288">** ^This interface returns a pointer to the next [prepared statement] after</Line>
  <Line number="6289">** pStmt associated with the [database connection] pDb.  ^If pStmt is NULL</Line>
  <Line number="6290">** then this interface returns a pointer to the first prepared statement</Line>
  <Line number="6291">** associated with the database connection pDb.  ^If no prepared statement</Line>
  <Line number="6292">** satisfies the conditions of this routine, it returns NULL.</Line>
  <Line number="6293">**</Line>
  <Line number="6294">** The [database connection] pointer D in a call to</Line>
  <Line number="6295">** [sqlite3_next_stmt(D,S)] must refer to an open database</Line>
  <Line number="6296">** connection and in particular must not be a NULL pointer.</Line>
  <Line number="6297">*/</Line>
  <Line number="6298">SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt);</Line>
  <Line number="6299"></Line>
  <Line number="6300">/*</Line>
  <Line number="6301">** CAPI3REF: Commit And Rollback Notification Callbacks</Line>
  <Line number="6302">** METHOD: sqlite3</Line>
  <Line number="6303">**</Line>
  <Line number="6304">** ^The sqlite3_commit_hook() interface registers a callback</Line>
  <Line number="6305">** function to be invoked whenever a transaction is [COMMIT | committed].</Line>
  <Line number="6306">** ^Any callback set by a previous call to sqlite3_commit_hook()</Line>
  <Line number="6307">** for the same database connection is overridden.</Line>
  <Line number="6308">** ^The sqlite3_rollback_hook() interface registers a callback</Line>
  <Line number="6309">** function to be invoked whenever a transaction is [ROLLBACK | rolled back].</Line>
  <Line number="6310">** ^Any callback set by a previous call to sqlite3_rollback_hook()</Line>
  <Line number="6311">** for the same database connection is overridden.</Line>
  <Line number="6312">** ^The pArg argument is passed through to the callback.</Line>
  <Line number="6313">** ^If the callback on a commit hook function returns non-zero,</Line>
  <Line number="6314">** then the commit is converted into a rollback.</Line>
  <Line number="6315">**</Line>
  <Line number="6316">** ^The sqlite3_commit_hook(D,C,P) and sqlite3_rollback_hook(D,C,P) functions</Line>
  <Line number="6317">** return the P argument from the previous call of the same function</Line>
  <Line number="6318">** on the same [database connection] D, or NULL for</Line>
  <Line number="6319">** the first call for each function on D.</Line>
  <Line number="6320">**</Line>
  <Line number="6321">** The commit and rollback hook callbacks are not reentrant.</Line>
  <Line number="6322">** The callback implementation must not do anything that will modify</Line>
  <Line number="6323">** the database connection that invoked the callback.  Any actions</Line>
  <Line number="6324">** to modify the database connection must be deferred until after the</Line>
  <Line number="6325">** completion of the [sqlite3_step()] call that triggered the commit</Line>
  <Line number="6326">** or rollback hook in the first place.</Line>
  <Line number="6327">** Note that running any other SQL statements, including SELECT statements,</Line>
  <Line number="6328">** or merely calling [sqlite3_prepare_v2()] and [sqlite3_step()] will modify</Line>
  <Line number="6329">** the database connections for the meaning of &quot;modify&quot; in this paragraph.</Line>
  <Line number="6330">**</Line>
  <Line number="6331">** ^Registering a NULL function disables the callback.</Line>
  <Line number="6332">**</Line>
  <Line number="6333">** ^When the commit hook callback routine returns zero, the [COMMIT]</Line>
  <Line number="6334">** operation is allowed to continue normally.  ^If the commit hook</Line>
  <Line number="6335">** returns non-zero, then the [COMMIT] is converted into a [ROLLBACK].</Line>
  <Line number="6336">** ^The rollback hook is invoked on a rollback that results from a commit</Line>
  <Line number="6337">** hook returning non-zero, just as it would be with any other rollback.</Line>
  <Line number="6338">**</Line>
  <Line number="6339">** ^For the purposes of this API, a transaction is said to have been</Line>
  <Line number="6340">** rolled back if an explicit &quot;ROLLBACK&quot; statement is executed, or</Line>
  <Line number="6341">** an error or constraint causes an implicit rollback to occur.</Line>
  <Line number="6342">** ^The rollback callback is not invoked if a transaction is</Line>
  <Line number="6343">** automatically rolled back because the database connection is closed.</Line>
  <Line number="6344">**</Line>
  <Line number="6345">** See also the [sqlite3_update_hook()] interface.</Line>
  <Line number="6346">*/</Line>
  <Line number="6347">SQLITE_API void *sqlite3_commit_hook(sqlite3*, int(*)(void*), void*);</Line>
  <Line number="6348">SQLITE_API void *sqlite3_rollback_hook(sqlite3*, void(*)(void *), void*);</Line>
  <Line number="6349"></Line>
  <Line number="6350">/*</Line>
  <Line number="6351">** CAPI3REF: Data Change Notification Callbacks</Line>
  <Line number="6352">** METHOD: sqlite3</Line>
  <Line number="6353">**</Line>
  <Line number="6354">** ^The sqlite3_update_hook() interface registers a callback function</Line>
  <Line number="6355">** with the [database connection] identified by the first argument</Line>
  <Line number="6356">** to be invoked whenever a row is updated, inserted or deleted in</Line>
  <Line number="6357">** a [rowid table].</Line>
  <Line number="6358">** ^Any callback set by a previous call to this function</Line>
  <Line number="6359">** for the same database connection is overridden.</Line>
  <Line number="6360">**</Line>
  <Line number="6361">** ^The second argument is a pointer to the function to invoke when a</Line>
  <Line number="6362">** row is updated, inserted or deleted in a rowid table.</Line>
  <Line number="6363">** ^The first argument to the callback is a copy of the third argument</Line>
  <Line number="6364">** to sqlite3_update_hook().</Line>
  <Line number="6365">** ^The second callback argument is one of [SQLITE_INSERT], [SQLITE_DELETE],</Line>
  <Line number="6366">** or [SQLITE_UPDATE], depending on the operation that caused the callback</Line>
  <Line number="6367">** to be invoked.</Line>
  <Line number="6368">** ^The third and fourth arguments to the callback contain pointers to the</Line>
  <Line number="6369">** database and table name containing the affected row.</Line>
  <Line number="6370">** ^The final callback parameter is the [rowid] of the row.</Line>
  <Line number="6371">** ^In the case of an update, this is the [rowid] after the update takes place.</Line>
  <Line number="6372">**</Line>
  <Line number="6373">** ^(The update hook is not invoked when internal system tables are</Line>
  <Line number="6374">** modified (i.e. sqlite_sequence).)^</Line>
  <Line number="6375">** ^The update hook is not invoked when [WITHOUT ROWID] tables are modified.</Line>
  <Line number="6376">**</Line>
  <Line number="6377">** ^In the current implementation, the update hook</Line>
  <Line number="6378">** is not invoked when conflicting rows are deleted because of an</Line>
  <Line number="6379">** [ON CONFLICT | ON CONFLICT REPLACE] clause.  ^Nor is the update hook</Line>
  <Line number="6380">** invoked when rows are deleted using the [truncate optimization].</Line>
  <Line number="6381">** The exceptions defined in this paragraph might change in a future</Line>
  <Line number="6382">** release of SQLite.</Line>
  <Line number="6383">**</Line>
  <Line number="6384">** The update hook implementation must not do anything that will modify</Line>
  <Line number="6385">** the database connection that invoked the update hook.  Any actions</Line>
  <Line number="6386">** to modify the database connection must be deferred until after the</Line>
  <Line number="6387">** completion of the [sqlite3_step()] call that triggered the update hook.</Line>
  <Line number="6388">** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their</Line>
  <Line number="6389">** database connections for the meaning of &quot;modify&quot; in this paragraph.</Line>
  <Line number="6390">**</Line>
  <Line number="6391">** ^The sqlite3_update_hook(D,C,P) function</Line>
  <Line number="6392">** returns the P argument from the previous call</Line>
  <Line number="6393">** on the same [database connection] D, or NULL for</Line>
  <Line number="6394">** the first call on D.</Line>
  <Line number="6395">**</Line>
  <Line number="6396">** See also the [sqlite3_commit_hook()], [sqlite3_rollback_hook()],</Line>
  <Line number="6397">** and [sqlite3_preupdate_hook()] interfaces.</Line>
  <Line number="6398">*/</Line>
  <Line number="6399">SQLITE_API void *sqlite3_update_hook(</Line>
  <Line number="6400">  sqlite3*,</Line>
  <Line number="6401">  void(*)(void *,int ,char const *,char const *,sqlite3_int64),</Line>
  <Line number="6402">  void*</Line>
  <Line number="6403">);</Line>
  <Line number="6404"></Line>
  <Line number="6405">/*</Line>
  <Line number="6406">** CAPI3REF: Enable Or Disable Shared Pager Cache</Line>
  <Line number="6407">**</Line>
  <Line number="6408">** ^(This routine enables or disables the sharing of the database cache</Line>
  <Line number="6409">** and schema data structures between [database connection | connections]</Line>
  <Line number="6410">** to the same database. Sharing is enabled if the argument is true</Line>
  <Line number="6411">** and disabled if the argument is false.)^</Line>
  <Line number="6412">**</Line>
  <Line number="6413">** ^Cache sharing is enabled and disabled for an entire process.</Line>
  <Line number="6414">** This is a change as of SQLite [version 3.5.0] ([dateof:3.5.0]).</Line>
  <Line number="6415">** In prior versions of SQLite,</Line>
  <Line number="6416">** sharing was enabled or disabled for each thread separately.</Line>
  <Line number="6417">**</Line>
  <Line number="6418">** ^(The cache sharing mode set by this interface effects all subsequent</Line>
  <Line number="6419">** calls to [sqlite3_open()], [sqlite3_open_v2()], and [sqlite3_open16()].</Line>
  <Line number="6420">** Existing database connections continue to use the sharing mode</Line>
  <Line number="6421">** that was in effect at the time they were opened.)^</Line>
  <Line number="6422">**</Line>
  <Line number="6423">** ^(This routine returns [SQLITE_OK] if shared cache was enabled or disabled</Line>
  <Line number="6424">** successfully.  An [error code] is returned otherwise.)^</Line>
  <Line number="6425">**</Line>
  <Line number="6426">** ^Shared cache is disabled by default. It is recommended that it stay</Line>
  <Line number="6427">** that way.  In other words, do not use this routine.  This interface</Line>
  <Line number="6428">** continues to be provided for historical compatibility, but its use is</Line>
  <Line number="6429">** discouraged.  Any use of shared cache is discouraged.  If shared cache</Line>
  <Line number="6430">** must be used, it is recommended that shared cache only be enabled for</Line>
  <Line number="6431">** individual database connections using the [sqlite3_open_v2()] interface</Line>
  <Line number="6432">** with the [SQLITE_OPEN_SHAREDCACHE] flag.</Line>
  <Line number="6433">**</Line>
  <Line number="6434">** Note: This method is disabled on MacOS X 10.7 and iOS version 5.0</Line>
  <Line number="6435">** and will always return SQLITE_MISUSE. On those systems,</Line>
  <Line number="6436">** shared cache mode should be enabled per-database connection via</Line>
  <Line number="6437">** [sqlite3_open_v2()] with [SQLITE_OPEN_SHAREDCACHE].</Line>
  <Line number="6438">**</Line>
  <Line number="6439">** This interface is threadsafe on processors where writing a</Line>
  <Line number="6440">** 32-bit integer is atomic.</Line>
  <Line number="6441">**</Line>
  <Line number="6442">** See Also:  [SQLite Shared-Cache Mode]</Line>
  <Line number="6443">*/</Line>
  <Line number="6444">SQLITE_API int sqlite3_enable_shared_cache(int);</Line>
  <Line number="6445"></Line>
  <Line number="6446">/*</Line>
  <Line number="6447">** CAPI3REF: Attempt To Free Heap Memory</Line>
  <Line number="6448">**</Line>
  <Line number="6449">** ^The sqlite3_release_memory() interface attempts to free N bytes</Line>
  <Line number="6450">** of heap memory by deallocating non-essential memory allocations</Line>
  <Line number="6451">** held by the database library.   Memory used to cache database</Line>
  <Line number="6452">** pages to improve performance is an example of non-essential memory.</Line>
  <Line number="6453">** ^sqlite3_release_memory() returns the number of bytes actually freed,</Line>
  <Line number="6454">** which might be more or less than the amount requested.</Line>
  <Line number="6455">** ^The sqlite3_release_memory() routine is a no-op returning zero</Line>
  <Line number="6456">** if SQLite is not compiled with [SQLITE_ENABLE_MEMORY_MANAGEMENT].</Line>
  <Line number="6457">**</Line>
  <Line number="6458">** See also: [sqlite3_db_release_memory()]</Line>
  <Line number="6459">*/</Line>
  <Line number="6460">SQLITE_API int sqlite3_release_memory(int);</Line>
  <Line number="6461"></Line>
  <Line number="6462">/*</Line>
  <Line number="6463">** CAPI3REF: Free Memory Used By A Database Connection</Line>
  <Line number="6464">** METHOD: sqlite3</Line>
  <Line number="6465">**</Line>
  <Line number="6466">** ^The sqlite3_db_release_memory(D) interface attempts to free as much heap</Line>
  <Line number="6467">** memory as possible from database connection D. Unlike the</Line>
  <Line number="6468">** [sqlite3_release_memory()] interface, this interface is in effect even</Line>
  <Line number="6469">** when the [SQLITE_ENABLE_MEMORY_MANAGEMENT] compile-time option is</Line>
  <Line number="6470">** omitted.</Line>
  <Line number="6471">**</Line>
  <Line number="6472">** See also: [sqlite3_release_memory()]</Line>
  <Line number="6473">*/</Line>
  <Line number="6474">SQLITE_API int sqlite3_db_release_memory(sqlite3*);</Line>
  <Line number="6475"></Line>
  <Line number="6476">/*</Line>
  <Line number="6477">** CAPI3REF: Impose A Limit On Heap Size</Line>
  <Line number="6478">**</Line>
  <Line number="6479">** These interfaces impose limits on the amount of heap memory that will be</Line>
  <Line number="6480">** by all database connections within a single process.</Line>
  <Line number="6481">**</Line>
  <Line number="6482">** ^The sqlite3_soft_heap_limit64() interface sets and/or queries the</Line>
  <Line number="6483">** soft limit on the amount of heap memory that may be allocated by SQLite.</Line>
  <Line number="6484">** ^SQLite strives to keep heap memory utilization below the soft heap</Line>
  <Line number="6485">** limit by reducing the number of pages held in the page cache</Line>
  <Line number="6486">** as heap memory usages approaches the limit.</Line>
  <Line number="6487">** ^The soft heap limit is &quot;soft&quot; because even though SQLite strives to stay</Line>
  <Line number="6488">** below the limit, it will exceed the limit rather than generate</Line>
  <Line number="6489">** an [SQLITE_NOMEM] error.  In other words, the soft heap limit</Line>
  <Line number="6490">** is advisory only.</Line>
  <Line number="6491">**</Line>
  <Line number="6492">** ^The sqlite3_hard_heap_limit64(N) interface sets a hard upper bound of</Line>
  <Line number="6493">** N bytes on the amount of memory that will be allocated.  ^The</Line>
  <Line number="6494">** sqlite3_hard_heap_limit64(N) interface is similar to</Line>
  <Line number="6495">** sqlite3_soft_heap_limit64(N) except that memory allocations will fail</Line>
  <Line number="6496">** when the hard heap limit is reached.</Line>
  <Line number="6497">**</Line>
  <Line number="6498">** ^The return value from both sqlite3_soft_heap_limit64() and</Line>
  <Line number="6499">** sqlite3_hard_heap_limit64() is the size of</Line>
  <Line number="6500">** the heap limit prior to the call, or negative in the case of an</Line>
  <Line number="6501">** error.  ^If the argument N is negative</Line>
  <Line number="6502">** then no change is made to the heap limit.  Hence, the current</Line>
  <Line number="6503">** size of heap limits can be determined by invoking</Line>
  <Line number="6504">** sqlite3_soft_heap_limit64(-1) or sqlite3_hard_heap_limit(-1).</Line>
  <Line number="6505">**</Line>
  <Line number="6506">** ^Setting the heap limits to zero disables the heap limiter mechanism.</Line>
  <Line number="6507">**</Line>
  <Line number="6508">** ^The soft heap limit may not be greater than the hard heap limit.</Line>
  <Line number="6509">** ^If the hard heap limit is enabled and if sqlite3_soft_heap_limit(N)</Line>
  <Line number="6510">** is invoked with a value of N that is greater than the hard heap limit,</Line>
  <Line number="6511">** the the soft heap limit is set to the value of the hard heap limit.</Line>
  <Line number="6512">** ^The soft heap limit is automatically enabled whenever the hard heap</Line>
  <Line number="6513">** limit is enabled. ^When sqlite3_hard_heap_limit64(N) is invoked and</Line>
  <Line number="6514">** the soft heap limit is outside the range of 1..N, then the soft heap</Line>
  <Line number="6515">** limit is set to N.  ^Invoking sqlite3_soft_heap_limit64(0) when the</Line>
  <Line number="6516">** hard heap limit is enabled makes the soft heap limit equal to the</Line>
  <Line number="6517">** hard heap limit.</Line>
  <Line number="6518">**</Line>
  <Line number="6519">** The memory allocation limits can also be adjusted using</Line>
  <Line number="6520">** [PRAGMA soft_heap_limit] and [PRAGMA hard_heap_limit].</Line>
  <Line number="6521">**</Line>
  <Line number="6522">** ^(The heap limits are not enforced in the current implementation</Line>
  <Line number="6523">** if one or more of following conditions are true:</Line>
  <Line number="6524">**</Line>
  <Line number="6525">** &lt;ul&gt;</Line>
  <Line number="6526">** &lt;li&gt; The limit value is set to zero.</Line>
  <Line number="6527">** &lt;li&gt; Memory accounting is disabled using a combination of the</Line>
  <Line number="6528">**      [sqlite3_config]([SQLITE_CONFIG_MEMSTATUS],...) start-time option and</Line>
  <Line number="6529">**      the [SQLITE_DEFAULT_MEMSTATUS] compile-time option.</Line>
  <Line number="6530">** &lt;li&gt; An alternative page cache implementation is specified using</Line>
  <Line number="6531">**      [sqlite3_config]([SQLITE_CONFIG_PCACHE2],...).</Line>
  <Line number="6532">** &lt;li&gt; The page cache allocates from its own memory pool supplied</Line>
  <Line number="6533">**      by [sqlite3_config]([SQLITE_CONFIG_PAGECACHE],...) rather than</Line>
  <Line number="6534">**      from the heap.</Line>
  <Line number="6535">** &lt;/ul&gt;)^</Line>
  <Line number="6536">**</Line>
  <Line number="6537">** The circumstances under which SQLite will enforce the heap limits may</Line>
  <Line number="6538">** changes in future releases of SQLite.</Line>
  <Line number="6539">*/</Line>
  <Line number="6540">SQLITE_API sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);</Line>
  <Line number="6541">SQLITE_API sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N);</Line>
  <Line number="6542"></Line>
  <Line number="6543">/*</Line>
  <Line number="6544">** CAPI3REF: Deprecated Soft Heap Limit Interface</Line>
  <Line number="6545">** DEPRECATED</Line>
  <Line number="6546">**</Line>
  <Line number="6547">** This is a deprecated version of the [sqlite3_soft_heap_limit64()]</Line>
  <Line number="6548">** interface.  This routine is provided for historical compatibility</Line>
  <Line number="6549">** only.  All new applications should use the</Line>
  <Line number="6550">** [sqlite3_soft_heap_limit64()] interface rather than this one.</Line>
  <Line number="6551">*/</Line>
  <Line number="6552">SQLITE_API SQLITE_DEPRECATED void sqlite3_soft_heap_limit(int N);</Line>
  <Line number="6553"></Line>
  <Line number="6554"></Line>
  <Line number="6555">/*</Line>
  <Line number="6556">** CAPI3REF: Extract Metadata About A Column Of A Table</Line>
  <Line number="6557">** METHOD: sqlite3</Line>
  <Line number="6558">**</Line>
  <Line number="6559">** ^(The sqlite3_table_column_metadata(X,D,T,C,....) routine returns</Line>
  <Line number="6560">** information about column C of table T in database D</Line>
  <Line number="6561">** on [database connection] X.)^  ^The sqlite3_table_column_metadata()</Line>
  <Line number="6562">** interface returns SQLITE_OK and fills in the non-NULL pointers in</Line>
  <Line number="6563">** the final five arguments with appropriate values if the specified</Line>
  <Line number="6564">** column exists.  ^The sqlite3_table_column_metadata() interface returns</Line>
  <Line number="6565">** SQLITE_ERROR if the specified column does not exist.</Line>
  <Line number="6566">** ^If the column-name parameter to sqlite3_table_column_metadata() is a</Line>
  <Line number="6567">** NULL pointer, then this routine simply checks for the existence of the</Line>
  <Line number="6568">** table and returns SQLITE_OK if the table exists and SQLITE_ERROR if it</Line>
  <Line number="6569">** does not.  If the table name parameter T in a call to</Line>
  <Line number="6570">** sqlite3_table_column_metadata(X,D,T,C,...) is NULL then the result is</Line>
  <Line number="6571">** undefined behavior.</Line>
  <Line number="6572">**</Line>
  <Line number="6573">** ^The column is identified by the second, third and fourth parameters to</Line>
  <Line number="6574">** this function. ^(The second parameter is either the name of the database</Line>
  <Line number="6575">** (i.e. &quot;main&quot;, &quot;temp&quot;, or an attached database) containing the specified</Line>
  <Line number="6576">** table or NULL.)^ ^If it is NULL, then all attached databases are searched</Line>
  <Line number="6577">** for the table using the same algorithm used by the database engine to</Line>
  <Line number="6578">** resolve unqualified table references.</Line>
  <Line number="6579">**</Line>
  <Line number="6580">** ^The third and fourth parameters to this function are the table and column</Line>
  <Line number="6581">** name of the desired column, respectively.</Line>
  <Line number="6582">**</Line>
  <Line number="6583">** ^Metadata is returned by writing to the memory locations passed as the 5th</Line>
  <Line number="6584">** and subsequent parameters to this function. ^Any of these arguments may be</Line>
  <Line number="6585">** NULL, in which case the corresponding element of metadata is omitted.</Line>
  <Line number="6586">**</Line>
  <Line number="6587">** ^(&lt;blockquote&gt;</Line>
  <Line number="6588">** &lt;table border=&quot;1&quot;&gt;</Line>
  <Line number="6589">** &lt;tr&gt;&lt;th&gt; Parameter &lt;th&gt; Output&lt;br&gt;Type &lt;th&gt;  Description</Line>
  <Line number="6590">**</Line>
  <Line number="6591">** &lt;tr&gt;&lt;td&gt; 5th &lt;td&gt; const char* &lt;td&gt; Data type</Line>
  <Line number="6592">** &lt;tr&gt;&lt;td&gt; 6th &lt;td&gt; const char* &lt;td&gt; Name of default collation sequence</Line>
  <Line number="6593">** &lt;tr&gt;&lt;td&gt; 7th &lt;td&gt; int         &lt;td&gt; True if column has a NOT NULL constraint</Line>
  <Line number="6594">** &lt;tr&gt;&lt;td&gt; 8th &lt;td&gt; int         &lt;td&gt; True if column is part of the PRIMARY KEY</Line>
  <Line number="6595">** &lt;tr&gt;&lt;td&gt; 9th &lt;td&gt; int         &lt;td&gt; True if column is [AUTOINCREMENT]</Line>
  <Line number="6596">** &lt;/table&gt;</Line>
  <Line number="6597">** &lt;/blockquote&gt;)^</Line>
  <Line number="6598">**</Line>
  <Line number="6599">** ^The memory pointed to by the character pointers returned for the</Line>
  <Line number="6600">** declaration type and collation sequence is valid until the next</Line>
  <Line number="6601">** call to any SQLite API function.</Line>
  <Line number="6602">**</Line>
  <Line number="6603">** ^If the specified table is actually a view, an [error code] is returned.</Line>
  <Line number="6604">**</Line>
  <Line number="6605">** ^If the specified column is &quot;rowid&quot;, &quot;oid&quot; or &quot;_rowid_&quot; and the table</Line>
  <Line number="6606">** is not a [WITHOUT ROWID] table and an</Line>
  <Line number="6607">** [INTEGER PRIMARY KEY] column has been explicitly declared, then the output</Line>
  <Line number="6608">** parameters are set for the explicitly declared column. ^(If there is no</Line>
  <Line number="6609">** [INTEGER PRIMARY KEY] column, then the outputs</Line>
  <Line number="6610">** for the [rowid] are set as follows:</Line>
  <Line number="6611">**</Line>
  <Line number="6612">** &lt;pre&gt;</Line>
  <Line number="6613">**     data type: &quot;INTEGER&quot;</Line>
  <Line number="6614">**     collation sequence: &quot;BINARY&quot;</Line>
  <Line number="6615">**     not null: 0</Line>
  <Line number="6616">**     primary key: 1</Line>
  <Line number="6617">**     auto increment: 0</Line>
  <Line number="6618">** &lt;/pre&gt;)^</Line>
  <Line number="6619">**</Line>
  <Line number="6620">** ^This function causes all database schemas to be read from disk and</Line>
  <Line number="6621">** parsed, if that has not already been done, and returns an error if</Line>
  <Line number="6622">** any errors are encountered while loading the schema.</Line>
  <Line number="6623">*/</Line>
  <Line number="6624">SQLITE_API int sqlite3_table_column_metadata(</Line>
  <Line number="6625">  sqlite3 *db,                /* Connection handle */</Line>
  <Line number="6626">  const char *zDbName,        /* Database name or NULL */</Line>
  <Line number="6627">  const char *zTableName,     /* Table name */</Line>
  <Line number="6628">  const char *zColumnName,    /* Column name */</Line>
  <Line number="6629">  char const **pzDataType,    /* OUTPUT: Declared data type */</Line>
  <Line number="6630">  char const **pzCollSeq,     /* OUTPUT: Collation sequence name */</Line>
  <Line number="6631">  int *pNotNull,              /* OUTPUT: True if NOT NULL constraint exists */</Line>
  <Line number="6632">  int *pPrimaryKey,           /* OUTPUT: True if column part of PK */</Line>
  <Line number="6633">  int *pAutoinc               /* OUTPUT: True if column is auto-increment */</Line>
  <Line number="6634">);</Line>
  <Line number="6635"></Line>
  <Line number="6636">/*</Line>
  <Line number="6637">** CAPI3REF: Load An Extension</Line>
  <Line number="6638">** METHOD: sqlite3</Line>
  <Line number="6639">**</Line>
  <Line number="6640">** ^This interface loads an SQLite extension library from the named file.</Line>
  <Line number="6641">**</Line>
  <Line number="6642">** ^The sqlite3_load_extension() interface attempts to load an</Line>
  <Line number="6643">** [SQLite extension] library contained in the file zFile.  If</Line>
  <Line number="6644">** the file cannot be loaded directly, attempts are made to load</Line>
  <Line number="6645">** with various operating-system specific extensions added.</Line>
  <Line number="6646">** So for example, if &quot;samplelib&quot; cannot be loaded, then names like</Line>
  <Line number="6647">** &quot;samplelib.so&quot; or &quot;samplelib.dylib&quot; or &quot;samplelib.dll&quot; might</Line>
  <Line number="6648">** be tried also.</Line>
  <Line number="6649">**</Line>
  <Line number="6650">** ^The entry point is zProc.</Line>
  <Line number="6651">** ^(zProc may be 0, in which case SQLite will try to come up with an</Line>
  <Line number="6652">** entry point name on its own.  It first tries &quot;sqlite3_extension_init&quot;.</Line>
  <Line number="6653">** If that does not work, it constructs a name &quot;sqlite3_X_init&quot; where the</Line>
  <Line number="6654">** X is consists of the lower-case equivalent of all ASCII alphabetic</Line>
  <Line number="6655">** characters in the filename from the last &quot;/&quot; to the first following</Line>
  <Line number="6656">** &quot;.&quot; and omitting any initial &quot;lib&quot;.)^</Line>
  <Line number="6657">** ^The sqlite3_load_extension() interface returns</Line>
  <Line number="6658">** [SQLITE_OK] on success and [SQLITE_ERROR] if something goes wrong.</Line>
  <Line number="6659">** ^If an error occurs and pzErrMsg is not 0, then the</Line>
  <Line number="6660">** [sqlite3_load_extension()] interface shall attempt to</Line>
  <Line number="6661">** fill *pzErrMsg with error message text stored in memory</Line>
  <Line number="6662">** obtained from [sqlite3_malloc()]. The calling function</Line>
  <Line number="6663">** should free this memory by calling [sqlite3_free()].</Line>
  <Line number="6664">**</Line>
  <Line number="6665">** ^Extension loading must be enabled using</Line>
  <Line number="6666">** [sqlite3_enable_load_extension()] or</Line>
  <Line number="6667">** [sqlite3_db_config](db,[SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION],1,NULL)</Line>
  <Line number="6668">** prior to calling this API,</Line>
  <Line number="6669">** otherwise an error will be returned.</Line>
  <Line number="6670">**</Line>
  <Line number="6671">** &lt;b&gt;Security warning:&lt;/b&gt; It is recommended that the</Line>
  <Line number="6672">** [SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION] method be used to enable only this</Line>
  <Line number="6673">** interface.  The use of the [sqlite3_enable_load_extension()] interface</Line>
  <Line number="6674">** should be avoided.  This will keep the SQL function [load_extension()]</Line>
  <Line number="6675">** disabled and prevent SQL injections from giving attackers</Line>
  <Line number="6676">** access to extension loading capabilities.</Line>
  <Line number="6677">**</Line>
  <Line number="6678">** See also the [load_extension() SQL function].</Line>
  <Line number="6679">*/</Line>
  <Line number="6680">SQLITE_API int sqlite3_load_extension(</Line>
  <Line number="6681">  sqlite3 *db,          /* Load the extension into this database connection */</Line>
  <Line number="6682">  const char *zFile,    /* Name of the shared library containing extension */</Line>
  <Line number="6683">  const char *zProc,    /* Entry point.  Derived from zFile if 0 */</Line>
  <Line number="6684">  char **pzErrMsg       /* Put error message here if not 0 */</Line>
  <Line number="6685">);</Line>
  <Line number="6686"></Line>
  <Line number="6687">/*</Line>
  <Line number="6688">** CAPI3REF: Enable Or Disable Extension Loading</Line>
  <Line number="6689">** METHOD: sqlite3</Line>
  <Line number="6690">**</Line>
  <Line number="6691">** ^So as not to open security holes in older applications that are</Line>
  <Line number="6692">** unprepared to deal with [extension loading], and as a means of disabling</Line>
  <Line number="6693">** [extension loading] while evaluating user-entered SQL, the following API</Line>
  <Line number="6694">** is provided to turn the [sqlite3_load_extension()] mechanism on and off.</Line>
  <Line number="6695">**</Line>
  <Line number="6696">** ^Extension loading is off by default.</Line>
  <Line number="6697">** ^Call the sqlite3_enable_load_extension() routine with onoff==1</Line>
  <Line number="6698">** to turn extension loading on and call it with onoff==0 to turn</Line>
  <Line number="6699">** it back off again.</Line>
  <Line number="6700">**</Line>
  <Line number="6701">** ^This interface enables or disables both the C-API</Line>
  <Line number="6702">** [sqlite3_load_extension()] and the SQL function [load_extension()].</Line>
  <Line number="6703">** ^(Use [sqlite3_db_config](db,[SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION],..)</Line>
  <Line number="6704">** to enable or disable only the C-API.)^</Line>
  <Line number="6705">**</Line>
  <Line number="6706">** &lt;b&gt;Security warning:&lt;/b&gt; It is recommended that extension loading</Line>
  <Line number="6707">** be enabled using the [SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION] method</Line>
  <Line number="6708">** rather than this interface, so the [load_extension()] SQL function</Line>
  <Line number="6709">** remains disabled. This will prevent SQL injections from giving attackers</Line>
  <Line number="6710">** access to extension loading capabilities.</Line>
  <Line number="6711">*/</Line>
  <Line number="6712">SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff);</Line>
  <Line number="6713"></Line>
  <Line number="6714">/*</Line>
  <Line number="6715">** CAPI3REF: Automatically Load Statically Linked Extensions</Line>
  <Line number="6716">**</Line>
  <Line number="6717">** ^This interface causes the xEntryPoint() function to be invoked for</Line>
  <Line number="6718">** each new [database connection] that is created.  The idea here is that</Line>
  <Line number="6719">** xEntryPoint() is the entry point for a statically linked [SQLite extension]</Line>
  <Line number="6720">** that is to be automatically loaded into all new database connections.</Line>
  <Line number="6721">**</Line>
  <Line number="6722">** ^(Even though the function prototype shows that xEntryPoint() takes</Line>
  <Line number="6723">** no arguments and returns void, SQLite invokes xEntryPoint() with three</Line>
  <Line number="6724">** arguments and expects an integer result as if the signature of the</Line>
  <Line number="6725">** entry point where as follows:</Line>
  <Line number="6726">**</Line>
  <Line number="6727">** &lt;blockquote&gt;&lt;pre&gt;</Line>
  <Line number="6728">** &amp;nbsp;  int xEntryPoint(</Line>
  <Line number="6729">** &amp;nbsp;    sqlite3 *db,</Line>
  <Line number="6730">** &amp;nbsp;    const char **pzErrMsg,</Line>
  <Line number="6731">** &amp;nbsp;    const struct sqlite3_api_routines *pThunk</Line>
  <Line number="6732">** &amp;nbsp;  );</Line>
  <Line number="6733">** &lt;/pre&gt;&lt;/blockquote&gt;)^</Line>
  <Line number="6734">**</Line>
  <Line number="6735">** If the xEntryPoint routine encounters an error, it should make *pzErrMsg</Line>
  <Line number="6736">** point to an appropriate error message (obtained from [sqlite3_mprintf()])</Line>
  <Line number="6737">** and return an appropriate [error code].  ^SQLite ensures that *pzErrMsg</Line>
  <Line number="6738">** is NULL before calling the xEntryPoint().  ^SQLite will invoke</Line>
  <Line number="6739">** [sqlite3_free()] on *pzErrMsg after xEntryPoint() returns.  ^If any</Line>
  <Line number="6740">** xEntryPoint() returns an error, the [sqlite3_open()], [sqlite3_open16()],</Line>
  <Line number="6741">** or [sqlite3_open_v2()] call that provoked the xEntryPoint() will fail.</Line>
  <Line number="6742">**</Line>
  <Line number="6743">** ^Calling sqlite3_auto_extension(X) with an entry point X that is already</Line>
  <Line number="6744">** on the list of automatic extensions is a harmless no-op. ^No entry point</Line>
  <Line number="6745">** will be called more than once for each database connection that is opened.</Line>
  <Line number="6746">**</Line>
  <Line number="6747">** See also: [sqlite3_reset_auto_extension()]</Line>
  <Line number="6748">** and [sqlite3_cancel_auto_extension()]</Line>
  <Line number="6749">*/</Line>
  <Line number="6750">SQLITE_API int sqlite3_auto_extension(void(*xEntryPoint)(void));</Line>
  <Line number="6751"></Line>
  <Line number="6752">/*</Line>
  <Line number="6753">** CAPI3REF: Cancel Automatic Extension Loading</Line>
  <Line number="6754">**</Line>
  <Line number="6755">** ^The [sqlite3_cancel_auto_extension(X)] interface unregisters the</Line>
  <Line number="6756">** initialization routine X that was registered using a prior call to</Line>
  <Line number="6757">** [sqlite3_auto_extension(X)].  ^The [sqlite3_cancel_auto_extension(X)]</Line>
  <Line number="6758">** routine returns 1 if initialization routine X was successfully</Line>
  <Line number="6759">** unregistered and it returns 0 if X was not on the list of initialization</Line>
  <Line number="6760">** routines.</Line>
  <Line number="6761">*/</Line>
  <Line number="6762">SQLITE_API int sqlite3_cancel_auto_extension(void(*xEntryPoint)(void));</Line>
  <Line number="6763"></Line>
  <Line number="6764">/*</Line>
  <Line number="6765">** CAPI3REF: Reset Automatic Extension Loading</Line>
  <Line number="6766">**</Line>
  <Line number="6767">** ^This interface disables all automatic extensions previously</Line>
  <Line number="6768">** registered using [sqlite3_auto_extension()].</Line>
  <Line number="6769">*/</Line>
  <Line number="6770">SQLITE_API void sqlite3_reset_auto_extension(void);</Line>
  <Line number="6771"></Line>
  <Line number="6772">/*</Line>
  <Line number="6773">** The interface to the virtual-table mechanism is currently considered</Line>
  <Line number="6774">** to be experimental.  The interface might change in incompatible ways.</Line>
  <Line number="6775">** If this is a problem for you, do not use the interface at this time.</Line>
  <Line number="6776">**</Line>
  <Line number="6777">** When the virtual-table mechanism stabilizes, we will declare the</Line>
  <Line number="6778">** interface fixed, support it indefinitely, and remove this comment.</Line>
  <Line number="6779">*/</Line>
  <Line number="6780"></Line>
  <Line number="6781">/*</Line>
  <Line number="6782">** Structures used by the virtual table interface</Line>
  <Line number="6783">*/</Line>
  <Line number="6784">typedef struct sqlite3_vtab sqlite3_vtab;</Line>
  <Line number="6785">typedef struct sqlite3_index_info sqlite3_index_info;</Line>
  <Line number="6786">typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;</Line>
  <Line number="6787">typedef struct sqlite3_module sqlite3_module;</Line>
  <Line number="6788"></Line>
  <Line number="6789">/*</Line>
  <Line number="6790">** CAPI3REF: Virtual Table Object</Line>
  <Line number="6791">** KEYWORDS: sqlite3_module {virtual table module}</Line>
  <Line number="6792">**</Line>
  <Line number="6793">** This structure, sometimes called a &quot;virtual table module&quot;,</Line>
  <Line number="6794">** defines the implementation of a [virtual table].</Line>
  <Line number="6795">** This structure consists mostly of methods for the module.</Line>
  <Line number="6796">**</Line>
  <Line number="6797">** ^A virtual table module is created by filling in a persistent</Line>
  <Line number="6798">** instance of this structure and passing a pointer to that instance</Line>
  <Line number="6799">** to [sqlite3_create_module()] or [sqlite3_create_module_v2()].</Line>
  <Line number="6800">** ^The registration remains valid until it is replaced by a different</Line>
  <Line number="6801">** module or until the [database connection] closes.  The content</Line>
  <Line number="6802">** of this structure must not change while it is registered with</Line>
  <Line number="6803">** any database connection.</Line>
  <Line number="6804">*/</Line>
  <Line number="6805">struct sqlite3_module {</Line>
  <Line number="6806">  int iVersion;</Line>
  <Line number="6807">  int (*xCreate)(sqlite3*, void *pAux,</Line>
  <Line number="6808">               int argc, const char *const*argv,</Line>
  <Line number="6809">               sqlite3_vtab **ppVTab, char**);</Line>
  <Line number="6810">  int (*xConnect)(sqlite3*, void *pAux,</Line>
  <Line number="6811">               int argc, const char *const*argv,</Line>
  <Line number="6812">               sqlite3_vtab **ppVTab, char**);</Line>
  <Line number="6813">  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);</Line>
  <Line number="6814">  int (*xDisconnect)(sqlite3_vtab *pVTab);</Line>
  <Line number="6815">  int (*xDestroy)(sqlite3_vtab *pVTab);</Line>
  <Line number="6816">  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);</Line>
  <Line number="6817">  int (*xClose)(sqlite3_vtab_cursor*);</Line>
  <Line number="6818">  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,</Line>
  <Line number="6819">                int argc, sqlite3_value **argv);</Line>
  <Line number="6820">  int (*xNext)(sqlite3_vtab_cursor*);</Line>
  <Line number="6821">  int (*xEof)(sqlite3_vtab_cursor*);</Line>
  <Line number="6822">  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);</Line>
  <Line number="6823">  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);</Line>
  <Line number="6824">  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);</Line>
  <Line number="6825">  int (*xBegin)(sqlite3_vtab *pVTab);</Line>
  <Line number="6826">  int (*xSync)(sqlite3_vtab *pVTab);</Line>
  <Line number="6827">  int (*xCommit)(sqlite3_vtab *pVTab);</Line>
  <Line number="6828">  int (*xRollback)(sqlite3_vtab *pVTab);</Line>
  <Line number="6829">  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,</Line>
  <Line number="6830">                       void (**pxFunc)(sqlite3_context*,int,sqlite3_value**),</Line>
  <Line number="6831">                       void **ppArg);</Line>
  <Line number="6832">  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);</Line>
  <Line number="6833">  /* The methods above are in version 1 of the sqlite_module object. Those</Line>
  <Line number="6834">  ** below are for version 2 and greater. */</Line>
  <Line number="6835">  int (*xSavepoint)(sqlite3_vtab *pVTab, int);</Line>
  <Line number="6836">  int (*xRelease)(sqlite3_vtab *pVTab, int);</Line>
  <Line number="6837">  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);</Line>
  <Line number="6838">  /* The methods above are in versions 1 and 2 of the sqlite_module object.</Line>
  <Line number="6839">  ** Those below are for version 3 and greater. */</Line>
  <Line number="6840">  int (*xShadowName)(const char*);</Line>
  <Line number="6841">};</Line>
  <Line number="6842"></Line>
  <Line number="6843">/*</Line>
  <Line number="6844">** CAPI3REF: Virtual Table Indexing Information</Line>
  <Line number="6845">** KEYWORDS: sqlite3_index_info</Line>
  <Line number="6846">**</Line>
  <Line number="6847">** The sqlite3_index_info structure and its substructures is used as part</Line>
  <Line number="6848">** of the [virtual table] interface to</Line>
  <Line number="6849">** pass information into and receive the reply from the [xBestIndex]</Line>
  <Line number="6850">** method of a [virtual table module].  The fields under **Inputs** are the</Line>
  <Line number="6851">** inputs to xBestIndex and are read-only.  xBestIndex inserts its</Line>
  <Line number="6852">** results into the **Outputs** fields.</Line>
  <Line number="6853">**</Line>
  <Line number="6854">** ^(The aConstraint[] array records WHERE clause constraints of the form:</Line>
  <Line number="6855">**</Line>
  <Line number="6856">** &lt;blockquote&gt;column OP expr&lt;/blockquote&gt;</Line>
  <Line number="6857">**</Line>
  <Line number="6858">** where OP is =, &amp;lt;, &amp;lt;=, &amp;gt;, or &amp;gt;=.)^  ^(The particular operator is</Line>
  <Line number="6859">** stored in aConstraint[].op using one of the</Line>
  <Line number="6860">** [SQLITE_INDEX_CONSTRAINT_EQ | SQLITE_INDEX_CONSTRAINT_ values].)^</Line>
  <Line number="6861">** ^(The index of the column is stored in</Line>
  <Line number="6862">** aConstraint[].iColumn.)^  ^(aConstraint[].usable is TRUE if the</Line>
  <Line number="6863">** expr on the right-hand side can be evaluated (and thus the constraint</Line>
  <Line number="6864">** is usable) and false if it cannot.)^</Line>
  <Line number="6865">**</Line>
  <Line number="6866">** ^The optimizer automatically inverts terms of the form &quot;expr OP column&quot;</Line>
  <Line number="6867">** and makes other simplifications to the WHERE clause in an attempt to</Line>
  <Line number="6868">** get as many WHERE clause terms into the form shown above as possible.</Line>
  <Line number="6869">** ^The aConstraint[] array only reports WHERE clause terms that are</Line>
  <Line number="6870">** relevant to the particular virtual table being queried.</Line>
  <Line number="6871">**</Line>
  <Line number="6872">** ^Information about the ORDER BY clause is stored in aOrderBy[].</Line>
  <Line number="6873">** ^Each term of aOrderBy records a column of the ORDER BY clause.</Line>
  <Line number="6874">**</Line>
  <Line number="6875">** The colUsed field indicates which columns of the virtual table may be</Line>
  <Line number="6876">** required by the current scan. Virtual table columns are numbered from</Line>
  <Line number="6877">** zero in the order in which they appear within the CREATE TABLE statement</Line>
  <Line number="6878">** passed to sqlite3_declare_vtab(). For the first 63 columns (columns 0-62),</Line>
  <Line number="6879">** the corresponding bit is set within the colUsed mask if the column may be</Line>
  <Line number="6880">** required by SQLite. If the table has at least 64 columns and any column</Line>
  <Line number="6881">** to the right of the first 63 is required, then bit 63 of colUsed is also</Line>
  <Line number="6882">** set. In other words, column iCol may be required if the expression</Line>
  <Line number="6883">** (colUsed &amp; ((sqlite3_uint64)1 &lt;&lt; (iCol&gt;=63 ? 63 : iCol))) evaluates to</Line>
  <Line number="6884">** non-zero.</Line>
  <Line number="6885">**</Line>
  <Line number="6886">** The [xBestIndex] method must fill aConstraintUsage[] with information</Line>
  <Line number="6887">** about what parameters to pass to xFilter.  ^If argvIndex&gt;0 then</Line>
  <Line number="6888">** the right-hand side of the corresponding aConstraint[] is evaluated</Line>
  <Line number="6889">** and becomes the argvIndex-th entry in argv.  ^(If aConstraintUsage[].omit</Line>
  <Line number="6890">** is true, then the constraint is assumed to be fully handled by the</Line>
  <Line number="6891">** virtual table and might not be checked again by the byte code.)^ ^(The</Line>
  <Line number="6892">** aConstraintUsage[].omit flag is an optimization hint. When the omit flag</Line>
  <Line number="6893">** is left in its default setting of false, the constraint will always be</Line>
  <Line number="6894">** checked separately in byte code.  If the omit flag is change to true, then</Line>
  <Line number="6895">** the constraint may or may not be checked in byte code.  In other words,</Line>
  <Line number="6896">** when the omit flag is true there is no guarantee that the constraint will</Line>
  <Line number="6897">** not be checked again using byte code.)^</Line>
  <Line number="6898">**</Line>
  <Line number="6899">** ^The idxNum and idxPtr values are recorded and passed into the</Line>
  <Line number="6900">** [xFilter] method.</Line>
  <Line number="6901">** ^[sqlite3_free()] is used to free idxPtr if and only if</Line>
  <Line number="6902">** needToFreeIdxPtr is true.</Line>
  <Line number="6903">**</Line>
  <Line number="6904">** ^The orderByConsumed means that output from [xFilter]/[xNext] will occur in</Line>
  <Line number="6905">** the correct order to satisfy the ORDER BY clause so that no separate</Line>
  <Line number="6906">** sorting step is required.</Line>
  <Line number="6907">**</Line>
  <Line number="6908">** ^The estimatedCost value is an estimate of the cost of a particular</Line>
  <Line number="6909">** strategy. A cost of N indicates that the cost of the strategy is similar</Line>
  <Line number="6910">** to a linear scan of an SQLite table with N rows. A cost of log(N)</Line>
  <Line number="6911">** indicates that the expense of the operation is similar to that of a</Line>
  <Line number="6912">** binary search on a unique indexed field of an SQLite table with N rows.</Line>
  <Line number="6913">**</Line>
  <Line number="6914">** ^The estimatedRows value is an estimate of the number of rows that</Line>
  <Line number="6915">** will be returned by the strategy.</Line>
  <Line number="6916">**</Line>
  <Line number="6917">** The xBestIndex method may optionally populate the idxFlags field with a</Line>
  <Line number="6918">** mask of SQLITE_INDEX_SCAN_* flags. Currently there is only one such flag -</Line>
  <Line number="6919">** SQLITE_INDEX_SCAN_UNIQUE. If the xBestIndex method sets this flag, SQLite</Line>
  <Line number="6920">** assumes that the strategy may visit at most one row.</Line>
  <Line number="6921">**</Line>
  <Line number="6922">** Additionally, if xBestIndex sets the SQLITE_INDEX_SCAN_UNIQUE flag, then</Line>
  <Line number="6923">** SQLite also assumes that if a call to the xUpdate() method is made as</Line>
  <Line number="6924">** part of the same statement to delete or update a virtual table row and the</Line>
  <Line number="6925">** implementation returns SQLITE_CONSTRAINT, then there is no need to rollback</Line>
  <Line number="6926">** any database changes. In other words, if the xUpdate() returns</Line>
  <Line number="6927">** SQLITE_CONSTRAINT, the database contents must be exactly as they were</Line>
  <Line number="6928">** before xUpdate was called. By contrast, if SQLITE_INDEX_SCAN_UNIQUE is not</Line>
  <Line number="6929">** set and xUpdate returns SQLITE_CONSTRAINT, any database changes made by</Line>
  <Line number="6930">** the xUpdate method are automatically rolled back by SQLite.</Line>
  <Line number="6931">**</Line>
  <Line number="6932">** IMPORTANT: The estimatedRows field was added to the sqlite3_index_info</Line>
  <Line number="6933">** structure for SQLite [version 3.8.2] ([dateof:3.8.2]).</Line>
  <Line number="6934">** If a virtual table extension is</Line>
  <Line number="6935">** used with an SQLite version earlier than 3.8.2, the results of attempting</Line>
  <Line number="6936">** to read or write the estimatedRows field are undefined (but are likely</Line>
  <Line number="6937">** to include crashing the application). The estimatedRows field should</Line>
  <Line number="6938">** therefore only be used if [sqlite3_libversion_number()] returns a</Line>
  <Line number="6939">** value greater than or equal to 3008002. Similarly, the idxFlags field</Line>
  <Line number="6940">** was added for [version 3.9.0] ([dateof:3.9.0]).</Line>
  <Line number="6941">** It may therefore only be used if</Line>
  <Line number="6942">** sqlite3_libversion_number() returns a value greater than or equal to</Line>
  <Line number="6943">** 3009000.</Line>
  <Line number="6944">*/</Line>
  <Line number="6945">struct sqlite3_index_info {</Line>
  <Line number="6946">  /* Inputs */</Line>
  <Line number="6947">  int nConstraint;           /* Number of entries in aConstraint */</Line>
  <Line number="6948">  struct sqlite3_index_constraint {</Line>
  <Line number="6949">     int iColumn;              /* Column constrained.  -1 for ROWID */</Line>
  <Line number="6950">     unsigned char op;         /* Constraint operator */</Line>
  <Line number="6951">     unsigned char usable;     /* True if this constraint is usable */</Line>
  <Line number="6952">     int iTermOffset;          /* Used internally - xBestIndex should ignore */</Line>
  <Line number="6953">  } *aConstraint;            /* Table of WHERE clause constraints */</Line>
  <Line number="6954">  int nOrderBy;              /* Number of terms in the ORDER BY clause */</Line>
  <Line number="6955">  struct sqlite3_index_orderby {</Line>
  <Line number="6956">     int iColumn;              /* Column number */</Line>
  <Line number="6957">     unsigned char desc;       /* True for DESC.  False for ASC. */</Line>
  <Line number="6958">  } *aOrderBy;               /* The ORDER BY clause */</Line>
  <Line number="6959">  /* Outputs */</Line>
  <Line number="6960">  struct sqlite3_index_constraint_usage {</Line>
  <Line number="6961">    int argvIndex;           /* if &gt;0, constraint is part of argv to xFilter */</Line>
  <Line number="6962">    unsigned char omit;      /* Do not code a test for this constraint */</Line>
  <Line number="6963">  } *aConstraintUsage;</Line>
  <Line number="6964">  int idxNum;                /* Number used to identify the index */</Line>
  <Line number="6965">  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */</Line>
  <Line number="6966">  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */</Line>
  <Line number="6967">  int orderByConsumed;       /* True if output is already ordered */</Line>
  <Line number="6968">  double estimatedCost;           /* Estimated cost of using this index */</Line>
  <Line number="6969">  /* Fields below are only available in SQLite 3.8.2 and later */</Line>
  <Line number="6970">  sqlite3_int64 estimatedRows;    /* Estimated number of rows returned */</Line>
  <Line number="6971">  /* Fields below are only available in SQLite 3.9.0 and later */</Line>
  <Line number="6972">  int idxFlags;              /* Mask of SQLITE_INDEX_SCAN_* flags */</Line>
  <Line number="6973">  /* Fields below are only available in SQLite 3.10.0 and later */</Line>
  <Line number="6974">  sqlite3_uint64 colUsed;    /* Input: Mask of columns used by statement */</Line>
  <Line number="6975">};</Line>
  <Line number="6976"></Line>
  <Line number="6977">/*</Line>
  <Line number="6978">** CAPI3REF: Virtual Table Scan Flags</Line>
  <Line number="6979">**</Line>
  <Line number="6980">** Virtual table implementations are allowed to set the</Line>
  <Line number="6981">** [sqlite3_index_info].idxFlags field to some combination of</Line>
  <Line number="6982">** these bits.</Line>
  <Line number="6983">*/</Line>
  <Line number="6984">#define SQLITE_INDEX_SCAN_UNIQUE      1     /* Scan visits at most 1 row */</Line>
  <Line number="6985"></Line>
  <Line number="6986">/*</Line>
  <Line number="6987">** CAPI3REF: Virtual Table Constraint Operator Codes</Line>
  <Line number="6988">**</Line>
  <Line number="6989">** These macros define the allowed values for the</Line>
  <Line number="6990">** [sqlite3_index_info].aConstraint[].op field.  Each value represents</Line>
  <Line number="6991">** an operator that is part of a constraint term in the wHERE clause of</Line>
  <Line number="6992">** a query that uses a [virtual table].</Line>
  <Line number="6993">*/</Line>
  <Line number="6994">#define SQLITE_INDEX_CONSTRAINT_EQ         2</Line>
  <Line number="6995">#define SQLITE_INDEX_CONSTRAINT_GT         4</Line>
  <Line number="6996">#define SQLITE_INDEX_CONSTRAINT_LE         8</Line>
  <Line number="6997">#define SQLITE_INDEX_CONSTRAINT_LT        16</Line>
  <Line number="6998">#define SQLITE_INDEX_CONSTRAINT_GE        32</Line>
  <Line number="6999">#define SQLITE_INDEX_CONSTRAINT_MATCH     64</Line>
  <Line number="7000">#define SQLITE_INDEX_CONSTRAINT_LIKE      65</Line>
  <Line number="7001">#define SQLITE_INDEX_CONSTRAINT_GLOB      66</Line>
  <Line number="7002">#define SQLITE_INDEX_CONSTRAINT_REGEXP    67</Line>
  <Line number="7003">#define SQLITE_INDEX_CONSTRAINT_NE        68</Line>
  <Line number="7004">#define SQLITE_INDEX_CONSTRAINT_ISNOT     69</Line>
  <Line number="7005">#define SQLITE_INDEX_CONSTRAINT_ISNOTNULL 70</Line>
  <Line number="7006">#define SQLITE_INDEX_CONSTRAINT_ISNULL    71</Line>
  <Line number="7007">#define SQLITE_INDEX_CONSTRAINT_IS        72</Line>
  <Line number="7008">#define SQLITE_INDEX_CONSTRAINT_FUNCTION 150</Line>
  <Line number="7009"></Line>
  <Line number="7010">/*</Line>
  <Line number="7011">** CAPI3REF: Register A Virtual Table Implementation</Line>
  <Line number="7012">** METHOD: sqlite3</Line>
  <Line number="7013">**</Line>
  <Line number="7014">** ^These routines are used to register a new [virtual table module] name.</Line>
  <Line number="7015">** ^Module names must be registered before</Line>
  <Line number="7016">** creating a new [virtual table] using the module and before using a</Line>
  <Line number="7017">** preexisting [virtual table] for the module.</Line>
  <Line number="7018">**</Line>
  <Line number="7019">** ^The module name is registered on the [database connection] specified</Line>
  <Line number="7020">** by the first parameter.  ^The name of the module is given by the</Line>
  <Line number="7021">** second parameter.  ^The third parameter is a pointer to</Line>
  <Line number="7022">** the implementation of the [virtual table module].   ^The fourth</Line>
  <Line number="7023">** parameter is an arbitrary client data pointer that is passed through</Line>
  <Line number="7024">** into the [xCreate] and [xConnect] methods of the virtual table module</Line>
  <Line number="7025">** when a new virtual table is be being created or reinitialized.</Line>
  <Line number="7026">**</Line>
  <Line number="7027">** ^The sqlite3_create_module_v2() interface has a fifth parameter which</Line>
  <Line number="7028">** is a pointer to a destructor for the pClientData.  ^SQLite will</Line>
  <Line number="7029">** invoke the destructor function (if it is not NULL) when SQLite</Line>
  <Line number="7030">** no longer needs the pClientData pointer.  ^The destructor will also</Line>
  <Line number="7031">** be invoked if the call to sqlite3_create_module_v2() fails.</Line>
  <Line number="7032">** ^The sqlite3_create_module()</Line>
  <Line number="7033">** interface is equivalent to sqlite3_create_module_v2() with a NULL</Line>
  <Line number="7034">** destructor.</Line>
  <Line number="7035">**</Line>
  <Line number="7036">** ^If the third parameter (the pointer to the sqlite3_module object) is</Line>
  <Line number="7037">** NULL then no new module is create and any existing modules with the</Line>
  <Line number="7038">** same name are dropped.</Line>
  <Line number="7039">**</Line>
  <Line number="7040">** See also: [sqlite3_drop_modules()]</Line>
  <Line number="7041">*/</Line>
  <Line number="7042">SQLITE_API int sqlite3_create_module(</Line>
  <Line number="7043">  sqlite3 *db,               /* SQLite connection to register module with */</Line>
  <Line number="7044">  const char *zName,         /* Name of the module */</Line>
  <Line number="7045">  const sqlite3_module *p,   /* Methods for the module */</Line>
  <Line number="7046">  void *pClientData          /* Client data for xCreate/xConnect */</Line>
  <Line number="7047">);</Line>
  <Line number="7048">SQLITE_API int sqlite3_create_module_v2(</Line>
  <Line number="7049">  sqlite3 *db,               /* SQLite connection to register module with */</Line>
  <Line number="7050">  const char *zName,         /* Name of the module */</Line>
  <Line number="7051">  const sqlite3_module *p,   /* Methods for the module */</Line>
  <Line number="7052">  void *pClientData,         /* Client data for xCreate/xConnect */</Line>
  <Line number="7053">  void(*xDestroy)(void*)     /* Module destructor function */</Line>
  <Line number="7054">);</Line>
  <Line number="7055"></Line>
  <Line number="7056">/*</Line>
  <Line number="7057">** CAPI3REF: Remove Unnecessary Virtual Table Implementations</Line>
  <Line number="7058">** METHOD: sqlite3</Line>
  <Line number="7059">**</Line>
  <Line number="7060">** ^The sqlite3_drop_modules(D,L) interface removes all virtual</Line>
  <Line number="7061">** table modules from database connection D except those named on list L.</Line>
  <Line number="7062">** The L parameter must be either NULL or a pointer to an array of pointers</Line>
  <Line number="7063">** to strings where the array is terminated by a single NULL pointer.</Line>
  <Line number="7064">** ^If the L parameter is NULL, then all virtual table modules are removed.</Line>
  <Line number="7065">**</Line>
  <Line number="7066">** See also: [sqlite3_create_module()]</Line>
  <Line number="7067">*/</Line>
  <Line number="7068">SQLITE_API int sqlite3_drop_modules(</Line>
  <Line number="7069">  sqlite3 *db,                /* Remove modules from this connection */</Line>
  <Line number="7070">  const char **azKeep         /* Except, do not remove the ones named here */</Line>
  <Line number="7071">);</Line>
  <Line number="7072"></Line>
  <Line number="7073">/*</Line>
  <Line number="7074">** CAPI3REF: Virtual Table Instance Object</Line>
  <Line number="7075">** KEYWORDS: sqlite3_vtab</Line>
  <Line number="7076">**</Line>
  <Line number="7077">** Every [virtual table module] implementation uses a subclass</Line>
  <Line number="7078">** of this object to describe a particular instance</Line>
  <Line number="7079">** of the [virtual table].  Each subclass will</Line>
  <Line number="7080">** be tailored to the specific needs of the module implementation.</Line>
  <Line number="7081">** The purpose of this superclass is to define certain fields that are</Line>
  <Line number="7082">** common to all module implementations.</Line>
  <Line number="7083">**</Line>
  <Line number="7084">** ^Virtual tables methods can set an error message by assigning a</Line>
  <Line number="7085">** string obtained from [sqlite3_mprintf()] to zErrMsg.  The method should</Line>
  <Line number="7086">** take care that any prior string is freed by a call to [sqlite3_free()]</Line>
  <Line number="7087">** prior to assigning a new string to zErrMsg.  ^After the error message</Line>
  <Line number="7088">** is delivered up to the client application, the string will be automatically</Line>
  <Line number="7089">** freed by sqlite3_free() and the zErrMsg field will be zeroed.</Line>
  <Line number="7090">*/</Line>
  <Line number="7091">struct sqlite3_vtab {</Line>
  <Line number="7092">  const sqlite3_module *pModule;  /* The module for this virtual table */</Line>
  <Line number="7093">  int nRef;                       /* Number of open cursors */</Line>
  <Line number="7094">  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */</Line>
  <Line number="7095">  /* Virtual table implementations will typically add additional fields */</Line>
  <Line number="7096">};</Line>
  <Line number="7097"></Line>
  <Line number="7098">/*</Line>
  <Line number="7099">** CAPI3REF: Virtual Table Cursor Object</Line>
  <Line number="7100">** KEYWORDS: sqlite3_vtab_cursor {virtual table cursor}</Line>
  <Line number="7101">**</Line>
  <Line number="7102">** Every [virtual table module] implementation uses a subclass of the</Line>
  <Line number="7103">** following structure to describe cursors that point into the</Line>
  <Line number="7104">** [virtual table] and are used</Line>
  <Line number="7105">** to loop through the virtual table.  Cursors are created using the</Line>
  <Line number="7106">** [sqlite3_module.xOpen | xOpen] method of the module and are destroyed</Line>
  <Line number="7107">** by the [sqlite3_module.xClose | xClose] method.  Cursors are used</Line>
  <Line number="7108">** by the [xFilter], [xNext], [xEof], [xColumn], and [xRowid] methods</Line>
  <Line number="7109">** of the module.  Each module implementation will define</Line>
  <Line number="7110">** the content of a cursor structure to suit its own needs.</Line>
  <Line number="7111">**</Line>
  <Line number="7112">** This superclass exists in order to define fields of the cursor that</Line>
  <Line number="7113">** are common to all implementations.</Line>
  <Line number="7114">*/</Line>
  <Line number="7115">struct sqlite3_vtab_cursor {</Line>
  <Line number="7116">  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */</Line>
  <Line number="7117">  /* Virtual table implementations will typically add additional fields */</Line>
  <Line number="7118">};</Line>
  <Line number="7119"></Line>
  <Line number="7120">/*</Line>
  <Line number="7121">** CAPI3REF: Declare The Schema Of A Virtual Table</Line>
  <Line number="7122">**</Line>
  <Line number="7123">** ^The [xCreate] and [xConnect] methods of a</Line>
  <Line number="7124">** [virtual table module] call this interface</Line>
  <Line number="7125">** to declare the format (the names and datatypes of the columns) of</Line>
  <Line number="7126">** the virtual tables they implement.</Line>
  <Line number="7127">*/</Line>
  <Line number="7128">SQLITE_API int sqlite3_declare_vtab(sqlite3*, const char *zSQL);</Line>
  <Line number="7129"></Line>
  <Line number="7130">/*</Line>
  <Line number="7131">** CAPI3REF: Overload A Function For A Virtual Table</Line>
  <Line number="7132">** METHOD: sqlite3</Line>
  <Line number="7133">**</Line>
  <Line number="7134">** ^(Virtual tables can provide alternative implementations of functions</Line>
  <Line number="7135">** using the [xFindFunction] method of the [virtual table module].</Line>
  <Line number="7136">** But global versions of those functions</Line>
  <Line number="7137">** must exist in order to be overloaded.)^</Line>
  <Line number="7138">**</Line>
  <Line number="7139">** ^(This API makes sure a global version of a function with a particular</Line>
  <Line number="7140">** name and number of parameters exists.  If no such function exists</Line>
  <Line number="7141">** before this API is called, a new function is created.)^  ^The implementation</Line>
  <Line number="7142">** of the new function always causes an exception to be thrown.  So</Line>
  <Line number="7143">** the new function is not good for anything by itself.  Its only</Line>
  <Line number="7144">** purpose is to be a placeholder function that can be overloaded</Line>
  <Line number="7145">** by a [virtual table].</Line>
  <Line number="7146">*/</Line>
  <Line number="7147">SQLITE_API int sqlite3_overload_function(sqlite3*, const char *zFuncName, int nArg);</Line>
  <Line number="7148"></Line>
  <Line number="7149">/*</Line>
  <Line number="7150">** The interface to the virtual-table mechanism defined above (back up</Line>
  <Line number="7151">** to a comment remarkably similar to this one) is currently considered</Line>
  <Line number="7152">** to be experimental.  The interface might change in incompatible ways.</Line>
  <Line number="7153">** If this is a problem for you, do not use the interface at this time.</Line>
  <Line number="7154">**</Line>
  <Line number="7155">** When the virtual-table mechanism stabilizes, we will declare the</Line>
  <Line number="7156">** interface fixed, support it indefinitely, and remove this comment.</Line>
  <Line number="7157">*/</Line>
  <Line number="7158"></Line>
  <Line number="7159">/*</Line>
  <Line number="7160">** CAPI3REF: A Handle To An Open BLOB</Line>
  <Line number="7161">** KEYWORDS: {BLOB handle} {BLOB handles}</Line>
  <Line number="7162">**</Line>
  <Line number="7163">** An instance of this object represents an open BLOB on which</Line>
  <Line number="7164">** [sqlite3_blob_open | incremental BLOB I/O] can be performed.</Line>
  <Line number="7165">** ^Objects of this type are created by [sqlite3_blob_open()]</Line>
  <Line number="7166">** and destroyed by [sqlite3_blob_close()].</Line>
  <Line number="7167">** ^The [sqlite3_blob_read()] and [sqlite3_blob_write()] interfaces</Line>
  <Line number="7168">** can be used to read or write small subsections of the BLOB.</Line>
  <Line number="7169">** ^The [sqlite3_blob_bytes()] interface returns the size of the BLOB in bytes.</Line>
  <Line number="7170">*/</Line>
  <Line number="7171">typedef struct sqlite3_blob sqlite3_blob;</Line>
  <Line number="7172"></Line>
  <Line number="7173">/*</Line>
  <Line number="7174">** CAPI3REF: Open A BLOB For Incremental I/O</Line>
  <Line number="7175">** METHOD: sqlite3</Line>
  <Line number="7176">** CONSTRUCTOR: sqlite3_blob</Line>
  <Line number="7177">**</Line>
  <Line number="7178">** ^(This interfaces opens a [BLOB handle | handle] to the BLOB located</Line>
  <Line number="7179">** in row iRow, column zColumn, table zTable in database zDb;</Line>
  <Line number="7180">** in other words, the same BLOB that would be selected by:</Line>
  <Line number="7181">**</Line>
  <Line number="7182">** &lt;pre&gt;</Line>
  <Line number="7183">**     SELECT zColumn FROM zDb.zTable WHERE [rowid] = iRow;</Line>
  <Line number="7184">** &lt;/pre&gt;)^</Line>
  <Line number="7185">**</Line>
  <Line number="7186">** ^(Parameter zDb is not the filename that contains the database, but</Line>
  <Line number="7187">** rather the symbolic name of the database. For attached databases, this is</Line>
  <Line number="7188">** the name that appears after the AS keyword in the [ATTACH] statement.</Line>
  <Line number="7189">** For the main database file, the database name is &quot;main&quot;. For TEMP</Line>
  <Line number="7190">** tables, the database name is &quot;temp&quot;.)^</Line>
  <Line number="7191">**</Line>
  <Line number="7192">** ^If the flags parameter is non-zero, then the BLOB is opened for read</Line>
  <Line number="7193">** and write access. ^If the flags parameter is zero, the BLOB is opened for</Line>
  <Line number="7194">** read-only access.</Line>
  <Line number="7195">**</Line>
  <Line number="7196">** ^(On success, [SQLITE_OK] is returned and the new [BLOB handle] is stored</Line>
  <Line number="7197">** in *ppBlob. Otherwise an [error code] is returned and, unless the error</Line>
  <Line number="7198">** code is SQLITE_MISUSE, *ppBlob is set to NULL.)^ ^This means that, provided</Line>
  <Line number="7199">** the API is not misused, it is always safe to call [sqlite3_blob_close()]</Line>
  <Line number="7200">** on *ppBlob after this function it returns.</Line>
  <Line number="7201">**</Line>
  <Line number="7202">** This function fails with SQLITE_ERROR if any of the following are true:</Line>
  <Line number="7203">** &lt;ul&gt;</Line>
  <Line number="7204">**   &lt;li&gt; ^(Database zDb does not exist)^,</Line>
  <Line number="7205">**   &lt;li&gt; ^(Table zTable does not exist within database zDb)^,</Line>
  <Line number="7206">**   &lt;li&gt; ^(Table zTable is a WITHOUT ROWID table)^,</Line>
  <Line number="7207">**   &lt;li&gt; ^(Column zColumn does not exist)^,</Line>
  <Line number="7208">**   &lt;li&gt; ^(Row iRow is not present in the table)^,</Line>
  <Line number="7209">**   &lt;li&gt; ^(The specified column of row iRow contains a value that is not</Line>
  <Line number="7210">**         a TEXT or BLOB value)^,</Line>
  <Line number="7211">**   &lt;li&gt; ^(Column zColumn is part of an index, PRIMARY KEY or UNIQUE</Line>
  <Line number="7212">**         constraint and the blob is being opened for read/write access)^,</Line>
  <Line number="7213">**   &lt;li&gt; ^([foreign key constraints | Foreign key constraints] are enabled,</Line>
  <Line number="7214">**         column zColumn is part of a [child key] definition and the blob is</Line>
  <Line number="7215">**         being opened for read/write access)^.</Line>
  <Line number="7216">** &lt;/ul&gt;</Line>
  <Line number="7217">**</Line>
  <Line number="7218">** ^Unless it returns SQLITE_MISUSE, this function sets the</Line>
  <Line number="7219">** [database connection] error code and message accessible via</Line>
  <Line number="7220">** [sqlite3_errcode()] and [sqlite3_errmsg()] and related functions.</Line>
  <Line number="7221">**</Line>
  <Line number="7222">** A BLOB referenced by sqlite3_blob_open() may be read using the</Line>
  <Line number="7223">** [sqlite3_blob_read()] interface and modified by using</Line>
  <Line number="7224">** [sqlite3_blob_write()].  The [BLOB handle] can be moved to a</Line>
  <Line number="7225">** different row of the same table using the [sqlite3_blob_reopen()]</Line>
  <Line number="7226">** interface.  However, the column, table, or database of a [BLOB handle]</Line>
  <Line number="7227">** cannot be changed after the [BLOB handle] is opened.</Line>
  <Line number="7228">**</Line>
  <Line number="7229">** ^(If the row that a BLOB handle points to is modified by an</Line>
  <Line number="7230">** [UPDATE], [DELETE], or by [ON CONFLICT] side-effects</Line>
  <Line number="7231">** then the BLOB handle is marked as &quot;expired&quot;.</Line>
  <Line number="7232">** This is true if any column of the row is changed, even a column</Line>
  <Line number="7233">** other than the one the BLOB handle is open on.)^</Line>
  <Line number="7234">** ^Calls to [sqlite3_blob_read()] and [sqlite3_blob_write()] for</Line>
  <Line number="7235">** an expired BLOB handle fail with a return code of [SQLITE_ABORT].</Line>
  <Line number="7236">** ^(Changes written into a BLOB prior to the BLOB expiring are not</Line>
  <Line number="7237">** rolled back by the expiration of the BLOB.  Such changes will eventually</Line>
  <Line number="7238">** commit if the transaction continues to completion.)^</Line>
  <Line number="7239">**</Line>
  <Line number="7240">** ^Use the [sqlite3_blob_bytes()] interface to determine the size of</Line>
  <Line number="7241">** the opened blob.  ^The size of a blob may not be changed by this</Line>
  <Line number="7242">** interface.  Use the [UPDATE] SQL command to change the size of a</Line>
  <Line number="7243">** blob.</Line>
  <Line number="7244">**</Line>
  <Line number="7245">** ^The [sqlite3_bind_zeroblob()] and [sqlite3_result_zeroblob()] interfaces</Line>
  <Line number="7246">** and the built-in [zeroblob] SQL function may be used to create a</Line>
  <Line number="7247">** zero-filled blob to read or write using the incremental-blob interface.</Line>
  <Line number="7248">**</Line>
  <Line number="7249">** To avoid a resource leak, every open [BLOB handle] should eventually</Line>
  <Line number="7250">** be released by a call to [sqlite3_blob_close()].</Line>
  <Line number="7251">**</Line>
  <Line number="7252">** See also: [sqlite3_blob_close()],</Line>
  <Line number="7253">** [sqlite3_blob_reopen()], [sqlite3_blob_read()],</Line>
  <Line number="7254">** [sqlite3_blob_bytes()], [sqlite3_blob_write()].</Line>
  <Line number="7255">*/</Line>
  <Line number="7256">SQLITE_API int sqlite3_blob_open(</Line>
  <Line number="7257">  sqlite3*,</Line>
  <Line number="7258">  const char *zDb,</Line>
  <Line number="7259">  const char *zTable,</Line>
  <Line number="7260">  const char *zColumn,</Line>
  <Line number="7261">  sqlite3_int64 iRow,</Line>
  <Line number="7262">  int flags,</Line>
  <Line number="7263">  sqlite3_blob **ppBlob</Line>
  <Line number="7264">);</Line>
  <Line number="7265"></Line>
  <Line number="7266">/*</Line>
  <Line number="7267">** CAPI3REF: Move a BLOB Handle to a New Row</Line>
  <Line number="7268">** METHOD: sqlite3_blob</Line>
  <Line number="7269">**</Line>
  <Line number="7270">** ^This function is used to move an existing [BLOB handle] so that it points</Line>
  <Line number="7271">** to a different row of the same database table. ^The new row is identified</Line>
  <Line number="7272">** by the rowid value passed as the second argument. Only the row can be</Line>
  <Line number="7273">** changed. ^The database, table and column on which the blob handle is open</Line>
  <Line number="7274">** remain the same. Moving an existing [BLOB handle] to a new row is</Line>
  <Line number="7275">** faster than closing the existing handle and opening a new one.</Line>
  <Line number="7276">**</Line>
  <Line number="7277">** ^(The new row must meet the same criteria as for [sqlite3_blob_open()] -</Line>
  <Line number="7278">** it must exist and there must be either a blob or text value stored in</Line>
  <Line number="7279">** the nominated column.)^ ^If the new row is not present in the table, or if</Line>
  <Line number="7280">** it does not contain a blob or text value, or if another error occurs, an</Line>
  <Line number="7281">** SQLite error code is returned and the blob handle is considered aborted.</Line>
  <Line number="7282">** ^All subsequent calls to [sqlite3_blob_read()], [sqlite3_blob_write()] or</Line>
  <Line number="7283">** [sqlite3_blob_reopen()] on an aborted blob handle immediately return</Line>
  <Line number="7284">** SQLITE_ABORT. ^Calling [sqlite3_blob_bytes()] on an aborted blob handle</Line>
  <Line number="7285">** always returns zero.</Line>
  <Line number="7286">**</Line>
  <Line number="7287">** ^This function sets the database handle error code and message.</Line>
  <Line number="7288">*/</Line>
  <Line number="7289">SQLITE_API int sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64);</Line>
  <Line number="7290"></Line>
  <Line number="7291">/*</Line>
  <Line number="7292">** CAPI3REF: Close A BLOB Handle</Line>
  <Line number="7293">** DESTRUCTOR: sqlite3_blob</Line>
  <Line number="7294">**</Line>
  <Line number="7295">** ^This function closes an open [BLOB handle]. ^(The BLOB handle is closed</Line>
  <Line number="7296">** unconditionally.  Even if this routine returns an error code, the</Line>
  <Line number="7297">** handle is still closed.)^</Line>
  <Line number="7298">**</Line>
  <Line number="7299">** ^If the blob handle being closed was opened for read-write access, and if</Line>
  <Line number="7300">** the database is in auto-commit mode and there are no other open read-write</Line>
  <Line number="7301">** blob handles or active write statements, the current transaction is</Line>
  <Line number="7302">** committed. ^If an error occurs while committing the transaction, an error</Line>
  <Line number="7303">** code is returned and the transaction rolled back.</Line>
  <Line number="7304">**</Line>
  <Line number="7305">** Calling this function with an argument that is not a NULL pointer or an</Line>
  <Line number="7306">** open blob handle results in undefined behaviour. ^Calling this routine</Line>
  <Line number="7307">** with a null pointer (such as would be returned by a failed call to</Line>
  <Line number="7308">** [sqlite3_blob_open()]) is a harmless no-op. ^Otherwise, if this function</Line>
  <Line number="7309">** is passed a valid open blob handle, the values returned by the</Line>
  <Line number="7310">** sqlite3_errcode() and sqlite3_errmsg() functions are set before returning.</Line>
  <Line number="7311">*/</Line>
  <Line number="7312">SQLITE_API int sqlite3_blob_close(sqlite3_blob *);</Line>
  <Line number="7313"></Line>
  <Line number="7314">/*</Line>
  <Line number="7315">** CAPI3REF: Return The Size Of An Open BLOB</Line>
  <Line number="7316">** METHOD: sqlite3_blob</Line>
  <Line number="7317">**</Line>
  <Line number="7318">** ^Returns the size in bytes of the BLOB accessible via the</Line>
  <Line number="7319">** successfully opened [BLOB handle] in its only argument.  ^The</Line>
  <Line number="7320">** incremental blob I/O routines can only read or overwriting existing</Line>
  <Line number="7321">** blob content; they cannot change the size of a blob.</Line>
  <Line number="7322">**</Line>
  <Line number="7323">** This routine only works on a [BLOB handle] which has been created</Line>
  <Line number="7324">** by a prior successful call to [sqlite3_blob_open()] and which has not</Line>
  <Line number="7325">** been closed by [sqlite3_blob_close()].  Passing any other pointer in</Line>
  <Line number="7326">** to this routine results in undefined and probably undesirable behavior.</Line>
  <Line number="7327">*/</Line>
  <Line number="7328">SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *);</Line>
  <Line number="7329"></Line>
  <Line number="7330">/*</Line>
  <Line number="7331">** CAPI3REF: Read Data From A BLOB Incrementally</Line>
  <Line number="7332">** METHOD: sqlite3_blob</Line>
  <Line number="7333">**</Line>
  <Line number="7334">** ^(This function is used to read data from an open [BLOB handle] into a</Line>
  <Line number="7335">** caller-supplied buffer. N bytes of data are copied into buffer Z</Line>
  <Line number="7336">** from the open BLOB, starting at offset iOffset.)^</Line>
  <Line number="7337">**</Line>
  <Line number="7338">** ^If offset iOffset is less than N bytes from the end of the BLOB,</Line>
  <Line number="7339">** [SQLITE_ERROR] is returned and no data is read.  ^If N or iOffset is</Line>
  <Line number="7340">** less than zero, [SQLITE_ERROR] is returned and no data is read.</Line>
  <Line number="7341">** ^The size of the blob (and hence the maximum value of N+iOffset)</Line>
  <Line number="7342">** can be determined using the [sqlite3_blob_bytes()] interface.</Line>
  <Line number="7343">**</Line>
  <Line number="7344">** ^An attempt to read from an expired [BLOB handle] fails with an</Line>
  <Line number="7345">** error code of [SQLITE_ABORT].</Line>
  <Line number="7346">**</Line>
  <Line number="7347">** ^(On success, sqlite3_blob_read() returns SQLITE_OK.</Line>
  <Line number="7348">** Otherwise, an [error code] or an [extended error code] is returned.)^</Line>
  <Line number="7349">**</Line>
  <Line number="7350">** This routine only works on a [BLOB handle] which has been created</Line>
  <Line number="7351">** by a prior successful call to [sqlite3_blob_open()] and which has not</Line>
  <Line number="7352">** been closed by [sqlite3_blob_close()].  Passing any other pointer in</Line>
  <Line number="7353">** to this routine results in undefined and probably undesirable behavior.</Line>
  <Line number="7354">**</Line>
  <Line number="7355">** See also: [sqlite3_blob_write()].</Line>
  <Line number="7356">*/</Line>
  <Line number="7357">SQLITE_API int sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);</Line>
  <Line number="7358"></Line>
  <Line number="7359">/*</Line>
  <Line number="7360">** CAPI3REF: Write Data Into A BLOB Incrementally</Line>
  <Line number="7361">** METHOD: sqlite3_blob</Line>
  <Line number="7362">**</Line>
  <Line number="7363">** ^(This function is used to write data into an open [BLOB handle] from a</Line>
  <Line number="7364">** caller-supplied buffer. N bytes of data are copied from the buffer Z</Line>
  <Line number="7365">** into the open BLOB, starting at offset iOffset.)^</Line>
  <Line number="7366">**</Line>
  <Line number="7367">** ^(On success, sqlite3_blob_write() returns SQLITE_OK.</Line>
  <Line number="7368">** Otherwise, an  [error code] or an [extended error code] is returned.)^</Line>
  <Line number="7369">** ^Unless SQLITE_MISUSE is returned, this function sets the</Line>
  <Line number="7370">** [database connection] error code and message accessible via</Line>
  <Line number="7371">** [sqlite3_errcode()] and [sqlite3_errmsg()] and related functions.</Line>
  <Line number="7372">**</Line>
  <Line number="7373">** ^If the [BLOB handle] passed as the first argument was not opened for</Line>
  <Line number="7374">** writing (the flags parameter to [sqlite3_blob_open()] was zero),</Line>
  <Line number="7375">** this function returns [SQLITE_READONLY].</Line>
  <Line number="7376">**</Line>
  <Line number="7377">** This function may only modify the contents of the BLOB; it is</Line>
  <Line number="7378">** not possible to increase the size of a BLOB using this API.</Line>
  <Line number="7379">** ^If offset iOffset is less than N bytes from the end of the BLOB,</Line>
  <Line number="7380">** [SQLITE_ERROR] is returned and no data is written. The size of the</Line>
  <Line number="7381">** BLOB (and hence the maximum value of N+iOffset) can be determined</Line>
  <Line number="7382">** using the [sqlite3_blob_bytes()] interface. ^If N or iOffset are less</Line>
  <Line number="7383">** than zero [SQLITE_ERROR] is returned and no data is written.</Line>
  <Line number="7384">**</Line>
  <Line number="7385">** ^An attempt to write to an expired [BLOB handle] fails with an</Line>
  <Line number="7386">** error code of [SQLITE_ABORT].  ^Writes to the BLOB that occurred</Line>
  <Line number="7387">** before the [BLOB handle] expired are not rolled back by the</Line>
  <Line number="7388">** expiration of the handle, though of course those changes might</Line>
  <Line number="7389">** have been overwritten by the statement that expired the BLOB handle</Line>
  <Line number="7390">** or by other independent statements.</Line>
  <Line number="7391">**</Line>
  <Line number="7392">** This routine only works on a [BLOB handle] which has been created</Line>
  <Line number="7393">** by a prior successful call to [sqlite3_blob_open()] and which has not</Line>
  <Line number="7394">** been closed by [sqlite3_blob_close()].  Passing any other pointer in</Line>
  <Line number="7395">** to this routine results in undefined and probably undesirable behavior.</Line>
  <Line number="7396">**</Line>
  <Line number="7397">** See also: [sqlite3_blob_read()].</Line>
  <Line number="7398">*/</Line>
  <Line number="7399">SQLITE_API int sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset);</Line>
  <Line number="7400"></Line>
  <Line number="7401">/*</Line>
  <Line number="7402">** CAPI3REF: Virtual File System Objects</Line>
  <Line number="7403">**</Line>
  <Line number="7404">** A virtual filesystem (VFS) is an [sqlite3_vfs] object</Line>
  <Line number="7405">** that SQLite uses to interact</Line>
  <Line number="7406">** with the underlying operating system.  Most SQLite builds come with a</Line>
  <Line number="7407">** single default VFS that is appropriate for the host computer.</Line>
  <Line number="7408">** New VFSes can be registered and existing VFSes can be unregistered.</Line>
  <Line number="7409">** The following interfaces are provided.</Line>
  <Line number="7410">**</Line>
  <Line number="7411">** ^The sqlite3_vfs_find() interface returns a pointer to a VFS given its name.</Line>
  <Line number="7412">** ^Names are case sensitive.</Line>
  <Line number="7413">** ^Names are zero-terminated UTF-8 strings.</Line>
  <Line number="7414">** ^If there is no match, a NULL pointer is returned.</Line>
  <Line number="7415">** ^If zVfsName is NULL then the default VFS is returned.</Line>
  <Line number="7416">**</Line>
  <Line number="7417">** ^New VFSes are registered with sqlite3_vfs_register().</Line>
  <Line number="7418">** ^Each new VFS becomes the default VFS if the makeDflt flag is set.</Line>
  <Line number="7419">** ^The same VFS can be registered multiple times without injury.</Line>
  <Line number="7420">** ^To make an existing VFS into the default VFS, register it again</Line>
  <Line number="7421">** with the makeDflt flag set.  If two different VFSes with the</Line>
  <Line number="7422">** same name are registered, the behavior is undefined.  If a</Line>
  <Line number="7423">** VFS is registered with a name that is NULL or an empty string,</Line>
  <Line number="7424">** then the behavior is undefined.</Line>
  <Line number="7425">**</Line>
  <Line number="7426">** ^Unregister a VFS with the sqlite3_vfs_unregister() interface.</Line>
  <Line number="7427">** ^(If the default VFS is unregistered, another VFS is chosen as</Line>
  <Line number="7428">** the default.  The choice for the new VFS is arbitrary.)^</Line>
  <Line number="7429">*/</Line>
  <Line number="7430">SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfsName);</Line>
  <Line number="7431">SQLITE_API int sqlite3_vfs_register(sqlite3_vfs*, int makeDflt);</Line>
  <Line number="7432">SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs*);</Line>
  <Line number="7433"></Line>
  <Line number="7434">/*</Line>
  <Line number="7435">** CAPI3REF: Mutexes</Line>
  <Line number="7436">**</Line>
  <Line number="7437">** The SQLite core uses these routines for thread</Line>
  <Line number="7438">** synchronization. Though they are intended for internal</Line>
  <Line number="7439">** use by SQLite, code that links against SQLite is</Line>
  <Line number="7440">** permitted to use any of these routines.</Line>
  <Line number="7441">**</Line>
  <Line number="7442">** The SQLite source code contains multiple implementations</Line>
  <Line number="7443">** of these mutex routines.  An appropriate implementation</Line>
  <Line number="7444">** is selected automatically at compile-time.  The following</Line>
  <Line number="7445">** implementations are available in the SQLite core:</Line>
  <Line number="7446">**</Line>
  <Line number="7447">** &lt;ul&gt;</Line>
  <Line number="7448">** &lt;li&gt;   SQLITE_MUTEX_PTHREADS</Line>
  <Line number="7449">** &lt;li&gt;   SQLITE_MUTEX_W32</Line>
  <Line number="7450">** &lt;li&gt;   SQLITE_MUTEX_NOOP</Line>
  <Line number="7451">** &lt;/ul&gt;</Line>
  <Line number="7452">**</Line>
  <Line number="7453">** The SQLITE_MUTEX_NOOP implementation is a set of routines</Line>
  <Line number="7454">** that does no real locking and is appropriate for use in</Line>
  <Line number="7455">** a single-threaded application.  The SQLITE_MUTEX_PTHREADS and</Line>
  <Line number="7456">** SQLITE_MUTEX_W32 implementations are appropriate for use on Unix</Line>
  <Line number="7457">** and Windows.</Line>
  <Line number="7458">**</Line>
  <Line number="7459">** If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor</Line>
  <Line number="7460">** macro defined (with &quot;-DSQLITE_MUTEX_APPDEF=1&quot;), then no mutex</Line>
  <Line number="7461">** implementation is included with the library. In this case the</Line>
  <Line number="7462">** application must supply a custom mutex implementation using the</Line>
  <Line number="7463">** [SQLITE_CONFIG_MUTEX] option of the sqlite3_config() function</Line>
  <Line number="7464">** before calling sqlite3_initialize() or any other public sqlite3_</Line>
  <Line number="7465">** function that calls sqlite3_initialize().</Line>
  <Line number="7466">**</Line>
  <Line number="7467">** ^The sqlite3_mutex_alloc() routine allocates a new</Line>
  <Line number="7468">** mutex and returns a pointer to it. ^The sqlite3_mutex_alloc()</Line>
  <Line number="7469">** routine returns NULL if it is unable to allocate the requested</Line>
  <Line number="7470">** mutex.  The argument to sqlite3_mutex_alloc() must one of these</Line>
  <Line number="7471">** integer constants:</Line>
  <Line number="7472">**</Line>
  <Line number="7473">** &lt;ul&gt;</Line>
  <Line number="7474">** &lt;li&gt;  SQLITE_MUTEX_FAST</Line>
  <Line number="7475">** &lt;li&gt;  SQLITE_MUTEX_RECURSIVE</Line>
  <Line number="7476">** &lt;li&gt;  SQLITE_MUTEX_STATIC_MAIN</Line>
  <Line number="7477">** &lt;li&gt;  SQLITE_MUTEX_STATIC_MEM</Line>
  <Line number="7478">** &lt;li&gt;  SQLITE_MUTEX_STATIC_OPEN</Line>
  <Line number="7479">** &lt;li&gt;  SQLITE_MUTEX_STATIC_PRNG</Line>
  <Line number="7480">** &lt;li&gt;  SQLITE_MUTEX_STATIC_LRU</Line>
  <Line number="7481">** &lt;li&gt;  SQLITE_MUTEX_STATIC_PMEM</Line>
  <Line number="7482">** &lt;li&gt;  SQLITE_MUTEX_STATIC_APP1</Line>
  <Line number="7483">** &lt;li&gt;  SQLITE_MUTEX_STATIC_APP2</Line>
  <Line number="7484">** &lt;li&gt;  SQLITE_MUTEX_STATIC_APP3</Line>
  <Line number="7485">** &lt;li&gt;  SQLITE_MUTEX_STATIC_VFS1</Line>
  <Line number="7486">** &lt;li&gt;  SQLITE_MUTEX_STATIC_VFS2</Line>
  <Line number="7487">** &lt;li&gt;  SQLITE_MUTEX_STATIC_VFS3</Line>
  <Line number="7488">** &lt;/ul&gt;</Line>
  <Line number="7489">**</Line>
  <Line number="7490">** ^The first two constants (SQLITE_MUTEX_FAST and SQLITE_MUTEX_RECURSIVE)</Line>
  <Line number="7491">** cause sqlite3_mutex_alloc() to create</Line>
  <Line number="7492">** a new mutex.  ^The new mutex is recursive when SQLITE_MUTEX_RECURSIVE</Line>
  <Line number="7493">** is used but not necessarily so when SQLITE_MUTEX_FAST is used.</Line>
  <Line number="7494">** The mutex implementation does not need to make a distinction</Line>
  <Line number="7495">** between SQLITE_MUTEX_RECURSIVE and SQLITE_MUTEX_FAST if it does</Line>
  <Line number="7496">** not want to.  SQLite will only request a recursive mutex in</Line>
  <Line number="7497">** cases where it really needs one.  If a faster non-recursive mutex</Line>
  <Line number="7498">** implementation is available on the host platform, the mutex subsystem</Line>
  <Line number="7499">** might return such a mutex in response to SQLITE_MUTEX_FAST.</Line>
  <Line number="7500">**</Line>
  <Line number="7501">** ^The other allowed parameters to sqlite3_mutex_alloc() (anything other</Line>
  <Line number="7502">** than SQLITE_MUTEX_FAST and SQLITE_MUTEX_RECURSIVE) each return</Line>
  <Line number="7503">** a pointer to a static preexisting mutex.  ^Nine static mutexes are</Line>
  <Line number="7504">** used by the current version of SQLite.  Future versions of SQLite</Line>
  <Line number="7505">** may add additional static mutexes.  Static mutexes are for internal</Line>
  <Line number="7506">** use by SQLite only.  Applications that use SQLite mutexes should</Line>
  <Line number="7507">** use only the dynamic mutexes returned by SQLITE_MUTEX_FAST or</Line>
  <Line number="7508">** SQLITE_MUTEX_RECURSIVE.</Line>
  <Line number="7509">**</Line>
  <Line number="7510">** ^Note that if one of the dynamic mutex parameters (SQLITE_MUTEX_FAST</Line>
  <Line number="7511">** or SQLITE_MUTEX_RECURSIVE) is used then sqlite3_mutex_alloc()</Line>
  <Line number="7512">** returns a different mutex on every call.  ^For the static</Line>
  <Line number="7513">** mutex types, the same mutex is returned on every call that has</Line>
  <Line number="7514">** the same type number.</Line>
  <Line number="7515">**</Line>
  <Line number="7516">** ^The sqlite3_mutex_free() routine deallocates a previously</Line>
  <Line number="7517">** allocated dynamic mutex.  Attempting to deallocate a static</Line>
  <Line number="7518">** mutex results in undefined behavior.</Line>
  <Line number="7519">**</Line>
  <Line number="7520">** ^The sqlite3_mutex_enter() and sqlite3_mutex_try() routines attempt</Line>
  <Line number="7521">** to enter a mutex.  ^If another thread is already within the mutex,</Line>
  <Line number="7522">** sqlite3_mutex_enter() will block and sqlite3_mutex_try() will return</Line>
  <Line number="7523">** SQLITE_BUSY.  ^The sqlite3_mutex_try() interface returns [SQLITE_OK]</Line>
  <Line number="7524">** upon successful entry.  ^(Mutexes created using</Line>
  <Line number="7525">** SQLITE_MUTEX_RECURSIVE can be entered multiple times by the same thread.</Line>
  <Line number="7526">** In such cases, the</Line>
  <Line number="7527">** mutex must be exited an equal number of times before another thread</Line>
  <Line number="7528">** can enter.)^  If the same thread tries to enter any mutex other</Line>
  <Line number="7529">** than an SQLITE_MUTEX_RECURSIVE more than once, the behavior is undefined.</Line>
  <Line number="7530">**</Line>
  <Line number="7531">** ^(Some systems (for example, Windows 95) do not support the operation</Line>
  <Line number="7532">** implemented by sqlite3_mutex_try().  On those systems, sqlite3_mutex_try()</Line>
  <Line number="7533">** will always return SQLITE_BUSY. The SQLite core only ever uses</Line>
  <Line number="7534">** sqlite3_mutex_try() as an optimization so this is acceptable</Line>
  <Line number="7535">** behavior.)^</Line>
  <Line number="7536">**</Line>
  <Line number="7537">** ^The sqlite3_mutex_leave() routine exits a mutex that was</Line>
  <Line number="7538">** previously entered by the same thread.   The behavior</Line>
  <Line number="7539">** is undefined if the mutex is not currently entered by the</Line>
  <Line number="7540">** calling thread or is not currently allocated.</Line>
  <Line number="7541">**</Line>
  <Line number="7542">** ^If the argument to sqlite3_mutex_enter(), sqlite3_mutex_try(), or</Line>
  <Line number="7543">** sqlite3_mutex_leave() is a NULL pointer, then all three routines</Line>
  <Line number="7544">** behave as no-ops.</Line>
  <Line number="7545">**</Line>
  <Line number="7546">** See also: [sqlite3_mutex_held()] and [sqlite3_mutex_notheld()].</Line>
  <Line number="7547">*/</Line>
  <Line number="7548">SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int);</Line>
  <Line number="7549">SQLITE_API void sqlite3_mutex_free(sqlite3_mutex*);</Line>
  <Line number="7550">SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex*);</Line>
  <Line number="7551">SQLITE_API int sqlite3_mutex_try(sqlite3_mutex*);</Line>
  <Line number="7552">SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex*);</Line>
  <Line number="7553"></Line>
  <Line number="7554">/*</Line>
  <Line number="7555">** CAPI3REF: Mutex Methods Object</Line>
  <Line number="7556">**</Line>
  <Line number="7557">** An instance of this structure defines the low-level routines</Line>
  <Line number="7558">** used to allocate and use mutexes.</Line>
  <Line number="7559">**</Line>
  <Line number="7560">** Usually, the default mutex implementations provided by SQLite are</Line>
  <Line number="7561">** sufficient, however the application has the option of substituting a custom</Line>
  <Line number="7562">** implementation for specialized deployments or systems for which SQLite</Line>
  <Line number="7563">** does not provide a suitable implementation. In this case, the application</Line>
  <Line number="7564">** creates and populates an instance of this structure to pass</Line>
  <Line number="7565">** to sqlite3_config() along with the [SQLITE_CONFIG_MUTEX] option.</Line>
  <Line number="7566">** Additionally, an instance of this structure can be used as an</Line>
  <Line number="7567">** output variable when querying the system for the current mutex</Line>
  <Line number="7568">** implementation, using the [SQLITE_CONFIG_GETMUTEX] option.</Line>
  <Line number="7569">**</Line>
  <Line number="7570">** ^The xMutexInit method defined by this structure is invoked as</Line>
  <Line number="7571">** part of system initialization by the sqlite3_initialize() function.</Line>
  <Line number="7572">** ^The xMutexInit routine is called by SQLite exactly once for each</Line>
  <Line number="7573">** effective call to [sqlite3_initialize()].</Line>
  <Line number="7574">**</Line>
  <Line number="7575">** ^The xMutexEnd method defined by this structure is invoked as</Line>
  <Line number="7576">** part of system shutdown by the sqlite3_shutdown() function. The</Line>
  <Line number="7577">** implementation of this method is expected to release all outstanding</Line>
  <Line number="7578">** resources obtained by the mutex methods implementation, especially</Line>
  <Line number="7579">** those obtained by the xMutexInit method.  ^The xMutexEnd()</Line>
  <Line number="7580">** interface is invoked exactly once for each call to [sqlite3_shutdown()].</Line>
  <Line number="7581">**</Line>
  <Line number="7582">** ^(The remaining seven methods defined by this structure (xMutexAlloc,</Line>
  <Line number="7583">** xMutexFree, xMutexEnter, xMutexTry, xMutexLeave, xMutexHeld and</Line>
  <Line number="7584">** xMutexNotheld) implement the following interfaces (respectively):</Line>
  <Line number="7585">**</Line>
  <Line number="7586">** &lt;ul&gt;</Line>
  <Line number="7587">**   &lt;li&gt;  [sqlite3_mutex_alloc()] &lt;/li&gt;</Line>
  <Line number="7588">**   &lt;li&gt;  [sqlite3_mutex_free()] &lt;/li&gt;</Line>
  <Line number="7589">**   &lt;li&gt;  [sqlite3_mutex_enter()] &lt;/li&gt;</Line>
  <Line number="7590">**   &lt;li&gt;  [sqlite3_mutex_try()] &lt;/li&gt;</Line>
  <Line number="7591">**   &lt;li&gt;  [sqlite3_mutex_leave()] &lt;/li&gt;</Line>
  <Line number="7592">**   &lt;li&gt;  [sqlite3_mutex_held()] &lt;/li&gt;</Line>
  <Line number="7593">**   &lt;li&gt;  [sqlite3_mutex_notheld()] &lt;/li&gt;</Line>
  <Line number="7594">** &lt;/ul&gt;)^</Line>
  <Line number="7595">**</Line>
  <Line number="7596">** The only difference is that the public sqlite3_XXX functions enumerated</Line>
  <Line number="7597">** above silently ignore any invocations that pass a NULL pointer instead</Line>
  <Line number="7598">** of a valid mutex handle. The implementations of the methods defined</Line>
  <Line number="7599">** by this structure are not required to handle this case. The results</Line>
  <Line number="7600">** of passing a NULL pointer instead of a valid mutex handle are undefined</Line>
  <Line number="7601">** (i.e. it is acceptable to provide an implementation that segfaults if</Line>
  <Line number="7602">** it is passed a NULL pointer).</Line>
  <Line number="7603">**</Line>
  <Line number="7604">** The xMutexInit() method must be threadsafe.  It must be harmless to</Line>
  <Line number="7605">** invoke xMutexInit() multiple times within the same process and without</Line>
  <Line number="7606">** intervening calls to xMutexEnd().  Second and subsequent calls to</Line>
  <Line number="7607">** xMutexInit() must be no-ops.</Line>
  <Line number="7608">**</Line>
  <Line number="7609">** xMutexInit() must not use SQLite memory allocation ([sqlite3_malloc()]</Line>
  <Line number="7610">** and its associates).  Similarly, xMutexAlloc() must not use SQLite memory</Line>
  <Line number="7611">** allocation for a static mutex.  ^However xMutexAlloc() may use SQLite</Line>
  <Line number="7612">** memory allocation for a fast or recursive mutex.</Line>
  <Line number="7613">**</Line>
  <Line number="7614">** ^SQLite will invoke the xMutexEnd() method when [sqlite3_shutdown()] is</Line>
  <Line number="7615">** called, but only if the prior call to xMutexInit returned SQLITE_OK.</Line>
  <Line number="7616">** If xMutexInit fails in any way, it is expected to clean up after itself</Line>
  <Line number="7617">** prior to returning.</Line>
  <Line number="7618">*/</Line>
  <Line number="7619">typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;</Line>
  <Line number="7620">struct sqlite3_mutex_methods {</Line>
  <Line number="7621">  int (*xMutexInit)(void);</Line>
  <Line number="7622">  int (*xMutexEnd)(void);</Line>
  <Line number="7623">  sqlite3_mutex *(*xMutexAlloc)(int);</Line>
  <Line number="7624">  void (*xMutexFree)(sqlite3_mutex *);</Line>
  <Line number="7625">  void (*xMutexEnter)(sqlite3_mutex *);</Line>
  <Line number="7626">  int (*xMutexTry)(sqlite3_mutex *);</Line>
  <Line number="7627">  void (*xMutexLeave)(sqlite3_mutex *);</Line>
  <Line number="7628">  int (*xMutexHeld)(sqlite3_mutex *);</Line>
  <Line number="7629">  int (*xMutexNotheld)(sqlite3_mutex *);</Line>
  <Line number="7630">};</Line>
  <Line number="7631"></Line>
  <Line number="7632">/*</Line>
  <Line number="7633">** CAPI3REF: Mutex Verification Routines</Line>
  <Line number="7634">**</Line>
  <Line number="7635">** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routines</Line>
  <Line number="7636">** are intended for use inside assert() statements.  The SQLite core</Line>
  <Line number="7637">** never uses these routines except inside an assert() and applications</Line>
  <Line number="7638">** are advised to follow the lead of the core.  The SQLite core only</Line>
  <Line number="7639">** provides implementations for these routines when it is compiled</Line>
  <Line number="7640">** with the SQLITE_DEBUG flag.  External mutex implementations</Line>
  <Line number="7641">** are only required to provide these routines if SQLITE_DEBUG is</Line>
  <Line number="7642">** defined and if NDEBUG is not defined.</Line>
  <Line number="7643">**</Line>
  <Line number="7644">** These routines should return true if the mutex in their argument</Line>
  <Line number="7645">** is held or not held, respectively, by the calling thread.</Line>
  <Line number="7646">**</Line>
  <Line number="7647">** The implementation is not required to provide versions of these</Line>
  <Line number="7648">** routines that actually work. If the implementation does not provide working</Line>
  <Line number="7649">** versions of these routines, it should at least provide stubs that always</Line>
  <Line number="7650">** return true so that one does not get spurious assertion failures.</Line>
  <Line number="7651">**</Line>
  <Line number="7652">** If the argument to sqlite3_mutex_held() is a NULL pointer then</Line>
  <Line number="7653">** the routine should return 1.   This seems counter-intuitive since</Line>
  <Line number="7654">** clearly the mutex cannot be held if it does not exist.  But</Line>
  <Line number="7655">** the reason the mutex does not exist is because the build is not</Line>
  <Line number="7656">** using mutexes.  And we do not want the assert() containing the</Line>
  <Line number="7657">** call to sqlite3_mutex_held() to fail, so a non-zero return is</Line>
  <Line number="7658">** the appropriate thing to do.  The sqlite3_mutex_notheld()</Line>
  <Line number="7659">** interface should also return 1 when given a NULL pointer.</Line>
  <Line number="7660">*/</Line>
  <Line number="7661">#ifndef NDEBUG</Line>
  <Line number="7662">SQLITE_API int sqlite3_mutex_held(sqlite3_mutex*);</Line>
  <Line number="7663">SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex*);</Line>
  <Line number="7664">#endif</Line>
  <Line number="7665"></Line>
  <Line number="7666">/*</Line>
  <Line number="7667">** CAPI3REF: Mutex Types</Line>
  <Line number="7668">**</Line>
  <Line number="7669">** The [sqlite3_mutex_alloc()] interface takes a single argument</Line>
  <Line number="7670">** which is one of these integer constants.</Line>
  <Line number="7671">**</Line>
  <Line number="7672">** The set of static mutexes may change from one SQLite release to the</Line>
  <Line number="7673">** next.  Applications that override the built-in mutex logic must be</Line>
  <Line number="7674">** prepared to accommodate additional static mutexes.</Line>
  <Line number="7675">*/</Line>
  <Line number="7676">#define SQLITE_MUTEX_FAST             0</Line>
  <Line number="7677">#define SQLITE_MUTEX_RECURSIVE        1</Line>
  <Line number="7678">#define SQLITE_MUTEX_STATIC_MAIN      2</Line>
  <Line number="7679">#define SQLITE_MUTEX_STATIC_MEM       3  /* sqlite3_malloc() */</Line>
  <Line number="7680">#define SQLITE_MUTEX_STATIC_MEM2      4  /* NOT USED */</Line>
  <Line number="7681">#define SQLITE_MUTEX_STATIC_OPEN      4  /* sqlite3BtreeOpen() */</Line>
  <Line number="7682">#define SQLITE_MUTEX_STATIC_PRNG      5  /* sqlite3_randomness() */</Line>
  <Line number="7683">#define SQLITE_MUTEX_STATIC_LRU       6  /* lru page list */</Line>
  <Line number="7684">#define SQLITE_MUTEX_STATIC_LRU2      7  /* NOT USED */</Line>
  <Line number="7685">#define SQLITE_MUTEX_STATIC_PMEM      7  /* sqlite3PageMalloc() */</Line>
  <Line number="7686">#define SQLITE_MUTEX_STATIC_APP1      8  /* For use by application */</Line>
  <Line number="7687">#define SQLITE_MUTEX_STATIC_APP2      9  /* For use by application */</Line>
  <Line number="7688">#define SQLITE_MUTEX_STATIC_APP3     10  /* For use by application */</Line>
  <Line number="7689">#define SQLITE_MUTEX_STATIC_VFS1     11  /* For use by built-in VFS */</Line>
  <Line number="7690">#define SQLITE_MUTEX_STATIC_VFS2     12  /* For use by extension VFS */</Line>
  <Line number="7691">#define SQLITE_MUTEX_STATIC_VFS3     13  /* For use by application VFS */</Line>
  <Line number="7692"></Line>
  <Line number="7693">/* Legacy compatibility: */</Line>
  <Line number="7694">#define SQLITE_MUTEX_STATIC_MASTER    2</Line>
  <Line number="7695"></Line>
  <Line number="7696"></Line>
  <Line number="7697">/*</Line>
  <Line number="7698">** CAPI3REF: Retrieve the mutex for a database connection</Line>
  <Line number="7699">** METHOD: sqlite3</Line>
  <Line number="7700">**</Line>
  <Line number="7701">** ^This interface returns a pointer the [sqlite3_mutex] object that</Line>
  <Line number="7702">** serializes access to the [database connection] given in the argument</Line>
  <Line number="7703">** when the [threading mode] is Serialized.</Line>
  <Line number="7704">** ^If the [threading mode] is Single-thread or Multi-thread then this</Line>
  <Line number="7705">** routine returns a NULL pointer.</Line>
  <Line number="7706">*/</Line>
  <Line number="7707">SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3*);</Line>
  <Line number="7708"></Line>
  <Line number="7709">/*</Line>
  <Line number="7710">** CAPI3REF: Low-Level Control Of Database Files</Line>
  <Line number="7711">** METHOD: sqlite3</Line>
  <Line number="7712">** KEYWORDS: {file control}</Line>
  <Line number="7713">**</Line>
  <Line number="7714">** ^The [sqlite3_file_control()] interface makes a direct call to the</Line>
  <Line number="7715">** xFileControl method for the [sqlite3_io_methods] object associated</Line>
  <Line number="7716">** with a particular database identified by the second argument. ^The</Line>
  <Line number="7717">** name of the database is &quot;main&quot; for the main database or &quot;temp&quot; for the</Line>
  <Line number="7718">** TEMP database, or the name that appears after the AS keyword for</Line>
  <Line number="7719">** databases that are added using the [ATTACH] SQL command.</Line>
  <Line number="7720">** ^A NULL pointer can be used in place of &quot;main&quot; to refer to the</Line>
  <Line number="7721">** main database file.</Line>
  <Line number="7722">** ^The third and fourth parameters to this routine</Line>
  <Line number="7723">** are passed directly through to the second and third parameters of</Line>
  <Line number="7724">** the xFileControl method.  ^The return value of the xFileControl</Line>
  <Line number="7725">** method becomes the return value of this routine.</Line>
  <Line number="7726">**</Line>
  <Line number="7727">** A few opcodes for [sqlite3_file_control()] are handled directly</Line>
  <Line number="7728">** by the SQLite core and never invoke the</Line>
  <Line number="7729">** sqlite3_io_methods.xFileControl method.</Line>
  <Line number="7730">** ^The [SQLITE_FCNTL_FILE_POINTER] value for the op parameter causes</Line>
  <Line number="7731">** a pointer to the underlying [sqlite3_file] object to be written into</Line>
  <Line number="7732">** the space pointed to by the 4th parameter.  The</Line>
  <Line number="7733">** [SQLITE_FCNTL_JOURNAL_POINTER] works similarly except that it returns</Line>
  <Line number="7734">** the [sqlite3_file] object associated with the journal file instead of</Line>
  <Line number="7735">** the main database.  The [SQLITE_FCNTL_VFS_POINTER] opcode returns</Line>
  <Line number="7736">** a pointer to the underlying [sqlite3_vfs] object for the file.</Line>
  <Line number="7737">** The [SQLITE_FCNTL_DATA_VERSION] returns the data version counter</Line>
  <Line number="7738">** from the pager.</Line>
  <Line number="7739">**</Line>
  <Line number="7740">** ^If the second parameter (zDbName) does not match the name of any</Line>
  <Line number="7741">** open database file, then SQLITE_ERROR is returned.  ^This error</Line>
  <Line number="7742">** code is not remembered and will not be recalled by [sqlite3_errcode()]</Line>
  <Line number="7743">** or [sqlite3_errmsg()].  The underlying xFileControl method might</Line>
  <Line number="7744">** also return SQLITE_ERROR.  There is no way to distinguish between</Line>
  <Line number="7745">** an incorrect zDbName and an SQLITE_ERROR return from the underlying</Line>
  <Line number="7746">** xFileControl method.</Line>
  <Line number="7747">**</Line>
  <Line number="7748">** See also: [file control opcodes]</Line>
  <Line number="7749">*/</Line>
  <Line number="7750">SQLITE_API int sqlite3_file_control(sqlite3*, const char *zDbName, int op, void*);</Line>
  <Line number="7751"></Line>
  <Line number="7752">/*</Line>
  <Line number="7753">** CAPI3REF: Testing Interface</Line>
  <Line number="7754">**</Line>
  <Line number="7755">** ^The sqlite3_test_control() interface is used to read out internal</Line>
  <Line number="7756">** state of SQLite and to inject faults into SQLite for testing</Line>
  <Line number="7757">** purposes.  ^The first parameter is an operation code that determines</Line>
  <Line number="7758">** the number, meaning, and operation of all subsequent parameters.</Line>
  <Line number="7759">**</Line>
  <Line number="7760">** This interface is not for use by applications.  It exists solely</Line>
  <Line number="7761">** for verifying the correct operation of the SQLite library.  Depending</Line>
  <Line number="7762">** on how the SQLite library is compiled, this interface might not exist.</Line>
  <Line number="7763">**</Line>
  <Line number="7764">** The details of the operation codes, their meanings, the parameters</Line>
  <Line number="7765">** they take, and what they do are all subject to change without notice.</Line>
  <Line number="7766">** Unlike most of the SQLite API, this function is not guaranteed to</Line>
  <Line number="7767">** operate consistently from one release to the next.</Line>
  <Line number="7768">*/</Line>
  <Line number="7769">SQLITE_API int sqlite3_test_control(int op, ...);</Line>
  <Line number="7770"></Line>
  <Line number="7771">/*</Line>
  <Line number="7772">** CAPI3REF: Testing Interface Operation Codes</Line>
  <Line number="7773">**</Line>
  <Line number="7774">** These constants are the valid operation code parameters used</Line>
  <Line number="7775">** as the first argument to [sqlite3_test_control()].</Line>
  <Line number="7776">**</Line>
  <Line number="7777">** These parameters and their meanings are subject to change</Line>
  <Line number="7778">** without notice.  These values are for testing purposes only.</Line>
  <Line number="7779">** Applications should not use any of these parameters or the</Line>
  <Line number="7780">** [sqlite3_test_control()] interface.</Line>
  <Line number="7781">*/</Line>
  <Line number="7782">#define SQLITE_TESTCTRL_FIRST                    5</Line>
  <Line number="7783">#define SQLITE_TESTCTRL_PRNG_SAVE                5</Line>
  <Line number="7784">#define SQLITE_TESTCTRL_PRNG_RESTORE             6</Line>
  <Line number="7785">#define SQLITE_TESTCTRL_PRNG_RESET               7  /* NOT USED */</Line>
  <Line number="7786">#define SQLITE_TESTCTRL_BITVEC_TEST              8</Line>
  <Line number="7787">#define SQLITE_TESTCTRL_FAULT_INSTALL            9</Line>
  <Line number="7788">#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS     10</Line>
  <Line number="7789">#define SQLITE_TESTCTRL_PENDING_BYTE            11</Line>
  <Line number="7790">#define SQLITE_TESTCTRL_ASSERT                  12</Line>
  <Line number="7791">#define SQLITE_TESTCTRL_ALWAYS                  13</Line>
  <Line number="7792">#define SQLITE_TESTCTRL_RESERVE                 14  /* NOT USED */</Line>
  <Line number="7793">#define SQLITE_TESTCTRL_OPTIMIZATIONS           15</Line>
  <Line number="7794">#define SQLITE_TESTCTRL_ISKEYWORD               16  /* NOT USED */</Line>
  <Line number="7795">#define SQLITE_TESTCTRL_SCRATCHMALLOC           17  /* NOT USED */</Line>
  <Line number="7796">#define SQLITE_TESTCTRL_INTERNAL_FUNCTIONS      17</Line>
  <Line number="7797">#define SQLITE_TESTCTRL_LOCALTIME_FAULT         18</Line>
  <Line number="7798">#define SQLITE_TESTCTRL_EXPLAIN_STMT            19  /* NOT USED */</Line>
  <Line number="7799">#define SQLITE_TESTCTRL_ONCE_RESET_THRESHOLD    19</Line>
  <Line number="7800">#define SQLITE_TESTCTRL_NEVER_CORRUPT           20</Line>
  <Line number="7801">#define SQLITE_TESTCTRL_VDBE_COVERAGE           21</Line>
  <Line number="7802">#define SQLITE_TESTCTRL_BYTEORDER               22</Line>
  <Line number="7803">#define SQLITE_TESTCTRL_ISINIT                  23</Line>
  <Line number="7804">#define SQLITE_TESTCTRL_SORTER_MMAP             24</Line>
  <Line number="7805">#define SQLITE_TESTCTRL_IMPOSTER                25</Line>
  <Line number="7806">#define SQLITE_TESTCTRL_PARSER_COVERAGE         26</Line>
  <Line number="7807">#define SQLITE_TESTCTRL_RESULT_INTREAL          27</Line>
  <Line number="7808">#define SQLITE_TESTCTRL_PRNG_SEED               28</Line>
  <Line number="7809">#define SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS     29</Line>
  <Line number="7810">#define SQLITE_TESTCTRL_SEEK_COUNT              30</Line>
  <Line number="7811">#define SQLITE_TESTCTRL_TRACEFLAGS              31</Line>
  <Line number="7812">#define SQLITE_TESTCTRL_TUNE                    32</Line>
  <Line number="7813">#define SQLITE_TESTCTRL_LAST                    32  /* Largest TESTCTRL */</Line>
  <Line number="7814"></Line>
  <Line number="7815">/*</Line>
  <Line number="7816">** CAPI3REF: SQL Keyword Checking</Line>
  <Line number="7817">**</Line>
  <Line number="7818">** These routines provide access to the set of SQL language keywords</Line>
  <Line number="7819">** recognized by SQLite.  Applications can uses these routines to determine</Line>
  <Line number="7820">** whether or not a specific identifier needs to be escaped (for example,</Line>
  <Line number="7821">** by enclosing in double-quotes) so as not to confuse the parser.</Line>
  <Line number="7822">**</Line>
  <Line number="7823">** The sqlite3_keyword_count() interface returns the number of distinct</Line>
  <Line number="7824">** keywords understood by SQLite.</Line>
  <Line number="7825">**</Line>
  <Line number="7826">** The sqlite3_keyword_name(N,Z,L) interface finds the N-th keyword and</Line>
  <Line number="7827">** makes *Z point to that keyword expressed as UTF8 and writes the number</Line>
  <Line number="7828">** of bytes in the keyword into *L.  The string that *Z points to is not</Line>
  <Line number="7829">** zero-terminated.  The sqlite3_keyword_name(N,Z,L) routine returns</Line>
  <Line number="7830">** SQLITE_OK if N is within bounds and SQLITE_ERROR if not. If either Z</Line>
  <Line number="7831">** or L are NULL or invalid pointers then calls to</Line>
  <Line number="7832">** sqlite3_keyword_name(N,Z,L) result in undefined behavior.</Line>
  <Line number="7833">**</Line>
  <Line number="7834">** The sqlite3_keyword_check(Z,L) interface checks to see whether or not</Line>
  <Line number="7835">** the L-byte UTF8 identifier that Z points to is a keyword, returning non-zero</Line>
  <Line number="7836">** if it is and zero if not.</Line>
  <Line number="7837">**</Line>
  <Line number="7838">** The parser used by SQLite is forgiving.  It is often possible to use</Line>
  <Line number="7839">** a keyword as an identifier as long as such use does not result in a</Line>
  <Line number="7840">** parsing ambiguity.  For example, the statement</Line>
  <Line number="7841">** &quot;CREATE TABLE BEGIN(REPLACE,PRAGMA,END);&quot; is accepted by SQLite, and</Line>
  <Line number="7842">** creates a new table named &quot;BEGIN&quot; with three columns named</Line>
  <Line number="7843">** &quot;REPLACE&quot;, &quot;PRAGMA&quot;, and &quot;END&quot;.  Nevertheless, best practice is to avoid</Line>
  <Line number="7844">** using keywords as identifiers.  Common techniques used to avoid keyword</Line>
  <Line number="7845">** name collisions include:</Line>
  <Line number="7846">** &lt;ul&gt;</Line>
  <Line number="7847">** &lt;li&gt; Put all identifier names inside double-quotes.  This is the official</Line>
  <Line number="7848">**      SQL way to escape identifier names.</Line>
  <Line number="7849">** &lt;li&gt; Put identifier names inside &amp;#91;...&amp;#93;.  This is not standard SQL,</Line>
  <Line number="7850">**      but it is what SQL Server does and so lots of programmers use this</Line>
  <Line number="7851">**      technique.</Line>
  <Line number="7852">** &lt;li&gt; Begin every identifier with the letter &quot;Z&quot; as no SQL keywords start</Line>
  <Line number="7853">**      with &quot;Z&quot;.</Line>
  <Line number="7854">** &lt;li&gt; Include a digit somewhere in every identifier name.</Line>
  <Line number="7855">** &lt;/ul&gt;</Line>
  <Line number="7856">**</Line>
  <Line number="7857">** Note that the number of keywords understood by SQLite can depend on</Line>
  <Line number="7858">** compile-time options.  For example, &quot;VACUUM&quot; is not a keyword if</Line>
  <Line number="7859">** SQLite is compiled with the [-DSQLITE_OMIT_VACUUM] option.  Also,</Line>
  <Line number="7860">** new keywords may be added to future releases of SQLite.</Line>
  <Line number="7861">*/</Line>
  <Line number="7862">SQLITE_API int sqlite3_keyword_count(void);</Line>
  <Line number="7863">SQLITE_API int sqlite3_keyword_name(int,const char**,int*);</Line>
  <Line number="7864">SQLITE_API int sqlite3_keyword_check(const char*,int);</Line>
  <Line number="7865"></Line>
  <Line number="7866">/*</Line>
  <Line number="7867">** CAPI3REF: Dynamic String Object</Line>
  <Line number="7868">** KEYWORDS: {dynamic string}</Line>
  <Line number="7869">**</Line>
  <Line number="7870">** An instance of the sqlite3_str object contains a dynamically-sized</Line>
  <Line number="7871">** string under construction.</Line>
  <Line number="7872">**</Line>
  <Line number="7873">** The lifecycle of an sqlite3_str object is as follows:</Line>
  <Line number="7874">** &lt;ol&gt;</Line>
  <Line number="7875">** &lt;li&gt; ^The sqlite3_str object is created using [sqlite3_str_new()].</Line>
  <Line number="7876">** &lt;li&gt; ^Text is appended to the sqlite3_str object using various</Line>
  <Line number="7877">** methods, such as [sqlite3_str_appendf()].</Line>
  <Line number="7878">** &lt;li&gt; ^The sqlite3_str object is destroyed and the string it created</Line>
  <Line number="7879">** is returned using the [sqlite3_str_finish()] interface.</Line>
  <Line number="7880">** &lt;/ol&gt;</Line>
  <Line number="7881">*/</Line>
  <Line number="7882">typedef struct sqlite3_str sqlite3_str;</Line>
  <Line number="7883"></Line>
  <Line number="7884">/*</Line>
  <Line number="7885">** CAPI3REF: Create A New Dynamic String Object</Line>
  <Line number="7886">** CONSTRUCTOR: sqlite3_str</Line>
  <Line number="7887">**</Line>
  <Line number="7888">** ^The [sqlite3_str_new(D)] interface allocates and initializes</Line>
  <Line number="7889">** a new [sqlite3_str] object.  To avoid memory leaks, the object returned by</Line>
  <Line number="7890">** [sqlite3_str_new()] must be freed by a subsequent call to</Line>
  <Line number="7891">** [sqlite3_str_finish(X)].</Line>
  <Line number="7892">**</Line>
  <Line number="7893">** ^The [sqlite3_str_new(D)] interface always returns a pointer to a</Line>
  <Line number="7894">** valid [sqlite3_str] object, though in the event of an out-of-memory</Line>
  <Line number="7895">** error the returned object might be a special singleton that will</Line>
  <Line number="7896">** silently reject new text, always return SQLITE_NOMEM from</Line>
  <Line number="7897">** [sqlite3_str_errcode()], always return 0 for</Line>
  <Line number="7898">** [sqlite3_str_length()], and always return NULL from</Line>
  <Line number="7899">** [sqlite3_str_finish(X)].  It is always safe to use the value</Line>
  <Line number="7900">** returned by [sqlite3_str_new(D)] as the sqlite3_str parameter</Line>
  <Line number="7901">** to any of the other [sqlite3_str] methods.</Line>
  <Line number="7902">**</Line>
  <Line number="7903">** The D parameter to [sqlite3_str_new(D)] may be NULL.  If the</Line>
  <Line number="7904">** D parameter in [sqlite3_str_new(D)] is not NULL, then the maximum</Line>
  <Line number="7905">** length of the string contained in the [sqlite3_str] object will be</Line>
  <Line number="7906">** the value set for [sqlite3_limit](D,[SQLITE_LIMIT_LENGTH]) instead</Line>
  <Line number="7907">** of [SQLITE_MAX_LENGTH].</Line>
  <Line number="7908">*/</Line>
  <Line number="7909">SQLITE_API sqlite3_str *sqlite3_str_new(sqlite3*);</Line>
  <Line number="7910"></Line>
  <Line number="7911">/*</Line>
  <Line number="7912">** CAPI3REF: Finalize A Dynamic String</Line>
  <Line number="7913">** DESTRUCTOR: sqlite3_str</Line>
  <Line number="7914">**</Line>
  <Line number="7915">** ^The [sqlite3_str_finish(X)] interface destroys the sqlite3_str object X</Line>
  <Line number="7916">** and returns a pointer to a memory buffer obtained from [sqlite3_malloc64()]</Line>
  <Line number="7917">** that contains the constructed string.  The calling application should</Line>
  <Line number="7918">** pass the returned value to [sqlite3_free()] to avoid a memory leak.</Line>
  <Line number="7919">** ^The [sqlite3_str_finish(X)] interface may return a NULL pointer if any</Line>
  <Line number="7920">** errors were encountered during construction of the string.  ^The</Line>
  <Line number="7921">** [sqlite3_str_finish(X)] interface will also return a NULL pointer if the</Line>
  <Line number="7922">** string in [sqlite3_str] object X is zero bytes long.</Line>
  <Line number="7923">*/</Line>
  <Line number="7924">SQLITE_API char *sqlite3_str_finish(sqlite3_str*);</Line>
  <Line number="7925"></Line>
  <Line number="7926">/*</Line>
  <Line number="7927">** CAPI3REF: Add Content To A Dynamic String</Line>
  <Line number="7928">** METHOD: sqlite3_str</Line>
  <Line number="7929">**</Line>
  <Line number="7930">** These interfaces add content to an sqlite3_str object previously obtained</Line>
  <Line number="7931">** from [sqlite3_str_new()].</Line>
  <Line number="7932">**</Line>
  <Line number="7933">** ^The [sqlite3_str_appendf(X,F,...)] and</Line>
  <Line number="7934">** [sqlite3_str_vappendf(X,F,V)] interfaces uses the [built-in printf]</Line>
  <Line number="7935">** functionality of SQLite to append formatted text onto the end of</Line>
  <Line number="7936">** [sqlite3_str] object X.</Line>
  <Line number="7937">**</Line>
  <Line number="7938">** ^The [sqlite3_str_append(X,S,N)] method appends exactly N bytes from string S</Line>
  <Line number="7939">** onto the end of the [sqlite3_str] object X.  N must be non-negative.</Line>
  <Line number="7940">** S must contain at least N non-zero bytes of content.  To append a</Line>
  <Line number="7941">** zero-terminated string in its entirety, use the [sqlite3_str_appendall()]</Line>
  <Line number="7942">** method instead.</Line>
  <Line number="7943">**</Line>
  <Line number="7944">** ^The [sqlite3_str_appendall(X,S)] method appends the complete content of</Line>
  <Line number="7945">** zero-terminated string S onto the end of [sqlite3_str] object X.</Line>
  <Line number="7946">**</Line>
  <Line number="7947">** ^The [sqlite3_str_appendchar(X,N,C)] method appends N copies of the</Line>
  <Line number="7948">** single-byte character C onto the end of [sqlite3_str] object X.</Line>
  <Line number="7949">** ^This method can be used, for example, to add whitespace indentation.</Line>
  <Line number="7950">**</Line>
  <Line number="7951">** ^The [sqlite3_str_reset(X)] method resets the string under construction</Line>
  <Line number="7952">** inside [sqlite3_str] object X back to zero bytes in length.</Line>
  <Line number="7953">**</Line>
  <Line number="7954">** These methods do not return a result code.  ^If an error occurs, that fact</Line>
  <Line number="7955">** is recorded in the [sqlite3_str] object and can be recovered by a</Line>
  <Line number="7956">** subsequent call to [sqlite3_str_errcode(X)].</Line>
  <Line number="7957">*/</Line>
  <Line number="7958">SQLITE_API void sqlite3_str_appendf(sqlite3_str*, const char *zFormat, ...);</Line>
  <Line number="7959">SQLITE_API void sqlite3_str_vappendf(sqlite3_str*, const char *zFormat, va_list);</Line>
  <Line number="7960">SQLITE_API void sqlite3_str_append(sqlite3_str*, const char *zIn, int N);</Line>
  <Line number="7961">SQLITE_API void sqlite3_str_appendall(sqlite3_str*, const char *zIn);</Line>
  <Line number="7962">SQLITE_API void sqlite3_str_appendchar(sqlite3_str*, int N, char C);</Line>
  <Line number="7963">SQLITE_API void sqlite3_str_reset(sqlite3_str*);</Line>
  <Line number="7964"></Line>
  <Line number="7965">/*</Line>
  <Line number="7966">** CAPI3REF: Status Of A Dynamic String</Line>
  <Line number="7967">** METHOD: sqlite3_str</Line>
  <Line number="7968">**</Line>
  <Line number="7969">** These interfaces return the current status of an [sqlite3_str] object.</Line>
  <Line number="7970">**</Line>
  <Line number="7971">** ^If any prior errors have occurred while constructing the dynamic string</Line>
  <Line number="7972">** in sqlite3_str X, then the [sqlite3_str_errcode(X)] method will return</Line>
  <Line number="7973">** an appropriate error code.  ^The [sqlite3_str_errcode(X)] method returns</Line>
  <Line number="7974">** [SQLITE_NOMEM] following any out-of-memory error, or</Line>
  <Line number="7975">** [SQLITE_TOOBIG] if the size of the dynamic string exceeds</Line>
  <Line number="7976">** [SQLITE_MAX_LENGTH], or [SQLITE_OK] if there have been no errors.</Line>
  <Line number="7977">**</Line>
  <Line number="7978">** ^The [sqlite3_str_length(X)] method returns the current length, in bytes,</Line>
  <Line number="7979">** of the dynamic string under construction in [sqlite3_str] object X.</Line>
  <Line number="7980">** ^The length returned by [sqlite3_str_length(X)] does not include the</Line>
  <Line number="7981">** zero-termination byte.</Line>
  <Line number="7982">**</Line>
  <Line number="7983">** ^The [sqlite3_str_value(X)] method returns a pointer to the current</Line>
  <Line number="7984">** content of the dynamic string under construction in X.  The value</Line>
  <Line number="7985">** returned by [sqlite3_str_value(X)] is managed by the sqlite3_str object X</Line>
  <Line number="7986">** and might be freed or altered by any subsequent method on the same</Line>
  <Line number="7987">** [sqlite3_str] object.  Applications must not used the pointer returned</Line>
  <Line number="7988">** [sqlite3_str_value(X)] after any subsequent method call on the same</Line>
  <Line number="7989">** object.  ^Applications may change the content of the string returned</Line>
  <Line number="7990">** by [sqlite3_str_value(X)] as long as they do not write into any bytes</Line>
  <Line number="7991">** outside the range of 0 to [sqlite3_str_length(X)] and do not read or</Line>
  <Line number="7992">** write any byte after any subsequent sqlite3_str method call.</Line>
  <Line number="7993">*/</Line>
  <Line number="7994">SQLITE_API int sqlite3_str_errcode(sqlite3_str*);</Line>
  <Line number="7995">SQLITE_API int sqlite3_str_length(sqlite3_str*);</Line>
  <Line number="7996">SQLITE_API char *sqlite3_str_value(sqlite3_str*);</Line>
  <Line number="7997"></Line>
  <Line number="7998">/*</Line>
  <Line number="7999">** CAPI3REF: SQLite Runtime Status</Line>
  <Line number="8000">**</Line>
  <Line number="8001">** ^These interfaces are used to retrieve runtime status information</Line>
  <Line number="8002">** about the performance of SQLite, and optionally to reset various</Line>
  <Line number="8003">** highwater marks.  ^The first argument is an integer code for</Line>
  <Line number="8004">** the specific parameter to measure.  ^(Recognized integer codes</Line>
  <Line number="8005">** are of the form [status parameters | SQLITE_STATUS_...].)^</Line>
  <Line number="8006">** ^The current value of the parameter is returned into *pCurrent.</Line>
  <Line number="8007">** ^The highest recorded value is returned in *pHighwater.  ^If the</Line>
  <Line number="8008">** resetFlag is true, then the highest record value is reset after</Line>
  <Line number="8009">** *pHighwater is written.  ^(Some parameters do not record the highest</Line>
  <Line number="8010">** value.  For those parameters</Line>
  <Line number="8011">** nothing is written into *pHighwater and the resetFlag is ignored.)^</Line>
  <Line number="8012">** ^(Other parameters record only the highwater mark and not the current</Line>
  <Line number="8013">** value.  For these latter parameters nothing is written into *pCurrent.)^</Line>
  <Line number="8014">**</Line>
  <Line number="8015">** ^The sqlite3_status() and sqlite3_status64() routines return</Line>
  <Line number="8016">** SQLITE_OK on success and a non-zero [error code] on failure.</Line>
  <Line number="8017">**</Line>
  <Line number="8018">** If either the current value or the highwater mark is too large to</Line>
  <Line number="8019">** be represented by a 32-bit integer, then the values returned by</Line>
  <Line number="8020">** sqlite3_status() are undefined.</Line>
  <Line number="8021">**</Line>
  <Line number="8022">** See also: [sqlite3_db_status()]</Line>
  <Line number="8023">*/</Line>
  <Line number="8024">SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag);</Line>
  <Line number="8025">SQLITE_API int sqlite3_status64(</Line>
  <Line number="8026">  int op,</Line>
  <Line number="8027">  sqlite3_int64 *pCurrent,</Line>
  <Line number="8028">  sqlite3_int64 *pHighwater,</Line>
  <Line number="8029">  int resetFlag</Line>
  <Line number="8030">);</Line>
  <Line number="8031"></Line>
  <Line number="8032"></Line>
  <Line number="8033">/*</Line>
  <Line number="8034">** CAPI3REF: Status Parameters</Line>
  <Line number="8035">** KEYWORDS: {status parameters}</Line>
  <Line number="8036">**</Line>
  <Line number="8037">** These integer constants designate various run-time status parameters</Line>
  <Line number="8038">** that can be returned by [sqlite3_status()].</Line>
  <Line number="8039">**</Line>
  <Line number="8040">** &lt;dl&gt;</Line>
  <Line number="8041">** [[SQLITE_STATUS_MEMORY_USED]] ^(&lt;dt&gt;SQLITE_STATUS_MEMORY_USED&lt;/dt&gt;</Line>
  <Line number="8042">** &lt;dd&gt;This parameter is the current amount of memory checked out</Line>
  <Line number="8043">** using [sqlite3_malloc()], either directly or indirectly.  The</Line>
  <Line number="8044">** figure includes calls made to [sqlite3_malloc()] by the application</Line>
  <Line number="8045">** and internal memory usage by the SQLite library.  Auxiliary page-cache</Line>
  <Line number="8046">** memory controlled by [SQLITE_CONFIG_PAGECACHE] is not included in</Line>
  <Line number="8047">** this parameter.  The amount returned is the sum of the allocation</Line>
  <Line number="8048">** sizes as reported by the xSize method in [sqlite3_mem_methods].&lt;/dd&gt;)^</Line>
  <Line number="8049">**</Line>
  <Line number="8050">** [[SQLITE_STATUS_MALLOC_SIZE]] ^(&lt;dt&gt;SQLITE_STATUS_MALLOC_SIZE&lt;/dt&gt;</Line>
  <Line number="8051">** &lt;dd&gt;This parameter records the largest memory allocation request</Line>
  <Line number="8052">** handed to [sqlite3_malloc()] or [sqlite3_realloc()] (or their</Line>
  <Line number="8053">** internal equivalents).  Only the value returned in the</Line>
  <Line number="8054">** *pHighwater parameter to [sqlite3_status()] is of interest.</Line>
  <Line number="8055">** The value written into the *pCurrent parameter is undefined.&lt;/dd&gt;)^</Line>
  <Line number="8056">**</Line>
  <Line number="8057">** [[SQLITE_STATUS_MALLOC_COUNT]] ^(&lt;dt&gt;SQLITE_STATUS_MALLOC_COUNT&lt;/dt&gt;</Line>
  <Line number="8058">** &lt;dd&gt;This parameter records the number of separate memory allocations</Line>
  <Line number="8059">** currently checked out.&lt;/dd&gt;)^</Line>
  <Line number="8060">**</Line>
  <Line number="8061">** [[SQLITE_STATUS_PAGECACHE_USED]] ^(&lt;dt&gt;SQLITE_STATUS_PAGECACHE_USED&lt;/dt&gt;</Line>
  <Line number="8062">** &lt;dd&gt;This parameter returns the number of pages used out of the</Line>
  <Line number="8063">** [pagecache memory allocator] that was configured using</Line>
  <Line number="8064">** [SQLITE_CONFIG_PAGECACHE].  The</Line>
  <Line number="8065">** value returned is in pages, not in bytes.&lt;/dd&gt;)^</Line>
  <Line number="8066">**</Line>
  <Line number="8067">** [[SQLITE_STATUS_PAGECACHE_OVERFLOW]]</Line>
  <Line number="8068">** ^(&lt;dt&gt;SQLITE_STATUS_PAGECACHE_OVERFLOW&lt;/dt&gt;</Line>
  <Line number="8069">** &lt;dd&gt;This parameter returns the number of bytes of page cache</Line>
  <Line number="8070">** allocation which could not be satisfied by the [SQLITE_CONFIG_PAGECACHE]</Line>
  <Line number="8071">** buffer and where forced to overflow to [sqlite3_malloc()].  The</Line>
  <Line number="8072">** returned value includes allocations that overflowed because they</Line>
  <Line number="8073">** where too large (they were larger than the &quot;sz&quot; parameter to</Line>
  <Line number="8074">** [SQLITE_CONFIG_PAGECACHE]) and allocations that overflowed because</Line>
  <Line number="8075">** no space was left in the page cache.&lt;/dd&gt;)^</Line>
  <Line number="8076">**</Line>
  <Line number="8077">** [[SQLITE_STATUS_PAGECACHE_SIZE]] ^(&lt;dt&gt;SQLITE_STATUS_PAGECACHE_SIZE&lt;/dt&gt;</Line>
  <Line number="8078">** &lt;dd&gt;This parameter records the largest memory allocation request</Line>
  <Line number="8079">** handed to the [pagecache memory allocator].  Only the value returned in the</Line>
  <Line number="8080">** *pHighwater parameter to [sqlite3_status()] is of interest.</Line>
  <Line number="8081">** The value written into the *pCurrent parameter is undefined.&lt;/dd&gt;)^</Line>
  <Line number="8082">**</Line>
  <Line number="8083">** [[SQLITE_STATUS_SCRATCH_USED]] &lt;dt&gt;SQLITE_STATUS_SCRATCH_USED&lt;/dt&gt;</Line>
  <Line number="8084">** &lt;dd&gt;No longer used.&lt;/dd&gt;</Line>
  <Line number="8085">**</Line>
  <Line number="8086">** [[SQLITE_STATUS_SCRATCH_OVERFLOW]] ^(&lt;dt&gt;SQLITE_STATUS_SCRATCH_OVERFLOW&lt;/dt&gt;</Line>
  <Line number="8087">** &lt;dd&gt;No longer used.&lt;/dd&gt;</Line>
  <Line number="8088">**</Line>
  <Line number="8089">** [[SQLITE_STATUS_SCRATCH_SIZE]] &lt;dt&gt;SQLITE_STATUS_SCRATCH_SIZE&lt;/dt&gt;</Line>
  <Line number="8090">** &lt;dd&gt;No longer used.&lt;/dd&gt;</Line>
  <Line number="8091">**</Line>
  <Line number="8092">** [[SQLITE_STATUS_PARSER_STACK]] ^(&lt;dt&gt;SQLITE_STATUS_PARSER_STACK&lt;/dt&gt;</Line>
  <Line number="8093">** &lt;dd&gt;The *pHighwater parameter records the deepest parser stack.</Line>
  <Line number="8094">** The *pCurrent value is undefined.  The *pHighwater value is only</Line>
  <Line number="8095">** meaningful if SQLite is compiled with [YYTRACKMAXSTACKDEPTH].&lt;/dd&gt;)^</Line>
  <Line number="8096">** &lt;/dl&gt;</Line>
  <Line number="8097">**</Line>
  <Line number="8098">** New status parameters may be added from time to time.</Line>
  <Line number="8099">*/</Line>
  <Line number="8100">#define SQLITE_STATUS_MEMORY_USED          0</Line>
  <Line number="8101">#define SQLITE_STATUS_PAGECACHE_USED       1</Line>
  <Line number="8102">#define SQLITE_STATUS_PAGECACHE_OVERFLOW   2</Line>
  <Line number="8103">#define SQLITE_STATUS_SCRATCH_USED         3  /* NOT USED */</Line>
  <Line number="8104">#define SQLITE_STATUS_SCRATCH_OVERFLOW     4  /* NOT USED */</Line>
  <Line number="8105">#define SQLITE_STATUS_MALLOC_SIZE          5</Line>
  <Line number="8106">#define SQLITE_STATUS_PARSER_STACK         6</Line>
  <Line number="8107">#define SQLITE_STATUS_PAGECACHE_SIZE       7</Line>
  <Line number="8108">#define SQLITE_STATUS_SCRATCH_SIZE         8  /* NOT USED */</Line>
  <Line number="8109">#define SQLITE_STATUS_MALLOC_COUNT         9</Line>
  <Line number="8110"></Line>
  <Line number="8111">/*</Line>
  <Line number="8112">** CAPI3REF: Database Connection Status</Line>
  <Line number="8113">** METHOD: sqlite3</Line>
  <Line number="8114">**</Line>
  <Line number="8115">** ^This interface is used to retrieve runtime status information</Line>
  <Line number="8116">** about a single [database connection].  ^The first argument is the</Line>
  <Line number="8117">** database connection object to be interrogated.  ^The second argument</Line>
  <Line number="8118">** is an integer constant, taken from the set of</Line>
  <Line number="8119">** [SQLITE_DBSTATUS options], that</Line>
  <Line number="8120">** determines the parameter to interrogate.  The set of</Line>
  <Line number="8121">** [SQLITE_DBSTATUS options] is likely</Line>
  <Line number="8122">** to grow in future releases of SQLite.</Line>
  <Line number="8123">**</Line>
  <Line number="8124">** ^The current value of the requested parameter is written into *pCur</Line>
  <Line number="8125">** and the highest instantaneous value is written into *pHiwtr.  ^If</Line>
  <Line number="8126">** the resetFlg is true, then the highest instantaneous value is</Line>
  <Line number="8127">** reset back down to the current value.</Line>
  <Line number="8128">**</Line>
  <Line number="8129">** ^The sqlite3_db_status() routine returns SQLITE_OK on success and a</Line>
  <Line number="8130">** non-zero [error code] on failure.</Line>
  <Line number="8131">**</Line>
  <Line number="8132">** See also: [sqlite3_status()] and [sqlite3_stmt_status()].</Line>
  <Line number="8133">*/</Line>
  <Line number="8134">SQLITE_API int sqlite3_db_status(sqlite3*, int op, int *pCur, int *pHiwtr, int resetFlg);</Line>
  <Line number="8135"></Line>
  <Line number="8136">/*</Line>
  <Line number="8137">** CAPI3REF: Status Parameters for database connections</Line>
  <Line number="8138">** KEYWORDS: {SQLITE_DBSTATUS options}</Line>
  <Line number="8139">**</Line>
  <Line number="8140">** These constants are the available integer &quot;verbs&quot; that can be passed as</Line>
  <Line number="8141">** the second argument to the [sqlite3_db_status()] interface.</Line>
  <Line number="8142">**</Line>
  <Line number="8143">** New verbs may be added in future releases of SQLite. Existing verbs</Line>
  <Line number="8144">** might be discontinued. Applications should check the return code from</Line>
  <Line number="8145">** [sqlite3_db_status()] to make sure that the call worked.</Line>
  <Line number="8146">** The [sqlite3_db_status()] interface will return a non-zero error code</Line>
  <Line number="8147">** if a discontinued or unsupported verb is invoked.</Line>
  <Line number="8148">**</Line>
  <Line number="8149">** &lt;dl&gt;</Line>
  <Line number="8150">** [[SQLITE_DBSTATUS_LOOKASIDE_USED]] ^(&lt;dt&gt;SQLITE_DBSTATUS_LOOKASIDE_USED&lt;/dt&gt;</Line>
  <Line number="8151">** &lt;dd&gt;This parameter returns the number of lookaside memory slots currently</Line>
  <Line number="8152">** checked out.&lt;/dd&gt;)^</Line>
  <Line number="8153">**</Line>
  <Line number="8154">** [[SQLITE_DBSTATUS_LOOKASIDE_HIT]] ^(&lt;dt&gt;SQLITE_DBSTATUS_LOOKASIDE_HIT&lt;/dt&gt;</Line>
  <Line number="8155">** &lt;dd&gt;This parameter returns the number of malloc attempts that were</Line>
  <Line number="8156">** satisfied using lookaside memory. Only the high-water value is meaningful;</Line>
  <Line number="8157">** the current value is always zero.)^</Line>
  <Line number="8158">**</Line>
  <Line number="8159">** [[SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE]]</Line>
  <Line number="8160">** ^(&lt;dt&gt;SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE&lt;/dt&gt;</Line>
  <Line number="8161">** &lt;dd&gt;This parameter returns the number malloc attempts that might have</Line>
  <Line number="8162">** been satisfied using lookaside memory but failed due to the amount of</Line>
  <Line number="8163">** memory requested being larger than the lookaside slot size.</Line>
  <Line number="8164">** Only the high-water value is meaningful;</Line>
  <Line number="8165">** the current value is always zero.)^</Line>
  <Line number="8166">**</Line>
  <Line number="8167">** [[SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL]]</Line>
  <Line number="8168">** ^(&lt;dt&gt;SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL&lt;/dt&gt;</Line>
  <Line number="8169">** &lt;dd&gt;This parameter returns the number malloc attempts that might have</Line>
  <Line number="8170">** been satisfied using lookaside memory but failed due to all lookaside</Line>
  <Line number="8171">** memory already being in use.</Line>
  <Line number="8172">** Only the high-water value is meaningful;</Line>
  <Line number="8173">** the current value is always zero.)^</Line>
  <Line number="8174">**</Line>
  <Line number="8175">** [[SQLITE_DBSTATUS_CACHE_USED]] ^(&lt;dt&gt;SQLITE_DBSTATUS_CACHE_USED&lt;/dt&gt;</Line>
  <Line number="8176">** &lt;dd&gt;This parameter returns the approximate number of bytes of heap</Line>
  <Line number="8177">** memory used by all pager caches associated with the database connection.)^</Line>
  <Line number="8178">** ^The highwater mark associated with SQLITE_DBSTATUS_CACHE_USED is always 0.</Line>
  <Line number="8179">**</Line>
  <Line number="8180">** [[SQLITE_DBSTATUS_CACHE_USED_SHARED]]</Line>
  <Line number="8181">** ^(&lt;dt&gt;SQLITE_DBSTATUS_CACHE_USED_SHARED&lt;/dt&gt;</Line>
  <Line number="8182">** &lt;dd&gt;This parameter is similar to DBSTATUS_CACHE_USED, except that if a</Line>
  <Line number="8183">** pager cache is shared between two or more connections the bytes of heap</Line>
  <Line number="8184">** memory used by that pager cache is divided evenly between the attached</Line>
  <Line number="8185">** connections.)^  In other words, if none of the pager caches associated</Line>
  <Line number="8186">** with the database connection are shared, this request returns the same</Line>
  <Line number="8187">** value as DBSTATUS_CACHE_USED. Or, if one or more or the pager caches are</Line>
  <Line number="8188">** shared, the value returned by this call will be smaller than that returned</Line>
  <Line number="8189">** by DBSTATUS_CACHE_USED. ^The highwater mark associated with</Line>
  <Line number="8190">** SQLITE_DBSTATUS_CACHE_USED_SHARED is always 0.</Line>
  <Line number="8191">**</Line>
  <Line number="8192">** [[SQLITE_DBSTATUS_SCHEMA_USED]] ^(&lt;dt&gt;SQLITE_DBSTATUS_SCHEMA_USED&lt;/dt&gt;</Line>
  <Line number="8193">** &lt;dd&gt;This parameter returns the approximate number of bytes of heap</Line>
  <Line number="8194">** memory used to store the schema for all databases associated</Line>
  <Line number="8195">** with the connection - main, temp, and any [ATTACH]-ed databases.)^</Line>
  <Line number="8196">** ^The full amount of memory used by the schemas is reported, even if the</Line>
  <Line number="8197">** schema memory is shared with other database connections due to</Line>
  <Line number="8198">** [shared cache mode] being enabled.</Line>
  <Line number="8199">** ^The highwater mark associated with SQLITE_DBSTATUS_SCHEMA_USED is always 0.</Line>
  <Line number="8200">**</Line>
  <Line number="8201">** [[SQLITE_DBSTATUS_STMT_USED]] ^(&lt;dt&gt;SQLITE_DBSTATUS_STMT_USED&lt;/dt&gt;</Line>
  <Line number="8202">** &lt;dd&gt;This parameter returns the approximate number of bytes of heap</Line>
  <Line number="8203">** and lookaside memory used by all prepared statements associated with</Line>
  <Line number="8204">** the database connection.)^</Line>
  <Line number="8205">** ^The highwater mark associated with SQLITE_DBSTATUS_STMT_USED is always 0.</Line>
  <Line number="8206">** &lt;/dd&gt;</Line>
  <Line number="8207">**</Line>
  <Line number="8208">** [[SQLITE_DBSTATUS_CACHE_HIT]] ^(&lt;dt&gt;SQLITE_DBSTATUS_CACHE_HIT&lt;/dt&gt;</Line>
  <Line number="8209">** &lt;dd&gt;This parameter returns the number of pager cache hits that have</Line>
  <Line number="8210">** occurred.)^ ^The highwater mark associated with SQLITE_DBSTATUS_CACHE_HIT</Line>
  <Line number="8211">** is always 0.</Line>
  <Line number="8212">** &lt;/dd&gt;</Line>
  <Line number="8213">**</Line>
  <Line number="8214">** [[SQLITE_DBSTATUS_CACHE_MISS]] ^(&lt;dt&gt;SQLITE_DBSTATUS_CACHE_MISS&lt;/dt&gt;</Line>
  <Line number="8215">** &lt;dd&gt;This parameter returns the number of pager cache misses that have</Line>
  <Line number="8216">** occurred.)^ ^The highwater mark associated with SQLITE_DBSTATUS_CACHE_MISS</Line>
  <Line number="8217">** is always 0.</Line>
  <Line number="8218">** &lt;/dd&gt;</Line>
  <Line number="8219">**</Line>
  <Line number="8220">** [[SQLITE_DBSTATUS_CACHE_WRITE]] ^(&lt;dt&gt;SQLITE_DBSTATUS_CACHE_WRITE&lt;/dt&gt;</Line>
  <Line number="8221">** &lt;dd&gt;This parameter returns the number of dirty cache entries that have</Line>
  <Line number="8222">** been written to disk. Specifically, the number of pages written to the</Line>
  <Line number="8223">** wal file in wal mode databases, or the number of pages written to the</Line>
  <Line number="8224">** database file in rollback mode databases. Any pages written as part of</Line>
  <Line number="8225">** transaction rollback or database recovery operations are not included.</Line>
  <Line number="8226">** If an IO or other error occurs while writing a page to disk, the effect</Line>
  <Line number="8227">** on subsequent SQLITE_DBSTATUS_CACHE_WRITE requests is undefined.)^ ^The</Line>
  <Line number="8228">** highwater mark associated with SQLITE_DBSTATUS_CACHE_WRITE is always 0.</Line>
  <Line number="8229">** &lt;/dd&gt;</Line>
  <Line number="8230">**</Line>
  <Line number="8231">** [[SQLITE_DBSTATUS_CACHE_SPILL]] ^(&lt;dt&gt;SQLITE_DBSTATUS_CACHE_SPILL&lt;/dt&gt;</Line>
  <Line number="8232">** &lt;dd&gt;This parameter returns the number of dirty cache entries that have</Line>
  <Line number="8233">** been written to disk in the middle of a transaction due to the page</Line>
  <Line number="8234">** cache overflowing. Transactions are more efficient if they are written</Line>
  <Line number="8235">** to disk all at once. When pages spill mid-transaction, that introduces</Line>
  <Line number="8236">** additional overhead. This parameter can be used help identify</Line>
  <Line number="8237">** inefficiencies that can be resolved by increasing the cache size.</Line>
  <Line number="8238">** &lt;/dd&gt;</Line>
  <Line number="8239">**</Line>
  <Line number="8240">** [[SQLITE_DBSTATUS_DEFERRED_FKS]] ^(&lt;dt&gt;SQLITE_DBSTATUS_DEFERRED_FKS&lt;/dt&gt;</Line>
  <Line number="8241">** &lt;dd&gt;This parameter returns zero for the current value if and only if</Line>
  <Line number="8242">** all foreign key constraints (deferred or immediate) have been</Line>
  <Line number="8243">** resolved.)^  ^The highwater mark is always 0.</Line>
  <Line number="8244">** &lt;/dd&gt;</Line>
  <Line number="8245">** &lt;/dl&gt;</Line>
  <Line number="8246">*/</Line>
  <Line number="8247">#define SQLITE_DBSTATUS_LOOKASIDE_USED       0</Line>
  <Line number="8248">#define SQLITE_DBSTATUS_CACHE_USED           1</Line>
  <Line number="8249">#define SQLITE_DBSTATUS_SCHEMA_USED          2</Line>
  <Line number="8250">#define SQLITE_DBSTATUS_STMT_USED            3</Line>
  <Line number="8251">#define SQLITE_DBSTATUS_LOOKASIDE_HIT        4</Line>
  <Line number="8252">#define SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE  5</Line>
  <Line number="8253">#define SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL  6</Line>
  <Line number="8254">#define SQLITE_DBSTATUS_CACHE_HIT            7</Line>
  <Line number="8255">#define SQLITE_DBSTATUS_CACHE_MISS           8</Line>
  <Line number="8256">#define SQLITE_DBSTATUS_CACHE_WRITE          9</Line>
  <Line number="8257">#define SQLITE_DBSTATUS_DEFERRED_FKS        10</Line>
  <Line number="8258">#define SQLITE_DBSTATUS_CACHE_USED_SHARED   11</Line>
  <Line number="8259">#define SQLITE_DBSTATUS_CACHE_SPILL         12</Line>
  <Line number="8260">#define SQLITE_DBSTATUS_MAX                 12   /* Largest defined DBSTATUS */</Line>
  <Line number="8261"></Line>
  <Line number="8262"></Line>
  <Line number="8263">/*</Line>
  <Line number="8264">** CAPI3REF: Prepared Statement Status</Line>
  <Line number="8265">** METHOD: sqlite3_stmt</Line>
  <Line number="8266">**</Line>
  <Line number="8267">** ^(Each prepared statement maintains various</Line>
  <Line number="8268">** [SQLITE_STMTSTATUS counters] that measure the number</Line>
  <Line number="8269">** of times it has performed specific operations.)^  These counters can</Line>
  <Line number="8270">** be used to monitor the performance characteristics of the prepared</Line>
  <Line number="8271">** statements.  For example, if the number of table steps greatly exceeds</Line>
  <Line number="8272">** the number of table searches or result rows, that would tend to indicate</Line>
  <Line number="8273">** that the prepared statement is using a full table scan rather than</Line>
  <Line number="8274">** an index.</Line>
  <Line number="8275">**</Line>
  <Line number="8276">** ^(This interface is used to retrieve and reset counter values from</Line>
  <Line number="8277">** a [prepared statement].  The first argument is the prepared statement</Line>
  <Line number="8278">** object to be interrogated.  The second argument</Line>
  <Line number="8279">** is an integer code for a specific [SQLITE_STMTSTATUS counter]</Line>
  <Line number="8280">** to be interrogated.)^</Line>
  <Line number="8281">** ^The current value of the requested counter is returned.</Line>
  <Line number="8282">** ^If the resetFlg is true, then the counter is reset to zero after this</Line>
  <Line number="8283">** interface call returns.</Line>
  <Line number="8284">**</Line>
  <Line number="8285">** See also: [sqlite3_status()] and [sqlite3_db_status()].</Line>
  <Line number="8286">*/</Line>
  <Line number="8287">SQLITE_API int sqlite3_stmt_status(sqlite3_stmt*, int op,int resetFlg);</Line>
  <Line number="8288"></Line>
  <Line number="8289">/*</Line>
  <Line number="8290">** CAPI3REF: Status Parameters for prepared statements</Line>
  <Line number="8291">** KEYWORDS: {SQLITE_STMTSTATUS counter} {SQLITE_STMTSTATUS counters}</Line>
  <Line number="8292">**</Line>
  <Line number="8293">** These preprocessor macros define integer codes that name counter</Line>
  <Line number="8294">** values associated with the [sqlite3_stmt_status()] interface.</Line>
  <Line number="8295">** The meanings of the various counters are as follows:</Line>
  <Line number="8296">**</Line>
  <Line number="8297">** &lt;dl&gt;</Line>
  <Line number="8298">** [[SQLITE_STMTSTATUS_FULLSCAN_STEP]] &lt;dt&gt;SQLITE_STMTSTATUS_FULLSCAN_STEP&lt;/dt&gt;</Line>
  <Line number="8299">** &lt;dd&gt;^This is the number of times that SQLite has stepped forward in</Line>
  <Line number="8300">** a table as part of a full table scan.  Large numbers for this counter</Line>
  <Line number="8301">** may indicate opportunities for performance improvement through</Line>
  <Line number="8302">** careful use of indices.&lt;/dd&gt;</Line>
  <Line number="8303">**</Line>
  <Line number="8304">** [[SQLITE_STMTSTATUS_SORT]] &lt;dt&gt;SQLITE_STMTSTATUS_SORT&lt;/dt&gt;</Line>
  <Line number="8305">** &lt;dd&gt;^This is the number of sort operations that have occurred.</Line>
  <Line number="8306">** A non-zero value in this counter may indicate an opportunity to</Line>
  <Line number="8307">** improvement performance through careful use of indices.&lt;/dd&gt;</Line>
  <Line number="8308">**</Line>
  <Line number="8309">** [[SQLITE_STMTSTATUS_AUTOINDEX]] &lt;dt&gt;SQLITE_STMTSTATUS_AUTOINDEX&lt;/dt&gt;</Line>
  <Line number="8310">** &lt;dd&gt;^This is the number of rows inserted into transient indices that</Line>
  <Line number="8311">** were created automatically in order to help joins run faster.</Line>
  <Line number="8312">** A non-zero value in this counter may indicate an opportunity to</Line>
  <Line number="8313">** improvement performance by adding permanent indices that do not</Line>
  <Line number="8314">** need to be reinitialized each time the statement is run.&lt;/dd&gt;</Line>
  <Line number="8315">**</Line>
  <Line number="8316">** [[SQLITE_STMTSTATUS_VM_STEP]] &lt;dt&gt;SQLITE_STMTSTATUS_VM_STEP&lt;/dt&gt;</Line>
  <Line number="8317">** &lt;dd&gt;^This is the number of virtual machine operations executed</Line>
  <Line number="8318">** by the prepared statement if that number is less than or equal</Line>
  <Line number="8319">** to 2147483647.  The number of virtual machine operations can be</Line>
  <Line number="8320">** used as a proxy for the total work done by the prepared statement.</Line>
  <Line number="8321">** If the number of virtual machine operations exceeds 2147483647</Line>
  <Line number="8322">** then the value returned by this statement status code is undefined.</Line>
  <Line number="8323">**</Line>
  <Line number="8324">** [[SQLITE_STMTSTATUS_REPREPARE]] &lt;dt&gt;SQLITE_STMTSTATUS_REPREPARE&lt;/dt&gt;</Line>
  <Line number="8325">** &lt;dd&gt;^This is the number of times that the prepare statement has been</Line>
  <Line number="8326">** automatically regenerated due to schema changes or changes to</Line>
  <Line number="8327">** [bound parameters] that might affect the query plan.</Line>
  <Line number="8328">**</Line>
  <Line number="8329">** [[SQLITE_STMTSTATUS_RUN]] &lt;dt&gt;SQLITE_STMTSTATUS_RUN&lt;/dt&gt;</Line>
  <Line number="8330">** &lt;dd&gt;^This is the number of times that the prepared statement has</Line>
  <Line number="8331">** been run.  A single &quot;run&quot; for the purposes of this counter is one</Line>
  <Line number="8332">** or more calls to [sqlite3_step()] followed by a call to [sqlite3_reset()].</Line>
  <Line number="8333">** The counter is incremented on the first [sqlite3_step()] call of each</Line>
  <Line number="8334">** cycle.</Line>
  <Line number="8335">**</Line>
  <Line number="8336">** [[SQLITE_STMTSTATUS_MEMUSED]] &lt;dt&gt;SQLITE_STMTSTATUS_MEMUSED&lt;/dt&gt;</Line>
  <Line number="8337">** &lt;dd&gt;^This is the approximate number of bytes of heap memory</Line>
  <Line number="8338">** used to store the prepared statement.  ^This value is not actually</Line>
  <Line number="8339">** a counter, and so the resetFlg parameter to sqlite3_stmt_status()</Line>
  <Line number="8340">** is ignored when the opcode is SQLITE_STMTSTATUS_MEMUSED.</Line>
  <Line number="8341">** &lt;/dd&gt;</Line>
  <Line number="8342">** &lt;/dl&gt;</Line>
  <Line number="8343">*/</Line>
  <Line number="8344">#define SQLITE_STMTSTATUS_FULLSCAN_STEP     1</Line>
  <Line number="8345">#define SQLITE_STMTSTATUS_SORT              2</Line>
  <Line number="8346">#define SQLITE_STMTSTATUS_AUTOINDEX         3</Line>
  <Line number="8347">#define SQLITE_STMTSTATUS_VM_STEP           4</Line>
  <Line number="8348">#define SQLITE_STMTSTATUS_REPREPARE         5</Line>
  <Line number="8349">#define SQLITE_STMTSTATUS_RUN               6</Line>
  <Line number="8350">#define SQLITE_STMTSTATUS_MEMUSED           99</Line>
  <Line number="8351"></Line>
  <Line number="8352">/*</Line>
  <Line number="8353">** CAPI3REF: Custom Page Cache Object</Line>
  <Line number="8354">**</Line>
  <Line number="8355">** The sqlite3_pcache type is opaque.  It is implemented by</Line>
  <Line number="8356">** the pluggable module.  The SQLite core has no knowledge of</Line>
  <Line number="8357">** its size or internal structure and never deals with the</Line>
  <Line number="8358">** sqlite3_pcache object except by holding and passing pointers</Line>
  <Line number="8359">** to the object.</Line>
  <Line number="8360">**</Line>
  <Line number="8361">** See [sqlite3_pcache_methods2] for additional information.</Line>
  <Line number="8362">*/</Line>
  <Line number="8363">typedef struct sqlite3_pcache sqlite3_pcache;</Line>
  <Line number="8364"></Line>
  <Line number="8365">/*</Line>
  <Line number="8366">** CAPI3REF: Custom Page Cache Object</Line>
  <Line number="8367">**</Line>
  <Line number="8368">** The sqlite3_pcache_page object represents a single page in the</Line>
  <Line number="8369">** page cache.  The page cache will allocate instances of this</Line>
  <Line number="8370">** object.  Various methods of the page cache use pointers to instances</Line>
  <Line number="8371">** of this object as parameters or as their return value.</Line>
  <Line number="8372">**</Line>
  <Line number="8373">** See [sqlite3_pcache_methods2] for additional information.</Line>
  <Line number="8374">*/</Line>
  <Line number="8375">typedef struct sqlite3_pcache_page sqlite3_pcache_page;</Line>
  <Line number="8376">struct sqlite3_pcache_page {</Line>
  <Line number="8377">  void *pBuf;        /* The content of the page */</Line>
  <Line number="8378">  void *pExtra;      /* Extra information associated with the page */</Line>
  <Line number="8379">};</Line>
  <Line number="8380"></Line>
  <Line number="8381">/*</Line>
  <Line number="8382">** CAPI3REF: Application Defined Page Cache.</Line>
  <Line number="8383">** KEYWORDS: {page cache}</Line>
  <Line number="8384">**</Line>
  <Line number="8385">** ^(The [sqlite3_config]([SQLITE_CONFIG_PCACHE2], ...) interface can</Line>
  <Line number="8386">** register an alternative page cache implementation by passing in an</Line>
  <Line number="8387">** instance of the sqlite3_pcache_methods2 structure.)^</Line>
  <Line number="8388">** In many applications, most of the heap memory allocated by</Line>
  <Line number="8389">** SQLite is used for the page cache.</Line>
  <Line number="8390">** By implementing a</Line>
  <Line number="8391">** custom page cache using this API, an application can better control</Line>
  <Line number="8392">** the amount of memory consumed by SQLite, the way in which</Line>
  <Line number="8393">** that memory is allocated and released, and the policies used to</Line>
  <Line number="8394">** determine exactly which parts of a database file are cached and for</Line>
  <Line number="8395">** how long.</Line>
  <Line number="8396">**</Line>
  <Line number="8397">** The alternative page cache mechanism is an</Line>
  <Line number="8398">** extreme measure that is only needed by the most demanding applications.</Line>
  <Line number="8399">** The built-in page cache is recommended for most uses.</Line>
  <Line number="8400">**</Line>
  <Line number="8401">** ^(The contents of the sqlite3_pcache_methods2 structure are copied to an</Line>
  <Line number="8402">** internal buffer by SQLite within the call to [sqlite3_config].  Hence</Line>
  <Line number="8403">** the application may discard the parameter after the call to</Line>
  <Line number="8404">** [sqlite3_config()] returns.)^</Line>
  <Line number="8405">**</Line>
  <Line number="8406">** [[the xInit() page cache method]]</Line>
  <Line number="8407">** ^(The xInit() method is called once for each effective</Line>
  <Line number="8408">** call to [sqlite3_initialize()])^</Line>
  <Line number="8409">** (usually only once during the lifetime of the process). ^(The xInit()</Line>
  <Line number="8410">** method is passed a copy of the sqlite3_pcache_methods2.pArg value.)^</Line>
  <Line number="8411">** The intent of the xInit() method is to set up global data structures</Line>
  <Line number="8412">** required by the custom page cache implementation.</Line>
  <Line number="8413">** ^(If the xInit() method is NULL, then the</Line>
  <Line number="8414">** built-in default page cache is used instead of the application defined</Line>
  <Line number="8415">** page cache.)^</Line>
  <Line number="8416">**</Line>
  <Line number="8417">** [[the xShutdown() page cache method]]</Line>
  <Line number="8418">** ^The xShutdown() method is called by [sqlite3_shutdown()].</Line>
  <Line number="8419">** It can be used to clean up</Line>
  <Line number="8420">** any outstanding resources before process shutdown, if required.</Line>
  <Line number="8421">** ^The xShutdown() method may be NULL.</Line>
  <Line number="8422">**</Line>
  <Line number="8423">** ^SQLite automatically serializes calls to the xInit method,</Line>
  <Line number="8424">** so the xInit method need not be threadsafe.  ^The</Line>
  <Line number="8425">** xShutdown method is only called from [sqlite3_shutdown()] so it does</Line>
  <Line number="8426">** not need to be threadsafe either.  All other methods must be threadsafe</Line>
  <Line number="8427">** in multithreaded applications.</Line>
  <Line number="8428">**</Line>
  <Line number="8429">** ^SQLite will never invoke xInit() more than once without an intervening</Line>
  <Line number="8430">** call to xShutdown().</Line>
  <Line number="8431">**</Line>
  <Line number="8432">** [[the xCreate() page cache methods]]</Line>
  <Line number="8433">** ^SQLite invokes the xCreate() method to construct a new cache instance.</Line>
  <Line number="8434">** SQLite will typically create one cache instance for each open database file,</Line>
  <Line number="8435">** though this is not guaranteed. ^The</Line>
  <Line number="8436">** first parameter, szPage, is the size in bytes of the pages that must</Line>
  <Line number="8437">** be allocated by the cache.  ^szPage will always a power of two.  ^The</Line>
  <Line number="8438">** second parameter szExtra is a number of bytes of extra storage</Line>
  <Line number="8439">** associated with each page cache entry.  ^The szExtra parameter will</Line>
  <Line number="8440">** a number less than 250.  SQLite will use the</Line>
  <Line number="8441">** extra szExtra bytes on each page to store metadata about the underlying</Line>
  <Line number="8442">** database page on disk.  The value passed into szExtra depends</Line>
  <Line number="8443">** on the SQLite version, the target platform, and how SQLite was compiled.</Line>
  <Line number="8444">** ^The third argument to xCreate(), bPurgeable, is true if the cache being</Line>
  <Line number="8445">** created will be used to cache database pages of a file stored on disk, or</Line>
  <Line number="8446">** false if it is used for an in-memory database. The cache implementation</Line>
  <Line number="8447">** does not have to do anything special based with the value of bPurgeable;</Line>
  <Line number="8448">** it is purely advisory.  ^On a cache where bPurgeable is false, SQLite will</Line>
  <Line number="8449">** never invoke xUnpin() except to deliberately delete a page.</Line>
  <Line number="8450">** ^In other words, calls to xUnpin() on a cache with bPurgeable set to</Line>
  <Line number="8451">** false will always have the &quot;discard&quot; flag set to true.</Line>
  <Line number="8452">** ^Hence, a cache created with bPurgeable false will</Line>
  <Line number="8453">** never contain any unpinned pages.</Line>
  <Line number="8454">**</Line>
  <Line number="8455">** [[the xCachesize() page cache method]]</Line>
  <Line number="8456">** ^(The xCachesize() method may be called at any time by SQLite to set the</Line>
  <Line number="8457">** suggested maximum cache-size (number of pages stored by) the cache</Line>
  <Line number="8458">** instance passed as the first argument. This is the value configured using</Line>
  <Line number="8459">** the SQLite &quot;[PRAGMA cache_size]&quot; command.)^  As with the bPurgeable</Line>
  <Line number="8460">** parameter, the implementation is not required to do anything with this</Line>
  <Line number="8461">** value; it is advisory only.</Line>
  <Line number="8462">**</Line>
  <Line number="8463">** [[the xPagecount() page cache methods]]</Line>
  <Line number="8464">** The xPagecount() method must return the number of pages currently</Line>
  <Line number="8465">** stored in the cache, both pinned and unpinned.</Line>
  <Line number="8466">**</Line>
  <Line number="8467">** [[the xFetch() page cache methods]]</Line>
  <Line number="8468">** The xFetch() method locates a page in the cache and returns a pointer to</Line>
  <Line number="8469">** an sqlite3_pcache_page object associated with that page, or a NULL pointer.</Line>
  <Line number="8470">** The pBuf element of the returned sqlite3_pcache_page object will be a</Line>
  <Line number="8471">** pointer to a buffer of szPage bytes used to store the content of a</Line>
  <Line number="8472">** single database page.  The pExtra element of sqlite3_pcache_page will be</Line>
  <Line number="8473">** a pointer to the szExtra bytes of extra storage that SQLite has requested</Line>
  <Line number="8474">** for each entry in the page cache.</Line>
  <Line number="8475">**</Line>
  <Line number="8476">** The page to be fetched is determined by the key. ^The minimum key value</Line>
  <Line number="8477">** is 1.  After it has been retrieved using xFetch, the page is considered</Line>
  <Line number="8478">** to be &quot;pinned&quot;.</Line>
  <Line number="8479">**</Line>
  <Line number="8480">** If the requested page is already in the page cache, then the page cache</Line>
  <Line number="8481">** implementation must return a pointer to the page buffer with its content</Line>
  <Line number="8482">** intact.  If the requested page is not already in the cache, then the</Line>
  <Line number="8483">** cache implementation should use the value of the createFlag</Line>
  <Line number="8484">** parameter to help it determined what action to take:</Line>
  <Line number="8485">**</Line>
  <Line number="8486">** &lt;table border=1 width=85% align=center&gt;</Line>
  <Line number="8487">** &lt;tr&gt;&lt;th&gt; createFlag &lt;th&gt; Behavior when page is not already in cache</Line>
  <Line number="8488">** &lt;tr&gt;&lt;td&gt; 0 &lt;td&gt; Do not allocate a new page.  Return NULL.</Line>
  <Line number="8489">** &lt;tr&gt;&lt;td&gt; 1 &lt;td&gt; Allocate a new page if it easy and convenient to do so.</Line>
  <Line number="8490">**                 Otherwise return NULL.</Line>
  <Line number="8491">** &lt;tr&gt;&lt;td&gt; 2 &lt;td&gt; Make every effort to allocate a new page.  Only return</Line>
  <Line number="8492">**                 NULL if allocating a new page is effectively impossible.</Line>
  <Line number="8493">** &lt;/table&gt;</Line>
  <Line number="8494">**</Line>
  <Line number="8495">** ^(SQLite will normally invoke xFetch() with a createFlag of 0 or 1.  SQLite</Line>
  <Line number="8496">** will only use a createFlag of 2 after a prior call with a createFlag of 1</Line>
  <Line number="8497">** failed.)^  In between the xFetch() calls, SQLite may</Line>
  <Line number="8498">** attempt to unpin one or more cache pages by spilling the content of</Line>
  <Line number="8499">** pinned pages to disk and synching the operating system disk cache.</Line>
  <Line number="8500">**</Line>
  <Line number="8501">** [[the xUnpin() page cache method]]</Line>
  <Line number="8502">** ^xUnpin() is called by SQLite with a pointer to a currently pinned page</Line>
  <Line number="8503">** as its second argument.  If the third parameter, discard, is non-zero,</Line>
  <Line number="8504">** then the page must be evicted from the cache.</Line>
  <Line number="8505">** ^If the discard parameter is</Line>
  <Line number="8506">** zero, then the page may be discarded or retained at the discretion of</Line>
  <Line number="8507">** page cache implementation. ^The page cache implementation</Line>
  <Line number="8508">** may choose to evict unpinned pages at any time.</Line>
  <Line number="8509">**</Line>
  <Line number="8510">** The cache must not perform any reference counting. A single</Line>
  <Line number="8511">** call to xUnpin() unpins the page regardless of the number of prior calls</Line>
  <Line number="8512">** to xFetch().</Line>
  <Line number="8513">**</Line>
  <Line number="8514">** [[the xRekey() page cache methods]]</Line>
  <Line number="8515">** The xRekey() method is used to change the key value associated with the</Line>
  <Line number="8516">** page passed as the second argument. If the cache</Line>
  <Line number="8517">** previously contains an entry associated with newKey, it must be</Line>
  <Line number="8518">** discarded. ^Any prior cache entry associated with newKey is guaranteed not</Line>
  <Line number="8519">** to be pinned.</Line>
  <Line number="8520">**</Line>
  <Line number="8521">** When SQLite calls the xTruncate() method, the cache must discard all</Line>
  <Line number="8522">** existing cache entries with page numbers (keys) greater than or equal</Line>
  <Line number="8523">** to the value of the iLimit parameter passed to xTruncate(). If any</Line>
  <Line number="8524">** of these pages are pinned, they are implicitly unpinned, meaning that</Line>
  <Line number="8525">** they can be safely discarded.</Line>
  <Line number="8526">**</Line>
  <Line number="8527">** [[the xDestroy() page cache method]]</Line>
  <Line number="8528">** ^The xDestroy() method is used to delete a cache allocated by xCreate().</Line>
  <Line number="8529">** All resources associated with the specified cache should be freed. ^After</Line>
  <Line number="8530">** calling the xDestroy() method, SQLite considers the [sqlite3_pcache*]</Line>
  <Line number="8531">** handle invalid, and will not use it with any other sqlite3_pcache_methods2</Line>
  <Line number="8532">** functions.</Line>
  <Line number="8533">**</Line>
  <Line number="8534">** [[the xShrink() page cache method]]</Line>
  <Line number="8535">** ^SQLite invokes the xShrink() method when it wants the page cache to</Line>
  <Line number="8536">** free up as much of heap memory as possible.  The page cache implementation</Line>
  <Line number="8537">** is not obligated to free any memory, but well-behaved implementations should</Line>
  <Line number="8538">** do their best.</Line>
  <Line number="8539">*/</Line>
  <Line number="8540">typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;</Line>
  <Line number="8541">struct sqlite3_pcache_methods2 {</Line>
  <Line number="8542">  int iVersion;</Line>
  <Line number="8543">  void *pArg;</Line>
  <Line number="8544">  int (*xInit)(void*);</Line>
  <Line number="8545">  void (*xShutdown)(void*);</Line>
  <Line number="8546">  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);</Line>
  <Line number="8547">  void (*xCachesize)(sqlite3_pcache*, int nCachesize);</Line>
  <Line number="8548">  int (*xPagecount)(sqlite3_pcache*);</Line>
  <Line number="8549">  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);</Line>
  <Line number="8550">  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);</Line>
  <Line number="8551">  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*,</Line>
  <Line number="8552">      unsigned oldKey, unsigned newKey);</Line>
  <Line number="8553">  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);</Line>
  <Line number="8554">  void (*xDestroy)(sqlite3_pcache*);</Line>
  <Line number="8555">  void (*xShrink)(sqlite3_pcache*);</Line>
  <Line number="8556">};</Line>
  <Line number="8557"></Line>
  <Line number="8558">/*</Line>
  <Line number="8559">** This is the obsolete pcache_methods object that has now been replaced</Line>
  <Line number="8560">** by sqlite3_pcache_methods2.  This object is not used by SQLite.  It is</Line>
  <Line number="8561">** retained in the header file for backwards compatibility only.</Line>
  <Line number="8562">*/</Line>
  <Line number="8563">typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;</Line>
  <Line number="8564">struct sqlite3_pcache_methods {</Line>
  <Line number="8565">  void *pArg;</Line>
  <Line number="8566">  int (*xInit)(void*);</Line>
  <Line number="8567">  void (*xShutdown)(void*);</Line>
  <Line number="8568">  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);</Line>
  <Line number="8569">  void (*xCachesize)(sqlite3_pcache*, int nCachesize);</Line>
  <Line number="8570">  int (*xPagecount)(sqlite3_pcache*);</Line>
  <Line number="8571">  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);</Line>
  <Line number="8572">  void (*xUnpin)(sqlite3_pcache*, void*, int discard);</Line>
  <Line number="8573">  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);</Line>
  <Line number="8574">  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);</Line>
  <Line number="8575">  void (*xDestroy)(sqlite3_pcache*);</Line>
  <Line number="8576">};</Line>
  <Line number="8577"></Line>
  <Line number="8578"></Line>
  <Line number="8579">/*</Line>
  <Line number="8580">** CAPI3REF: Online Backup Object</Line>
  <Line number="8581">**</Line>
  <Line number="8582">** The sqlite3_backup object records state information about an ongoing</Line>
  <Line number="8583">** online backup operation.  ^The sqlite3_backup object is created by</Line>
  <Line number="8584">** a call to [sqlite3_backup_init()] and is destroyed by a call to</Line>
  <Line number="8585">** [sqlite3_backup_finish()].</Line>
  <Line number="8586">**</Line>
  <Line number="8587">** See Also: [Using the SQLite Online Backup API]</Line>
  <Line number="8588">*/</Line>
  <Line number="8589">typedef struct sqlite3_backup sqlite3_backup;</Line>
  <Line number="8590"></Line>
  <Line number="8591">/*</Line>
  <Line number="8592">** CAPI3REF: Online Backup API.</Line>
  <Line number="8593">**</Line>
  <Line number="8594">** The backup API copies the content of one database into another.</Line>
  <Line number="8595">** It is useful either for creating backups of databases or</Line>
  <Line number="8596">** for copying in-memory databases to or from persistent files.</Line>
  <Line number="8597">**</Line>
  <Line number="8598">** See Also: [Using the SQLite Online Backup API]</Line>
  <Line number="8599">**</Line>
  <Line number="8600">** ^SQLite holds a write transaction open on the destination database file</Line>
  <Line number="8601">** for the duration of the backup operation.</Line>
  <Line number="8602">** ^The source database is read-locked only while it is being read;</Line>
  <Line number="8603">** it is not locked continuously for the entire backup operation.</Line>
  <Line number="8604">** ^Thus, the backup may be performed on a live source database without</Line>
  <Line number="8605">** preventing other database connections from</Line>
  <Line number="8606">** reading or writing to the source database while the backup is underway.</Line>
  <Line number="8607">**</Line>
  <Line number="8608">** ^(To perform a backup operation:</Line>
  <Line number="8609">**   &lt;ol&gt;</Line>
  <Line number="8610">**     &lt;li&gt;&lt;b&gt;sqlite3_backup_init()&lt;/b&gt; is called once to initialize the</Line>
  <Line number="8611">**         backup,</Line>
  <Line number="8612">**     &lt;li&gt;&lt;b&gt;sqlite3_backup_step()&lt;/b&gt; is called one or more times to transfer</Line>
  <Line number="8613">**         the data between the two databases, and finally</Line>
  <Line number="8614">**     &lt;li&gt;&lt;b&gt;sqlite3_backup_finish()&lt;/b&gt; is called to release all resources</Line>
  <Line number="8615">**         associated with the backup operation.</Line>
  <Line number="8616">**   &lt;/ol&gt;)^</Line>
  <Line number="8617">** There should be exactly one call to sqlite3_backup_finish() for each</Line>
  <Line number="8618">** successful call to sqlite3_backup_init().</Line>
  <Line number="8619">**</Line>
  <Line number="8620">** [[sqlite3_backup_init()]] &lt;b&gt;sqlite3_backup_init()&lt;/b&gt;</Line>
  <Line number="8621">**</Line>
  <Line number="8622">** ^The D and N arguments to sqlite3_backup_init(D,N,S,M) are the</Line>
  <Line number="8623">** [database connection] associated with the destination database</Line>
  <Line number="8624">** and the database name, respectively.</Line>
  <Line number="8625">** ^The database name is &quot;main&quot; for the main database, &quot;temp&quot; for the</Line>
  <Line number="8626">** temporary database, or the name specified after the AS keyword in</Line>
  <Line number="8627">** an [ATTACH] statement for an attached database.</Line>
  <Line number="8628">** ^The S and M arguments passed to</Line>
  <Line number="8629">** sqlite3_backup_init(D,N,S,M) identify the [database connection]</Line>
  <Line number="8630">** and database name of the source database, respectively.</Line>
  <Line number="8631">** ^The source and destination [database connections] (parameters S and D)</Line>
  <Line number="8632">** must be different or else sqlite3_backup_init(D,N,S,M) will fail with</Line>
  <Line number="8633">** an error.</Line>
  <Line number="8634">**</Line>
  <Line number="8635">** ^A call to sqlite3_backup_init() will fail, returning NULL, if</Line>
  <Line number="8636">** there is already a read or read-write transaction open on the</Line>
  <Line number="8637">** destination database.</Line>
  <Line number="8638">**</Line>
  <Line number="8639">** ^If an error occurs within sqlite3_backup_init(D,N,S,M), then NULL is</Line>
  <Line number="8640">** returned and an error code and error message are stored in the</Line>
  <Line number="8641">** destination [database connection] D.</Line>
  <Line number="8642">** ^The error code and message for the failed call to sqlite3_backup_init()</Line>
  <Line number="8643">** can be retrieved using the [sqlite3_errcode()], [sqlite3_errmsg()], and/or</Line>
  <Line number="8644">** [sqlite3_errmsg16()] functions.</Line>
  <Line number="8645">** ^A successful call to sqlite3_backup_init() returns a pointer to an</Line>
  <Line number="8646">** [sqlite3_backup] object.</Line>
  <Line number="8647">** ^The [sqlite3_backup] object may be used with the sqlite3_backup_step() and</Line>
  <Line number="8648">** sqlite3_backup_finish() functions to perform the specified backup</Line>
  <Line number="8649">** operation.</Line>
  <Line number="8650">**</Line>
  <Line number="8651">** [[sqlite3_backup_step()]] &lt;b&gt;sqlite3_backup_step()&lt;/b&gt;</Line>
  <Line number="8652">**</Line>
  <Line number="8653">** ^Function sqlite3_backup_step(B,N) will copy up to N pages between</Line>
  <Line number="8654">** the source and destination databases specified by [sqlite3_backup] object B.</Line>
  <Line number="8655">** ^If N is negative, all remaining source pages are copied.</Line>
  <Line number="8656">** ^If sqlite3_backup_step(B,N) successfully copies N pages and there</Line>
  <Line number="8657">** are still more pages to be copied, then the function returns [SQLITE_OK].</Line>
  <Line number="8658">** ^If sqlite3_backup_step(B,N) successfully finishes copying all pages</Line>
  <Line number="8659">** from source to destination, then it returns [SQLITE_DONE].</Line>
  <Line number="8660">** ^If an error occurs while running sqlite3_backup_step(B,N),</Line>
  <Line number="8661">** then an [error code] is returned. ^As well as [SQLITE_OK] and</Line>
  <Line number="8662">** [SQLITE_DONE], a call to sqlite3_backup_step() may return [SQLITE_READONLY],</Line>
  <Line number="8663">** [SQLITE_NOMEM], [SQLITE_BUSY], [SQLITE_LOCKED], or an</Line>
  <Line number="8664">** [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX] extended error code.</Line>
  <Line number="8665">**</Line>
  <Line number="8666">** ^(The sqlite3_backup_step() might return [SQLITE_READONLY] if</Line>
  <Line number="8667">** &lt;ol&gt;</Line>
  <Line number="8668">** &lt;li&gt; the destination database was opened read-only, or</Line>
  <Line number="8669">** &lt;li&gt; the destination database is using write-ahead-log journaling</Line>
  <Line number="8670">** and the destination and source page sizes differ, or</Line>
  <Line number="8671">** &lt;li&gt; the destination database is an in-memory database and the</Line>
  <Line number="8672">** destination and source page sizes differ.</Line>
  <Line number="8673">** &lt;/ol&gt;)^</Line>
  <Line number="8674">**</Line>
  <Line number="8675">** ^If sqlite3_backup_step() cannot obtain a required file-system lock, then</Line>
  <Line number="8676">** the [sqlite3_busy_handler | busy-handler function]</Line>
  <Line number="8677">** is invoked (if one is specified). ^If the</Line>
  <Line number="8678">** busy-handler returns non-zero before the lock is available, then</Line>
  <Line number="8679">** [SQLITE_BUSY] is returned to the caller. ^In this case the call to</Line>
  <Line number="8680">** sqlite3_backup_step() can be retried later. ^If the source</Line>
  <Line number="8681">** [database connection]</Line>
  <Line number="8682">** is being used to write to the source database when sqlite3_backup_step()</Line>
  <Line number="8683">** is called, then [SQLITE_LOCKED] is returned immediately. ^Again, in this</Line>
  <Line number="8684">** case the call to sqlite3_backup_step() can be retried later on. ^(If</Line>
  <Line number="8685">** [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX], [SQLITE_NOMEM], or</Line>
  <Line number="8686">** [SQLITE_READONLY] is returned, then</Line>
  <Line number="8687">** there is no point in retrying the call to sqlite3_backup_step(). These</Line>
  <Line number="8688">** errors are considered fatal.)^  The application must accept</Line>
  <Line number="8689">** that the backup operation has failed and pass the backup operation handle</Line>
  <Line number="8690">** to the sqlite3_backup_finish() to release associated resources.</Line>
  <Line number="8691">**</Line>
  <Line number="8692">** ^The first call to sqlite3_backup_step() obtains an exclusive lock</Line>
  <Line number="8693">** on the destination file. ^The exclusive lock is not released until either</Line>
  <Line number="8694">** sqlite3_backup_finish() is called or the backup operation is complete</Line>
  <Line number="8695">** and sqlite3_backup_step() returns [SQLITE_DONE].  ^Every call to</Line>
  <Line number="8696">** sqlite3_backup_step() obtains a [shared lock] on the source database that</Line>
  <Line number="8697">** lasts for the duration of the sqlite3_backup_step() call.</Line>
  <Line number="8698">** ^Because the source database is not locked between calls to</Line>
  <Line number="8699">** sqlite3_backup_step(), the source database may be modified mid-way</Line>
  <Line number="8700">** through the backup process.  ^If the source database is modified by an</Line>
  <Line number="8701">** external process or via a database connection other than the one being</Line>
  <Line number="8702">** used by the backup operation, then the backup will be automatically</Line>
  <Line number="8703">** restarted by the next call to sqlite3_backup_step(). ^If the source</Line>
  <Line number="8704">** database is modified by the using the same database connection as is used</Line>
  <Line number="8705">** by the backup operation, then the backup database is automatically</Line>
  <Line number="8706">** updated at the same time.</Line>
  <Line number="8707">**</Line>
  <Line number="8708">** [[sqlite3_backup_finish()]] &lt;b&gt;sqlite3_backup_finish()&lt;/b&gt;</Line>
  <Line number="8709">**</Line>
  <Line number="8710">** When sqlite3_backup_step() has returned [SQLITE_DONE], or when the</Line>
  <Line number="8711">** application wishes to abandon the backup operation, the application</Line>
  <Line number="8712">** should destroy the [sqlite3_backup] by passing it to sqlite3_backup_finish().</Line>
  <Line number="8713">** ^The sqlite3_backup_finish() interfaces releases all</Line>
  <Line number="8714">** resources associated with the [sqlite3_backup] object.</Line>
  <Line number="8715">** ^If sqlite3_backup_step() has not yet returned [SQLITE_DONE], then any</Line>
  <Line number="8716">** active write-transaction on the destination database is rolled back.</Line>
  <Line number="8717">** The [sqlite3_backup] object is invalid</Line>
  <Line number="8718">** and may not be used following a call to sqlite3_backup_finish().</Line>
  <Line number="8719">**</Line>
  <Line number="8720">** ^The value returned by sqlite3_backup_finish is [SQLITE_OK] if no</Line>
  <Line number="8721">** sqlite3_backup_step() errors occurred, regardless or whether or not</Line>
  <Line number="8722">** sqlite3_backup_step() completed.</Line>
  <Line number="8723">** ^If an out-of-memory condition or IO error occurred during any prior</Line>
  <Line number="8724">** sqlite3_backup_step() call on the same [sqlite3_backup] object, then</Line>
  <Line number="8725">** sqlite3_backup_finish() returns the corresponding [error code].</Line>
  <Line number="8726">**</Line>
  <Line number="8727">** ^A return of [SQLITE_BUSY] or [SQLITE_LOCKED] from sqlite3_backup_step()</Line>
  <Line number="8728">** is not a permanent error and does not affect the return value of</Line>
  <Line number="8729">** sqlite3_backup_finish().</Line>
  <Line number="8730">**</Line>
  <Line number="8731">** [[sqlite3_backup_remaining()]] [[sqlite3_backup_pagecount()]]</Line>
  <Line number="8732">** &lt;b&gt;sqlite3_backup_remaining() and sqlite3_backup_pagecount()&lt;/b&gt;</Line>
  <Line number="8733">**</Line>
  <Line number="8734">** ^The sqlite3_backup_remaining() routine returns the number of pages still</Line>
  <Line number="8735">** to be backed up at the conclusion of the most recent sqlite3_backup_step().</Line>
  <Line number="8736">** ^The sqlite3_backup_pagecount() routine returns the total number of pages</Line>
  <Line number="8737">** in the source database at the conclusion of the most recent</Line>
  <Line number="8738">** sqlite3_backup_step().</Line>
  <Line number="8739">** ^(The values returned by these functions are only updated by</Line>
  <Line number="8740">** sqlite3_backup_step(). If the source database is modified in a way that</Line>
  <Line number="8741">** changes the size of the source database or the number of pages remaining,</Line>
  <Line number="8742">** those changes are not reflected in the output of sqlite3_backup_pagecount()</Line>
  <Line number="8743">** and sqlite3_backup_remaining() until after the next</Line>
  <Line number="8744">** sqlite3_backup_step().)^</Line>
  <Line number="8745">**</Line>
  <Line number="8746">** &lt;b&gt;Concurrent Usage of Database Handles&lt;/b&gt;</Line>
  <Line number="8747">**</Line>
  <Line number="8748">** ^The source [database connection] may be used by the application for other</Line>
  <Line number="8749">** purposes while a backup operation is underway or being initialized.</Line>
  <Line number="8750">** ^If SQLite is compiled and configured to support threadsafe database</Line>
  <Line number="8751">** connections, then the source database connection may be used concurrently</Line>
  <Line number="8752">** from within other threads.</Line>
  <Line number="8753">**</Line>
  <Line number="8754">** However, the application must guarantee that the destination</Line>
  <Line number="8755">** [database connection] is not passed to any other API (by any thread) after</Line>
  <Line number="8756">** sqlite3_backup_init() is called and before the corresponding call to</Line>
  <Line number="8757">** sqlite3_backup_finish().  SQLite does not currently check to see</Line>
  <Line number="8758">** if the application incorrectly accesses the destination [database connection]</Line>
  <Line number="8759">** and so no error code is reported, but the operations may malfunction</Line>
  <Line number="8760">** nevertheless.  Use of the destination database connection while a</Line>
  <Line number="8761">** backup is in progress might also also cause a mutex deadlock.</Line>
  <Line number="8762">**</Line>
  <Line number="8763">** If running in [shared cache mode], the application must</Line>
  <Line number="8764">** guarantee that the shared cache used by the destination database</Line>
  <Line number="8765">** is not accessed while the backup is running. In practice this means</Line>
  <Line number="8766">** that the application must guarantee that the disk file being</Line>
  <Line number="8767">** backed up to is not accessed by any connection within the process,</Line>
  <Line number="8768">** not just the specific connection that was passed to sqlite3_backup_init().</Line>
  <Line number="8769">**</Line>
  <Line number="8770">** The [sqlite3_backup] object itself is partially threadsafe. Multiple</Line>
  <Line number="8771">** threads may safely make multiple concurrent calls to sqlite3_backup_step().</Line>
  <Line number="8772">** However, the sqlite3_backup_remaining() and sqlite3_backup_pagecount()</Line>
  <Line number="8773">** APIs are not strictly speaking threadsafe. If they are invoked at the</Line>
  <Line number="8774">** same time as another thread is invoking sqlite3_backup_step() it is</Line>
  <Line number="8775">** possible that they return invalid values.</Line>
  <Line number="8776">*/</Line>
  <Line number="8777">SQLITE_API sqlite3_backup *sqlite3_backup_init(</Line>
  <Line number="8778">  sqlite3 *pDest,                        /* Destination database handle */</Line>
  <Line number="8779">  const char *zDestName,                 /* Destination database name */</Line>
  <Line number="8780">  sqlite3 *pSource,                      /* Source database handle */</Line>
  <Line number="8781">  const char *zSourceName                /* Source database name */</Line>
  <Line number="8782">);</Line>
  <Line number="8783">SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage);</Line>
  <Line number="8784">SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p);</Line>
  <Line number="8785">SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p);</Line>
  <Line number="8786">SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p);</Line>
  <Line number="8787"></Line>
  <Line number="8788">/*</Line>
  <Line number="8789">** CAPI3REF: Unlock Notification</Line>
  <Line number="8790">** METHOD: sqlite3</Line>
  <Line number="8791">**</Line>
  <Line number="8792">** ^When running in shared-cache mode, a database operation may fail with</Line>
  <Line number="8793">** an [SQLITE_LOCKED] error if the required locks on the shared-cache or</Line>
  <Line number="8794">** individual tables within the shared-cache cannot be obtained. See</Line>
  <Line number="8795">** [SQLite Shared-Cache Mode] for a description of shared-cache locking.</Line>
  <Line number="8796">** ^This API may be used to register a callback that SQLite will invoke</Line>
  <Line number="8797">** when the connection currently holding the required lock relinquishes it.</Line>
  <Line number="8798">** ^This API is only available if the library was compiled with the</Line>
  <Line number="8799">** [SQLITE_ENABLE_UNLOCK_NOTIFY] C-preprocessor symbol defined.</Line>
  <Line number="8800">**</Line>
  <Line number="8801">** See Also: [Using the SQLite Unlock Notification Feature].</Line>
  <Line number="8802">**</Line>
  <Line number="8803">** ^Shared-cache locks are released when a database connection concludes</Line>
  <Line number="8804">** its current transaction, either by committing it or rolling it back.</Line>
  <Line number="8805">**</Line>
  <Line number="8806">** ^When a connection (known as the blocked connection) fails to obtain a</Line>
  <Line number="8807">** shared-cache lock and SQLITE_LOCKED is returned to the caller, the</Line>
  <Line number="8808">** identity of the database connection (the blocking connection) that</Line>
  <Line number="8809">** has locked the required resource is stored internally. ^After an</Line>
  <Line number="8810">** application receives an SQLITE_LOCKED error, it may call the</Line>
  <Line number="8811">** sqlite3_unlock_notify() method with the blocked connection handle as</Line>
  <Line number="8812">** the first argument to register for a callback that will be invoked</Line>
  <Line number="8813">** when the blocking connections current transaction is concluded. ^The</Line>
  <Line number="8814">** callback is invoked from within the [sqlite3_step] or [sqlite3_close]</Line>
  <Line number="8815">** call that concludes the blocking connection&apos;s transaction.</Line>
  <Line number="8816">**</Line>
  <Line number="8817">** ^(If sqlite3_unlock_notify() is called in a multi-threaded application,</Line>
  <Line number="8818">** there is a chance that the blocking connection will have already</Line>
  <Line number="8819">** concluded its transaction by the time sqlite3_unlock_notify() is invoked.</Line>
  <Line number="8820">** If this happens, then the specified callback is invoked immediately,</Line>
  <Line number="8821">** from within the call to sqlite3_unlock_notify().)^</Line>
  <Line number="8822">**</Line>
  <Line number="8823">** ^If the blocked connection is attempting to obtain a write-lock on a</Line>
  <Line number="8824">** shared-cache table, and more than one other connection currently holds</Line>
  <Line number="8825">** a read-lock on the same table, then SQLite arbitrarily selects one of</Line>
  <Line number="8826">** the other connections to use as the blocking connection.</Line>
  <Line number="8827">**</Line>
  <Line number="8828">** ^(There may be at most one unlock-notify callback registered by a</Line>
  <Line number="8829">** blocked connection. If sqlite3_unlock_notify() is called when the</Line>
  <Line number="8830">** blocked connection already has a registered unlock-notify callback,</Line>
  <Line number="8831">** then the new callback replaces the old.)^ ^If sqlite3_unlock_notify() is</Line>
  <Line number="8832">** called with a NULL pointer as its second argument, then any existing</Line>
  <Line number="8833">** unlock-notify callback is canceled. ^The blocked connections</Line>
  <Line number="8834">** unlock-notify callback may also be canceled by closing the blocked</Line>
  <Line number="8835">** connection using [sqlite3_close()].</Line>
  <Line number="8836">**</Line>
  <Line number="8837">** The unlock-notify callback is not reentrant. If an application invokes</Line>
  <Line number="8838">** any sqlite3_xxx API functions from within an unlock-notify callback, a</Line>
  <Line number="8839">** crash or deadlock may be the result.</Line>
  <Line number="8840">**</Line>
  <Line number="8841">** ^Unless deadlock is detected (see below), sqlite3_unlock_notify() always</Line>
  <Line number="8842">** returns SQLITE_OK.</Line>
  <Line number="8843">**</Line>
  <Line number="8844">** &lt;b&gt;Callback Invocation Details&lt;/b&gt;</Line>
  <Line number="8845">**</Line>
  <Line number="8846">** When an unlock-notify callback is registered, the application provides a</Line>
  <Line number="8847">** single void* pointer that is passed to the callback when it is invoked.</Line>
  <Line number="8848">** However, the signature of the callback function allows SQLite to pass</Line>
  <Line number="8849">** it an array of void* context pointers. The first argument passed to</Line>
  <Line number="8850">** an unlock-notify callback is a pointer to an array of void* pointers,</Line>
  <Line number="8851">** and the second is the number of entries in the array.</Line>
  <Line number="8852">**</Line>
  <Line number="8853">** When a blocking connection&apos;s transaction is concluded, there may be</Line>
  <Line number="8854">** more than one blocked connection that has registered for an unlock-notify</Line>
  <Line number="8855">** callback. ^If two or more such blocked connections have specified the</Line>
  <Line number="8856">** same callback function, then instead of invoking the callback function</Line>
  <Line number="8857">** multiple times, it is invoked once with the set of void* context pointers</Line>
  <Line number="8858">** specified by the blocked connections bundled together into an array.</Line>
  <Line number="8859">** This gives the application an opportunity to prioritize any actions</Line>
  <Line number="8860">** related to the set of unblocked database connections.</Line>
  <Line number="8861">**</Line>
  <Line number="8862">** &lt;b&gt;Deadlock Detection&lt;/b&gt;</Line>
  <Line number="8863">**</Line>
  <Line number="8864">** Assuming that after registering for an unlock-notify callback a</Line>
  <Line number="8865">** database waits for the callback to be issued before taking any further</Line>
  <Line number="8866">** action (a reasonable assumption), then using this API may cause the</Line>
  <Line number="8867">** application to deadlock. For example, if connection X is waiting for</Line>
  <Line number="8868">** connection Y&apos;s transaction to be concluded, and similarly connection</Line>
  <Line number="8869">** Y is waiting on connection X&apos;s transaction, then neither connection</Line>
  <Line number="8870">** will proceed and the system may remain deadlocked indefinitely.</Line>
  <Line number="8871">**</Line>
  <Line number="8872">** To avoid this scenario, the sqlite3_unlock_notify() performs deadlock</Line>
  <Line number="8873">** detection. ^If a given call to sqlite3_unlock_notify() would put the</Line>
  <Line number="8874">** system in a deadlocked state, then SQLITE_LOCKED is returned and no</Line>
  <Line number="8875">** unlock-notify callback is registered. The system is said to be in</Line>
  <Line number="8876">** a deadlocked state if connection A has registered for an unlock-notify</Line>
  <Line number="8877">** callback on the conclusion of connection B&apos;s transaction, and connection</Line>
  <Line number="8878">** B has itself registered for an unlock-notify callback when connection</Line>
  <Line number="8879">** A&apos;s transaction is concluded. ^Indirect deadlock is also detected, so</Line>
  <Line number="8880">** the system is also considered to be deadlocked if connection B has</Line>
  <Line number="8881">** registered for an unlock-notify callback on the conclusion of connection</Line>
  <Line number="8882">** C&apos;s transaction, where connection C is waiting on connection A. ^Any</Line>
  <Line number="8883">** number of levels of indirection are allowed.</Line>
  <Line number="8884">**</Line>
  <Line number="8885">** &lt;b&gt;The &quot;DROP TABLE&quot; Exception&lt;/b&gt;</Line>
  <Line number="8886">**</Line>
  <Line number="8887">** When a call to [sqlite3_step()] returns SQLITE_LOCKED, it is almost</Line>
  <Line number="8888">** always appropriate to call sqlite3_unlock_notify(). There is however,</Line>
  <Line number="8889">** one exception. When executing a &quot;DROP TABLE&quot; or &quot;DROP INDEX&quot; statement,</Line>
  <Line number="8890">** SQLite checks if there are any currently executing SELECT statements</Line>
  <Line number="8891">** that belong to the same connection. If there are, SQLITE_LOCKED is</Line>
  <Line number="8892">** returned. In this case there is no &quot;blocking connection&quot;, so invoking</Line>
  <Line number="8893">** sqlite3_unlock_notify() results in the unlock-notify callback being</Line>
  <Line number="8894">** invoked immediately. If the application then re-attempts the &quot;DROP TABLE&quot;</Line>
  <Line number="8895">** or &quot;DROP INDEX&quot; query, an infinite loop might be the result.</Line>
  <Line number="8896">**</Line>
  <Line number="8897">** One way around this problem is to check the extended error code returned</Line>
  <Line number="8898">** by an sqlite3_step() call. ^(If there is a blocking connection, then the</Line>
  <Line number="8899">** extended error code is set to SQLITE_LOCKED_SHAREDCACHE. Otherwise, in</Line>
  <Line number="8900">** the special &quot;DROP TABLE/INDEX&quot; case, the extended error code is just</Line>
  <Line number="8901">** SQLITE_LOCKED.)^</Line>
  <Line number="8902">*/</Line>
  <Line number="8903">SQLITE_API int sqlite3_unlock_notify(</Line>
  <Line number="8904">  sqlite3 *pBlocked,                          /* Waiting connection */</Line>
  <Line number="8905">  void (*xNotify)(void **apArg, int nArg),    /* Callback function to invoke */</Line>
  <Line number="8906">  void *pNotifyArg                            /* Argument to pass to xNotify */</Line>
  <Line number="8907">);</Line>
  <Line number="8908"></Line>
  <Line number="8909"></Line>
  <Line number="8910">/*</Line>
  <Line number="8911">** CAPI3REF: String Comparison</Line>
  <Line number="8912">**</Line>
  <Line number="8913">** ^The [sqlite3_stricmp()] and [sqlite3_strnicmp()] APIs allow applications</Line>
  <Line number="8914">** and extensions to compare the contents of two buffers containing UTF-8</Line>
  <Line number="8915">** strings in a case-independent fashion, using the same definition of &quot;case</Line>
  <Line number="8916">** independence&quot; that SQLite uses internally when comparing identifiers.</Line>
  <Line number="8917">*/</Line>
  <Line number="8918">SQLITE_API int sqlite3_stricmp(const char *, const char *);</Line>
  <Line number="8919">SQLITE_API int sqlite3_strnicmp(const char *, const char *, int);</Line>
  <Line number="8920"></Line>
  <Line number="8921">/*</Line>
  <Line number="8922">** CAPI3REF: String Globbing</Line>
  <Line number="8923">*</Line>
  <Line number="8924">** ^The [sqlite3_strglob(P,X)] interface returns zero if and only if</Line>
  <Line number="8925">** string X matches the [GLOB] pattern P.</Line>
  <Line number="8926">** ^The definition of [GLOB] pattern matching used in</Line>
  <Line number="8927">** [sqlite3_strglob(P,X)] is the same as for the &quot;X GLOB P&quot; operator in the</Line>
  <Line number="8928">** SQL dialect understood by SQLite.  ^The [sqlite3_strglob(P,X)] function</Line>
  <Line number="8929">** is case sensitive.</Line>
  <Line number="8930">**</Line>
  <Line number="8931">** Note that this routine returns zero on a match and non-zero if the strings</Line>
  <Line number="8932">** do not match, the same as [sqlite3_stricmp()] and [sqlite3_strnicmp()].</Line>
  <Line number="8933">**</Line>
  <Line number="8934">** See also: [sqlite3_strlike()].</Line>
  <Line number="8935">*/</Line>
  <Line number="8936">SQLITE_API int sqlite3_strglob(const char *zGlob, const char *zStr);</Line>
  <Line number="8937"></Line>
  <Line number="8938">/*</Line>
  <Line number="8939">** CAPI3REF: String LIKE Matching</Line>
  <Line number="8940">*</Line>
  <Line number="8941">** ^The [sqlite3_strlike(P,X,E)] interface returns zero if and only if</Line>
  <Line number="8942">** string X matches the [LIKE] pattern P with escape character E.</Line>
  <Line number="8943">** ^The definition of [LIKE] pattern matching used in</Line>
  <Line number="8944">** [sqlite3_strlike(P,X,E)] is the same as for the &quot;X LIKE P ESCAPE E&quot;</Line>
  <Line number="8945">** operator in the SQL dialect understood by SQLite.  ^For &quot;X LIKE P&quot; without</Line>
  <Line number="8946">** the ESCAPE clause, set the E parameter of [sqlite3_strlike(P,X,E)] to 0.</Line>
  <Line number="8947">** ^As with the LIKE operator, the [sqlite3_strlike(P,X,E)] function is case</Line>
  <Line number="8948">** insensitive - equivalent upper and lower case ASCII characters match</Line>
  <Line number="8949">** one another.</Line>
  <Line number="8950">**</Line>
  <Line number="8951">** ^The [sqlite3_strlike(P,X,E)] function matches Unicode characters, though</Line>
  <Line number="8952">** only ASCII characters are case folded.</Line>
  <Line number="8953">**</Line>
  <Line number="8954">** Note that this routine returns zero on a match and non-zero if the strings</Line>
  <Line number="8955">** do not match, the same as [sqlite3_stricmp()] and [sqlite3_strnicmp()].</Line>
  <Line number="8956">**</Line>
  <Line number="8957">** See also: [sqlite3_strglob()].</Line>
  <Line number="8958">*/</Line>
  <Line number="8959">SQLITE_API int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc);</Line>
  <Line number="8960"></Line>
  <Line number="8961">/*</Line>
  <Line number="8962">** CAPI3REF: Error Logging Interface</Line>
  <Line number="8963">**</Line>
  <Line number="8964">** ^The [sqlite3_log()] interface writes a message into the [error log]</Line>
  <Line number="8965">** established by the [SQLITE_CONFIG_LOG] option to [sqlite3_config()].</Line>
  <Line number="8966">** ^If logging is enabled, the zFormat string and subsequent arguments are</Line>
  <Line number="8967">** used with [sqlite3_snprintf()] to generate the final output string.</Line>
  <Line number="8968">**</Line>
  <Line number="8969">** The sqlite3_log() interface is intended for use by extensions such as</Line>
  <Line number="8970">** virtual tables, collating functions, and SQL functions.  While there is</Line>
  <Line number="8971">** nothing to prevent an application from calling sqlite3_log(), doing so</Line>
  <Line number="8972">** is considered bad form.</Line>
  <Line number="8973">**</Line>
  <Line number="8974">** The zFormat string must not be NULL.</Line>
  <Line number="8975">**</Line>
  <Line number="8976">** To avoid deadlocks and other threading problems, the sqlite3_log() routine</Line>
  <Line number="8977">** will not use dynamically allocated memory.  The log message is stored in</Line>
  <Line number="8978">** a fixed-length buffer on the stack.  If the log message is longer than</Line>
  <Line number="8979">** a few hundred characters, it will be truncated to the length of the</Line>
  <Line number="8980">** buffer.</Line>
  <Line number="8981">*/</Line>
  <Line number="8982">SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...);</Line>
  <Line number="8983"></Line>
  <Line number="8984">/*</Line>
  <Line number="8985">** CAPI3REF: Write-Ahead Log Commit Hook</Line>
  <Line number="8986">** METHOD: sqlite3</Line>
  <Line number="8987">**</Line>
  <Line number="8988">** ^The [sqlite3_wal_hook()] function is used to register a callback that</Line>
  <Line number="8989">** is invoked each time data is committed to a database in wal mode.</Line>
  <Line number="8990">**</Line>
  <Line number="8991">** ^(The callback is invoked by SQLite after the commit has taken place and</Line>
  <Line number="8992">** the associated write-lock on the database released)^, so the implementation</Line>
  <Line number="8993">** may read, write or [checkpoint] the database as required.</Line>
  <Line number="8994">**</Line>
  <Line number="8995">** ^The first parameter passed to the callback function when it is invoked</Line>
  <Line number="8996">** is a copy of the third parameter passed to sqlite3_wal_hook() when</Line>
  <Line number="8997">** registering the callback. ^The second is a copy of the database handle.</Line>
  <Line number="8998">** ^The third parameter is the name of the database that was written to -</Line>
  <Line number="8999">** either &quot;main&quot; or the name of an [ATTACH]-ed database. ^The fourth parameter</Line>
  <Line number="9000">** is the number of pages currently in the write-ahead log file,</Line>
  <Line number="9001">** including those that were just committed.</Line>
  <Line number="9002">**</Line>
  <Line number="9003">** The callback function should normally return [SQLITE_OK].  ^If an error</Line>
  <Line number="9004">** code is returned, that error will propagate back up through the</Line>
  <Line number="9005">** SQLite code base to cause the statement that provoked the callback</Line>
  <Line number="9006">** to report an error, though the commit will have still occurred. If the</Line>
  <Line number="9007">** callback returns [SQLITE_ROW] or [SQLITE_DONE], or if it returns a value</Line>
  <Line number="9008">** that does not correspond to any valid SQLite error code, the results</Line>
  <Line number="9009">** are undefined.</Line>
  <Line number="9010">**</Line>
  <Line number="9011">** A single database handle may have at most a single write-ahead log callback</Line>
  <Line number="9012">** registered at one time. ^Calling [sqlite3_wal_hook()] replaces any</Line>
  <Line number="9013">** previously registered write-ahead log callback. ^Note that the</Line>
  <Line number="9014">** [sqlite3_wal_autocheckpoint()] interface and the</Line>
  <Line number="9015">** [wal_autocheckpoint pragma] both invoke [sqlite3_wal_hook()] and will</Line>
  <Line number="9016">** overwrite any prior [sqlite3_wal_hook()] settings.</Line>
  <Line number="9017">*/</Line>
  <Line number="9018">SQLITE_API void *sqlite3_wal_hook(</Line>
  <Line number="9019">  sqlite3*,</Line>
  <Line number="9020">  int(*)(void *,sqlite3*,const char*,int),</Line>
  <Line number="9021">  void*</Line>
  <Line number="9022">);</Line>
  <Line number="9023"></Line>
  <Line number="9024">/*</Line>
  <Line number="9025">** CAPI3REF: Configure an auto-checkpoint</Line>
  <Line number="9026">** METHOD: sqlite3</Line>
  <Line number="9027">**</Line>
  <Line number="9028">** ^The [sqlite3_wal_autocheckpoint(D,N)] is a wrapper around</Line>
  <Line number="9029">** [sqlite3_wal_hook()] that causes any database on [database connection] D</Line>
  <Line number="9030">** to automatically [checkpoint]</Line>
  <Line number="9031">** after committing a transaction if there are N or</Line>
  <Line number="9032">** more frames in the [write-ahead log] file.  ^Passing zero or</Line>
  <Line number="9033">** a negative value as the nFrame parameter disables automatic</Line>
  <Line number="9034">** checkpoints entirely.</Line>
  <Line number="9035">**</Line>
  <Line number="9036">** ^The callback registered by this function replaces any existing callback</Line>
  <Line number="9037">** registered using [sqlite3_wal_hook()].  ^Likewise, registering a callback</Line>
  <Line number="9038">** using [sqlite3_wal_hook()] disables the automatic checkpoint mechanism</Line>
  <Line number="9039">** configured by this function.</Line>
  <Line number="9040">**</Line>
  <Line number="9041">** ^The [wal_autocheckpoint pragma] can be used to invoke this interface</Line>
  <Line number="9042">** from SQL.</Line>
  <Line number="9043">**</Line>
  <Line number="9044">** ^Checkpoints initiated by this mechanism are</Line>
  <Line number="9045">** [sqlite3_wal_checkpoint_v2|PASSIVE].</Line>
  <Line number="9046">**</Line>
  <Line number="9047">** ^Every new [database connection] defaults to having the auto-checkpoint</Line>
  <Line number="9048">** enabled with a threshold of 1000 or [SQLITE_DEFAULT_WAL_AUTOCHECKPOINT]</Line>
  <Line number="9049">** pages.  The use of this interface</Line>
  <Line number="9050">** is only necessary if the default setting is found to be suboptimal</Line>
  <Line number="9051">** for a particular application.</Line>
  <Line number="9052">*/</Line>
  <Line number="9053">SQLITE_API int sqlite3_wal_autocheckpoint(sqlite3 *db, int N);</Line>
  <Line number="9054"></Line>
  <Line number="9055">/*</Line>
  <Line number="9056">** CAPI3REF: Checkpoint a database</Line>
  <Line number="9057">** METHOD: sqlite3</Line>
  <Line number="9058">**</Line>
  <Line number="9059">** ^(The sqlite3_wal_checkpoint(D,X) is equivalent to</Line>
  <Line number="9060">** [sqlite3_wal_checkpoint_v2](D,X,[SQLITE_CHECKPOINT_PASSIVE],0,0).)^</Line>
  <Line number="9061">**</Line>
  <Line number="9062">** In brief, sqlite3_wal_checkpoint(D,X) causes the content in the</Line>
  <Line number="9063">** [write-ahead log] for database X on [database connection] D to be</Line>
  <Line number="9064">** transferred into the database file and for the write-ahead log to</Line>
  <Line number="9065">** be reset.  See the [checkpointing] documentation for addition</Line>
  <Line number="9066">** information.</Line>
  <Line number="9067">**</Line>
  <Line number="9068">** This interface used to be the only way to cause a checkpoint to</Line>
  <Line number="9069">** occur.  But then the newer and more powerful [sqlite3_wal_checkpoint_v2()]</Line>
  <Line number="9070">** interface was added.  This interface is retained for backwards</Line>
  <Line number="9071">** compatibility and as a convenience for applications that need to manually</Line>
  <Line number="9072">** start a callback but which do not need the full power (and corresponding</Line>
  <Line number="9073">** complication) of [sqlite3_wal_checkpoint_v2()].</Line>
  <Line number="9074">*/</Line>
  <Line number="9075">SQLITE_API int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb);</Line>
  <Line number="9076"></Line>
  <Line number="9077">/*</Line>
  <Line number="9078">** CAPI3REF: Checkpoint a database</Line>
  <Line number="9079">** METHOD: sqlite3</Line>
  <Line number="9080">**</Line>
  <Line number="9081">** ^(The sqlite3_wal_checkpoint_v2(D,X,M,L,C) interface runs a checkpoint</Line>
  <Line number="9082">** operation on database X of [database connection] D in mode M.  Status</Line>
  <Line number="9083">** information is written back into integers pointed to by L and C.)^</Line>
  <Line number="9084">** ^(The M parameter must be a valid [checkpoint mode]:)^</Line>
  <Line number="9085">**</Line>
  <Line number="9086">** &lt;dl&gt;</Line>
  <Line number="9087">** &lt;dt&gt;SQLITE_CHECKPOINT_PASSIVE&lt;dd&gt;</Line>
  <Line number="9088">**   ^Checkpoint as many frames as possible without waiting for any database</Line>
  <Line number="9089">**   readers or writers to finish, then sync the database file if all frames</Line>
  <Line number="9090">**   in the log were checkpointed. ^The [busy-handler callback]</Line>
  <Line number="9091">**   is never invoked in the SQLITE_CHECKPOINT_PASSIVE mode.</Line>
  <Line number="9092">**   ^On the other hand, passive mode might leave the checkpoint unfinished</Line>
  <Line number="9093">**   if there are concurrent readers or writers.</Line>
  <Line number="9094">**</Line>
  <Line number="9095">** &lt;dt&gt;SQLITE_CHECKPOINT_FULL&lt;dd&gt;</Line>
  <Line number="9096">**   ^This mode blocks (it invokes the</Line>
  <Line number="9097">**   [sqlite3_busy_handler|busy-handler callback]) until there is no</Line>
  <Line number="9098">**   database writer and all readers are reading from the most recent database</Line>
  <Line number="9099">**   snapshot. ^It then checkpoints all frames in the log file and syncs the</Line>
  <Line number="9100">**   database file. ^This mode blocks new database writers while it is pending,</Line>
  <Line number="9101">**   but new database readers are allowed to continue unimpeded.</Line>
  <Line number="9102">**</Line>
  <Line number="9103">** &lt;dt&gt;SQLITE_CHECKPOINT_RESTART&lt;dd&gt;</Line>
  <Line number="9104">**   ^This mode works the same way as SQLITE_CHECKPOINT_FULL with the addition</Line>
  <Line number="9105">**   that after checkpointing the log file it blocks (calls the</Line>
  <Line number="9106">**   [busy-handler callback])</Line>
  <Line number="9107">**   until all readers are reading from the database file only. ^This ensures</Line>
  <Line number="9108">**   that the next writer will restart the log file from the beginning.</Line>
  <Line number="9109">**   ^Like SQLITE_CHECKPOINT_FULL, this mode blocks new</Line>
  <Line number="9110">**   database writer attempts while it is pending, but does not impede readers.</Line>
  <Line number="9111">**</Line>
  <Line number="9112">** &lt;dt&gt;SQLITE_CHECKPOINT_TRUNCATE&lt;dd&gt;</Line>
  <Line number="9113">**   ^This mode works the same way as SQLITE_CHECKPOINT_RESTART with the</Line>
  <Line number="9114">**   addition that it also truncates the log file to zero bytes just prior</Line>
  <Line number="9115">**   to a successful return.</Line>
  <Line number="9116">** &lt;/dl&gt;</Line>
  <Line number="9117">**</Line>
  <Line number="9118">** ^If pnLog is not NULL, then *pnLog is set to the total number of frames in</Line>
  <Line number="9119">** the log file or to -1 if the checkpoint could not run because</Line>
  <Line number="9120">** of an error or because the database is not in [WAL mode]. ^If pnCkpt is not</Line>
  <Line number="9121">** NULL,then *pnCkpt is set to the total number of checkpointed frames in the</Line>
  <Line number="9122">** log file (including any that were already checkpointed before the function</Line>
  <Line number="9123">** was called) or to -1 if the checkpoint could not run due to an error or</Line>
  <Line number="9124">** because the database is not in WAL mode. ^Note that upon successful</Line>
  <Line number="9125">** completion of an SQLITE_CHECKPOINT_TRUNCATE, the log file will have been</Line>
  <Line number="9126">** truncated to zero bytes and so both *pnLog and *pnCkpt will be set to zero.</Line>
  <Line number="9127">**</Line>
  <Line number="9128">** ^All calls obtain an exclusive &quot;checkpoint&quot; lock on the database file. ^If</Line>
  <Line number="9129">** any other process is running a checkpoint operation at the same time, the</Line>
  <Line number="9130">** lock cannot be obtained and SQLITE_BUSY is returned. ^Even if there is a</Line>
  <Line number="9131">** busy-handler configured, it will not be invoked in this case.</Line>
  <Line number="9132">**</Line>
  <Line number="9133">** ^The SQLITE_CHECKPOINT_FULL, RESTART and TRUNCATE modes also obtain the</Line>
  <Line number="9134">** exclusive &quot;writer&quot; lock on the database file. ^If the writer lock cannot be</Line>
  <Line number="9135">** obtained immediately, and a busy-handler is configured, it is invoked and</Line>
  <Line number="9136">** the writer lock retried until either the busy-handler returns 0 or the lock</Line>
  <Line number="9137">** is successfully obtained. ^The busy-handler is also invoked while waiting for</Line>
  <Line number="9138">** database readers as described above. ^If the busy-handler returns 0 before</Line>
  <Line number="9139">** the writer lock is obtained or while waiting for database readers, the</Line>
  <Line number="9140">** checkpoint operation proceeds from that point in the same way as</Line>
  <Line number="9141">** SQLITE_CHECKPOINT_PASSIVE - checkpointing as many frames as possible</Line>
  <Line number="9142">** without blocking any further. ^SQLITE_BUSY is returned in this case.</Line>
  <Line number="9143">**</Line>
  <Line number="9144">** ^If parameter zDb is NULL or points to a zero length string, then the</Line>
  <Line number="9145">** specified operation is attempted on all WAL databases [attached] to</Line>
  <Line number="9146">** [database connection] db.  In this case the</Line>
  <Line number="9147">** values written to output parameters *pnLog and *pnCkpt are undefined. ^If</Line>
  <Line number="9148">** an SQLITE_BUSY error is encountered when processing one or more of the</Line>
  <Line number="9149">** attached WAL databases, the operation is still attempted on any remaining</Line>
  <Line number="9150">** attached databases and SQLITE_BUSY is returned at the end. ^If any other</Line>
  <Line number="9151">** error occurs while processing an attached database, processing is abandoned</Line>
  <Line number="9152">** and the error code is returned to the caller immediately. ^If no error</Line>
  <Line number="9153">** (SQLITE_BUSY or otherwise) is encountered while processing the attached</Line>
  <Line number="9154">** databases, SQLITE_OK is returned.</Line>
  <Line number="9155">**</Line>
  <Line number="9156">** ^If database zDb is the name of an attached database that is not in WAL</Line>
  <Line number="9157">** mode, SQLITE_OK is returned and both *pnLog and *pnCkpt set to -1. ^If</Line>
  <Line number="9158">** zDb is not NULL (or a zero length string) and is not the name of any</Line>
  <Line number="9159">** attached database, SQLITE_ERROR is returned to the caller.</Line>
  <Line number="9160">**</Line>
  <Line number="9161">** ^Unless it returns SQLITE_MISUSE,</Line>
  <Line number="9162">** the sqlite3_wal_checkpoint_v2() interface</Line>
  <Line number="9163">** sets the error information that is queried by</Line>
  <Line number="9164">** [sqlite3_errcode()] and [sqlite3_errmsg()].</Line>
  <Line number="9165">**</Line>
  <Line number="9166">** ^The [PRAGMA wal_checkpoint] command can be used to invoke this interface</Line>
  <Line number="9167">** from SQL.</Line>
  <Line number="9168">*/</Line>
  <Line number="9169">SQLITE_API int sqlite3_wal_checkpoint_v2(</Line>
  <Line number="9170">  sqlite3 *db,                    /* Database handle */</Line>
  <Line number="9171">  const char *zDb,                /* Name of attached database (or NULL) */</Line>
  <Line number="9172">  int eMode,                      /* SQLITE_CHECKPOINT_* value */</Line>
  <Line number="9173">  int *pnLog,                     /* OUT: Size of WAL log in frames */</Line>
  <Line number="9174">  int *pnCkpt                     /* OUT: Total number of frames checkpointed */</Line>
  <Line number="9175">);</Line>
  <Line number="9176"></Line>
  <Line number="9177">/*</Line>
  <Line number="9178">** CAPI3REF: Checkpoint Mode Values</Line>
  <Line number="9179">** KEYWORDS: {checkpoint mode}</Line>
  <Line number="9180">**</Line>
  <Line number="9181">** These constants define all valid values for the &quot;checkpoint mode&quot; passed</Line>
  <Line number="9182">** as the third parameter to the [sqlite3_wal_checkpoint_v2()] interface.</Line>
  <Line number="9183">** See the [sqlite3_wal_checkpoint_v2()] documentation for details on the</Line>
  <Line number="9184">** meaning of each of these checkpoint modes.</Line>
  <Line number="9185">*/</Line>
  <Line number="9186">#define SQLITE_CHECKPOINT_PASSIVE  0  /* Do as much as possible w/o blocking */</Line>
  <Line number="9187">#define SQLITE_CHECKPOINT_FULL     1  /* Wait for writers, then checkpoint */</Line>
  <Line number="9188">#define SQLITE_CHECKPOINT_RESTART  2  /* Like FULL but wait for for readers */</Line>
  <Line number="9189">#define SQLITE_CHECKPOINT_TRUNCATE 3  /* Like RESTART but also truncate WAL */</Line>
  <Line number="9190"></Line>
  <Line number="9191">/*</Line>
  <Line number="9192">** CAPI3REF: Virtual Table Interface Configuration</Line>
  <Line number="9193">**</Line>
  <Line number="9194">** This function may be called by either the [xConnect] or [xCreate] method</Line>
  <Line number="9195">** of a [virtual table] implementation to configure</Line>
  <Line number="9196">** various facets of the virtual table interface.</Line>
  <Line number="9197">**</Line>
  <Line number="9198">** If this interface is invoked outside the context of an xConnect or</Line>
  <Line number="9199">** xCreate virtual table method then the behavior is undefined.</Line>
  <Line number="9200">**</Line>
  <Line number="9201">** In the call sqlite3_vtab_config(D,C,...) the D parameter is the</Line>
  <Line number="9202">** [database connection] in which the virtual table is being created and</Line>
  <Line number="9203">** which is passed in as the first argument to the [xConnect] or [xCreate]</Line>
  <Line number="9204">** method that is invoking sqlite3_vtab_config().  The C parameter is one</Line>
  <Line number="9205">** of the [virtual table configuration options].  The presence and meaning</Line>
  <Line number="9206">** of parameters after C depend on which [virtual table configuration option]</Line>
  <Line number="9207">** is used.</Line>
  <Line number="9208">*/</Line>
  <Line number="9209">SQLITE_API int sqlite3_vtab_config(sqlite3*, int op, ...);</Line>
  <Line number="9210"></Line>
  <Line number="9211">/*</Line>
  <Line number="9212">** CAPI3REF: Virtual Table Configuration Options</Line>
  <Line number="9213">** KEYWORDS: {virtual table configuration options}</Line>
  <Line number="9214">** KEYWORDS: {virtual table configuration option}</Line>
  <Line number="9215">**</Line>
  <Line number="9216">** These macros define the various options to the</Line>
  <Line number="9217">** [sqlite3_vtab_config()] interface that [virtual table] implementations</Line>
  <Line number="9218">** can use to customize and optimize their behavior.</Line>
  <Line number="9219">**</Line>
  <Line number="9220">** &lt;dl&gt;</Line>
  <Line number="9221">** [[SQLITE_VTAB_CONSTRAINT_SUPPORT]]</Line>
  <Line number="9222">** &lt;dt&gt;SQLITE_VTAB_CONSTRAINT_SUPPORT&lt;/dt&gt;</Line>
  <Line number="9223">** &lt;dd&gt;Calls of the form</Line>
  <Line number="9224">** [sqlite3_vtab_config](db,SQLITE_VTAB_CONSTRAINT_SUPPORT,X) are supported,</Line>
  <Line number="9225">** where X is an integer.  If X is zero, then the [virtual table] whose</Line>
  <Line number="9226">** [xCreate] or [xConnect] method invoked [sqlite3_vtab_config()] does not</Line>
  <Line number="9227">** support constraints.  In this configuration (which is the default) if</Line>
  <Line number="9228">** a call to the [xUpdate] method returns [SQLITE_CONSTRAINT], then the entire</Line>
  <Line number="9229">** statement is rolled back as if [ON CONFLICT | OR ABORT] had been</Line>
  <Line number="9230">** specified as part of the users SQL statement, regardless of the actual</Line>
  <Line number="9231">** ON CONFLICT mode specified.</Line>
  <Line number="9232">**</Line>
  <Line number="9233">** If X is non-zero, then the virtual table implementation guarantees</Line>
  <Line number="9234">** that if [xUpdate] returns [SQLITE_CONSTRAINT], it will do so before</Line>
  <Line number="9235">** any modifications to internal or persistent data structures have been made.</Line>
  <Line number="9236">** If the [ON CONFLICT] mode is ABORT, FAIL, IGNORE or ROLLBACK, SQLite</Line>
  <Line number="9237">** is able to roll back a statement or database transaction, and abandon</Line>
  <Line number="9238">** or continue processing the current SQL statement as appropriate.</Line>
  <Line number="9239">** If the ON CONFLICT mode is REPLACE and the [xUpdate] method returns</Line>
  <Line number="9240">** [SQLITE_CONSTRAINT], SQLite handles this as if the ON CONFLICT mode</Line>
  <Line number="9241">** had been ABORT.</Line>
  <Line number="9242">**</Line>
  <Line number="9243">** Virtual table implementations that are required to handle OR REPLACE</Line>
  <Line number="9244">** must do so within the [xUpdate] method. If a call to the</Line>
  <Line number="9245">** [sqlite3_vtab_on_conflict()] function indicates that the current ON</Line>
  <Line number="9246">** CONFLICT policy is REPLACE, the virtual table implementation should</Line>
  <Line number="9247">** silently replace the appropriate rows within the xUpdate callback and</Line>
  <Line number="9248">** return SQLITE_OK. Or, if this is not possible, it may return</Line>
  <Line number="9249">** SQLITE_CONSTRAINT, in which case SQLite falls back to OR ABORT</Line>
  <Line number="9250">** constraint handling.</Line>
  <Line number="9251">** &lt;/dd&gt;</Line>
  <Line number="9252">**</Line>
  <Line number="9253">** [[SQLITE_VTAB_DIRECTONLY]]&lt;dt&gt;SQLITE_VTAB_DIRECTONLY&lt;/dt&gt;</Line>
  <Line number="9254">** &lt;dd&gt;Calls of the form</Line>
  <Line number="9255">** [sqlite3_vtab_config](db,SQLITE_VTAB_DIRECTONLY) from within the</Line>
  <Line number="9256">** the [xConnect] or [xCreate] methods of a [virtual table] implmentation</Line>
  <Line number="9257">** prohibits that virtual table from being used from within triggers and</Line>
  <Line number="9258">** views.</Line>
  <Line number="9259">** &lt;/dd&gt;</Line>
  <Line number="9260">**</Line>
  <Line number="9261">** [[SQLITE_VTAB_INNOCUOUS]]&lt;dt&gt;SQLITE_VTAB_INNOCUOUS&lt;/dt&gt;</Line>
  <Line number="9262">** &lt;dd&gt;Calls of the form</Line>
  <Line number="9263">** [sqlite3_vtab_config](db,SQLITE_VTAB_INNOCUOUS) from within the</Line>
  <Line number="9264">** the [xConnect] or [xCreate] methods of a [virtual table] implmentation</Line>
  <Line number="9265">** identify that virtual table as being safe to use from within triggers</Line>
  <Line number="9266">** and views.  Conceptually, the SQLITE_VTAB_INNOCUOUS tag means that the</Line>
  <Line number="9267">** virtual table can do no serious harm even if it is controlled by a</Line>
  <Line number="9268">** malicious hacker.  Developers should avoid setting the SQLITE_VTAB_INNOCUOUS</Line>
  <Line number="9269">** flag unless absolutely necessary.</Line>
  <Line number="9270">** &lt;/dd&gt;</Line>
  <Line number="9271">** &lt;/dl&gt;</Line>
  <Line number="9272">*/</Line>
  <Line number="9273">#define SQLITE_VTAB_CONSTRAINT_SUPPORT 1</Line>
  <Line number="9274">#define SQLITE_VTAB_INNOCUOUS          2</Line>
  <Line number="9275">#define SQLITE_VTAB_DIRECTONLY         3</Line>
  <Line number="9276"></Line>
  <Line number="9277">/*</Line>
  <Line number="9278">** CAPI3REF: Determine The Virtual Table Conflict Policy</Line>
  <Line number="9279">**</Line>
  <Line number="9280">** This function may only be called from within a call to the [xUpdate] method</Line>
  <Line number="9281">** of a [virtual table] implementation for an INSERT or UPDATE operation. ^The</Line>
  <Line number="9282">** value returned is one of [SQLITE_ROLLBACK], [SQLITE_IGNORE], [SQLITE_FAIL],</Line>
  <Line number="9283">** [SQLITE_ABORT], or [SQLITE_REPLACE], according to the [ON CONFLICT] mode</Line>
  <Line number="9284">** of the SQL statement that triggered the call to the [xUpdate] method of the</Line>
  <Line number="9285">** [virtual table].</Line>
  <Line number="9286">*/</Line>
  <Line number="9287">SQLITE_API int sqlite3_vtab_on_conflict(sqlite3 *);</Line>
  <Line number="9288"></Line>
  <Line number="9289">/*</Line>
  <Line number="9290">** CAPI3REF: Determine If Virtual Table Column Access Is For UPDATE</Line>
  <Line number="9291">**</Line>
  <Line number="9292">** If the sqlite3_vtab_nochange(X) routine is called within the [xColumn]</Line>
  <Line number="9293">** method of a [virtual table], then it might return true if the</Line>
  <Line number="9294">** column is being fetched as part of an UPDATE operation during which the</Line>
  <Line number="9295">** column value will not change.  The virtual table implementation can use</Line>
  <Line number="9296">** this hint as permission to substitute a return value that is less</Line>
  <Line number="9297">** expensive to compute and that the corresponding</Line>
  <Line number="9298">** [xUpdate] method understands as a &quot;no-change&quot; value.</Line>
  <Line number="9299">**</Line>
  <Line number="9300">** If the [xColumn] method calls sqlite3_vtab_nochange() and finds that</Line>
  <Line number="9301">** the column is not changed by the UPDATE statement, then the xColumn</Line>
  <Line number="9302">** method can optionally return without setting a result, without calling</Line>
  <Line number="9303">** any of the [sqlite3_result_int|sqlite3_result_xxxxx() interfaces].</Line>
  <Line number="9304">** In that case, [sqlite3_value_nochange(X)] will return true for the</Line>
  <Line number="9305">** same column in the [xUpdate] method.</Line>
  <Line number="9306">**</Line>
  <Line number="9307">** The sqlite3_vtab_nochange() routine is an optimization.  Virtual table</Line>
  <Line number="9308">** implementations should continue to give a correct answer even if the</Line>
  <Line number="9309">** sqlite3_vtab_nochange() interface were to always return false.  In the</Line>
  <Line number="9310">** current implementation, the sqlite3_vtab_nochange() interface does always</Line>
  <Line number="9311">** returns false for the enhanced [UPDATE FROM] statement.</Line>
  <Line number="9312">*/</Line>
  <Line number="9313">SQLITE_API int sqlite3_vtab_nochange(sqlite3_context*);</Line>
  <Line number="9314"></Line>
  <Line number="9315">/*</Line>
  <Line number="9316">** CAPI3REF: Determine The Collation For a Virtual Table Constraint</Line>
  <Line number="9317">**</Line>
  <Line number="9318">** This function may only be called from within a call to the [xBestIndex]</Line>
  <Line number="9319">** method of a [virtual table].</Line>
  <Line number="9320">**</Line>
  <Line number="9321">** The first argument must be the sqlite3_index_info object that is the</Line>
  <Line number="9322">** first parameter to the xBestIndex() method. The second argument must be</Line>
  <Line number="9323">** an index into the aConstraint[] array belonging to the sqlite3_index_info</Line>
  <Line number="9324">** structure passed to xBestIndex. This function returns a pointer to a buffer</Line>
  <Line number="9325">** containing the name of the collation sequence for the corresponding</Line>
  <Line number="9326">** constraint.</Line>
  <Line number="9327">*/</Line>
  <Line number="9328">SQLITE_API SQLITE_EXPERIMENTAL const char *sqlite3_vtab_collation(sqlite3_index_info*,int);</Line>
  <Line number="9329"></Line>
  <Line number="9330">/*</Line>
  <Line number="9331">** CAPI3REF: Conflict resolution modes</Line>
  <Line number="9332">** KEYWORDS: {conflict resolution mode}</Line>
  <Line number="9333">**</Line>
  <Line number="9334">** These constants are returned by [sqlite3_vtab_on_conflict()] to</Line>
  <Line number="9335">** inform a [virtual table] implementation what the [ON CONFLICT] mode</Line>
  <Line number="9336">** is for the SQL statement being evaluated.</Line>
  <Line number="9337">**</Line>
  <Line number="9338">** Note that the [SQLITE_IGNORE] constant is also used as a potential</Line>
  <Line number="9339">** return value from the [sqlite3_set_authorizer()] callback and that</Line>
  <Line number="9340">** [SQLITE_ABORT] is also a [result code].</Line>
  <Line number="9341">*/</Line>
  <Line number="9342">#define SQLITE_ROLLBACK 1</Line>
  <Line number="9343">/* #define SQLITE_IGNORE 2 // Also used by sqlite3_authorizer() callback */</Line>
  <Line number="9344">#define SQLITE_FAIL     3</Line>
  <Line number="9345">/* #define SQLITE_ABORT 4  // Also an error code */</Line>
  <Line number="9346">#define SQLITE_REPLACE  5</Line>
  <Line number="9347"></Line>
  <Line number="9348">/*</Line>
  <Line number="9349">** CAPI3REF: Prepared Statement Scan Status Opcodes</Line>
  <Line number="9350">** KEYWORDS: {scanstatus options}</Line>
  <Line number="9351">**</Line>
  <Line number="9352">** The following constants can be used for the T parameter to the</Line>
  <Line number="9353">** [sqlite3_stmt_scanstatus(S,X,T,V)] interface.  Each constant designates a</Line>
  <Line number="9354">** different metric for sqlite3_stmt_scanstatus() to return.</Line>
  <Line number="9355">**</Line>
  <Line number="9356">** When the value returned to V is a string, space to hold that string is</Line>
  <Line number="9357">** managed by the prepared statement S and will be automatically freed when</Line>
  <Line number="9358">** S is finalized.</Line>
  <Line number="9359">**</Line>
  <Line number="9360">** &lt;dl&gt;</Line>
  <Line number="9361">** [[SQLITE_SCANSTAT_NLOOP]] &lt;dt&gt;SQLITE_SCANSTAT_NLOOP&lt;/dt&gt;</Line>
  <Line number="9362">** &lt;dd&gt;^The [sqlite3_int64] variable pointed to by the V parameter will be</Line>
  <Line number="9363">** set to the total number of times that the X-th loop has run.&lt;/dd&gt;</Line>
  <Line number="9364">**</Line>
  <Line number="9365">** [[SQLITE_SCANSTAT_NVISIT]] &lt;dt&gt;SQLITE_SCANSTAT_NVISIT&lt;/dt&gt;</Line>
  <Line number="9366">** &lt;dd&gt;^The [sqlite3_int64] variable pointed to by the V parameter will be set</Line>
  <Line number="9367">** to the total number of rows examined by all iterations of the X-th loop.&lt;/dd&gt;</Line>
  <Line number="9368">**</Line>
  <Line number="9369">** [[SQLITE_SCANSTAT_EST]] &lt;dt&gt;SQLITE_SCANSTAT_EST&lt;/dt&gt;</Line>
  <Line number="9370">** &lt;dd&gt;^The &quot;double&quot; variable pointed to by the V parameter will be set to the</Line>
  <Line number="9371">** query planner&apos;s estimate for the average number of rows output from each</Line>
  <Line number="9372">** iteration of the X-th loop.  If the query planner&apos;s estimates was accurate,</Line>
  <Line number="9373">** then this value will approximate the quotient NVISIT/NLOOP and the</Line>
  <Line number="9374">** product of this value for all prior loops with the same SELECTID will</Line>
  <Line number="9375">** be the NLOOP value for the current loop.</Line>
  <Line number="9376">**</Line>
  <Line number="9377">** [[SQLITE_SCANSTAT_NAME]] &lt;dt&gt;SQLITE_SCANSTAT_NAME&lt;/dt&gt;</Line>
  <Line number="9378">** &lt;dd&gt;^The &quot;const char *&quot; variable pointed to by the V parameter will be set</Line>
  <Line number="9379">** to a zero-terminated UTF-8 string containing the name of the index or table</Line>
  <Line number="9380">** used for the X-th loop.</Line>
  <Line number="9381">**</Line>
  <Line number="9382">** [[SQLITE_SCANSTAT_EXPLAIN]] &lt;dt&gt;SQLITE_SCANSTAT_EXPLAIN&lt;/dt&gt;</Line>
  <Line number="9383">** &lt;dd&gt;^The &quot;const char *&quot; variable pointed to by the V parameter will be set</Line>
  <Line number="9384">** to a zero-terminated UTF-8 string containing the [EXPLAIN QUERY PLAN]</Line>
  <Line number="9385">** description for the X-th loop.</Line>
  <Line number="9386">**</Line>
  <Line number="9387">** [[SQLITE_SCANSTAT_SELECTID]] &lt;dt&gt;SQLITE_SCANSTAT_SELECT&lt;/dt&gt;</Line>
  <Line number="9388">** &lt;dd&gt;^The &quot;int&quot; variable pointed to by the V parameter will be set to the</Line>
  <Line number="9389">** &quot;select-id&quot; for the X-th loop.  The select-id identifies which query or</Line>
  <Line number="9390">** subquery the loop is part of.  The main query has a select-id of zero.</Line>
  <Line number="9391">** The select-id is the same value as is output in the first column</Line>
  <Line number="9392">** of an [EXPLAIN QUERY PLAN] query.</Line>
  <Line number="9393">** &lt;/dl&gt;</Line>
  <Line number="9394">*/</Line>
  <Line number="9395">#define SQLITE_SCANSTAT_NLOOP    0</Line>
  <Line number="9396">#define SQLITE_SCANSTAT_NVISIT   1</Line>
  <Line number="9397">#define SQLITE_SCANSTAT_EST      2</Line>
  <Line number="9398">#define SQLITE_SCANSTAT_NAME     3</Line>
  <Line number="9399">#define SQLITE_SCANSTAT_EXPLAIN  4</Line>
  <Line number="9400">#define SQLITE_SCANSTAT_SELECTID 5</Line>
  <Line number="9401"></Line>
  <Line number="9402">/*</Line>
  <Line number="9403">** CAPI3REF: Prepared Statement Scan Status</Line>
  <Line number="9404">** METHOD: sqlite3_stmt</Line>
  <Line number="9405">**</Line>
  <Line number="9406">** This interface returns information about the predicted and measured</Line>
  <Line number="9407">** performance for pStmt.  Advanced applications can use this</Line>
  <Line number="9408">** interface to compare the predicted and the measured performance and</Line>
  <Line number="9409">** issue warnings and/or rerun [ANALYZE] if discrepancies are found.</Line>
  <Line number="9410">**</Line>
  <Line number="9411">** Since this interface is expected to be rarely used, it is only</Line>
  <Line number="9412">** available if SQLite is compiled using the [SQLITE_ENABLE_STMT_SCANSTATUS]</Line>
  <Line number="9413">** compile-time option.</Line>
  <Line number="9414">**</Line>
  <Line number="9415">** The &quot;iScanStatusOp&quot; parameter determines which status information to return.</Line>
  <Line number="9416">** The &quot;iScanStatusOp&quot; must be one of the [scanstatus options] or the behavior</Line>
  <Line number="9417">** of this interface is undefined.</Line>
  <Line number="9418">** ^The requested measurement is written into a variable pointed to by</Line>
  <Line number="9419">** the &quot;pOut&quot; parameter.</Line>
  <Line number="9420">** Parameter &quot;idx&quot; identifies the specific loop to retrieve statistics for.</Line>
  <Line number="9421">** Loops are numbered starting from zero. ^If idx is out of range - less than</Line>
  <Line number="9422">** zero or greater than or equal to the total number of loops used to implement</Line>
  <Line number="9423">** the statement - a non-zero value is returned and the variable that pOut</Line>
  <Line number="9424">** points to is unchanged.</Line>
  <Line number="9425">**</Line>
  <Line number="9426">** ^Statistics might not be available for all loops in all statements. ^In cases</Line>
  <Line number="9427">** where there exist loops with no available statistics, this function behaves</Line>
  <Line number="9428">** as if the loop did not exist - it returns non-zero and leave the variable</Line>
  <Line number="9429">** that pOut points to unchanged.</Line>
  <Line number="9430">**</Line>
  <Line number="9431">** See also: [sqlite3_stmt_scanstatus_reset()]</Line>
  <Line number="9432">*/</Line>
  <Line number="9433">SQLITE_API int sqlite3_stmt_scanstatus(</Line>
  <Line number="9434">  sqlite3_stmt *pStmt,      /* Prepared statement for which info desired */</Line>
  <Line number="9435">  int idx,                  /* Index of loop to report on */</Line>
  <Line number="9436">  int iScanStatusOp,        /* Information desired.  SQLITE_SCANSTAT_* */</Line>
  <Line number="9437">  void *pOut                /* Result written here */</Line>
  <Line number="9438">);</Line>
  <Line number="9439"></Line>
  <Line number="9440">/*</Line>
  <Line number="9441">** CAPI3REF: Zero Scan-Status Counters</Line>
  <Line number="9442">** METHOD: sqlite3_stmt</Line>
  <Line number="9443">**</Line>
  <Line number="9444">** ^Zero all [sqlite3_stmt_scanstatus()] related event counters.</Line>
  <Line number="9445">**</Line>
  <Line number="9446">** This API is only available if the library is built with pre-processor</Line>
  <Line number="9447">** symbol [SQLITE_ENABLE_STMT_SCANSTATUS] defined.</Line>
  <Line number="9448">*/</Line>
  <Line number="9449">SQLITE_API void sqlite3_stmt_scanstatus_reset(sqlite3_stmt*);</Line>
  <Line number="9450"></Line>
  <Line number="9451">/*</Line>
  <Line number="9452">** CAPI3REF: Flush caches to disk mid-transaction</Line>
  <Line number="9453">** METHOD: sqlite3</Line>
  <Line number="9454">**</Line>
  <Line number="9455">** ^If a write-transaction is open on [database connection] D when the</Line>
  <Line number="9456">** [sqlite3_db_cacheflush(D)] interface invoked, any dirty</Line>
  <Line number="9457">** pages in the pager-cache that are not currently in use are written out</Line>
  <Line number="9458">** to disk. A dirty page may be in use if a database cursor created by an</Line>
  <Line number="9459">** active SQL statement is reading from it, or if it is page 1 of a database</Line>
  <Line number="9460">** file (page 1 is always &quot;in use&quot;).  ^The [sqlite3_db_cacheflush(D)]</Line>
  <Line number="9461">** interface flushes caches for all schemas - &quot;main&quot;, &quot;temp&quot;, and</Line>
  <Line number="9462">** any [attached] databases.</Line>
  <Line number="9463">**</Line>
  <Line number="9464">** ^If this function needs to obtain extra database locks before dirty pages</Line>
  <Line number="9465">** can be flushed to disk, it does so. ^If those locks cannot be obtained</Line>
  <Line number="9466">** immediately and there is a busy-handler callback configured, it is invoked</Line>
  <Line number="9467">** in the usual manner. ^If the required lock still cannot be obtained, then</Line>
  <Line number="9468">** the database is skipped and an attempt made to flush any dirty pages</Line>
  <Line number="9469">** belonging to the next (if any) database. ^If any databases are skipped</Line>
  <Line number="9470">** because locks cannot be obtained, but no other error occurs, this</Line>
  <Line number="9471">** function returns SQLITE_BUSY.</Line>
  <Line number="9472">**</Line>
  <Line number="9473">** ^If any other error occurs while flushing dirty pages to disk (for</Line>
  <Line number="9474">** example an IO error or out-of-memory condition), then processing is</Line>
  <Line number="9475">** abandoned and an SQLite [error code] is returned to the caller immediately.</Line>
  <Line number="9476">**</Line>
  <Line number="9477">** ^Otherwise, if no error occurs, [sqlite3_db_cacheflush()] returns SQLITE_OK.</Line>
  <Line number="9478">**</Line>
  <Line number="9479">** ^This function does not set the database handle error code or message</Line>
  <Line number="9480">** returned by the [sqlite3_errcode()] and [sqlite3_errmsg()] functions.</Line>
  <Line number="9481">*/</Line>
  <Line number="9482">SQLITE_API int sqlite3_db_cacheflush(sqlite3*);</Line>
  <Line number="9483"></Line>
  <Line number="9484">/*</Line>
  <Line number="9485">** CAPI3REF: The pre-update hook.</Line>
  <Line number="9486">** METHOD: sqlite3</Line>
  <Line number="9487">**</Line>
  <Line number="9488">** ^These interfaces are only available if SQLite is compiled using the</Line>
  <Line number="9489">** [SQLITE_ENABLE_PREUPDATE_HOOK] compile-time option.</Line>
  <Line number="9490">**</Line>
  <Line number="9491">** ^The [sqlite3_preupdate_hook()] interface registers a callback function</Line>
  <Line number="9492">** that is invoked prior to each [INSERT], [UPDATE], and [DELETE] operation</Line>
  <Line number="9493">** on a database table.</Line>
  <Line number="9494">** ^At most one preupdate hook may be registered at a time on a single</Line>
  <Line number="9495">** [database connection]; each call to [sqlite3_preupdate_hook()] overrides</Line>
  <Line number="9496">** the previous setting.</Line>
  <Line number="9497">** ^The preupdate hook is disabled by invoking [sqlite3_preupdate_hook()]</Line>
  <Line number="9498">** with a NULL pointer as the second parameter.</Line>
  <Line number="9499">** ^The third parameter to [sqlite3_preupdate_hook()] is passed through as</Line>
  <Line number="9500">** the first parameter to callbacks.</Line>
  <Line number="9501">**</Line>
  <Line number="9502">** ^The preupdate hook only fires for changes to real database tables; the</Line>
  <Line number="9503">** preupdate hook is not invoked for changes to [virtual tables] or to</Line>
  <Line number="9504">** system tables like sqlite_sequence or sqlite_stat1.</Line>
  <Line number="9505">**</Line>
  <Line number="9506">** ^The second parameter to the preupdate callback is a pointer to</Line>
  <Line number="9507">** the [database connection] that registered the preupdate hook.</Line>
  <Line number="9508">** ^The third parameter to the preupdate callback is one of the constants</Line>
  <Line number="9509">** [SQLITE_INSERT], [SQLITE_DELETE], or [SQLITE_UPDATE] to identify the</Line>
  <Line number="9510">** kind of update operation that is about to occur.</Line>
  <Line number="9511">** ^(The fourth parameter to the preupdate callback is the name of the</Line>
  <Line number="9512">** database within the database connection that is being modified.  This</Line>
  <Line number="9513">** will be &quot;main&quot; for the main database or &quot;temp&quot; for TEMP tables or</Line>
  <Line number="9514">** the name given after the AS keyword in the [ATTACH] statement for attached</Line>
  <Line number="9515">** databases.)^</Line>
  <Line number="9516">** ^The fifth parameter to the preupdate callback is the name of the</Line>
  <Line number="9517">** table that is being modified.</Line>
  <Line number="9518">**</Line>
  <Line number="9519">** For an UPDATE or DELETE operation on a [rowid table], the sixth</Line>
  <Line number="9520">** parameter passed to the preupdate callback is the initial [rowid] of the</Line>
  <Line number="9521">** row being modified or deleted. For an INSERT operation on a rowid table,</Line>
  <Line number="9522">** or any operation on a WITHOUT ROWID table, the value of the sixth</Line>
  <Line number="9523">** parameter is undefined. For an INSERT or UPDATE on a rowid table the</Line>
  <Line number="9524">** seventh parameter is the final rowid value of the row being inserted</Line>
  <Line number="9525">** or updated. The value of the seventh parameter passed to the callback</Line>
  <Line number="9526">** function is not defined for operations on WITHOUT ROWID tables, or for</Line>
  <Line number="9527">** DELETE operations on rowid tables.</Line>
  <Line number="9528">**</Line>
  <Line number="9529">** The [sqlite3_preupdate_old()], [sqlite3_preupdate_new()],</Line>
  <Line number="9530">** [sqlite3_preupdate_count()], and [sqlite3_preupdate_depth()] interfaces</Line>
  <Line number="9531">** provide additional information about a preupdate event. These routines</Line>
  <Line number="9532">** may only be called from within a preupdate callback.  Invoking any of</Line>
  <Line number="9533">** these routines from outside of a preupdate callback or with a</Line>
  <Line number="9534">** [database connection] pointer that is different from the one supplied</Line>
  <Line number="9535">** to the preupdate callback results in undefined and probably undesirable</Line>
  <Line number="9536">** behavior.</Line>
  <Line number="9537">**</Line>
  <Line number="9538">** ^The [sqlite3_preupdate_count(D)] interface returns the number of columns</Line>
  <Line number="9539">** in the row that is being inserted, updated, or deleted.</Line>
  <Line number="9540">**</Line>
  <Line number="9541">** ^The [sqlite3_preupdate_old(D,N,P)] interface writes into P a pointer to</Line>
  <Line number="9542">** a [protected sqlite3_value] that contains the value of the Nth column of</Line>
  <Line number="9543">** the table row before it is updated.  The N parameter must be between 0</Line>
  <Line number="9544">** and one less than the number of columns or the behavior will be</Line>
  <Line number="9545">** undefined. This must only be used within SQLITE_UPDATE and SQLITE_DELETE</Line>
  <Line number="9546">** preupdate callbacks; if it is used by an SQLITE_INSERT callback then the</Line>
  <Line number="9547">** behavior is undefined.  The [sqlite3_value] that P points to</Line>
  <Line number="9548">** will be destroyed when the preupdate callback returns.</Line>
  <Line number="9549">**</Line>
  <Line number="9550">** ^The [sqlite3_preupdate_new(D,N,P)] interface writes into P a pointer to</Line>
  <Line number="9551">** a [protected sqlite3_value] that contains the value of the Nth column of</Line>
  <Line number="9552">** the table row after it is updated.  The N parameter must be between 0</Line>
  <Line number="9553">** and one less than the number of columns or the behavior will be</Line>
  <Line number="9554">** undefined. This must only be used within SQLITE_INSERT and SQLITE_UPDATE</Line>
  <Line number="9555">** preupdate callbacks; if it is used by an SQLITE_DELETE callback then the</Line>
  <Line number="9556">** behavior is undefined.  The [sqlite3_value] that P points to</Line>
  <Line number="9557">** will be destroyed when the preupdate callback returns.</Line>
  <Line number="9558">**</Line>
  <Line number="9559">** ^The [sqlite3_preupdate_depth(D)] interface returns 0 if the preupdate</Line>
  <Line number="9560">** callback was invoked as a result of a direct insert, update, or delete</Line>
  <Line number="9561">** operation; or 1 for inserts, updates, or deletes invoked by top-level</Line>
  <Line number="9562">** triggers; or 2 for changes resulting from triggers called by top-level</Line>
  <Line number="9563">** triggers; and so forth.</Line>
  <Line number="9564">**</Line>
  <Line number="9565">** When the [sqlite3_blob_write()] API is used to update a blob column,</Line>
  <Line number="9566">** the pre-update hook is invoked with SQLITE_DELETE. This is because the</Line>
  <Line number="9567">** in this case the new values are not available. In this case, when a</Line>
  <Line number="9568">** callback made with op==SQLITE_DELETE is actuall a write using the</Line>
  <Line number="9569">** sqlite3_blob_write() API, the [sqlite3_preupdate_blobwrite()] returns</Line>
  <Line number="9570">** the index of the column being written. In other cases, where the</Line>
  <Line number="9571">** pre-update hook is being invoked for some other reason, including a</Line>
  <Line number="9572">** regular DELETE, sqlite3_preupdate_blobwrite() returns -1.</Line>
  <Line number="9573">**</Line>
  <Line number="9574">** See also:  [sqlite3_update_hook()]</Line>
  <Line number="9575">*/</Line>
  <Line number="9576">#if defined(SQLITE_ENABLE_PREUPDATE_HOOK)</Line>
  <Line number="9577">SQLITE_API void *sqlite3_preupdate_hook(</Line>
  <Line number="9578">  sqlite3 *db,</Line>
  <Line number="9579">  void(*xPreUpdate)(</Line>
  <Line number="9580">    void *pCtx,                   /* Copy of third arg to preupdate_hook() */</Line>
  <Line number="9581">    sqlite3 *db,                  /* Database handle */</Line>
  <Line number="9582">    int op,                       /* SQLITE_UPDATE, DELETE or INSERT */</Line>
  <Line number="9583">    char const *zDb,              /* Database name */</Line>
  <Line number="9584">    char const *zName,            /* Table name */</Line>
  <Line number="9585">    sqlite3_int64 iKey1,          /* Rowid of row about to be deleted/updated */</Line>
  <Line number="9586">    sqlite3_int64 iKey2           /* New rowid value (for a rowid UPDATE) */</Line>
  <Line number="9587">  ),</Line>
  <Line number="9588">  void*</Line>
  <Line number="9589">);</Line>
  <Line number="9590">SQLITE_API int sqlite3_preupdate_old(sqlite3 *, int, sqlite3_value **);</Line>
  <Line number="9591">SQLITE_API int sqlite3_preupdate_count(sqlite3 *);</Line>
  <Line number="9592">SQLITE_API int sqlite3_preupdate_depth(sqlite3 *);</Line>
  <Line number="9593">SQLITE_API int sqlite3_preupdate_new(sqlite3 *, int, sqlite3_value **);</Line>
  <Line number="9594">SQLITE_API int sqlite3_preupdate_blobwrite(sqlite3 *);</Line>
  <Line number="9595">#endif</Line>
  <Line number="9596"></Line>
  <Line number="9597">/*</Line>
  <Line number="9598">** CAPI3REF: Low-level system error code</Line>
  <Line number="9599">** METHOD: sqlite3</Line>
  <Line number="9600">**</Line>
  <Line number="9601">** ^Attempt to return the underlying operating system error code or error</Line>
  <Line number="9602">** number that caused the most recent I/O error or failure to open a file.</Line>
  <Line number="9603">** The return value is OS-dependent.  For example, on unix systems, after</Line>
  <Line number="9604">** [sqlite3_open_v2()] returns [SQLITE_CANTOPEN], this interface could be</Line>
  <Line number="9605">** called to get back the underlying &quot;errno&quot; that caused the problem, such</Line>
  <Line number="9606">** as ENOSPC, EAUTH, EISDIR, and so forth.</Line>
  <Line number="9607">*/</Line>
  <Line number="9608">SQLITE_API int sqlite3_system_errno(sqlite3*);</Line>
  <Line number="9609"></Line>
  <Line number="9610">/*</Line>
  <Line number="9611">** CAPI3REF: Database Snapshot</Line>
  <Line number="9612">** KEYWORDS: {snapshot} {sqlite3_snapshot}</Line>
  <Line number="9613">**</Line>
  <Line number="9614">** An instance of the snapshot object records the state of a [WAL mode]</Line>
  <Line number="9615">** database for some specific point in history.</Line>
  <Line number="9616">**</Line>
  <Line number="9617">** In [WAL mode], multiple [database connections] that are open on the</Line>
  <Line number="9618">** same database file can each be reading a different historical version</Line>
  <Line number="9619">** of the database file.  When a [database connection] begins a read</Line>
  <Line number="9620">** transaction, that connection sees an unchanging copy of the database</Line>
  <Line number="9621">** as it existed for the point in time when the transaction first started.</Line>
  <Line number="9622">** Subsequent changes to the database from other connections are not seen</Line>
  <Line number="9623">** by the reader until a new read transaction is started.</Line>
  <Line number="9624">**</Line>
  <Line number="9625">** The sqlite3_snapshot object records state information about an historical</Line>
  <Line number="9626">** version of the database file so that it is possible to later open a new read</Line>
  <Line number="9627">** transaction that sees that historical version of the database rather than</Line>
  <Line number="9628">** the most recent version.</Line>
  <Line number="9629">*/</Line>
  <Line number="9630">typedef struct sqlite3_snapshot {</Line>
  <Line number="9631">  unsigned char hidden[48];</Line>
  <Line number="9632">} sqlite3_snapshot;</Line>
  <Line number="9633"></Line>
  <Line number="9634">/*</Line>
  <Line number="9635">** CAPI3REF: Record A Database Snapshot</Line>
  <Line number="9636">** CONSTRUCTOR: sqlite3_snapshot</Line>
  <Line number="9637">**</Line>
  <Line number="9638">** ^The [sqlite3_snapshot_get(D,S,P)] interface attempts to make a</Line>
  <Line number="9639">** new [sqlite3_snapshot] object that records the current state of</Line>
  <Line number="9640">** schema S in database connection D.  ^On success, the</Line>
  <Line number="9641">** [sqlite3_snapshot_get(D,S,P)] interface writes a pointer to the newly</Line>
  <Line number="9642">** created [sqlite3_snapshot] object into *P and returns SQLITE_OK.</Line>
  <Line number="9643">** If there is not already a read-transaction open on schema S when</Line>
  <Line number="9644">** this function is called, one is opened automatically.</Line>
  <Line number="9645">**</Line>
  <Line number="9646">** The following must be true for this function to succeed. If any of</Line>
  <Line number="9647">** the following statements are false when sqlite3_snapshot_get() is</Line>
  <Line number="9648">** called, SQLITE_ERROR is returned. The final value of *P is undefined</Line>
  <Line number="9649">** in this case.</Line>
  <Line number="9650">**</Line>
  <Line number="9651">** &lt;ul&gt;</Line>
  <Line number="9652">**   &lt;li&gt; The database handle must not be in [autocommit mode].</Line>
  <Line number="9653">**</Line>
  <Line number="9654">**   &lt;li&gt; Schema S of [database connection] D must be a [WAL mode] database.</Line>
  <Line number="9655">**</Line>
  <Line number="9656">**   &lt;li&gt; There must not be a write transaction open on schema S of database</Line>
  <Line number="9657">**        connection D.</Line>
  <Line number="9658">**</Line>
  <Line number="9659">**   &lt;li&gt; One or more transactions must have been written to the current wal</Line>
  <Line number="9660">**        file since it was created on disk (by any connection). This means</Line>
  <Line number="9661">**        that a snapshot cannot be taken on a wal mode database with no wal</Line>
  <Line number="9662">**        file immediately after it is first opened. At least one transaction</Line>
  <Line number="9663">**        must be written to it first.</Line>
  <Line number="9664">** &lt;/ul&gt;</Line>
  <Line number="9665">**</Line>
  <Line number="9666">** This function may also return SQLITE_NOMEM.  If it is called with the</Line>
  <Line number="9667">** database handle in autocommit mode but fails for some other reason,</Line>
  <Line number="9668">** whether or not a read transaction is opened on schema S is undefined.</Line>
  <Line number="9669">**</Line>
  <Line number="9670">** The [sqlite3_snapshot] object returned from a successful call to</Line>
  <Line number="9671">** [sqlite3_snapshot_get()] must be freed using [sqlite3_snapshot_free()]</Line>
  <Line number="9672">** to avoid a memory leak.</Line>
  <Line number="9673">**</Line>
  <Line number="9674">** The [sqlite3_snapshot_get()] interface is only available when the</Line>
  <Line number="9675">** [SQLITE_ENABLE_SNAPSHOT] compile-time option is used.</Line>
  <Line number="9676">*/</Line>
  <Line number="9677">SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_get(</Line>
  <Line number="9678">  sqlite3 *db,</Line>
  <Line number="9679">  const char *zSchema,</Line>
  <Line number="9680">  sqlite3_snapshot **ppSnapshot</Line>
  <Line number="9681">);</Line>
  <Line number="9682"></Line>
  <Line number="9683">/*</Line>
  <Line number="9684">** CAPI3REF: Start a read transaction on an historical snapshot</Line>
  <Line number="9685">** METHOD: sqlite3_snapshot</Line>
  <Line number="9686">**</Line>
  <Line number="9687">** ^The [sqlite3_snapshot_open(D,S,P)] interface either starts a new read</Line>
  <Line number="9688">** transaction or upgrades an existing one for schema S of</Line>
  <Line number="9689">** [database connection] D such that the read transaction refers to</Line>
  <Line number="9690">** historical [snapshot] P, rather than the most recent change to the</Line>
  <Line number="9691">** database. ^The [sqlite3_snapshot_open()] interface returns SQLITE_OK</Line>
  <Line number="9692">** on success or an appropriate [error code] if it fails.</Line>
  <Line number="9693">**</Line>
  <Line number="9694">** ^In order to succeed, the database connection must not be in</Line>
  <Line number="9695">** [autocommit mode] when [sqlite3_snapshot_open(D,S,P)] is called. If there</Line>
  <Line number="9696">** is already a read transaction open on schema S, then the database handle</Line>
  <Line number="9697">** must have no active statements (SELECT statements that have been passed</Line>
  <Line number="9698">** to sqlite3_step() but not sqlite3_reset() or sqlite3_finalize()).</Line>
  <Line number="9699">** SQLITE_ERROR is returned if either of these conditions is violated, or</Line>
  <Line number="9700">** if schema S does not exist, or if the snapshot object is invalid.</Line>
  <Line number="9701">**</Line>
  <Line number="9702">** ^A call to sqlite3_snapshot_open() will fail to open if the specified</Line>
  <Line number="9703">** snapshot has been overwritten by a [checkpoint]. In this case</Line>
  <Line number="9704">** SQLITE_ERROR_SNAPSHOT is returned.</Line>
  <Line number="9705">**</Line>
  <Line number="9706">** If there is already a read transaction open when this function is</Line>
  <Line number="9707">** invoked, then the same read transaction remains open (on the same</Line>
  <Line number="9708">** database snapshot) if SQLITE_ERROR, SQLITE_BUSY or SQLITE_ERROR_SNAPSHOT</Line>
  <Line number="9709">** is returned. If another error code - for example SQLITE_PROTOCOL or an</Line>
  <Line number="9710">** SQLITE_IOERR error code - is returned, then the final state of the</Line>
  <Line number="9711">** read transaction is undefined. If SQLITE_OK is returned, then the</Line>
  <Line number="9712">** read transaction is now open on database snapshot P.</Line>
  <Line number="9713">**</Line>
  <Line number="9714">** ^(A call to [sqlite3_snapshot_open(D,S,P)] will fail if the</Line>
  <Line number="9715">** database connection D does not know that the database file for</Line>
  <Line number="9716">** schema S is in [WAL mode].  A database connection might not know</Line>
  <Line number="9717">** that the database file is in [WAL mode] if there has been no prior</Line>
  <Line number="9718">** I/O on that database connection, or if the database entered [WAL mode]</Line>
  <Line number="9719">** after the most recent I/O on the database connection.)^</Line>
  <Line number="9720">** (Hint: Run &quot;[PRAGMA application_id]&quot; against a newly opened</Line>
  <Line number="9721">** database connection in order to make it ready to use snapshots.)</Line>
  <Line number="9722">**</Line>
  <Line number="9723">** The [sqlite3_snapshot_open()] interface is only available when the</Line>
  <Line number="9724">** [SQLITE_ENABLE_SNAPSHOT] compile-time option is used.</Line>
  <Line number="9725">*/</Line>
  <Line number="9726">SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_open(</Line>
  <Line number="9727">  sqlite3 *db,</Line>
  <Line number="9728">  const char *zSchema,</Line>
  <Line number="9729">  sqlite3_snapshot *pSnapshot</Line>
  <Line number="9730">);</Line>
  <Line number="9731"></Line>
  <Line number="9732">/*</Line>
  <Line number="9733">** CAPI3REF: Destroy a snapshot</Line>
  <Line number="9734">** DESTRUCTOR: sqlite3_snapshot</Line>
  <Line number="9735">**</Line>
  <Line number="9736">** ^The [sqlite3_snapshot_free(P)] interface destroys [sqlite3_snapshot] P.</Line>
  <Line number="9737">** The application must eventually free every [sqlite3_snapshot] object</Line>
  <Line number="9738">** using this routine to avoid a memory leak.</Line>
  <Line number="9739">**</Line>
  <Line number="9740">** The [sqlite3_snapshot_free()] interface is only available when the</Line>
  <Line number="9741">** [SQLITE_ENABLE_SNAPSHOT] compile-time option is used.</Line>
  <Line number="9742">*/</Line>
  <Line number="9743">SQLITE_API SQLITE_EXPERIMENTAL void sqlite3_snapshot_free(sqlite3_snapshot*);</Line>
  <Line number="9744"></Line>
  <Line number="9745">/*</Line>
  <Line number="9746">** CAPI3REF: Compare the ages of two snapshot handles.</Line>
  <Line number="9747">** METHOD: sqlite3_snapshot</Line>
  <Line number="9748">**</Line>
  <Line number="9749">** The sqlite3_snapshot_cmp(P1, P2) interface is used to compare the ages</Line>
  <Line number="9750">** of two valid snapshot handles.</Line>
  <Line number="9751">**</Line>
  <Line number="9752">** If the two snapshot handles are not associated with the same database</Line>
  <Line number="9753">** file, the result of the comparison is undefined.</Line>
  <Line number="9754">**</Line>
  <Line number="9755">** Additionally, the result of the comparison is only valid if both of the</Line>
  <Line number="9756">** snapshot handles were obtained by calling sqlite3_snapshot_get() since the</Line>
  <Line number="9757">** last time the wal file was deleted. The wal file is deleted when the</Line>
  <Line number="9758">** database is changed back to rollback mode or when the number of database</Line>
  <Line number="9759">** clients drops to zero. If either snapshot handle was obtained before the</Line>
  <Line number="9760">** wal file was last deleted, the value returned by this function</Line>
  <Line number="9761">** is undefined.</Line>
  <Line number="9762">**</Line>
  <Line number="9763">** Otherwise, this API returns a negative value if P1 refers to an older</Line>
  <Line number="9764">** snapshot than P2, zero if the two handles refer to the same database</Line>
  <Line number="9765">** snapshot, and a positive value if P1 is a newer snapshot than P2.</Line>
  <Line number="9766">**</Line>
  <Line number="9767">** This interface is only available if SQLite is compiled with the</Line>
  <Line number="9768">** [SQLITE_ENABLE_SNAPSHOT] option.</Line>
  <Line number="9769">*/</Line>
  <Line number="9770">SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_cmp(</Line>
  <Line number="9771">  sqlite3_snapshot *p1,</Line>
  <Line number="9772">  sqlite3_snapshot *p2</Line>
  <Line number="9773">);</Line>
  <Line number="9774"></Line>
  <Line number="9775">/*</Line>
  <Line number="9776">** CAPI3REF: Recover snapshots from a wal file</Line>
  <Line number="9777">** METHOD: sqlite3_snapshot</Line>
  <Line number="9778">**</Line>
  <Line number="9779">** If a [WAL file] remains on disk after all database connections close</Line>
  <Line number="9780">** (either through the use of the [SQLITE_FCNTL_PERSIST_WAL] [file control]</Line>
  <Line number="9781">** or because the last process to have the database opened exited without</Line>
  <Line number="9782">** calling [sqlite3_close()]) and a new connection is subsequently opened</Line>
  <Line number="9783">** on that database and [WAL file], the [sqlite3_snapshot_open()] interface</Line>
  <Line number="9784">** will only be able to open the last transaction added to the WAL file</Line>
  <Line number="9785">** even though the WAL file contains other valid transactions.</Line>
  <Line number="9786">**</Line>
  <Line number="9787">** This function attempts to scan the WAL file associated with database zDb</Line>
  <Line number="9788">** of database handle db and make all valid snapshots available to</Line>
  <Line number="9789">** sqlite3_snapshot_open(). It is an error if there is already a read</Line>
  <Line number="9790">** transaction open on the database, or if the database is not a WAL mode</Line>
  <Line number="9791">** database.</Line>
  <Line number="9792">**</Line>
  <Line number="9793">** SQLITE_OK is returned if successful, or an SQLite error code otherwise.</Line>
  <Line number="9794">**</Line>
  <Line number="9795">** This interface is only available if SQLite is compiled with the</Line>
  <Line number="9796">** [SQLITE_ENABLE_SNAPSHOT] option.</Line>
  <Line number="9797">*/</Line>
  <Line number="9798">SQLITE_API SQLITE_EXPERIMENTAL int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb);</Line>
  <Line number="9799"></Line>
  <Line number="9800">/*</Line>
  <Line number="9801">** CAPI3REF: Serialize a database</Line>
  <Line number="9802">**</Line>
  <Line number="9803">** The sqlite3_serialize(D,S,P,F) interface returns a pointer to memory</Line>
  <Line number="9804">** that is a serialization of the S database on [database connection] D.</Line>
  <Line number="9805">** If P is not a NULL pointer, then the size of the database in bytes</Line>
  <Line number="9806">** is written into *P.</Line>
  <Line number="9807">**</Line>
  <Line number="9808">** For an ordinary on-disk database file, the serialization is just a</Line>
  <Line number="9809">** copy of the disk file.  For an in-memory database or a &quot;TEMP&quot; database,</Line>
  <Line number="9810">** the serialization is the same sequence of bytes which would be written</Line>
  <Line number="9811">** to disk if that database where backed up to disk.</Line>
  <Line number="9812">**</Line>
  <Line number="9813">** The usual case is that sqlite3_serialize() copies the serialization of</Line>
  <Line number="9814">** the database into memory obtained from [sqlite3_malloc64()] and returns</Line>
  <Line number="9815">** a pointer to that memory.  The caller is responsible for freeing the</Line>
  <Line number="9816">** returned value to avoid a memory leak.  However, if the F argument</Line>
  <Line number="9817">** contains the SQLITE_SERIALIZE_NOCOPY bit, then no memory allocations</Line>
  <Line number="9818">** are made, and the sqlite3_serialize() function will return a pointer</Line>
  <Line number="9819">** to the contiguous memory representation of the database that SQLite</Line>
  <Line number="9820">** is currently using for that database, or NULL if the no such contiguous</Line>
  <Line number="9821">** memory representation of the database exists.  A contiguous memory</Line>
  <Line number="9822">** representation of the database will usually only exist if there has</Line>
  <Line number="9823">** been a prior call to [sqlite3_deserialize(D,S,...)] with the same</Line>
  <Line number="9824">** values of D and S.</Line>
  <Line number="9825">** The size of the database is written into *P even if the</Line>
  <Line number="9826">** SQLITE_SERIALIZE_NOCOPY bit is set but no contiguous copy</Line>
  <Line number="9827">** of the database exists.</Line>
  <Line number="9828">**</Line>
  <Line number="9829">** A call to sqlite3_serialize(D,S,P,F) might return NULL even if the</Line>
  <Line number="9830">** SQLITE_SERIALIZE_NOCOPY bit is omitted from argument F if a memory</Line>
  <Line number="9831">** allocation error occurs.</Line>
  <Line number="9832">**</Line>
  <Line number="9833">** This interface is omitted if SQLite is compiled with the</Line>
  <Line number="9834">** [SQLITE_OMIT_DESERIALIZE] option.</Line>
  <Line number="9835">*/</Line>
  <Line number="9836">SQLITE_API unsigned char *sqlite3_serialize(</Line>
  <Line number="9837">  sqlite3 *db,           /* The database connection */</Line>
  <Line number="9838">  const char *zSchema,   /* Which DB to serialize. ex: &quot;main&quot;, &quot;temp&quot;, ... */</Line>
  <Line number="9839">  sqlite3_int64 *piSize, /* Write size of the DB here, if not NULL */</Line>
  <Line number="9840">  unsigned int mFlags    /* Zero or more SQLITE_SERIALIZE_* flags */</Line>
  <Line number="9841">);</Line>
  <Line number="9842"></Line>
  <Line number="9843">/*</Line>
  <Line number="9844">** CAPI3REF: Flags for sqlite3_serialize</Line>
  <Line number="9845">**</Line>
  <Line number="9846">** Zero or more of the following constants can be OR-ed together for</Line>
  <Line number="9847">** the F argument to [sqlite3_serialize(D,S,P,F)].</Line>
  <Line number="9848">**</Line>
  <Line number="9849">** SQLITE_SERIALIZE_NOCOPY means that [sqlite3_serialize()] will return</Line>
  <Line number="9850">** a pointer to contiguous in-memory database that it is currently using,</Line>
  <Line number="9851">** without making a copy of the database.  If SQLite is not currently using</Line>
  <Line number="9852">** a contiguous in-memory database, then this option causes</Line>
  <Line number="9853">** [sqlite3_serialize()] to return a NULL pointer.  SQLite will only be</Line>
  <Line number="9854">** using a contiguous in-memory database if it has been initialized by a</Line>
  <Line number="9855">** prior call to [sqlite3_deserialize()].</Line>
  <Line number="9856">*/</Line>
  <Line number="9857">#define SQLITE_SERIALIZE_NOCOPY 0x001   /* Do no memory allocations */</Line>
  <Line number="9858"></Line>
  <Line number="9859">/*</Line>
  <Line number="9860">** CAPI3REF: Deserialize a database</Line>
  <Line number="9861">**</Line>
  <Line number="9862">** The sqlite3_deserialize(D,S,P,N,M,F) interface causes the</Line>
  <Line number="9863">** [database connection] D to disconnect from database S and then</Line>
  <Line number="9864">** reopen S as an in-memory database based on the serialization contained</Line>
  <Line number="9865">** in P.  The serialized database P is N bytes in size.  M is the size of</Line>
  <Line number="9866">** the buffer P, which might be larger than N.  If M is larger than N, and</Line>
  <Line number="9867">** the SQLITE_DESERIALIZE_READONLY bit is not set in F, then SQLite is</Line>
  <Line number="9868">** permitted to add content to the in-memory database as long as the total</Line>
  <Line number="9869">** size does not exceed M bytes.</Line>
  <Line number="9870">**</Line>
  <Line number="9871">** If the SQLITE_DESERIALIZE_FREEONCLOSE bit is set in F, then SQLite will</Line>
  <Line number="9872">** invoke sqlite3_free() on the serialization buffer when the database</Line>
  <Line number="9873">** connection closes.  If the SQLITE_DESERIALIZE_RESIZEABLE bit is set, then</Line>
  <Line number="9874">** SQLite will try to increase the buffer size using sqlite3_realloc64()</Line>
  <Line number="9875">** if writes on the database cause it to grow larger than M bytes.</Line>
  <Line number="9876">**</Line>
  <Line number="9877">** The sqlite3_deserialize() interface will fail with SQLITE_BUSY if the</Line>
  <Line number="9878">** database is currently in a read transaction or is involved in a backup</Line>
  <Line number="9879">** operation.</Line>
  <Line number="9880">**</Line>
  <Line number="9881">** If sqlite3_deserialize(D,S,P,N,M,F) fails for any reason and if the</Line>
  <Line number="9882">** SQLITE_DESERIALIZE_FREEONCLOSE bit is set in argument F, then</Line>
  <Line number="9883">** [sqlite3_free()] is invoked on argument P prior to returning.</Line>
  <Line number="9884">**</Line>
  <Line number="9885">** This interface is omitted if SQLite is compiled with the</Line>
  <Line number="9886">** [SQLITE_OMIT_DESERIALIZE] option.</Line>
  <Line number="9887">*/</Line>
  <Line number="9888">SQLITE_API int sqlite3_deserialize(</Line>
  <Line number="9889">  sqlite3 *db,            /* The database connection */</Line>
  <Line number="9890">  const char *zSchema,    /* Which DB to reopen with the deserialization */</Line>
  <Line number="9891">  unsigned char *pData,   /* The serialized database content */</Line>
  <Line number="9892">  sqlite3_int64 szDb,     /* Number bytes in the deserialization */</Line>
  <Line number="9893">  sqlite3_int64 szBuf,    /* Total size of buffer pData[] */</Line>
  <Line number="9894">  unsigned mFlags         /* Zero or more SQLITE_DESERIALIZE_* flags */</Line>
  <Line number="9895">);</Line>
  <Line number="9896"></Line>
  <Line number="9897">/*</Line>
  <Line number="9898">** CAPI3REF: Flags for sqlite3_deserialize()</Line>
  <Line number="9899">**</Line>
  <Line number="9900">** The following are allowed values for 6th argument (the F argument) to</Line>
  <Line number="9901">** the [sqlite3_deserialize(D,S,P,N,M,F)] interface.</Line>
  <Line number="9902">**</Line>
  <Line number="9903">** The SQLITE_DESERIALIZE_FREEONCLOSE means that the database serialization</Line>
  <Line number="9904">** in the P argument is held in memory obtained from [sqlite3_malloc64()]</Line>
  <Line number="9905">** and that SQLite should take ownership of this memory and automatically</Line>
  <Line number="9906">** free it when it has finished using it.  Without this flag, the caller</Line>
  <Line number="9907">** is responsible for freeing any dynamically allocated memory.</Line>
  <Line number="9908">**</Line>
  <Line number="9909">** The SQLITE_DESERIALIZE_RESIZEABLE flag means that SQLite is allowed to</Line>
  <Line number="9910">** grow the size of the database using calls to [sqlite3_realloc64()].  This</Line>
  <Line number="9911">** flag should only be used if SQLITE_DESERIALIZE_FREEONCLOSE is also used.</Line>
  <Line number="9912">** Without this flag, the deserialized database cannot increase in size beyond</Line>
  <Line number="9913">** the number of bytes specified by the M parameter.</Line>
  <Line number="9914">**</Line>
  <Line number="9915">** The SQLITE_DESERIALIZE_READONLY flag means that the deserialized database</Line>
  <Line number="9916">** should be treated as read-only.</Line>
  <Line number="9917">*/</Line>
  <Line number="9918">#define SQLITE_DESERIALIZE_FREEONCLOSE 1 /* Call sqlite3_free() on close */</Line>
  <Line number="9919">#define SQLITE_DESERIALIZE_RESIZEABLE  2 /* Resize using sqlite3_realloc64() */</Line>
  <Line number="9920">#define SQLITE_DESERIALIZE_READONLY    4 /* Database is read-only */</Line>
  <Line number="9921"></Line>
  <Line number="9922">/*</Line>
  <Line number="9923">** Undo the hack that converts floating point types to integer for</Line>
  <Line number="9924">** builds on processors without floating point support.</Line>
  <Line number="9925">*/</Line>
  <Line number="9926">#ifdef SQLITE_OMIT_FLOATING_POINT</Line>
  <Line number="9927"># undef double</Line>
  <Line number="9928">#endif</Line>
  <Line number="9929"></Line>
  <Line number="9930">#ifdef __cplusplus</Line>
  <Line number="9931">}  /* End of the &apos;extern &quot;C&quot;&apos; block */</Line>
  <Line number="9932">#endif</Line>
  <Line number="9933">#endif /* SQLITE3_H */</Line>
  <Line number="9934"></Line>
  <Line number="9935">/******** Begin file sqlite3rtree.h *********/</Line>
  <Line number="9936">/*</Line>
  <Line number="9937">** 2010 August 30</Line>
  <Line number="9938">**</Line>
  <Line number="9939">** The author disclaims copyright to this source code.  In place of</Line>
  <Line number="9940">** a legal notice, here is a blessing:</Line>
  <Line number="9941">**</Line>
  <Line number="9942">**    May you do good and not evil.</Line>
  <Line number="9943">**    May you find forgiveness for yourself and forgive others.</Line>
  <Line number="9944">**    May you share freely, never taking more than you give.</Line>
  <Line number="9945">**</Line>
  <Line number="9946">*************************************************************************</Line>
  <Line number="9947">*/</Line>
  <Line number="9948"></Line>
  <Line number="9949">#ifndef _SQLITE3RTREE_H_</Line>
  <Line number="9950">#define _SQLITE3RTREE_H_</Line>
  <Line number="9951"></Line>
  <Line number="9952"></Line>
  <Line number="9953">#ifdef __cplusplus</Line>
  <Line number="9954">extern &quot;C&quot; {</Line>
  <Line number="9955">#endif</Line>
  <Line number="9956"></Line>
  <Line number="9957">typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;</Line>
  <Line number="9958">typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;</Line>
  <Line number="9959"></Line>
  <Line number="9960">/* The double-precision datatype used by RTree depends on the</Line>
  <Line number="9961">** SQLITE_RTREE_INT_ONLY compile-time option.</Line>
  <Line number="9962">*/</Line>
  <Line number="9963">#ifdef SQLITE_RTREE_INT_ONLY</Line>
  <Line number="9964">  typedef sqlite3_int64 sqlite3_rtree_dbl;</Line>
  <Line number="9965">#else</Line>
  <Line number="9966">  typedef double sqlite3_rtree_dbl;</Line>
  <Line number="9967">#endif</Line>
  <Line number="9968"></Line>
  <Line number="9969">/*</Line>
  <Line number="9970">** Register a geometry callback named zGeom that can be used as part of an</Line>
  <Line number="9971">** R-Tree geometry query as follows:</Line>
  <Line number="9972">**</Line>
  <Line number="9973">**   SELECT ... FROM &lt;rtree&gt; WHERE &lt;rtree col&gt; MATCH $zGeom(... params ...)</Line>
  <Line number="9974">*/</Line>
  <Line number="9975">SQLITE_API int sqlite3_rtree_geometry_callback(</Line>
  <Line number="9976">  sqlite3 *db,</Line>
  <Line number="9977">  const char *zGeom,</Line>
  <Line number="9978">  int (*xGeom)(sqlite3_rtree_geometry*, int, sqlite3_rtree_dbl*,int*),</Line>
  <Line number="9979">  void *pContext</Line>
  <Line number="9980">);</Line>
  <Line number="9981"></Line>
  <Line number="9982"></Line>
  <Line number="9983">/*</Line>
  <Line number="9984">** A pointer to a structure of the following type is passed as the first</Line>
  <Line number="9985">** argument to callbacks registered using rtree_geometry_callback().</Line>
  <Line number="9986">*/</Line>
  <Line number="9987">struct sqlite3_rtree_geometry {</Line>
  <Line number="9988">  void *pContext;                 /* Copy of pContext passed to s_r_g_c() */</Line>
  <Line number="9989">  int nParam;                     /* Size of array aParam[] */</Line>
  <Line number="9990">  sqlite3_rtree_dbl *aParam;      /* Parameters passed to SQL geom function */</Line>
  <Line number="9991">  void *pUser;                    /* Callback implementation user data */</Line>
  <Line number="9992">  void (*xDelUser)(void *);       /* Called by SQLite to clean up pUser */</Line>
  <Line number="9993">};</Line>
  <Line number="9994"></Line>
  <Line number="9995">/*</Line>
  <Line number="9996">** Register a 2nd-generation geometry callback named zScore that can be</Line>
  <Line number="9997">** used as part of an R-Tree geometry query as follows:</Line>
  <Line number="9998">**</Line>
  <Line number="9999">**   SELECT ... FROM &lt;rtree&gt; WHERE &lt;rtree col&gt; MATCH $zQueryFunc(... params ...)</Line>
  <Line number="10000">*/</Line>
  <Line number="10001">SQLITE_API int sqlite3_rtree_query_callback(</Line>
  <Line number="10002">  sqlite3 *db,</Line>
  <Line number="10003">  const char *zQueryFunc,</Line>
  <Line number="10004">  int (*xQueryFunc)(sqlite3_rtree_query_info*),</Line>
  <Line number="10005">  void *pContext,</Line>
  <Line number="10006">  void (*xDestructor)(void*)</Line>
  <Line number="10007">);</Line>
  <Line number="10008"></Line>
  <Line number="10009"></Line>
  <Line number="10010">/*</Line>
  <Line number="10011">** A pointer to a structure of the following type is passed as the</Line>
  <Line number="10012">** argument to scored geometry callback registered using</Line>
  <Line number="10013">** sqlite3_rtree_query_callback().</Line>
  <Line number="10014">**</Line>
  <Line number="10015">** Note that the first 5 fields of this structure are identical to</Line>
  <Line number="10016">** sqlite3_rtree_geometry.  This structure is a subclass of</Line>
  <Line number="10017">** sqlite3_rtree_geometry.</Line>
  <Line number="10018">*/</Line>
  <Line number="10019">struct sqlite3_rtree_query_info {</Line>
  <Line number="10020">  void *pContext;                   /* pContext from when function registered */</Line>
  <Line number="10021">  int nParam;                       /* Number of function parameters */</Line>
  <Line number="10022">  sqlite3_rtree_dbl *aParam;        /* value of function parameters */</Line>
  <Line number="10023">  void *pUser;                      /* callback can use this, if desired */</Line>
  <Line number="10024">  void (*xDelUser)(void*);          /* function to free pUser */</Line>
  <Line number="10025">  sqlite3_rtree_dbl *aCoord;        /* Coordinates of node or entry to check */</Line>
  <Line number="10026">  unsigned int *anQueue;            /* Number of pending entries in the queue */</Line>
  <Line number="10027">  int nCoord;                       /* Number of coordinates */</Line>
  <Line number="10028">  int iLevel;                       /* Level of current node or entry */</Line>
  <Line number="10029">  int mxLevel;                      /* The largest iLevel value in the tree */</Line>
  <Line number="10030">  sqlite3_int64 iRowid;             /* Rowid for current entry */</Line>
  <Line number="10031">  sqlite3_rtree_dbl rParentScore;   /* Score of parent node */</Line>
  <Line number="10032">  int eParentWithin;                /* Visibility of parent node */</Line>
  <Line number="10033">  int eWithin;                      /* OUT: Visibility */</Line>
  <Line number="10034">  sqlite3_rtree_dbl rScore;         /* OUT: Write the score here */</Line>
  <Line number="10035">  /* The following fields are only available in 3.8.11 and later */</Line>
  <Line number="10036">  sqlite3_value **apSqlParam;       /* Original SQL values of parameters */</Line>
  <Line number="10037">};</Line>
  <Line number="10038"></Line>
  <Line number="10039">/*</Line>
  <Line number="10040">** Allowed values for sqlite3_rtree_query.eWithin and .eParentWithin.</Line>
  <Line number="10041">*/</Line>
  <Line number="10042">#define NOT_WITHIN       0   /* Object completely outside of query region */</Line>
  <Line number="10043">#define PARTLY_WITHIN    1   /* Object partially overlaps query region */</Line>
  <Line number="10044">#define FULLY_WITHIN     2   /* Object fully contained within query region */</Line>
  <Line number="10045"></Line>
  <Line number="10046"></Line>
  <Line number="10047">#ifdef __cplusplus</Line>
  <Line number="10048">}  /* end of the &apos;extern &quot;C&quot;&apos; block */</Line>
  <Line number="10049">#endif</Line>
  <Line number="10050"></Line>
  <Line number="10051">#endif  /* ifndef _SQLITE3RTREE_H_ */</Line>
  <Line number="10052"></Line>
  <Line number="10053">/******** End of sqlite3rtree.h *********/</Line>
  <Line number="10054">/******** Begin file sqlite3session.h *********/</Line>
  <Line number="10055"></Line>
  <Line number="10056">#if !defined(__SQLITESESSION_H_) &amp;&amp; defined(SQLITE_ENABLE_SESSION)</Line>
  <Line number="10057">#define __SQLITESESSION_H_ 1</Line>
  <Line number="10058"></Line>
  <Line number="10059">/*</Line>
  <Line number="10060">** Make sure we can call this stuff from C++.</Line>
  <Line number="10061">*/</Line>
  <Line number="10062">#ifdef __cplusplus</Line>
  <Line number="10063">extern &quot;C&quot; {</Line>
  <Line number="10064">#endif</Line>
  <Line number="10065"></Line>
  <Line number="10066"></Line>
  <Line number="10067">/*</Line>
  <Line number="10068">** CAPI3REF: Session Object Handle</Line>
  <Line number="10069">**</Line>
  <Line number="10070">** An instance of this object is a [session] that can be used to</Line>
  <Line number="10071">** record changes to a database.</Line>
  <Line number="10072">*/</Line>
  <Line number="10073">typedef struct sqlite3_session sqlite3_session;</Line>
  <Line number="10074"></Line>
  <Line number="10075">/*</Line>
  <Line number="10076">** CAPI3REF: Changeset Iterator Handle</Line>
  <Line number="10077">**</Line>
  <Line number="10078">** An instance of this object acts as a cursor for iterating</Line>
  <Line number="10079">** over the elements of a [changeset] or [patchset].</Line>
  <Line number="10080">*/</Line>
  <Line number="10081">typedef struct sqlite3_changeset_iter sqlite3_changeset_iter;</Line>
  <Line number="10082"></Line>
  <Line number="10083">/*</Line>
  <Line number="10084">** CAPI3REF: Create A New Session Object</Line>
  <Line number="10085">** CONSTRUCTOR: sqlite3_session</Line>
  <Line number="10086">**</Line>
  <Line number="10087">** Create a new session object attached to database handle db. If successful,</Line>
  <Line number="10088">** a pointer to the new object is written to *ppSession and SQLITE_OK is</Line>
  <Line number="10089">** returned. If an error occurs, *ppSession is set to NULL and an SQLite</Line>
  <Line number="10090">** error code (e.g. SQLITE_NOMEM) is returned.</Line>
  <Line number="10091">**</Line>
  <Line number="10092">** It is possible to create multiple session objects attached to a single</Line>
  <Line number="10093">** database handle.</Line>
  <Line number="10094">**</Line>
  <Line number="10095">** Session objects created using this function should be deleted using the</Line>
  <Line number="10096">** [sqlite3session_delete()] function before the database handle that they</Line>
  <Line number="10097">** are attached to is itself closed. If the database handle is closed before</Line>
  <Line number="10098">** the session object is deleted, then the results of calling any session</Line>
  <Line number="10099">** module function, including [sqlite3session_delete()] on the session object</Line>
  <Line number="10100">** are undefined.</Line>
  <Line number="10101">**</Line>
  <Line number="10102">** Because the session module uses the [sqlite3_preupdate_hook()] API, it</Line>
  <Line number="10103">** is not possible for an application to register a pre-update hook on a</Line>
  <Line number="10104">** database handle that has one or more session objects attached. Nor is</Line>
  <Line number="10105">** it possible to create a session object attached to a database handle for</Line>
  <Line number="10106">** which a pre-update hook is already defined. The results of attempting</Line>
  <Line number="10107">** either of these things are undefined.</Line>
  <Line number="10108">**</Line>
  <Line number="10109">** The session object will be used to create changesets for tables in</Line>
  <Line number="10110">** database zDb, where zDb is either &quot;main&quot;, or &quot;temp&quot;, or the name of an</Line>
  <Line number="10111">** attached database. It is not an error if database zDb is not attached</Line>
  <Line number="10112">** to the database when the session object is created.</Line>
  <Line number="10113">*/</Line>
  <Line number="10114">SQLITE_API int sqlite3session_create(</Line>
  <Line number="10115">  sqlite3 *db,                    /* Database handle */</Line>
  <Line number="10116">  const char *zDb,                /* Name of db (e.g. &quot;main&quot;) */</Line>
  <Line number="10117">  sqlite3_session **ppSession     /* OUT: New session object */</Line>
  <Line number="10118">);</Line>
  <Line number="10119"></Line>
  <Line number="10120">/*</Line>
  <Line number="10121">** CAPI3REF: Delete A Session Object</Line>
  <Line number="10122">** DESTRUCTOR: sqlite3_session</Line>
  <Line number="10123">**</Line>
  <Line number="10124">** Delete a session object previously allocated using</Line>
  <Line number="10125">** [sqlite3session_create()]. Once a session object has been deleted, the</Line>
  <Line number="10126">** results of attempting to use pSession with any other session module</Line>
  <Line number="10127">** function are undefined.</Line>
  <Line number="10128">**</Line>
  <Line number="10129">** Session objects must be deleted before the database handle to which they</Line>
  <Line number="10130">** are attached is closed. Refer to the documentation for</Line>
  <Line number="10131">** [sqlite3session_create()] for details.</Line>
  <Line number="10132">*/</Line>
  <Line number="10133">SQLITE_API void sqlite3session_delete(sqlite3_session *pSession);</Line>
  <Line number="10134"></Line>
  <Line number="10135">/*</Line>
  <Line number="10136">** CAPIREF: Conigure a Session Object</Line>
  <Line number="10137">** METHOD: sqlite3_session</Line>
  <Line number="10138">**</Line>
  <Line number="10139">** This method is used to configure a session object after it has been</Line>
  <Line number="10140">** created. At present the only valid value for the second parameter is</Line>
  <Line number="10141">** [SQLITE_SESSION_OBJCONFIG_SIZE].</Line>
  <Line number="10142">**</Line>
  <Line number="10143">** Arguments for sqlite3session_object_config()</Line>
  <Line number="10144">**</Line>
  <Line number="10145">** The following values may passed as the the 4th parameter to</Line>
  <Line number="10146">** sqlite3session_object_config().</Line>
  <Line number="10147">**</Line>
  <Line number="10148">** &lt;dt&gt;SQLITE_SESSION_OBJCONFIG_SIZE &lt;dd&gt;</Line>
  <Line number="10149">**   This option is used to set, clear or query the flag that enables</Line>
  <Line number="10150">**   the [sqlite3session_changeset_size()] API. Because it imposes some</Line>
  <Line number="10151">**   computational overhead, this API is disabled by default. Argument</Line>
  <Line number="10152">**   pArg must point to a value of type (int). If the value is initially</Line>
  <Line number="10153">**   0, then the sqlite3session_changeset_size() API is disabled. If it</Line>
  <Line number="10154">**   is greater than 0, then the same API is enabled. Or, if the initial</Line>
  <Line number="10155">**   value is less than zero, no change is made. In all cases the (int)</Line>
  <Line number="10156">**   variable is set to 1 if the sqlite3session_changeset_size() API is</Line>
  <Line number="10157">**   enabled following the current call, or 0 otherwise.</Line>
  <Line number="10158">**</Line>
  <Line number="10159">**   It is an error (SQLITE_MISUSE) to attempt to modify this setting after</Line>
  <Line number="10160">**   the first table has been attached to the session object.</Line>
  <Line number="10161">*/</Line>
  <Line number="10162">SQLITE_API int sqlite3session_object_config(sqlite3_session*, int op, void *pArg);</Line>
  <Line number="10163"></Line>
  <Line number="10164">/*</Line>
  <Line number="10165">*/</Line>
  <Line number="10166">#define SQLITE_SESSION_OBJCONFIG_SIZE 1</Line>
  <Line number="10167"></Line>
  <Line number="10168">/*</Line>
  <Line number="10169">** CAPI3REF: Enable Or Disable A Session Object</Line>
  <Line number="10170">** METHOD: sqlite3_session</Line>
  <Line number="10171">**</Line>
  <Line number="10172">** Enable or disable the recording of changes by a session object. When</Line>
  <Line number="10173">** enabled, a session object records changes made to the database. When</Line>
  <Line number="10174">** disabled - it does not. A newly created session object is enabled.</Line>
  <Line number="10175">** Refer to the documentation for [sqlite3session_changeset()] for further</Line>
  <Line number="10176">** details regarding how enabling and disabling a session object affects</Line>
  <Line number="10177">** the eventual changesets.</Line>
  <Line number="10178">**</Line>
  <Line number="10179">** Passing zero to this function disables the session. Passing a value</Line>
  <Line number="10180">** greater than zero enables it. Passing a value less than zero is a</Line>
  <Line number="10181">** no-op, and may be used to query the current state of the session.</Line>
  <Line number="10182">**</Line>
  <Line number="10183">** The return value indicates the final state of the session object: 0 if</Line>
  <Line number="10184">** the session is disabled, or 1 if it is enabled.</Line>
  <Line number="10185">*/</Line>
  <Line number="10186">SQLITE_API int sqlite3session_enable(sqlite3_session *pSession, int bEnable);</Line>
  <Line number="10187"></Line>
  <Line number="10188">/*</Line>
  <Line number="10189">** CAPI3REF: Set Or Clear the Indirect Change Flag</Line>
  <Line number="10190">** METHOD: sqlite3_session</Line>
  <Line number="10191">**</Line>
  <Line number="10192">** Each change recorded by a session object is marked as either direct or</Line>
  <Line number="10193">** indirect. A change is marked as indirect if either:</Line>
  <Line number="10194">**</Line>
  <Line number="10195">** &lt;ul&gt;</Line>
  <Line number="10196">**   &lt;li&gt; The session object &quot;indirect&quot; flag is set when the change is</Line>
  <Line number="10197">**        made, or</Line>
  <Line number="10198">**   &lt;li&gt; The change is made by an SQL trigger or foreign key action</Line>
  <Line number="10199">**        instead of directly as a result of a users SQL statement.</Line>
  <Line number="10200">** &lt;/ul&gt;</Line>
  <Line number="10201">**</Line>
  <Line number="10202">** If a single row is affected by more than one operation within a session,</Line>
  <Line number="10203">** then the change is considered indirect if all operations meet the criteria</Line>
  <Line number="10204">** for an indirect change above, or direct otherwise.</Line>
  <Line number="10205">**</Line>
  <Line number="10206">** This function is used to set, clear or query the session object indirect</Line>
  <Line number="10207">** flag.  If the second argument passed to this function is zero, then the</Line>
  <Line number="10208">** indirect flag is cleared. If it is greater than zero, the indirect flag</Line>
  <Line number="10209">** is set. Passing a value less than zero does not modify the current value</Line>
  <Line number="10210">** of the indirect flag, and may be used to query the current state of the</Line>
  <Line number="10211">** indirect flag for the specified session object.</Line>
  <Line number="10212">**</Line>
  <Line number="10213">** The return value indicates the final state of the indirect flag: 0 if</Line>
  <Line number="10214">** it is clear, or 1 if it is set.</Line>
  <Line number="10215">*/</Line>
  <Line number="10216">SQLITE_API int sqlite3session_indirect(sqlite3_session *pSession, int bIndirect);</Line>
  <Line number="10217"></Line>
  <Line number="10218">/*</Line>
  <Line number="10219">** CAPI3REF: Attach A Table To A Session Object</Line>
  <Line number="10220">** METHOD: sqlite3_session</Line>
  <Line number="10221">**</Line>
  <Line number="10222">** If argument zTab is not NULL, then it is the name of a table to attach</Line>
  <Line number="10223">** to the session object passed as the first argument. All subsequent changes</Line>
  <Line number="10224">** made to the table while the session object is enabled will be recorded. See</Line>
  <Line number="10225">** documentation for [sqlite3session_changeset()] for further details.</Line>
  <Line number="10226">**</Line>
  <Line number="10227">** Or, if argument zTab is NULL, then changes are recorded for all tables</Line>
  <Line number="10228">** in the database. If additional tables are added to the database (by</Line>
  <Line number="10229">** executing &quot;CREATE TABLE&quot; statements) after this call is made, changes for</Line>
  <Line number="10230">** the new tables are also recorded.</Line>
  <Line number="10231">**</Line>
  <Line number="10232">** Changes can only be recorded for tables that have a PRIMARY KEY explicitly</Line>
  <Line number="10233">** defined as part of their CREATE TABLE statement. It does not matter if the</Line>
  <Line number="10234">** PRIMARY KEY is an &quot;INTEGER PRIMARY KEY&quot; (rowid alias) or not. The PRIMARY</Line>
  <Line number="10235">** KEY may consist of a single column, or may be a composite key.</Line>
  <Line number="10236">**</Line>
  <Line number="10237">** It is not an error if the named table does not exist in the database. Nor</Line>
  <Line number="10238">** is it an error if the named table does not have a PRIMARY KEY. However,</Line>
  <Line number="10239">** no changes will be recorded in either of these scenarios.</Line>
  <Line number="10240">**</Line>
  <Line number="10241">** Changes are not recorded for individual rows that have NULL values stored</Line>
  <Line number="10242">** in one or more of their PRIMARY KEY columns.</Line>
  <Line number="10243">**</Line>
  <Line number="10244">** SQLITE_OK is returned if the call completes without error. Or, if an error</Line>
  <Line number="10245">** occurs, an SQLite error code (e.g. SQLITE_NOMEM) is returned.</Line>
  <Line number="10246">**</Line>
  <Line number="10247">** &lt;h3&gt;Special sqlite_stat1 Handling&lt;/h3&gt;</Line>
  <Line number="10248">**</Line>
  <Line number="10249">** As of SQLite version 3.22.0, the &quot;sqlite_stat1&quot; table is an exception to</Line>
  <Line number="10250">** some of the rules above. In SQLite, the schema of sqlite_stat1 is:</Line>
  <Line number="10251">**  &lt;pre&gt;</Line>
  <Line number="10252">**  &amp;nbsp;     CREATE TABLE sqlite_stat1(tbl,idx,stat)</Line>
  <Line number="10253">**  &lt;/pre&gt;</Line>
  <Line number="10254">**</Line>
  <Line number="10255">** Even though sqlite_stat1 does not have a PRIMARY KEY, changes are</Line>
  <Line number="10256">** recorded for it as if the PRIMARY KEY is (tbl,idx). Additionally, changes</Line>
  <Line number="10257">** are recorded for rows for which (idx IS NULL) is true. However, for such</Line>
  <Line number="10258">** rows a zero-length blob (SQL value X&apos;&apos;) is stored in the changeset or</Line>
  <Line number="10259">** patchset instead of a NULL value. This allows such changesets to be</Line>
  <Line number="10260">** manipulated by legacy implementations of sqlite3changeset_invert(),</Line>
  <Line number="10261">** concat() and similar.</Line>
  <Line number="10262">**</Line>
  <Line number="10263">** The sqlite3changeset_apply() function automatically converts the</Line>
  <Line number="10264">** zero-length blob back to a NULL value when updating the sqlite_stat1</Line>
  <Line number="10265">** table. However, if the application calls sqlite3changeset_new(),</Line>
  <Line number="10266">** sqlite3changeset_old() or sqlite3changeset_conflict on a changeset</Line>
  <Line number="10267">** iterator directly (including on a changeset iterator passed to a</Line>
  <Line number="10268">** conflict-handler callback) then the X&apos;&apos; value is returned. The application</Line>
  <Line number="10269">** must translate X&apos;&apos; to NULL itself if required.</Line>
  <Line number="10270">**</Line>
  <Line number="10271">** Legacy (older than 3.22.0) versions of the sessions module cannot capture</Line>
  <Line number="10272">** changes made to the sqlite_stat1 table. Legacy versions of the</Line>
  <Line number="10273">** sqlite3changeset_apply() function silently ignore any modifications to the</Line>
  <Line number="10274">** sqlite_stat1 table that are part of a changeset or patchset.</Line>
  <Line number="10275">*/</Line>
  <Line number="10276">SQLITE_API int sqlite3session_attach(</Line>
  <Line number="10277">  sqlite3_session *pSession,      /* Session object */</Line>
  <Line number="10278">  const char *zTab                /* Table name */</Line>
  <Line number="10279">);</Line>
  <Line number="10280"></Line>
  <Line number="10281">/*</Line>
  <Line number="10282">** CAPI3REF: Set a table filter on a Session Object.</Line>
  <Line number="10283">** METHOD: sqlite3_session</Line>
  <Line number="10284">**</Line>
  <Line number="10285">** The second argument (xFilter) is the &quot;filter callback&quot;. For changes to rows</Line>
  <Line number="10286">** in tables that are not attached to the Session object, the filter is called</Line>
  <Line number="10287">** to determine whether changes to the table&apos;s rows should be tracked or not.</Line>
  <Line number="10288">** If xFilter returns 0, changes are not tracked. Note that once a table is</Line>
  <Line number="10289">** attached, xFilter will not be called again.</Line>
  <Line number="10290">*/</Line>
  <Line number="10291">SQLITE_API void sqlite3session_table_filter(</Line>
  <Line number="10292">  sqlite3_session *pSession,      /* Session object */</Line>
  <Line number="10293">  int(*xFilter)(</Line>
  <Line number="10294">    void *pCtx,                   /* Copy of third arg to _filter_table() */</Line>
  <Line number="10295">    const char *zTab              /* Table name */</Line>
  <Line number="10296">  ),</Line>
  <Line number="10297">  void *pCtx                      /* First argument passed to xFilter */</Line>
  <Line number="10298">);</Line>
  <Line number="10299"></Line>
  <Line number="10300">/*</Line>
  <Line number="10301">** CAPI3REF: Generate A Changeset From A Session Object</Line>
  <Line number="10302">** METHOD: sqlite3_session</Line>
  <Line number="10303">**</Line>
  <Line number="10304">** Obtain a changeset containing changes to the tables attached to the</Line>
  <Line number="10305">** session object passed as the first argument. If successful,</Line>
  <Line number="10306">** set *ppChangeset to point to a buffer containing the changeset</Line>
  <Line number="10307">** and *pnChangeset to the size of the changeset in bytes before returning</Line>
  <Line number="10308">** SQLITE_OK. If an error occurs, set both *ppChangeset and *pnChangeset to</Line>
  <Line number="10309">** zero and return an SQLite error code.</Line>
  <Line number="10310">**</Line>
  <Line number="10311">** A changeset consists of zero or more INSERT, UPDATE and/or DELETE changes,</Line>
  <Line number="10312">** each representing a change to a single row of an attached table. An INSERT</Line>
  <Line number="10313">** change contains the values of each field of a new database row. A DELETE</Line>
  <Line number="10314">** contains the original values of each field of a deleted database row. An</Line>
  <Line number="10315">** UPDATE change contains the original values of each field of an updated</Line>
  <Line number="10316">** database row along with the updated values for each updated non-primary-key</Line>
  <Line number="10317">** column. It is not possible for an UPDATE change to represent a change that</Line>
  <Line number="10318">** modifies the values of primary key columns. If such a change is made, it</Line>
  <Line number="10319">** is represented in a changeset as a DELETE followed by an INSERT.</Line>
  <Line number="10320">**</Line>
  <Line number="10321">** Changes are not recorded for rows that have NULL values stored in one or</Line>
  <Line number="10322">** more of their PRIMARY KEY columns. If such a row is inserted or deleted,</Line>
  <Line number="10323">** no corresponding change is present in the changesets returned by this</Line>
  <Line number="10324">** function. If an existing row with one or more NULL values stored in</Line>
  <Line number="10325">** PRIMARY KEY columns is updated so that all PRIMARY KEY columns are non-NULL,</Line>
  <Line number="10326">** only an INSERT is appears in the changeset. Similarly, if an existing row</Line>
  <Line number="10327">** with non-NULL PRIMARY KEY values is updated so that one or more of its</Line>
  <Line number="10328">** PRIMARY KEY columns are set to NULL, the resulting changeset contains a</Line>
  <Line number="10329">** DELETE change only.</Line>
  <Line number="10330">**</Line>
  <Line number="10331">** The contents of a changeset may be traversed using an iterator created</Line>
  <Line number="10332">** using the [sqlite3changeset_start()] API. A changeset may be applied to</Line>
  <Line number="10333">** a database with a compatible schema using the [sqlite3changeset_apply()]</Line>
  <Line number="10334">** API.</Line>
  <Line number="10335">**</Line>
  <Line number="10336">** Within a changeset generated by this function, all changes related to a</Line>
  <Line number="10337">** single table are grouped together. In other words, when iterating through</Line>
  <Line number="10338">** a changeset or when applying a changeset to a database, all changes related</Line>
  <Line number="10339">** to a single table are processed before moving on to the next table. Tables</Line>
  <Line number="10340">** are sorted in the same order in which they were attached (or auto-attached)</Line>
  <Line number="10341">** to the sqlite3_session object. The order in which the changes related to</Line>
  <Line number="10342">** a single table are stored is undefined.</Line>
  <Line number="10343">**</Line>
  <Line number="10344">** Following a successful call to this function, it is the responsibility of</Line>
  <Line number="10345">** the caller to eventually free the buffer that *ppChangeset points to using</Line>
  <Line number="10346">** [sqlite3_free()].</Line>
  <Line number="10347">**</Line>
  <Line number="10348">** &lt;h3&gt;Changeset Generation&lt;/h3&gt;</Line>
  <Line number="10349">**</Line>
  <Line number="10350">** Once a table has been attached to a session object, the session object</Line>
  <Line number="10351">** records the primary key values of all new rows inserted into the table.</Line>
  <Line number="10352">** It also records the original primary key and other column values of any</Line>
  <Line number="10353">** deleted or updated rows. For each unique primary key value, data is only</Line>
  <Line number="10354">** recorded once - the first time a row with said primary key is inserted,</Line>
  <Line number="10355">** updated or deleted in the lifetime of the session.</Line>
  <Line number="10356">**</Line>
  <Line number="10357">** There is one exception to the previous paragraph: when a row is inserted,</Line>
  <Line number="10358">** updated or deleted, if one or more of its primary key columns contain a</Line>
  <Line number="10359">** NULL value, no record of the change is made.</Line>
  <Line number="10360">**</Line>
  <Line number="10361">** The session object therefore accumulates two types of records - those</Line>
  <Line number="10362">** that consist of primary key values only (created when the user inserts</Line>
  <Line number="10363">** a new record) and those that consist of the primary key values and the</Line>
  <Line number="10364">** original values of other table columns (created when the users deletes</Line>
  <Line number="10365">** or updates a record).</Line>
  <Line number="10366">**</Line>
  <Line number="10367">** When this function is called, the requested changeset is created using</Line>
  <Line number="10368">** both the accumulated records and the current contents of the database</Line>
  <Line number="10369">** file. Specifically:</Line>
  <Line number="10370">**</Line>
  <Line number="10371">** &lt;ul&gt;</Line>
  <Line number="10372">**   &lt;li&gt; For each record generated by an insert, the database is queried</Line>
  <Line number="10373">**        for a row with a matching primary key. If one is found, an INSERT</Line>
  <Line number="10374">**        change is added to the changeset. If no such row is found, no change</Line>
  <Line number="10375">**        is added to the changeset.</Line>
  <Line number="10376">**</Line>
  <Line number="10377">**   &lt;li&gt; For each record generated by an update or delete, the database is</Line>
  <Line number="10378">**        queried for a row with a matching primary key. If such a row is</Line>
  <Line number="10379">**        found and one or more of the non-primary key fields have been</Line>
  <Line number="10380">**        modified from their original values, an UPDATE change is added to</Line>
  <Line number="10381">**        the changeset. Or, if no such row is found in the table, a DELETE</Line>
  <Line number="10382">**        change is added to the changeset. If there is a row with a matching</Line>
  <Line number="10383">**        primary key in the database, but all fields contain their original</Line>
  <Line number="10384">**        values, no change is added to the changeset.</Line>
  <Line number="10385">** &lt;/ul&gt;</Line>
  <Line number="10386">**</Line>
  <Line number="10387">** This means, amongst other things, that if a row is inserted and then later</Line>
  <Line number="10388">** deleted while a session object is active, neither the insert nor the delete</Line>
  <Line number="10389">** will be present in the changeset. Or if a row is deleted and then later a</Line>
  <Line number="10390">** row with the same primary key values inserted while a session object is</Line>
  <Line number="10391">** active, the resulting changeset will contain an UPDATE change instead of</Line>
  <Line number="10392">** a DELETE and an INSERT.</Line>
  <Line number="10393">**</Line>
  <Line number="10394">** When a session object is disabled (see the [sqlite3session_enable()] API),</Line>
  <Line number="10395">** it does not accumulate records when rows are inserted, updated or deleted.</Line>
  <Line number="10396">** This may appear to have some counter-intuitive effects if a single row</Line>
  <Line number="10397">** is written to more than once during a session. For example, if a row</Line>
  <Line number="10398">** is inserted while a session object is enabled, then later deleted while</Line>
  <Line number="10399">** the same session object is disabled, no INSERT record will appear in the</Line>
  <Line number="10400">** changeset, even though the delete took place while the session was disabled.</Line>
  <Line number="10401">** Or, if one field of a row is updated while a session is disabled, and</Line>
  <Line number="10402">** another field of the same row is updated while the session is enabled, the</Line>
  <Line number="10403">** resulting changeset will contain an UPDATE change that updates both fields.</Line>
  <Line number="10404">*/</Line>
  <Line number="10405">SQLITE_API int sqlite3session_changeset(</Line>
  <Line number="10406">  sqlite3_session *pSession,      /* Session object */</Line>
  <Line number="10407">  int *pnChangeset,               /* OUT: Size of buffer at *ppChangeset */</Line>
  <Line number="10408">  void **ppChangeset              /* OUT: Buffer containing changeset */</Line>
  <Line number="10409">);</Line>
  <Line number="10410"></Line>
  <Line number="10411">/*</Line>
  <Line number="10412">** CAPI3REF: Return An Upper-limit For The Size Of The Changeset</Line>
  <Line number="10413">** METHOD: sqlite3_session</Line>
  <Line number="10414">**</Line>
  <Line number="10415">** By default, this function always returns 0. For it to return</Line>
  <Line number="10416">** a useful result, the sqlite3_session object must have been configured</Line>
  <Line number="10417">** to enable this API using sqlite3session_object_config() with the</Line>
  <Line number="10418">** SQLITE_SESSION_OBJCONFIG_SIZE verb.</Line>
  <Line number="10419">**</Line>
  <Line number="10420">** When enabled, this function returns an upper limit, in bytes, for the size</Line>
  <Line number="10421">** of the changeset that might be produced if sqlite3session_changeset() were</Line>
  <Line number="10422">** called. The final changeset size might be equal to or smaller than the</Line>
  <Line number="10423">** size in bytes returned by this function.</Line>
  <Line number="10424">*/</Line>
  <Line number="10425">SQLITE_API sqlite3_int64 sqlite3session_changeset_size(sqlite3_session *pSession);</Line>
  <Line number="10426"></Line>
  <Line number="10427">/*</Line>
  <Line number="10428">** CAPI3REF: Load The Difference Between Tables Into A Session</Line>
  <Line number="10429">** METHOD: sqlite3_session</Line>
  <Line number="10430">**</Line>
  <Line number="10431">** If it is not already attached to the session object passed as the first</Line>
  <Line number="10432">** argument, this function attaches table zTbl in the same manner as the</Line>
  <Line number="10433">** [sqlite3session_attach()] function. If zTbl does not exist, or if it</Line>
  <Line number="10434">** does not have a primary key, this function is a no-op (but does not return</Line>
  <Line number="10435">** an error).</Line>
  <Line number="10436">**</Line>
  <Line number="10437">** Argument zFromDb must be the name of a database (&quot;main&quot;, &quot;temp&quot; etc.)</Line>
  <Line number="10438">** attached to the same database handle as the session object that contains</Line>
  <Line number="10439">** a table compatible with the table attached to the session by this function.</Line>
  <Line number="10440">** A table is considered compatible if it:</Line>
  <Line number="10441">**</Line>
  <Line number="10442">** &lt;ul&gt;</Line>
  <Line number="10443">**   &lt;li&gt; Has the same name,</Line>
  <Line number="10444">**   &lt;li&gt; Has the same set of columns declared in the same order, and</Line>
  <Line number="10445">**   &lt;li&gt; Has the same PRIMARY KEY definition.</Line>
  <Line number="10446">** &lt;/ul&gt;</Line>
  <Line number="10447">**</Line>
  <Line number="10448">** If the tables are not compatible, SQLITE_SCHEMA is returned. If the tables</Line>
  <Line number="10449">** are compatible but do not have any PRIMARY KEY columns, it is not an error</Line>
  <Line number="10450">** but no changes are added to the session object. As with other session</Line>
  <Line number="10451">** APIs, tables without PRIMARY KEYs are simply ignored.</Line>
  <Line number="10452">**</Line>
  <Line number="10453">** This function adds a set of changes to the session object that could be</Line>
  <Line number="10454">** used to update the table in database zFrom (call this the &quot;from-table&quot;)</Line>
  <Line number="10455">** so that its content is the same as the table attached to the session</Line>
  <Line number="10456">** object (call this the &quot;to-table&quot;). Specifically:</Line>
  <Line number="10457">**</Line>
  <Line number="10458">** &lt;ul&gt;</Line>
  <Line number="10459">**   &lt;li&gt; For each row (primary key) that exists in the to-table but not in</Line>
  <Line number="10460">**     the from-table, an INSERT record is added to the session object.</Line>
  <Line number="10461">**</Line>
  <Line number="10462">**   &lt;li&gt; For each row (primary key) that exists in the to-table but not in</Line>
  <Line number="10463">**     the from-table, a DELETE record is added to the session object.</Line>
  <Line number="10464">**</Line>
  <Line number="10465">**   &lt;li&gt; For each row (primary key) that exists in both tables, but features</Line>
  <Line number="10466">**     different non-PK values in each, an UPDATE record is added to the</Line>
  <Line number="10467">**     session.</Line>
  <Line number="10468">** &lt;/ul&gt;</Line>
  <Line number="10469">**</Line>
  <Line number="10470">** To clarify, if this function is called and then a changeset constructed</Line>
  <Line number="10471">** using [sqlite3session_changeset()], then after applying that changeset to</Line>
  <Line number="10472">** database zFrom the contents of the two compatible tables would be</Line>
  <Line number="10473">** identical.</Line>
  <Line number="10474">**</Line>
  <Line number="10475">** It an error if database zFrom does not exist or does not contain the</Line>
  <Line number="10476">** required compatible table.</Line>
  <Line number="10477">**</Line>
  <Line number="10478">** If the operation is successful, SQLITE_OK is returned. Otherwise, an SQLite</Line>
  <Line number="10479">** error code. In this case, if argument pzErrMsg is not NULL, *pzErrMsg</Line>
  <Line number="10480">** may be set to point to a buffer containing an English language error</Line>
  <Line number="10481">** message. It is the responsibility of the caller to free this buffer using</Line>
  <Line number="10482">** sqlite3_free().</Line>
  <Line number="10483">*/</Line>
  <Line number="10484">SQLITE_API int sqlite3session_diff(</Line>
  <Line number="10485">  sqlite3_session *pSession,</Line>
  <Line number="10486">  const char *zFromDb,</Line>
  <Line number="10487">  const char *zTbl,</Line>
  <Line number="10488">  char **pzErrMsg</Line>
  <Line number="10489">);</Line>
  <Line number="10490"></Line>
  <Line number="10491"></Line>
  <Line number="10492">/*</Line>
  <Line number="10493">** CAPI3REF: Generate A Patchset From A Session Object</Line>
  <Line number="10494">** METHOD: sqlite3_session</Line>
  <Line number="10495">**</Line>
  <Line number="10496">** The differences between a patchset and a changeset are that:</Line>
  <Line number="10497">**</Line>
  <Line number="10498">** &lt;ul&gt;</Line>
  <Line number="10499">**   &lt;li&gt; DELETE records consist of the primary key fields only. The</Line>
  <Line number="10500">**        original values of other fields are omitted.</Line>
  <Line number="10501">**   &lt;li&gt; The original values of any modified fields are omitted from</Line>
  <Line number="10502">**        UPDATE records.</Line>
  <Line number="10503">** &lt;/ul&gt;</Line>
  <Line number="10504">**</Line>
  <Line number="10505">** A patchset blob may be used with up to date versions of all</Line>
  <Line number="10506">** sqlite3changeset_xxx API functions except for sqlite3changeset_invert(),</Line>
  <Line number="10507">** which returns SQLITE_CORRUPT if it is passed a patchset. Similarly,</Line>
  <Line number="10508">** attempting to use a patchset blob with old versions of the</Line>
  <Line number="10509">** sqlite3changeset_xxx APIs also provokes an SQLITE_CORRUPT error.</Line>
  <Line number="10510">**</Line>
  <Line number="10511">** Because the non-primary key &quot;old.*&quot; fields are omitted, no</Line>
  <Line number="10512">** SQLITE_CHANGESET_DATA conflicts can be detected or reported if a patchset</Line>
  <Line number="10513">** is passed to the sqlite3changeset_apply() API. Other conflict types work</Line>
  <Line number="10514">** in the same way as for changesets.</Line>
  <Line number="10515">**</Line>
  <Line number="10516">** Changes within a patchset are ordered in the same way as for changesets</Line>
  <Line number="10517">** generated by the sqlite3session_changeset() function (i.e. all changes for</Line>
  <Line number="10518">** a single table are grouped together, tables appear in the order in which</Line>
  <Line number="10519">** they were attached to the session object).</Line>
  <Line number="10520">*/</Line>
  <Line number="10521">SQLITE_API int sqlite3session_patchset(</Line>
  <Line number="10522">  sqlite3_session *pSession,      /* Session object */</Line>
  <Line number="10523">  int *pnPatchset,                /* OUT: Size of buffer at *ppPatchset */</Line>
  <Line number="10524">  void **ppPatchset               /* OUT: Buffer containing patchset */</Line>
  <Line number="10525">);</Line>
  <Line number="10526"></Line>
  <Line number="10527">/*</Line>
  <Line number="10528">** CAPI3REF: Test if a changeset has recorded any changes.</Line>
  <Line number="10529">**</Line>
  <Line number="10530">** Return non-zero if no changes to attached tables have been recorded by</Line>
  <Line number="10531">** the session object passed as the first argument. Otherwise, if one or</Line>
  <Line number="10532">** more changes have been recorded, return zero.</Line>
  <Line number="10533">**</Line>
  <Line number="10534">** Even if this function returns zero, it is possible that calling</Line>
  <Line number="10535">** [sqlite3session_changeset()] on the session handle may still return a</Line>
  <Line number="10536">** changeset that contains no changes. This can happen when a row in</Line>
  <Line number="10537">** an attached table is modified and then later on the original values</Line>
  <Line number="10538">** are restored. However, if this function returns non-zero, then it is</Line>
  <Line number="10539">** guaranteed that a call to sqlite3session_changeset() will return a</Line>
  <Line number="10540">** changeset containing zero changes.</Line>
  <Line number="10541">*/</Line>
  <Line number="10542">SQLITE_API int sqlite3session_isempty(sqlite3_session *pSession);</Line>
  <Line number="10543"></Line>
  <Line number="10544">/*</Line>
  <Line number="10545">** CAPI3REF: Query for the amount of heap memory used by a session object.</Line>
  <Line number="10546">**</Line>
  <Line number="10547">** This API returns the total amount of heap memory in bytes currently</Line>
  <Line number="10548">** used by the session object passed as the only argument.</Line>
  <Line number="10549">*/</Line>
  <Line number="10550">SQLITE_API sqlite3_int64 sqlite3session_memory_used(sqlite3_session *pSession);</Line>
  <Line number="10551"></Line>
  <Line number="10552">/*</Line>
  <Line number="10553">** CAPI3REF: Create An Iterator To Traverse A Changeset</Line>
  <Line number="10554">** CONSTRUCTOR: sqlite3_changeset_iter</Line>
  <Line number="10555">**</Line>
  <Line number="10556">** Create an iterator used to iterate through the contents of a changeset.</Line>
  <Line number="10557">** If successful, *pp is set to point to the iterator handle and SQLITE_OK</Line>
  <Line number="10558">** is returned. Otherwise, if an error occurs, *pp is set to zero and an</Line>
  <Line number="10559">** SQLite error code is returned.</Line>
  <Line number="10560">**</Line>
  <Line number="10561">** The following functions can be used to advance and query a changeset</Line>
  <Line number="10562">** iterator created by this function:</Line>
  <Line number="10563">**</Line>
  <Line number="10564">** &lt;ul&gt;</Line>
  <Line number="10565">**   &lt;li&gt; [sqlite3changeset_next()]</Line>
  <Line number="10566">**   &lt;li&gt; [sqlite3changeset_op()]</Line>
  <Line number="10567">**   &lt;li&gt; [sqlite3changeset_new()]</Line>
  <Line number="10568">**   &lt;li&gt; [sqlite3changeset_old()]</Line>
  <Line number="10569">** &lt;/ul&gt;</Line>
  <Line number="10570">**</Line>
  <Line number="10571">** It is the responsibility of the caller to eventually destroy the iterator</Line>
  <Line number="10572">** by passing it to [sqlite3changeset_finalize()]. The buffer containing the</Line>
  <Line number="10573">** changeset (pChangeset) must remain valid until after the iterator is</Line>
  <Line number="10574">** destroyed.</Line>
  <Line number="10575">**</Line>
  <Line number="10576">** Assuming the changeset blob was created by one of the</Line>
  <Line number="10577">** [sqlite3session_changeset()], [sqlite3changeset_concat()] or</Line>
  <Line number="10578">** [sqlite3changeset_invert()] functions, all changes within the changeset</Line>
  <Line number="10579">** that apply to a single table are grouped together. This means that when</Line>
  <Line number="10580">** an application iterates through a changeset using an iterator created by</Line>
  <Line number="10581">** this function, all changes that relate to a single table are visited</Line>
  <Line number="10582">** consecutively. There is no chance that the iterator will visit a change</Line>
  <Line number="10583">** the applies to table X, then one for table Y, and then later on visit</Line>
  <Line number="10584">** another change for table X.</Line>
  <Line number="10585">**</Line>
  <Line number="10586">** The behavior of sqlite3changeset_start_v2() and its streaming equivalent</Line>
  <Line number="10587">** may be modified by passing a combination of</Line>
  <Line number="10588">** [SQLITE_CHANGESETSTART_INVERT | supported flags] as the 4th parameter.</Line>
  <Line number="10589">**</Line>
  <Line number="10590">** Note that the sqlite3changeset_start_v2() API is still &lt;b&gt;experimental&lt;/b&gt;</Line>
  <Line number="10591">** and therefore subject to change.</Line>
  <Line number="10592">*/</Line>
  <Line number="10593">SQLITE_API int sqlite3changeset_start(</Line>
  <Line number="10594">  sqlite3_changeset_iter **pp,    /* OUT: New changeset iterator handle */</Line>
  <Line number="10595">  int nChangeset,                 /* Size of changeset blob in bytes */</Line>
  <Line number="10596">  void *pChangeset                /* Pointer to blob containing changeset */</Line>
  <Line number="10597">);</Line>
  <Line number="10598">SQLITE_API int sqlite3changeset_start_v2(</Line>
  <Line number="10599">  sqlite3_changeset_iter **pp,    /* OUT: New changeset iterator handle */</Line>
  <Line number="10600">  int nChangeset,                 /* Size of changeset blob in bytes */</Line>
  <Line number="10601">  void *pChangeset,               /* Pointer to blob containing changeset */</Line>
  <Line number="10602">  int flags                       /* SESSION_CHANGESETSTART_* flags */</Line>
  <Line number="10603">);</Line>
  <Line number="10604"></Line>
  <Line number="10605">/*</Line>
  <Line number="10606">** CAPI3REF: Flags for sqlite3changeset_start_v2</Line>
  <Line number="10607">**</Line>
  <Line number="10608">** The following flags may passed via the 4th parameter to</Line>
  <Line number="10609">** [sqlite3changeset_start_v2] and [sqlite3changeset_start_v2_strm]:</Line>
  <Line number="10610">**</Line>
  <Line number="10611">** &lt;dt&gt;SQLITE_CHANGESETAPPLY_INVERT &lt;dd&gt;</Line>
  <Line number="10612">**   Invert the changeset while iterating through it. This is equivalent to</Line>
  <Line number="10613">**   inverting a changeset using sqlite3changeset_invert() before applying it.</Line>
  <Line number="10614">**   It is an error to specify this flag with a patchset.</Line>
  <Line number="10615">*/</Line>
  <Line number="10616">#define SQLITE_CHANGESETSTART_INVERT        0x0002</Line>
  <Line number="10617"></Line>
  <Line number="10618"></Line>
  <Line number="10619">/*</Line>
  <Line number="10620">** CAPI3REF: Advance A Changeset Iterator</Line>
  <Line number="10621">** METHOD: sqlite3_changeset_iter</Line>
  <Line number="10622">**</Line>
  <Line number="10623">** This function may only be used with iterators created by the function</Line>
  <Line number="10624">** [sqlite3changeset_start()]. If it is called on an iterator passed to</Line>
  <Line number="10625">** a conflict-handler callback by [sqlite3changeset_apply()], SQLITE_MISUSE</Line>
  <Line number="10626">** is returned and the call has no effect.</Line>
  <Line number="10627">**</Line>
  <Line number="10628">** Immediately after an iterator is created by sqlite3changeset_start(), it</Line>
  <Line number="10629">** does not point to any change in the changeset. Assuming the changeset</Line>
  <Line number="10630">** is not empty, the first call to this function advances the iterator to</Line>
  <Line number="10631">** point to the first change in the changeset. Each subsequent call advances</Line>
  <Line number="10632">** the iterator to point to the next change in the changeset (if any). If</Line>
  <Line number="10633">** no error occurs and the iterator points to a valid change after a call</Line>
  <Line number="10634">** to sqlite3changeset_next() has advanced it, SQLITE_ROW is returned.</Line>
  <Line number="10635">** Otherwise, if all changes in the changeset have already been visited,</Line>
  <Line number="10636">** SQLITE_DONE is returned.</Line>
  <Line number="10637">**</Line>
  <Line number="10638">** If an error occurs, an SQLite error code is returned. Possible error</Line>
  <Line number="10639">** codes include SQLITE_CORRUPT (if the changeset buffer is corrupt) or</Line>
  <Line number="10640">** SQLITE_NOMEM.</Line>
  <Line number="10641">*/</Line>
  <Line number="10642">SQLITE_API int sqlite3changeset_next(sqlite3_changeset_iter *pIter);</Line>
  <Line number="10643"></Line>
  <Line number="10644">/*</Line>
  <Line number="10645">** CAPI3REF: Obtain The Current Operation From A Changeset Iterator</Line>
  <Line number="10646">** METHOD: sqlite3_changeset_iter</Line>
  <Line number="10647">**</Line>
  <Line number="10648">** The pIter argument passed to this function may either be an iterator</Line>
  <Line number="10649">** passed to a conflict-handler by [sqlite3changeset_apply()], or an iterator</Line>
  <Line number="10650">** created by [sqlite3changeset_start()]. In the latter case, the most recent</Line>
  <Line number="10651">** call to [sqlite3changeset_next()] must have returned [SQLITE_ROW]. If this</Line>
  <Line number="10652">** is not the case, this function returns [SQLITE_MISUSE].</Line>
  <Line number="10653">**</Line>
  <Line number="10654">** Arguments pOp, pnCol and pzTab may not be NULL. Upon return, three</Line>
  <Line number="10655">** outputs are set through these pointers:</Line>
  <Line number="10656">**</Line>
  <Line number="10657">** *pOp is set to one of [SQLITE_INSERT], [SQLITE_DELETE] or [SQLITE_UPDATE],</Line>
  <Line number="10658">** depending on the type of change that the iterator currently points to;</Line>
  <Line number="10659">**</Line>
  <Line number="10660">** *pnCol is set to the number of columns in the table affected by the change; and</Line>
  <Line number="10661">**</Line>
  <Line number="10662">** *pzTab is set to point to a nul-terminated utf-8 encoded string containing</Line>
  <Line number="10663">** the name of the table affected by the current change. The buffer remains</Line>
  <Line number="10664">** valid until either sqlite3changeset_next() is called on the iterator</Line>
  <Line number="10665">** or until the conflict-handler function returns.</Line>
  <Line number="10666">**</Line>
  <Line number="10667">** If pbIndirect is not NULL, then *pbIndirect is set to true (1) if the change</Line>
  <Line number="10668">** is an indirect change, or false (0) otherwise. See the documentation for</Line>
  <Line number="10669">** [sqlite3session_indirect()] for a description of direct and indirect</Line>
  <Line number="10670">** changes.</Line>
  <Line number="10671">**</Line>
  <Line number="10672">** If no error occurs, SQLITE_OK is returned. If an error does occur, an</Line>
  <Line number="10673">** SQLite error code is returned. The values of the output variables may not</Line>
  <Line number="10674">** be trusted in this case.</Line>
  <Line number="10675">*/</Line>
  <Line number="10676">SQLITE_API int sqlite3changeset_op(</Line>
  <Line number="10677">  sqlite3_changeset_iter *pIter,  /* Iterator object */</Line>
  <Line number="10678">  const char **pzTab,             /* OUT: Pointer to table name */</Line>
  <Line number="10679">  int *pnCol,                     /* OUT: Number of columns in table */</Line>
  <Line number="10680">  int *pOp,                       /* OUT: SQLITE_INSERT, DELETE or UPDATE */</Line>
  <Line number="10681">  int *pbIndirect                 /* OUT: True for an &apos;indirect&apos; change */</Line>
  <Line number="10682">);</Line>
  <Line number="10683"></Line>
  <Line number="10684">/*</Line>
  <Line number="10685">** CAPI3REF: Obtain The Primary Key Definition Of A Table</Line>
  <Line number="10686">** METHOD: sqlite3_changeset_iter</Line>
  <Line number="10687">**</Line>
  <Line number="10688">** For each modified table, a changeset includes the following:</Line>
  <Line number="10689">**</Line>
  <Line number="10690">** &lt;ul&gt;</Line>
  <Line number="10691">**   &lt;li&gt; The number of columns in the table, and</Line>
  <Line number="10692">**   &lt;li&gt; Which of those columns make up the tables PRIMARY KEY.</Line>
  <Line number="10693">** &lt;/ul&gt;</Line>
  <Line number="10694">**</Line>
  <Line number="10695">** This function is used to find which columns comprise the PRIMARY KEY of</Line>
  <Line number="10696">** the table modified by the change that iterator pIter currently points to.</Line>
  <Line number="10697">** If successful, *pabPK is set to point to an array of nCol entries, where</Line>
  <Line number="10698">** nCol is the number of columns in the table. Elements of *pabPK are set to</Line>
  <Line number="10699">** 0x01 if the corresponding column is part of the tables primary key, or</Line>
  <Line number="10700">** 0x00 if it is not.</Line>
  <Line number="10701">**</Line>
  <Line number="10702">** If argument pnCol is not NULL, then *pnCol is set to the number of columns</Line>
  <Line number="10703">** in the table.</Line>
  <Line number="10704">**</Line>
  <Line number="10705">** If this function is called when the iterator does not point to a valid</Line>
  <Line number="10706">** entry, SQLITE_MISUSE is returned and the output variables zeroed. Otherwise,</Line>
  <Line number="10707">** SQLITE_OK is returned and the output variables populated as described</Line>
  <Line number="10708">** above.</Line>
  <Line number="10709">*/</Line>
  <Line number="10710">SQLITE_API int sqlite3changeset_pk(</Line>
  <Line number="10711">  sqlite3_changeset_iter *pIter,  /* Iterator object */</Line>
  <Line number="10712">  unsigned char **pabPK,          /* OUT: Array of boolean - true for PK cols */</Line>
  <Line number="10713">  int *pnCol                      /* OUT: Number of entries in output array */</Line>
  <Line number="10714">);</Line>
  <Line number="10715"></Line>
  <Line number="10716">/*</Line>
  <Line number="10717">** CAPI3REF: Obtain old.* Values From A Changeset Iterator</Line>
  <Line number="10718">** METHOD: sqlite3_changeset_iter</Line>
  <Line number="10719">**</Line>
  <Line number="10720">** The pIter argument passed to this function may either be an iterator</Line>
  <Line number="10721">** passed to a conflict-handler by [sqlite3changeset_apply()], or an iterator</Line>
  <Line number="10722">** created by [sqlite3changeset_start()]. In the latter case, the most recent</Line>
  <Line number="10723">** call to [sqlite3changeset_next()] must have returned SQLITE_ROW.</Line>
  <Line number="10724">** Furthermore, it may only be called if the type of change that the iterator</Line>
  <Line number="10725">** currently points to is either [SQLITE_DELETE] or [SQLITE_UPDATE]. Otherwise,</Line>
  <Line number="10726">** this function returns [SQLITE_MISUSE] and sets *ppValue to NULL.</Line>
  <Line number="10727">**</Line>
  <Line number="10728">** Argument iVal must be greater than or equal to 0, and less than the number</Line>
  <Line number="10729">** of columns in the table affected by the current change. Otherwise,</Line>
  <Line number="10730">** [SQLITE_RANGE] is returned and *ppValue is set to NULL.</Line>
  <Line number="10731">**</Line>
  <Line number="10732">** If successful, this function sets *ppValue to point to a protected</Line>
  <Line number="10733">** sqlite3_value object containing the iVal&apos;th value from the vector of</Line>
  <Line number="10734">** original row values stored as part of the UPDATE or DELETE change and</Line>
  <Line number="10735">** returns SQLITE_OK. The name of the function comes from the fact that this</Line>
  <Line number="10736">** is similar to the &quot;old.*&quot; columns available to update or delete triggers.</Line>
  <Line number="10737">**</Line>
  <Line number="10738">** If some other error occurs (e.g. an OOM condition), an SQLite error code</Line>
  <Line number="10739">** is returned and *ppValue is set to NULL.</Line>
  <Line number="10740">*/</Line>
  <Line number="10741">SQLITE_API int sqlite3changeset_old(</Line>
  <Line number="10742">  sqlite3_changeset_iter *pIter,  /* Changeset iterator */</Line>
  <Line number="10743">  int iVal,                       /* Column number */</Line>
  <Line number="10744">  sqlite3_value **ppValue         /* OUT: Old value (or NULL pointer) */</Line>
  <Line number="10745">);</Line>
  <Line number="10746"></Line>
  <Line number="10747">/*</Line>
  <Line number="10748">** CAPI3REF: Obtain new.* Values From A Changeset Iterator</Line>
  <Line number="10749">** METHOD: sqlite3_changeset_iter</Line>
  <Line number="10750">**</Line>
  <Line number="10751">** The pIter argument passed to this function may either be an iterator</Line>
  <Line number="10752">** passed to a conflict-handler by [sqlite3changeset_apply()], or an iterator</Line>
  <Line number="10753">** created by [sqlite3changeset_start()]. In the latter case, the most recent</Line>
  <Line number="10754">** call to [sqlite3changeset_next()] must have returned SQLITE_ROW.</Line>
  <Line number="10755">** Furthermore, it may only be called if the type of change that the iterator</Line>
  <Line number="10756">** currently points to is either [SQLITE_UPDATE] or [SQLITE_INSERT]. Otherwise,</Line>
  <Line number="10757">** this function returns [SQLITE_MISUSE] and sets *ppValue to NULL.</Line>
  <Line number="10758">**</Line>
  <Line number="10759">** Argument iVal must be greater than or equal to 0, and less than the number</Line>
  <Line number="10760">** of columns in the table affected by the current change. Otherwise,</Line>
  <Line number="10761">** [SQLITE_RANGE] is returned and *ppValue is set to NULL.</Line>
  <Line number="10762">**</Line>
  <Line number="10763">** If successful, this function sets *ppValue to point to a protected</Line>
  <Line number="10764">** sqlite3_value object containing the iVal&apos;th value from the vector of</Line>
  <Line number="10765">** new row values stored as part of the UPDATE or INSERT change and</Line>
  <Line number="10766">** returns SQLITE_OK. If the change is an UPDATE and does not include</Line>
  <Line number="10767">** a new value for the requested column, *ppValue is set to NULL and</Line>
  <Line number="10768">** SQLITE_OK returned. The name of the function comes from the fact that</Line>
  <Line number="10769">** this is similar to the &quot;new.*&quot; columns available to update or delete</Line>
  <Line number="10770">** triggers.</Line>
  <Line number="10771">**</Line>
  <Line number="10772">** If some other error occurs (e.g. an OOM condition), an SQLite error code</Line>
  <Line number="10773">** is returned and *ppValue is set to NULL.</Line>
  <Line number="10774">*/</Line>
  <Line number="10775">SQLITE_API int sqlite3changeset_new(</Line>
  <Line number="10776">  sqlite3_changeset_iter *pIter,  /* Changeset iterator */</Line>
  <Line number="10777">  int iVal,                       /* Column number */</Line>
  <Line number="10778">  sqlite3_value **ppValue         /* OUT: New value (or NULL pointer) */</Line>
  <Line number="10779">);</Line>
  <Line number="10780"></Line>
  <Line number="10781">/*</Line>
  <Line number="10782">** CAPI3REF: Obtain Conflicting Row Values From A Changeset Iterator</Line>
  <Line number="10783">** METHOD: sqlite3_changeset_iter</Line>
  <Line number="10784">**</Line>
  <Line number="10785">** This function should only be used with iterator objects passed to a</Line>
  <Line number="10786">** conflict-handler callback by [sqlite3changeset_apply()] with either</Line>
  <Line number="10787">** [SQLITE_CHANGESET_DATA] or [SQLITE_CHANGESET_CONFLICT]. If this function</Line>
  <Line number="10788">** is called on any other iterator, [SQLITE_MISUSE] is returned and *ppValue</Line>
  <Line number="10789">** is set to NULL.</Line>
  <Line number="10790">**</Line>
  <Line number="10791">** Argument iVal must be greater than or equal to 0, and less than the number</Line>
  <Line number="10792">** of columns in the table affected by the current change. Otherwise,</Line>
  <Line number="10793">** [SQLITE_RANGE] is returned and *ppValue is set to NULL.</Line>
  <Line number="10794">**</Line>
  <Line number="10795">** If successful, this function sets *ppValue to point to a protected</Line>
  <Line number="10796">** sqlite3_value object containing the iVal&apos;th value from the</Line>
  <Line number="10797">** &quot;conflicting row&quot; associated with the current conflict-handler callback</Line>
  <Line number="10798">** and returns SQLITE_OK.</Line>
  <Line number="10799">**</Line>
  <Line number="10800">** If some other error occurs (e.g. an OOM condition), an SQLite error code</Line>
  <Line number="10801">** is returned and *ppValue is set to NULL.</Line>
  <Line number="10802">*/</Line>
  <Line number="10803">SQLITE_API int sqlite3changeset_conflict(</Line>
  <Line number="10804">  sqlite3_changeset_iter *pIter,  /* Changeset iterator */</Line>
  <Line number="10805">  int iVal,                       /* Column number */</Line>
  <Line number="10806">  sqlite3_value **ppValue         /* OUT: Value from conflicting row */</Line>
  <Line number="10807">);</Line>
  <Line number="10808"></Line>
  <Line number="10809">/*</Line>
  <Line number="10810">** CAPI3REF: Determine The Number Of Foreign Key Constraint Violations</Line>
  <Line number="10811">** METHOD: sqlite3_changeset_iter</Line>
  <Line number="10812">**</Line>
  <Line number="10813">** This function may only be called with an iterator passed to an</Line>
  <Line number="10814">** SQLITE_CHANGESET_FOREIGN_KEY conflict handler callback. In this case</Line>
  <Line number="10815">** it sets the output variable to the total number of known foreign key</Line>
  <Line number="10816">** violations in the destination database and returns SQLITE_OK.</Line>
  <Line number="10817">**</Line>
  <Line number="10818">** In all other cases this function returns SQLITE_MISUSE.</Line>
  <Line number="10819">*/</Line>
  <Line number="10820">SQLITE_API int sqlite3changeset_fk_conflicts(</Line>
  <Line number="10821">  sqlite3_changeset_iter *pIter,  /* Changeset iterator */</Line>
  <Line number="10822">  int *pnOut                      /* OUT: Number of FK violations */</Line>
  <Line number="10823">);</Line>
  <Line number="10824"></Line>
  <Line number="10825"></Line>
  <Line number="10826">/*</Line>
  <Line number="10827">** CAPI3REF: Finalize A Changeset Iterator</Line>
  <Line number="10828">** METHOD: sqlite3_changeset_iter</Line>
  <Line number="10829">**</Line>
  <Line number="10830">** This function is used to finalize an iterator allocated with</Line>
  <Line number="10831">** [sqlite3changeset_start()].</Line>
  <Line number="10832">**</Line>
  <Line number="10833">** This function should only be called on iterators created using the</Line>
  <Line number="10834">** [sqlite3changeset_start()] function. If an application calls this</Line>
  <Line number="10835">** function with an iterator passed to a conflict-handler by</Line>
  <Line number="10836">** [sqlite3changeset_apply()], [SQLITE_MISUSE] is immediately returned and the</Line>
  <Line number="10837">** call has no effect.</Line>
  <Line number="10838">**</Line>
  <Line number="10839">** If an error was encountered within a call to an sqlite3changeset_xxx()</Line>
  <Line number="10840">** function (for example an [SQLITE_CORRUPT] in [sqlite3changeset_next()] or an</Line>
  <Line number="10841">** [SQLITE_NOMEM] in [sqlite3changeset_new()]) then an error code corresponding</Line>
  <Line number="10842">** to that error is returned by this function. Otherwise, SQLITE_OK is</Line>
  <Line number="10843">** returned. This is to allow the following pattern (pseudo-code):</Line>
  <Line number="10844">**</Line>
  <Line number="10845">** &lt;pre&gt;</Line>
  <Line number="10846">**   sqlite3changeset_start();</Line>
  <Line number="10847">**   while( SQLITE_ROW==sqlite3changeset_next() ){</Line>
  <Line number="10848">**     // Do something with change.</Line>
  <Line number="10849">**   }</Line>
  <Line number="10850">**   rc = sqlite3changeset_finalize();</Line>
  <Line number="10851">**   if( rc!=SQLITE_OK ){</Line>
  <Line number="10852">**     // An error has occurred</Line>
  <Line number="10853">**   }</Line>
  <Line number="10854">** &lt;/pre&gt;</Line>
  <Line number="10855">*/</Line>
  <Line number="10856">SQLITE_API int sqlite3changeset_finalize(sqlite3_changeset_iter *pIter);</Line>
  <Line number="10857"></Line>
  <Line number="10858">/*</Line>
  <Line number="10859">** CAPI3REF: Invert A Changeset</Line>
  <Line number="10860">**</Line>
  <Line number="10861">** This function is used to &quot;invert&quot; a changeset object. Applying an inverted</Line>
  <Line number="10862">** changeset to a database reverses the effects of applying the uninverted</Line>
  <Line number="10863">** changeset. Specifically:</Line>
  <Line number="10864">**</Line>
  <Line number="10865">** &lt;ul&gt;</Line>
  <Line number="10866">**   &lt;li&gt; Each DELETE change is changed to an INSERT, and</Line>
  <Line number="10867">**   &lt;li&gt; Each INSERT change is changed to a DELETE, and</Line>
  <Line number="10868">**   &lt;li&gt; For each UPDATE change, the old.* and new.* values are exchanged.</Line>
  <Line number="10869">** &lt;/ul&gt;</Line>
  <Line number="10870">**</Line>
  <Line number="10871">** This function does not change the order in which changes appear within</Line>
  <Line number="10872">** the changeset. It merely reverses the sense of each individual change.</Line>
  <Line number="10873">**</Line>
  <Line number="10874">** If successful, a pointer to a buffer containing the inverted changeset</Line>
  <Line number="10875">** is stored in *ppOut, the size of the same buffer is stored in *pnOut, and</Line>
  <Line number="10876">** SQLITE_OK is returned. If an error occurs, both *pnOut and *ppOut are</Line>
  <Line number="10877">** zeroed and an SQLite error code returned.</Line>
  <Line number="10878">**</Line>
  <Line number="10879">** It is the responsibility of the caller to eventually call sqlite3_free()</Line>
  <Line number="10880">** on the *ppOut pointer to free the buffer allocation following a successful</Line>
  <Line number="10881">** call to this function.</Line>
  <Line number="10882">**</Line>
  <Line number="10883">** WARNING/TODO: This function currently assumes that the input is a valid</Line>
  <Line number="10884">** changeset. If it is not, the results are undefined.</Line>
  <Line number="10885">*/</Line>
  <Line number="10886">SQLITE_API int sqlite3changeset_invert(</Line>
  <Line number="10887">  int nIn, const void *pIn,       /* Input changeset */</Line>
  <Line number="10888">  int *pnOut, void **ppOut        /* OUT: Inverse of input */</Line>
  <Line number="10889">);</Line>
  <Line number="10890"></Line>
  <Line number="10891">/*</Line>
  <Line number="10892">** CAPI3REF: Concatenate Two Changeset Objects</Line>
  <Line number="10893">**</Line>
  <Line number="10894">** This function is used to concatenate two changesets, A and B, into a</Line>
  <Line number="10895">** single changeset. The result is a changeset equivalent to applying</Line>
  <Line number="10896">** changeset A followed by changeset B.</Line>
  <Line number="10897">**</Line>
  <Line number="10898">** This function combines the two input changesets using an</Line>
  <Line number="10899">** sqlite3_changegroup object. Calling it produces similar results as the</Line>
  <Line number="10900">** following code fragment:</Line>
  <Line number="10901">**</Line>
  <Line number="10902">** &lt;pre&gt;</Line>
  <Line number="10903">**   sqlite3_changegroup *pGrp;</Line>
  <Line number="10904">**   rc = sqlite3_changegroup_new(&amp;pGrp);</Line>
  <Line number="10905">**   if( rc==SQLITE_OK ) rc = sqlite3changegroup_add(pGrp, nA, pA);</Line>
  <Line number="10906">**   if( rc==SQLITE_OK ) rc = sqlite3changegroup_add(pGrp, nB, pB);</Line>
  <Line number="10907">**   if( rc==SQLITE_OK ){</Line>
  <Line number="10908">**     rc = sqlite3changegroup_output(pGrp, pnOut, ppOut);</Line>
  <Line number="10909">**   }else{</Line>
  <Line number="10910">**     *ppOut = 0;</Line>
  <Line number="10911">**     *pnOut = 0;</Line>
  <Line number="10912">**   }</Line>
  <Line number="10913">** &lt;/pre&gt;</Line>
  <Line number="10914">**</Line>
  <Line number="10915">** Refer to the sqlite3_changegroup documentation below for details.</Line>
  <Line number="10916">*/</Line>
  <Line number="10917">SQLITE_API int sqlite3changeset_concat(</Line>
  <Line number="10918">  int nA,                         /* Number of bytes in buffer pA */</Line>
  <Line number="10919">  void *pA,                       /* Pointer to buffer containing changeset A */</Line>
  <Line number="10920">  int nB,                         /* Number of bytes in buffer pB */</Line>
  <Line number="10921">  void *pB,                       /* Pointer to buffer containing changeset B */</Line>
  <Line number="10922">  int *pnOut,                     /* OUT: Number of bytes in output changeset */</Line>
  <Line number="10923">  void **ppOut                    /* OUT: Buffer containing output changeset */</Line>
  <Line number="10924">);</Line>
  <Line number="10925"></Line>
  <Line number="10926"></Line>
  <Line number="10927">/*</Line>
  <Line number="10928">** CAPI3REF: Changegroup Handle</Line>
  <Line number="10929">**</Line>
  <Line number="10930">** A changegroup is an object used to combine two or more</Line>
  <Line number="10931">** [changesets] or [patchsets]</Line>
  <Line number="10932">*/</Line>
  <Line number="10933">typedef struct sqlite3_changegroup sqlite3_changegroup;</Line>
  <Line number="10934"></Line>
  <Line number="10935">/*</Line>
  <Line number="10936">** CAPI3REF: Create A New Changegroup Object</Line>
  <Line number="10937">** CONSTRUCTOR: sqlite3_changegroup</Line>
  <Line number="10938">**</Line>
  <Line number="10939">** An sqlite3_changegroup object is used to combine two or more changesets</Line>
  <Line number="10940">** (or patchsets) into a single changeset (or patchset). A single changegroup</Line>
  <Line number="10941">** object may combine changesets or patchsets, but not both. The output is</Line>
  <Line number="10942">** always in the same format as the input.</Line>
  <Line number="10943">**</Line>
  <Line number="10944">** If successful, this function returns SQLITE_OK and populates (*pp) with</Line>
  <Line number="10945">** a pointer to a new sqlite3_changegroup object before returning. The caller</Line>
  <Line number="10946">** should eventually free the returned object using a call to</Line>
  <Line number="10947">** sqlite3changegroup_delete(). If an error occurs, an SQLite error code</Line>
  <Line number="10948">** (i.e. SQLITE_NOMEM) is returned and *pp is set to NULL.</Line>
  <Line number="10949">**</Line>
  <Line number="10950">** The usual usage pattern for an sqlite3_changegroup object is as follows:</Line>
  <Line number="10951">**</Line>
  <Line number="10952">** &lt;ul&gt;</Line>
  <Line number="10953">**   &lt;li&gt; It is created using a call to sqlite3changegroup_new().</Line>
  <Line number="10954">**</Line>
  <Line number="10955">**   &lt;li&gt; Zero or more changesets (or patchsets) are added to the object</Line>
  <Line number="10956">**        by calling sqlite3changegroup_add().</Line>
  <Line number="10957">**</Line>
  <Line number="10958">**   &lt;li&gt; The result of combining all input changesets together is obtained</Line>
  <Line number="10959">**        by the application via a call to sqlite3changegroup_output().</Line>
  <Line number="10960">**</Line>
  <Line number="10961">**   &lt;li&gt; The object is deleted using a call to sqlite3changegroup_delete().</Line>
  <Line number="10962">** &lt;/ul&gt;</Line>
  <Line number="10963">**</Line>
  <Line number="10964">** Any number of calls to add() and output() may be made between the calls to</Line>
  <Line number="10965">** new() and delete(), and in any order.</Line>
  <Line number="10966">**</Line>
  <Line number="10967">** As well as the regular sqlite3changegroup_add() and</Line>
  <Line number="10968">** sqlite3changegroup_output() functions, also available are the streaming</Line>
  <Line number="10969">** versions sqlite3changegroup_add_strm() and sqlite3changegroup_output_strm().</Line>
  <Line number="10970">*/</Line>
  <Line number="10971">SQLITE_API int sqlite3changegroup_new(sqlite3_changegroup **pp);</Line>
  <Line number="10972"></Line>
  <Line number="10973">/*</Line>
  <Line number="10974">** CAPI3REF: Add A Changeset To A Changegroup</Line>
  <Line number="10975">** METHOD: sqlite3_changegroup</Line>
  <Line number="10976">**</Line>
  <Line number="10977">** Add all changes within the changeset (or patchset) in buffer pData (size</Line>
  <Line number="10978">** nData bytes) to the changegroup.</Line>
  <Line number="10979">**</Line>
  <Line number="10980">** If the buffer contains a patchset, then all prior calls to this function</Line>
  <Line number="10981">** on the same changegroup object must also have specified patchsets. Or, if</Line>
  <Line number="10982">** the buffer contains a changeset, so must have the earlier calls to this</Line>
  <Line number="10983">** function. Otherwise, SQLITE_ERROR is returned and no changes are added</Line>
  <Line number="10984">** to the changegroup.</Line>
  <Line number="10985">**</Line>
  <Line number="10986">** Rows within the changeset and changegroup are identified by the values in</Line>
  <Line number="10987">** their PRIMARY KEY columns. A change in the changeset is considered to</Line>
  <Line number="10988">** apply to the same row as a change already present in the changegroup if</Line>
  <Line number="10989">** the two rows have the same primary key.</Line>
  <Line number="10990">**</Line>
  <Line number="10991">** Changes to rows that do not already appear in the changegroup are</Line>
  <Line number="10992">** simply copied into it. Or, if both the new changeset and the changegroup</Line>
  <Line number="10993">** contain changes that apply to a single row, the final contents of the</Line>
  <Line number="10994">** changegroup depends on the type of each change, as follows:</Line>
  <Line number="10995">**</Line>
  <Line number="10996">** &lt;table border=1 style=&quot;margin-left:8ex;margin-right:8ex&quot;&gt;</Line>
  <Line number="10997">**   &lt;tr&gt;&lt;th style=&quot;white-space:pre&quot;&gt;Existing Change  &lt;/th&gt;</Line>
  <Line number="10998">**       &lt;th style=&quot;white-space:pre&quot;&gt;New Change       &lt;/th&gt;</Line>
  <Line number="10999">**       &lt;th&gt;Output Change</Line>
  <Line number="11000">**   &lt;tr&gt;&lt;td&gt;INSERT &lt;td&gt;INSERT &lt;td&gt;</Line>
  <Line number="11001">**       The new change is ignored. This case does not occur if the new</Line>
  <Line number="11002">**       changeset was recorded immediately after the changesets already</Line>
  <Line number="11003">**       added to the changegroup.</Line>
  <Line number="11004">**   &lt;tr&gt;&lt;td&gt;INSERT &lt;td&gt;UPDATE &lt;td&gt;</Line>
  <Line number="11005">**       The INSERT change remains in the changegroup. The values in the</Line>
  <Line number="11006">**       INSERT change are modified as if the row was inserted by the</Line>
  <Line number="11007">**       existing change and then updated according to the new change.</Line>
  <Line number="11008">**   &lt;tr&gt;&lt;td&gt;INSERT &lt;td&gt;DELETE &lt;td&gt;</Line>
  <Line number="11009">**       The existing INSERT is removed from the changegroup. The DELETE is</Line>
  <Line number="11010">**       not added.</Line>
  <Line number="11011">**   &lt;tr&gt;&lt;td&gt;UPDATE &lt;td&gt;INSERT &lt;td&gt;</Line>
  <Line number="11012">**       The new change is ignored. This case does not occur if the new</Line>
  <Line number="11013">**       changeset was recorded immediately after the changesets already</Line>
  <Line number="11014">**       added to the changegroup.</Line>
  <Line number="11015">**   &lt;tr&gt;&lt;td&gt;UPDATE &lt;td&gt;UPDATE &lt;td&gt;</Line>
  <Line number="11016">**       The existing UPDATE remains within the changegroup. It is amended</Line>
  <Line number="11017">**       so that the accompanying values are as if the row was updated once</Line>
  <Line number="11018">**       by the existing change and then again by the new change.</Line>
  <Line number="11019">**   &lt;tr&gt;&lt;td&gt;UPDATE &lt;td&gt;DELETE &lt;td&gt;</Line>
  <Line number="11020">**       The existing UPDATE is replaced by the new DELETE within the</Line>
  <Line number="11021">**       changegroup.</Line>
  <Line number="11022">**   &lt;tr&gt;&lt;td&gt;DELETE &lt;td&gt;INSERT &lt;td&gt;</Line>
  <Line number="11023">**       If one or more of the column values in the row inserted by the</Line>
  <Line number="11024">**       new change differ from those in the row deleted by the existing</Line>
  <Line number="11025">**       change, the existing DELETE is replaced by an UPDATE within the</Line>
  <Line number="11026">**       changegroup. Otherwise, if the inserted row is exactly the same</Line>
  <Line number="11027">**       as the deleted row, the existing DELETE is simply discarded.</Line>
  <Line number="11028">**   &lt;tr&gt;&lt;td&gt;DELETE &lt;td&gt;UPDATE &lt;td&gt;</Line>
  <Line number="11029">**       The new change is ignored. This case does not occur if the new</Line>
  <Line number="11030">**       changeset was recorded immediately after the changesets already</Line>
  <Line number="11031">**       added to the changegroup.</Line>
  <Line number="11032">**   &lt;tr&gt;&lt;td&gt;DELETE &lt;td&gt;DELETE &lt;td&gt;</Line>
  <Line number="11033">**       The new change is ignored. This case does not occur if the new</Line>
  <Line number="11034">**       changeset was recorded immediately after the changesets already</Line>
  <Line number="11035">**       added to the changegroup.</Line>
  <Line number="11036">** &lt;/table&gt;</Line>
  <Line number="11037">**</Line>
  <Line number="11038">** If the new changeset contains changes to a table that is already present</Line>
  <Line number="11039">** in the changegroup, then the number of columns and the position of the</Line>
  <Line number="11040">** primary key columns for the table must be consistent. If this is not the</Line>
  <Line number="11041">** case, this function fails with SQLITE_SCHEMA. If the input changeset</Line>
  <Line number="11042">** appears to be corrupt and the corruption is detected, SQLITE_CORRUPT is</Line>
  <Line number="11043">** returned. Or, if an out-of-memory condition occurs during processing, this</Line>
  <Line number="11044">** function returns SQLITE_NOMEM. In all cases, if an error occurs the state</Line>
  <Line number="11045">** of the final contents of the changegroup is undefined.</Line>
  <Line number="11046">**</Line>
  <Line number="11047">** If no error occurs, SQLITE_OK is returned.</Line>
  <Line number="11048">*/</Line>
  <Line number="11049">SQLITE_API int sqlite3changegroup_add(sqlite3_changegroup*, int nData, void *pData);</Line>
  <Line number="11050"></Line>
  <Line number="11051">/*</Line>
  <Line number="11052">** CAPI3REF: Obtain A Composite Changeset From A Changegroup</Line>
  <Line number="11053">** METHOD: sqlite3_changegroup</Line>
  <Line number="11054">**</Line>
  <Line number="11055">** Obtain a buffer containing a changeset (or patchset) representing the</Line>
  <Line number="11056">** current contents of the changegroup. If the inputs to the changegroup</Line>
  <Line number="11057">** were themselves changesets, the output is a changeset. Or, if the</Line>
  <Line number="11058">** inputs were patchsets, the output is also a patchset.</Line>
  <Line number="11059">**</Line>
  <Line number="11060">** As with the output of the sqlite3session_changeset() and</Line>
  <Line number="11061">** sqlite3session_patchset() functions, all changes related to a single</Line>
  <Line number="11062">** table are grouped together in the output of this function. Tables appear</Line>
  <Line number="11063">** in the same order as for the very first changeset added to the changegroup.</Line>
  <Line number="11064">** If the second or subsequent changesets added to the changegroup contain</Line>
  <Line number="11065">** changes for tables that do not appear in the first changeset, they are</Line>
  <Line number="11066">** appended onto the end of the output changeset, again in the order in</Line>
  <Line number="11067">** which they are first encountered.</Line>
  <Line number="11068">**</Line>
  <Line number="11069">** If an error occurs, an SQLite error code is returned and the output</Line>
  <Line number="11070">** variables (*pnData) and (*ppData) are set to 0. Otherwise, SQLITE_OK</Line>
  <Line number="11071">** is returned and the output variables are set to the size of and a</Line>
  <Line number="11072">** pointer to the output buffer, respectively. In this case it is the</Line>
  <Line number="11073">** responsibility of the caller to eventually free the buffer using a</Line>
  <Line number="11074">** call to sqlite3_free().</Line>
  <Line number="11075">*/</Line>
  <Line number="11076">SQLITE_API int sqlite3changegroup_output(</Line>
  <Line number="11077">  sqlite3_changegroup*,</Line>
  <Line number="11078">  int *pnData,                    /* OUT: Size of output buffer in bytes */</Line>
  <Line number="11079">  void **ppData                   /* OUT: Pointer to output buffer */</Line>
  <Line number="11080">);</Line>
  <Line number="11081"></Line>
  <Line number="11082">/*</Line>
  <Line number="11083">** CAPI3REF: Delete A Changegroup Object</Line>
  <Line number="11084">** DESTRUCTOR: sqlite3_changegroup</Line>
  <Line number="11085">*/</Line>
  <Line number="11086">SQLITE_API void sqlite3changegroup_delete(sqlite3_changegroup*);</Line>
  <Line number="11087"></Line>
  <Line number="11088">/*</Line>
  <Line number="11089">** CAPI3REF: Apply A Changeset To A Database</Line>
  <Line number="11090">**</Line>
  <Line number="11091">** Apply a changeset or patchset to a database. These functions attempt to</Line>
  <Line number="11092">** update the &quot;main&quot; database attached to handle db with the changes found in</Line>
  <Line number="11093">** the changeset passed via the second and third arguments.</Line>
  <Line number="11094">**</Line>
  <Line number="11095">** The fourth argument (xFilter) passed to these functions is the &quot;filter</Line>
  <Line number="11096">** callback&quot;. If it is not NULL, then for each table affected by at least one</Line>
  <Line number="11097">** change in the changeset, the filter callback is invoked with</Line>
  <Line number="11098">** the table name as the second argument, and a copy of the context pointer</Line>
  <Line number="11099">** passed as the sixth argument as the first. If the &quot;filter callback&quot;</Line>
  <Line number="11100">** returns zero, then no attempt is made to apply any changes to the table.</Line>
  <Line number="11101">** Otherwise, if the return value is non-zero or the xFilter argument to</Line>
  <Line number="11102">** is NULL, all changes related to the table are attempted.</Line>
  <Line number="11103">**</Line>
  <Line number="11104">** For each table that is not excluded by the filter callback, this function</Line>
  <Line number="11105">** tests that the target database contains a compatible table. A table is</Line>
  <Line number="11106">** considered compatible if all of the following are true:</Line>
  <Line number="11107">**</Line>
  <Line number="11108">** &lt;ul&gt;</Line>
  <Line number="11109">**   &lt;li&gt; The table has the same name as the name recorded in the</Line>
  <Line number="11110">**        changeset, and</Line>
  <Line number="11111">**   &lt;li&gt; The table has at least as many columns as recorded in the</Line>
  <Line number="11112">**        changeset, and</Line>
  <Line number="11113">**   &lt;li&gt; The table has primary key columns in the same position as</Line>
  <Line number="11114">**        recorded in the changeset.</Line>
  <Line number="11115">** &lt;/ul&gt;</Line>
  <Line number="11116">**</Line>
  <Line number="11117">** If there is no compatible table, it is not an error, but none of the</Line>
  <Line number="11118">** changes associated with the table are applied. A warning message is issued</Line>
  <Line number="11119">** via the sqlite3_log() mechanism with the error code SQLITE_SCHEMA. At most</Line>
  <Line number="11120">** one such warning is issued for each table in the changeset.</Line>
  <Line number="11121">**</Line>
  <Line number="11122">** For each change for which there is a compatible table, an attempt is made</Line>
  <Line number="11123">** to modify the table contents according to the UPDATE, INSERT or DELETE</Line>
  <Line number="11124">** change. If a change cannot be applied cleanly, the conflict handler</Line>
  <Line number="11125">** function passed as the fifth argument to sqlite3changeset_apply() may be</Line>
  <Line number="11126">** invoked. A description of exactly when the conflict handler is invoked for</Line>
  <Line number="11127">** each type of change is below.</Line>
  <Line number="11128">**</Line>
  <Line number="11129">** Unlike the xFilter argument, xConflict may not be passed NULL. The results</Line>
  <Line number="11130">** of passing anything other than a valid function pointer as the xConflict</Line>
  <Line number="11131">** argument are undefined.</Line>
  <Line number="11132">**</Line>
  <Line number="11133">** Each time the conflict handler function is invoked, it must return one</Line>
  <Line number="11134">** of [SQLITE_CHANGESET_OMIT], [SQLITE_CHANGESET_ABORT] or</Line>
  <Line number="11135">** [SQLITE_CHANGESET_REPLACE]. SQLITE_CHANGESET_REPLACE may only be returned</Line>
  <Line number="11136">** if the second argument passed to the conflict handler is either</Line>
  <Line number="11137">** SQLITE_CHANGESET_DATA or SQLITE_CHANGESET_CONFLICT. If the conflict-handler</Line>
  <Line number="11138">** returns an illegal value, any changes already made are rolled back and</Line>
  <Line number="11139">** the call to sqlite3changeset_apply() returns SQLITE_MISUSE. Different</Line>
  <Line number="11140">** actions are taken by sqlite3changeset_apply() depending on the value</Line>
  <Line number="11141">** returned by each invocation of the conflict-handler function. Refer to</Line>
  <Line number="11142">** the documentation for the three</Line>
  <Line number="11143">** [SQLITE_CHANGESET_OMIT|available return values] for details.</Line>
  <Line number="11144">**</Line>
  <Line number="11145">** &lt;dl&gt;</Line>
  <Line number="11146">** &lt;dt&gt;DELETE Changes&lt;dd&gt;</Line>
  <Line number="11147">**   For each DELETE change, the function checks if the target database</Line>
  <Line number="11148">**   contains a row with the same primary key value (or values) as the</Line>
  <Line number="11149">**   original row values stored in the changeset. If it does, and the values</Line>
  <Line number="11150">**   stored in all non-primary key columns also match the values stored in</Line>
  <Line number="11151">**   the changeset the row is deleted from the target database.</Line>
  <Line number="11152">**</Line>
  <Line number="11153">**   If a row with matching primary key values is found, but one or more of</Line>
  <Line number="11154">**   the non-primary key fields contains a value different from the original</Line>
  <Line number="11155">**   row value stored in the changeset, the conflict-handler function is</Line>
  <Line number="11156">**   invoked with [SQLITE_CHANGESET_DATA] as the second argument. If the</Line>
  <Line number="11157">**   database table has more columns than are recorded in the changeset,</Line>
  <Line number="11158">**   only the values of those non-primary key fields are compared against</Line>
  <Line number="11159">**   the current database contents - any trailing database table columns</Line>
  <Line number="11160">**   are ignored.</Line>
  <Line number="11161">**</Line>
  <Line number="11162">**   If no row with matching primary key values is found in the database,</Line>
  <Line number="11163">**   the conflict-handler function is invoked with [SQLITE_CHANGESET_NOTFOUND]</Line>
  <Line number="11164">**   passed as the second argument.</Line>
  <Line number="11165">**</Line>
  <Line number="11166">**   If the DELETE operation is attempted, but SQLite returns SQLITE_CONSTRAINT</Line>
  <Line number="11167">**   (which can only happen if a foreign key constraint is violated), the</Line>
  <Line number="11168">**   conflict-handler function is invoked with [SQLITE_CHANGESET_CONSTRAINT]</Line>
  <Line number="11169">**   passed as the second argument. This includes the case where the DELETE</Line>
  <Line number="11170">**   operation is attempted because an earlier call to the conflict handler</Line>
  <Line number="11171">**   function returned [SQLITE_CHANGESET_REPLACE].</Line>
  <Line number="11172">**</Line>
  <Line number="11173">** &lt;dt&gt;INSERT Changes&lt;dd&gt;</Line>
  <Line number="11174">**   For each INSERT change, an attempt is made to insert the new row into</Line>
  <Line number="11175">**   the database. If the changeset row contains fewer fields than the</Line>
  <Line number="11176">**   database table, the trailing fields are populated with their default</Line>
  <Line number="11177">**   values.</Line>
  <Line number="11178">**</Line>
  <Line number="11179">**   If the attempt to insert the row fails because the database already</Line>
  <Line number="11180">**   contains a row with the same primary key values, the conflict handler</Line>
  <Line number="11181">**   function is invoked with the second argument set to</Line>
  <Line number="11182">**   [SQLITE_CHANGESET_CONFLICT].</Line>
  <Line number="11183">**</Line>
  <Line number="11184">**   If the attempt to insert the row fails because of some other constraint</Line>
  <Line number="11185">**   violation (e.g. NOT NULL or UNIQUE), the conflict handler function is</Line>
  <Line number="11186">**   invoked with the second argument set to [SQLITE_CHANGESET_CONSTRAINT].</Line>
  <Line number="11187">**   This includes the case where the INSERT operation is re-attempted because</Line>
  <Line number="11188">**   an earlier call to the conflict handler function returned</Line>
  <Line number="11189">**   [SQLITE_CHANGESET_REPLACE].</Line>
  <Line number="11190">**</Line>
  <Line number="11191">** &lt;dt&gt;UPDATE Changes&lt;dd&gt;</Line>
  <Line number="11192">**   For each UPDATE change, the function checks if the target database</Line>
  <Line number="11193">**   contains a row with the same primary key value (or values) as the</Line>
  <Line number="11194">**   original row values stored in the changeset. If it does, and the values</Line>
  <Line number="11195">**   stored in all modified non-primary key columns also match the values</Line>
  <Line number="11196">**   stored in the changeset the row is updated within the target database.</Line>
  <Line number="11197">**</Line>
  <Line number="11198">**   If a row with matching primary key values is found, but one or more of</Line>
  <Line number="11199">**   the modified non-primary key fields contains a value different from an</Line>
  <Line number="11200">**   original row value stored in the changeset, the conflict-handler function</Line>
  <Line number="11201">**   is invoked with [SQLITE_CHANGESET_DATA] as the second argument. Since</Line>
  <Line number="11202">**   UPDATE changes only contain values for non-primary key fields that are</Line>
  <Line number="11203">**   to be modified, only those fields need to match the original values to</Line>
  <Line number="11204">**   avoid the SQLITE_CHANGESET_DATA conflict-handler callback.</Line>
  <Line number="11205">**</Line>
  <Line number="11206">**   If no row with matching primary key values is found in the database,</Line>
  <Line number="11207">**   the conflict-handler function is invoked with [SQLITE_CHANGESET_NOTFOUND]</Line>
  <Line number="11208">**   passed as the second argument.</Line>
  <Line number="11209">**</Line>
  <Line number="11210">**   If the UPDATE operation is attempted, but SQLite returns</Line>
  <Line number="11211">**   SQLITE_CONSTRAINT, the conflict-handler function is invoked with</Line>
  <Line number="11212">**   [SQLITE_CHANGESET_CONSTRAINT] passed as the second argument.</Line>
  <Line number="11213">**   This includes the case where the UPDATE operation is attempted after</Line>
  <Line number="11214">**   an earlier call to the conflict handler function returned</Line>
  <Line number="11215">**   [SQLITE_CHANGESET_REPLACE].</Line>
  <Line number="11216">** &lt;/dl&gt;</Line>
  <Line number="11217">**</Line>
  <Line number="11218">** It is safe to execute SQL statements, including those that write to the</Line>
  <Line number="11219">** table that the callback related to, from within the xConflict callback.</Line>
  <Line number="11220">** This can be used to further customize the application&apos;s conflict</Line>
  <Line number="11221">** resolution strategy.</Line>
  <Line number="11222">**</Line>
  <Line number="11223">** All changes made by these functions are enclosed in a savepoint transaction.</Line>
  <Line number="11224">** If any other error (aside from a constraint failure when attempting to</Line>
  <Line number="11225">** write to the target database) occurs, then the savepoint transaction is</Line>
  <Line number="11226">** rolled back, restoring the target database to its original state, and an</Line>
  <Line number="11227">** SQLite error code returned.</Line>
  <Line number="11228">**</Line>
  <Line number="11229">** If the output parameters (ppRebase) and (pnRebase) are non-NULL and</Line>
  <Line number="11230">** the input is a changeset (not a patchset), then sqlite3changeset_apply_v2()</Line>
  <Line number="11231">** may set (*ppRebase) to point to a &quot;rebase&quot; that may be used with the</Line>
  <Line number="11232">** sqlite3_rebaser APIs buffer before returning. In this case (*pnRebase)</Line>
  <Line number="11233">** is set to the size of the buffer in bytes. It is the responsibility of the</Line>
  <Line number="11234">** caller to eventually free any such buffer using sqlite3_free(). The buffer</Line>
  <Line number="11235">** is only allocated and populated if one or more conflicts were encountered</Line>
  <Line number="11236">** while applying the patchset. See comments surrounding the sqlite3_rebaser</Line>
  <Line number="11237">** APIs for further details.</Line>
  <Line number="11238">**</Line>
  <Line number="11239">** The behavior of sqlite3changeset_apply_v2() and its streaming equivalent</Line>
  <Line number="11240">** may be modified by passing a combination of</Line>
  <Line number="11241">** [SQLITE_CHANGESETAPPLY_NOSAVEPOINT | supported flags] as the 9th parameter.</Line>
  <Line number="11242">**</Line>
  <Line number="11243">** Note that the sqlite3changeset_apply_v2() API is still &lt;b&gt;experimental&lt;/b&gt;</Line>
  <Line number="11244">** and therefore subject to change.</Line>
  <Line number="11245">*/</Line>
  <Line number="11246">SQLITE_API int sqlite3changeset_apply(</Line>
  <Line number="11247">  sqlite3 *db,                    /* Apply change to &quot;main&quot; db of this handle */</Line>
  <Line number="11248">  int nChangeset,                 /* Size of changeset in bytes */</Line>
  <Line number="11249">  void *pChangeset,               /* Changeset blob */</Line>
  <Line number="11250">  int(*xFilter)(</Line>
  <Line number="11251">    void *pCtx,                   /* Copy of sixth arg to _apply() */</Line>
  <Line number="11252">    const char *zTab              /* Table name */</Line>
  <Line number="11253">  ),</Line>
  <Line number="11254">  int(*xConflict)(</Line>
  <Line number="11255">    void *pCtx,                   /* Copy of sixth arg to _apply() */</Line>
  <Line number="11256">    int eConflict,                /* DATA, MISSING, CONFLICT, CONSTRAINT */</Line>
  <Line number="11257">    sqlite3_changeset_iter *p     /* Handle describing change and conflict */</Line>
  <Line number="11258">  ),</Line>
  <Line number="11259">  void *pCtx                      /* First argument passed to xConflict */</Line>
  <Line number="11260">);</Line>
  <Line number="11261">SQLITE_API int sqlite3changeset_apply_v2(</Line>
  <Line number="11262">  sqlite3 *db,                    /* Apply change to &quot;main&quot; db of this handle */</Line>
  <Line number="11263">  int nChangeset,                 /* Size of changeset in bytes */</Line>
  <Line number="11264">  void *pChangeset,               /* Changeset blob */</Line>
  <Line number="11265">  int(*xFilter)(</Line>
  <Line number="11266">    void *pCtx,                   /* Copy of sixth arg to _apply() */</Line>
  <Line number="11267">    const char *zTab              /* Table name */</Line>
  <Line number="11268">  ),</Line>
  <Line number="11269">  int(*xConflict)(</Line>
  <Line number="11270">    void *pCtx,                   /* Copy of sixth arg to _apply() */</Line>
  <Line number="11271">    int eConflict,                /* DATA, MISSING, CONFLICT, CONSTRAINT */</Line>
  <Line number="11272">    sqlite3_changeset_iter *p     /* Handle describing change and conflict */</Line>
  <Line number="11273">  ),</Line>
  <Line number="11274">  void *pCtx,                     /* First argument passed to xConflict */</Line>
  <Line number="11275">  void **ppRebase, int *pnRebase, /* OUT: Rebase data */</Line>
  <Line number="11276">  int flags                       /* SESSION_CHANGESETAPPLY_* flags */</Line>
  <Line number="11277">);</Line>
  <Line number="11278"></Line>
  <Line number="11279">/*</Line>
  <Line number="11280">** CAPI3REF: Flags for sqlite3changeset_apply_v2</Line>
  <Line number="11281">**</Line>
  <Line number="11282">** The following flags may passed via the 9th parameter to</Line>
  <Line number="11283">** [sqlite3changeset_apply_v2] and [sqlite3changeset_apply_v2_strm]:</Line>
  <Line number="11284">**</Line>
  <Line number="11285">** &lt;dl&gt;</Line>
  <Line number="11286">** &lt;dt&gt;SQLITE_CHANGESETAPPLY_NOSAVEPOINT &lt;dd&gt;</Line>
  <Line number="11287">**   Usually, the sessions module encloses all operations performed by</Line>
  <Line number="11288">**   a single call to apply_v2() or apply_v2_strm() in a [SAVEPOINT]. The</Line>
  <Line number="11289">**   SAVEPOINT is committed if the changeset or patchset is successfully</Line>
  <Line number="11290">**   applied, or rolled back if an error occurs. Specifying this flag</Line>
  <Line number="11291">**   causes the sessions module to omit this savepoint. In this case, if the</Line>
  <Line number="11292">**   caller has an open transaction or savepoint when apply_v2() is called,</Line>
  <Line number="11293">**   it may revert the partially applied changeset by rolling it back.</Line>
  <Line number="11294">**</Line>
  <Line number="11295">** &lt;dt&gt;SQLITE_CHANGESETAPPLY_INVERT &lt;dd&gt;</Line>
  <Line number="11296">**   Invert the changeset before applying it. This is equivalent to inverting</Line>
  <Line number="11297">**   a changeset using sqlite3changeset_invert() before applying it. It is</Line>
  <Line number="11298">**   an error to specify this flag with a patchset.</Line>
  <Line number="11299">*/</Line>
  <Line number="11300">#define SQLITE_CHANGESETAPPLY_NOSAVEPOINT   0x0001</Line>
  <Line number="11301">#define SQLITE_CHANGESETAPPLY_INVERT        0x0002</Line>
  <Line number="11302"></Line>
  <Line number="11303">/*</Line>
  <Line number="11304">** CAPI3REF: Constants Passed To The Conflict Handler</Line>
  <Line number="11305">**</Line>
  <Line number="11306">** Values that may be passed as the second argument to a conflict-handler.</Line>
  <Line number="11307">**</Line>
  <Line number="11308">** &lt;dl&gt;</Line>
  <Line number="11309">** &lt;dt&gt;SQLITE_CHANGESET_DATA&lt;dd&gt;</Line>
  <Line number="11310">**   The conflict handler is invoked with CHANGESET_DATA as the second argument</Line>
  <Line number="11311">**   when processing a DELETE or UPDATE change if a row with the required</Line>
  <Line number="11312">**   PRIMARY KEY fields is present in the database, but one or more other</Line>
  <Line number="11313">**   (non primary-key) fields modified by the update do not contain the</Line>
  <Line number="11314">**   expected &quot;before&quot; values.</Line>
  <Line number="11315">**</Line>
  <Line number="11316">**   The conflicting row, in this case, is the database row with the matching</Line>
  <Line number="11317">**   primary key.</Line>
  <Line number="11318">**</Line>
  <Line number="11319">** &lt;dt&gt;SQLITE_CHANGESET_NOTFOUND&lt;dd&gt;</Line>
  <Line number="11320">**   The conflict handler is invoked with CHANGESET_NOTFOUND as the second</Line>
  <Line number="11321">**   argument when processing a DELETE or UPDATE change if a row with the</Line>
  <Line number="11322">**   required PRIMARY KEY fields is not present in the database.</Line>
  <Line number="11323">**</Line>
  <Line number="11324">**   There is no conflicting row in this case. The results of invoking the</Line>
  <Line number="11325">**   sqlite3changeset_conflict() API are undefined.</Line>
  <Line number="11326">**</Line>
  <Line number="11327">** &lt;dt&gt;SQLITE_CHANGESET_CONFLICT&lt;dd&gt;</Line>
  <Line number="11328">**   CHANGESET_CONFLICT is passed as the second argument to the conflict</Line>
  <Line number="11329">**   handler while processing an INSERT change if the operation would result</Line>
  <Line number="11330">**   in duplicate primary key values.</Line>
  <Line number="11331">**</Line>
  <Line number="11332">**   The conflicting row in this case is the database row with the matching</Line>
  <Line number="11333">**   primary key.</Line>
  <Line number="11334">**</Line>
  <Line number="11335">** &lt;dt&gt;SQLITE_CHANGESET_FOREIGN_KEY&lt;dd&gt;</Line>
  <Line number="11336">**   If foreign key handling is enabled, and applying a changeset leaves the</Line>
  <Line number="11337">**   database in a state containing foreign key violations, the conflict</Line>
  <Line number="11338">**   handler is invoked with CHANGESET_FOREIGN_KEY as the second argument</Line>
  <Line number="11339">**   exactly once before the changeset is committed. If the conflict handler</Line>
  <Line number="11340">**   returns CHANGESET_OMIT, the changes, including those that caused the</Line>
  <Line number="11341">**   foreign key constraint violation, are committed. Or, if it returns</Line>
  <Line number="11342">**   CHANGESET_ABORT, the changeset is rolled back.</Line>
  <Line number="11343">**</Line>
  <Line number="11344">**   No current or conflicting row information is provided. The only function</Line>
  <Line number="11345">**   it is possible to call on the supplied sqlite3_changeset_iter handle</Line>
  <Line number="11346">**   is sqlite3changeset_fk_conflicts().</Line>
  <Line number="11347">**</Line>
  <Line number="11348">** &lt;dt&gt;SQLITE_CHANGESET_CONSTRAINT&lt;dd&gt;</Line>
  <Line number="11349">**   If any other constraint violation occurs while applying a change (i.e.</Line>
  <Line number="11350">**   a UNIQUE, CHECK or NOT NULL constraint), the conflict handler is</Line>
  <Line number="11351">**   invoked with CHANGESET_CONSTRAINT as the second argument.</Line>
  <Line number="11352">**</Line>
  <Line number="11353">**   There is no conflicting row in this case. The results of invoking the</Line>
  <Line number="11354">**   sqlite3changeset_conflict() API are undefined.</Line>
  <Line number="11355">**</Line>
  <Line number="11356">** &lt;/dl&gt;</Line>
  <Line number="11357">*/</Line>
  <Line number="11358">#define SQLITE_CHANGESET_DATA        1</Line>
  <Line number="11359">#define SQLITE_CHANGESET_NOTFOUND    2</Line>
  <Line number="11360">#define SQLITE_CHANGESET_CONFLICT    3</Line>
  <Line number="11361">#define SQLITE_CHANGESET_CONSTRAINT  4</Line>
  <Line number="11362">#define SQLITE_CHANGESET_FOREIGN_KEY 5</Line>
  <Line number="11363"></Line>
  <Line number="11364">/*</Line>
  <Line number="11365">** CAPI3REF: Constants Returned By The Conflict Handler</Line>
  <Line number="11366">**</Line>
  <Line number="11367">** A conflict handler callback must return one of the following three values.</Line>
  <Line number="11368">**</Line>
  <Line number="11369">** &lt;dl&gt;</Line>
  <Line number="11370">** &lt;dt&gt;SQLITE_CHANGESET_OMIT&lt;dd&gt;</Line>
  <Line number="11371">**   If a conflict handler returns this value no special action is taken. The</Line>
  <Line number="11372">**   change that caused the conflict is not applied. The session module</Line>
  <Line number="11373">**   continues to the next change in the changeset.</Line>
  <Line number="11374">**</Line>
  <Line number="11375">** &lt;dt&gt;SQLITE_CHANGESET_REPLACE&lt;dd&gt;</Line>
  <Line number="11376">**   This value may only be returned if the second argument to the conflict</Line>
  <Line number="11377">**   handler was SQLITE_CHANGESET_DATA or SQLITE_CHANGESET_CONFLICT. If this</Line>
  <Line number="11378">**   is not the case, any changes applied so far are rolled back and the</Line>
  <Line number="11379">**   call to sqlite3changeset_apply() returns SQLITE_MISUSE.</Line>
  <Line number="11380">**</Line>
  <Line number="11381">**   If CHANGESET_REPLACE is returned by an SQLITE_CHANGESET_DATA conflict</Line>
  <Line number="11382">**   handler, then the conflicting row is either updated or deleted, depending</Line>
  <Line number="11383">**   on the type of change.</Line>
  <Line number="11384">**</Line>
  <Line number="11385">**   If CHANGESET_REPLACE is returned by an SQLITE_CHANGESET_CONFLICT conflict</Line>
  <Line number="11386">**   handler, then the conflicting row is removed from the database and a</Line>
  <Line number="11387">**   second attempt to apply the change is made. If this second attempt fails,</Line>
  <Line number="11388">**   the original row is restored to the database before continuing.</Line>
  <Line number="11389">**</Line>
  <Line number="11390">** &lt;dt&gt;SQLITE_CHANGESET_ABORT&lt;dd&gt;</Line>
  <Line number="11391">**   If this value is returned, any changes applied so far are rolled back</Line>
  <Line number="11392">**   and the call to sqlite3changeset_apply() returns SQLITE_ABORT.</Line>
  <Line number="11393">** &lt;/dl&gt;</Line>
  <Line number="11394">*/</Line>
  <Line number="11395">#define SQLITE_CHANGESET_OMIT       0</Line>
  <Line number="11396">#define SQLITE_CHANGESET_REPLACE    1</Line>
  <Line number="11397">#define SQLITE_CHANGESET_ABORT      2</Line>
  <Line number="11398"></Line>
  <Line number="11399">/*</Line>
  <Line number="11400">** CAPI3REF: Rebasing changesets</Line>
  <Line number="11401">** EXPERIMENTAL</Line>
  <Line number="11402">**</Line>
  <Line number="11403">** Suppose there is a site hosting a database in state S0. And that</Line>
  <Line number="11404">** modifications are made that move that database to state S1 and a</Line>
  <Line number="11405">** changeset recorded (the &quot;local&quot; changeset). Then, a changeset based</Line>
  <Line number="11406">** on S0 is received from another site (the &quot;remote&quot; changeset) and</Line>
  <Line number="11407">** applied to the database. The database is then in state</Line>
  <Line number="11408">** (S1+&quot;remote&quot;), where the exact state depends on any conflict</Line>
  <Line number="11409">** resolution decisions (OMIT or REPLACE) made while applying &quot;remote&quot;.</Line>
  <Line number="11410">** Rebasing a changeset is to update it to take those conflict</Line>
  <Line number="11411">** resolution decisions into account, so that the same conflicts</Line>
  <Line number="11412">** do not have to be resolved elsewhere in the network.</Line>
  <Line number="11413">**</Line>
  <Line number="11414">** For example, if both the local and remote changesets contain an</Line>
  <Line number="11415">** INSERT of the same key on &quot;CREATE TABLE t1(a PRIMARY KEY, b)&quot;:</Line>
  <Line number="11416">**</Line>
  <Line number="11417">**   local:  INSERT INTO t1 VALUES(1, &apos;v1&apos;);</Line>
  <Line number="11418">**   remote: INSERT INTO t1 VALUES(1, &apos;v2&apos;);</Line>
  <Line number="11419">**</Line>
  <Line number="11420">** and the conflict resolution is REPLACE, then the INSERT change is</Line>
  <Line number="11421">** removed from the local changeset (it was overridden). Or, if the</Line>
  <Line number="11422">** conflict resolution was &quot;OMIT&quot;, then the local changeset is modified</Line>
  <Line number="11423">** to instead contain:</Line>
  <Line number="11424">**</Line>
  <Line number="11425">**           UPDATE t1 SET b = &apos;v2&apos; WHERE a=1;</Line>
  <Line number="11426">**</Line>
  <Line number="11427">** Changes within the local changeset are rebased as follows:</Line>
  <Line number="11428">**</Line>
  <Line number="11429">** &lt;dl&gt;</Line>
  <Line number="11430">** &lt;dt&gt;Local INSERT&lt;dd&gt;</Line>
  <Line number="11431">**   This may only conflict with a remote INSERT. If the conflict</Line>
  <Line number="11432">**   resolution was OMIT, then add an UPDATE change to the rebased</Line>
  <Line number="11433">**   changeset. Or, if the conflict resolution was REPLACE, add</Line>
  <Line number="11434">**   nothing to the rebased changeset.</Line>
  <Line number="11435">**</Line>
  <Line number="11436">** &lt;dt&gt;Local DELETE&lt;dd&gt;</Line>
  <Line number="11437">**   This may conflict with a remote UPDATE or DELETE. In both cases the</Line>
  <Line number="11438">**   only possible resolution is OMIT. If the remote operation was a</Line>
  <Line number="11439">**   DELETE, then add no change to the rebased changeset. If the remote</Line>
  <Line number="11440">**   operation was an UPDATE, then the old.* fields of change are updated</Line>
  <Line number="11441">**   to reflect the new.* values in the UPDATE.</Line>
  <Line number="11442">**</Line>
  <Line number="11443">** &lt;dt&gt;Local UPDATE&lt;dd&gt;</Line>
  <Line number="11444">**   This may conflict with a remote UPDATE or DELETE. If it conflicts</Line>
  <Line number="11445">**   with a DELETE, and the conflict resolution was OMIT, then the update</Line>
  <Line number="11446">**   is changed into an INSERT. Any undefined values in the new.* record</Line>
  <Line number="11447">**   from the update change are filled in using the old.* values from</Line>
  <Line number="11448">**   the conflicting DELETE. Or, if the conflict resolution was REPLACE,</Line>
  <Line number="11449">**   the UPDATE change is simply omitted from the rebased changeset.</Line>
  <Line number="11450">**</Line>
  <Line number="11451">**   If conflict is with a remote UPDATE and the resolution is OMIT, then</Line>
  <Line number="11452">**   the old.* values are rebased using the new.* values in the remote</Line>
  <Line number="11453">**   change. Or, if the resolution is REPLACE, then the change is copied</Line>
  <Line number="11454">**   into the rebased changeset with updates to columns also updated by</Line>
  <Line number="11455">**   the conflicting remote UPDATE removed. If this means no columns would</Line>
  <Line number="11456">**   be updated, the change is omitted.</Line>
  <Line number="11457">** &lt;/dl&gt;</Line>
  <Line number="11458">**</Line>
  <Line number="11459">** A local change may be rebased against multiple remote changes</Line>
  <Line number="11460">** simultaneously. If a single key is modified by multiple remote</Line>
  <Line number="11461">** changesets, they are combined as follows before the local changeset</Line>
  <Line number="11462">** is rebased:</Line>
  <Line number="11463">**</Line>
  <Line number="11464">** &lt;ul&gt;</Line>
  <Line number="11465">**    &lt;li&gt; If there has been one or more REPLACE resolutions on a</Line>
  <Line number="11466">**         key, it is rebased according to a REPLACE.</Line>
  <Line number="11467">**</Line>
  <Line number="11468">**    &lt;li&gt; If there have been no REPLACE resolutions on a key, then</Line>
  <Line number="11469">**         the local changeset is rebased according to the most recent</Line>
  <Line number="11470">**         of the OMIT resolutions.</Line>
  <Line number="11471">** &lt;/ul&gt;</Line>
  <Line number="11472">**</Line>
  <Line number="11473">** Note that conflict resolutions from multiple remote changesets are</Line>
  <Line number="11474">** combined on a per-field basis, not per-row. This means that in the</Line>
  <Line number="11475">** case of multiple remote UPDATE operations, some fields of a single</Line>
  <Line number="11476">** local change may be rebased for REPLACE while others are rebased for</Line>
  <Line number="11477">** OMIT.</Line>
  <Line number="11478">**</Line>
  <Line number="11479">** In order to rebase a local changeset, the remote changeset must first</Line>
  <Line number="11480">** be applied to the local database using sqlite3changeset_apply_v2() and</Line>
  <Line number="11481">** the buffer of rebase information captured. Then:</Line>
  <Line number="11482">**</Line>
  <Line number="11483">** &lt;ol&gt;</Line>
  <Line number="11484">**   &lt;li&gt; An sqlite3_rebaser object is created by calling</Line>
  <Line number="11485">**        sqlite3rebaser_create().</Line>
  <Line number="11486">**   &lt;li&gt; The new object is configured with the rebase buffer obtained from</Line>
  <Line number="11487">**        sqlite3changeset_apply_v2() by calling sqlite3rebaser_configure().</Line>
  <Line number="11488">**        If the local changeset is to be rebased against multiple remote</Line>
  <Line number="11489">**        changesets, then sqlite3rebaser_configure() should be called</Line>
  <Line number="11490">**        multiple times, in the same order that the multiple</Line>
  <Line number="11491">**        sqlite3changeset_apply_v2() calls were made.</Line>
  <Line number="11492">**   &lt;li&gt; Each local changeset is rebased by calling sqlite3rebaser_rebase().</Line>
  <Line number="11493">**   &lt;li&gt; The sqlite3_rebaser object is deleted by calling</Line>
  <Line number="11494">**        sqlite3rebaser_delete().</Line>
  <Line number="11495">** &lt;/ol&gt;</Line>
  <Line number="11496">*/</Line>
  <Line number="11497">typedef struct sqlite3_rebaser sqlite3_rebaser;</Line>
  <Line number="11498"></Line>
  <Line number="11499">/*</Line>
  <Line number="11500">** CAPI3REF: Create a changeset rebaser object.</Line>
  <Line number="11501">** EXPERIMENTAL</Line>
  <Line number="11502">**</Line>
  <Line number="11503">** Allocate a new changeset rebaser object. If successful, set (*ppNew) to</Line>
  <Line number="11504">** point to the new object and return SQLITE_OK. Otherwise, if an error</Line>
  <Line number="11505">** occurs, return an SQLite error code (e.g. SQLITE_NOMEM) and set (*ppNew)</Line>
  <Line number="11506">** to NULL.</Line>
  <Line number="11507">*/</Line>
  <Line number="11508">SQLITE_API int sqlite3rebaser_create(sqlite3_rebaser **ppNew);</Line>
  <Line number="11509"></Line>
  <Line number="11510">/*</Line>
  <Line number="11511">** CAPI3REF: Configure a changeset rebaser object.</Line>
  <Line number="11512">** EXPERIMENTAL</Line>
  <Line number="11513">**</Line>
  <Line number="11514">** Configure the changeset rebaser object to rebase changesets according</Line>
  <Line number="11515">** to the conflict resolutions described by buffer pRebase (size nRebase</Line>
  <Line number="11516">** bytes), which must have been obtained from a previous call to</Line>
  <Line number="11517">** sqlite3changeset_apply_v2().</Line>
  <Line number="11518">*/</Line>
  <Line number="11519">SQLITE_API int sqlite3rebaser_configure(</Line>
  <Line number="11520">  sqlite3_rebaser*,</Line>
  <Line number="11521">  int nRebase, const void *pRebase</Line>
  <Line number="11522">);</Line>
  <Line number="11523"></Line>
  <Line number="11524">/*</Line>
  <Line number="11525">** CAPI3REF: Rebase a changeset</Line>
  <Line number="11526">** EXPERIMENTAL</Line>
  <Line number="11527">**</Line>
  <Line number="11528">** Argument pIn must point to a buffer containing a changeset nIn bytes</Line>
  <Line number="11529">** in size. This function allocates and populates a buffer with a copy</Line>
  <Line number="11530">** of the changeset rebased according to the configuration of the</Line>
  <Line number="11531">** rebaser object passed as the first argument. If successful, (*ppOut)</Line>
  <Line number="11532">** is set to point to the new buffer containing the rebased changeset and</Line>
  <Line number="11533">** (*pnOut) to its size in bytes and SQLITE_OK returned. It is the</Line>
  <Line number="11534">** responsibility of the caller to eventually free the new buffer using</Line>
  <Line number="11535">** sqlite3_free(). Otherwise, if an error occurs, (*ppOut) and (*pnOut)</Line>
  <Line number="11536">** are set to zero and an SQLite error code returned.</Line>
  <Line number="11537">*/</Line>
  <Line number="11538">SQLITE_API int sqlite3rebaser_rebase(</Line>
  <Line number="11539">  sqlite3_rebaser*,</Line>
  <Line number="11540">  int nIn, const void *pIn,</Line>
  <Line number="11541">  int *pnOut, void **ppOut</Line>
  <Line number="11542">);</Line>
  <Line number="11543"></Line>
  <Line number="11544">/*</Line>
  <Line number="11545">** CAPI3REF: Delete a changeset rebaser object.</Line>
  <Line number="11546">** EXPERIMENTAL</Line>
  <Line number="11547">**</Line>
  <Line number="11548">** Delete the changeset rebaser object and all associated resources. There</Line>
  <Line number="11549">** should be one call to this function for each successful invocation</Line>
  <Line number="11550">** of sqlite3rebaser_create().</Line>
  <Line number="11551">*/</Line>
  <Line number="11552">SQLITE_API void sqlite3rebaser_delete(sqlite3_rebaser *p);</Line>
  <Line number="11553"></Line>
  <Line number="11554">/*</Line>
  <Line number="11555">** CAPI3REF: Streaming Versions of API functions.</Line>
  <Line number="11556">**</Line>
  <Line number="11557">** The six streaming API xxx_strm() functions serve similar purposes to the</Line>
  <Line number="11558">** corresponding non-streaming API functions:</Line>
  <Line number="11559">**</Line>
  <Line number="11560">** &lt;table border=1 style=&quot;margin-left:8ex;margin-right:8ex&quot;&gt;</Line>
  <Line number="11561">**   &lt;tr&gt;&lt;th&gt;Streaming function&lt;th&gt;Non-streaming equivalent&lt;/th&gt;</Line>
  <Line number="11562">**   &lt;tr&gt;&lt;td&gt;sqlite3changeset_apply_strm&lt;td&gt;[sqlite3changeset_apply]</Line>
  <Line number="11563">**   &lt;tr&gt;&lt;td&gt;sqlite3changeset_apply_strm_v2&lt;td&gt;[sqlite3changeset_apply_v2]</Line>
  <Line number="11564">**   &lt;tr&gt;&lt;td&gt;sqlite3changeset_concat_strm&lt;td&gt;[sqlite3changeset_concat]</Line>
  <Line number="11565">**   &lt;tr&gt;&lt;td&gt;sqlite3changeset_invert_strm&lt;td&gt;[sqlite3changeset_invert]</Line>
  <Line number="11566">**   &lt;tr&gt;&lt;td&gt;sqlite3changeset_start_strm&lt;td&gt;[sqlite3changeset_start]</Line>
  <Line number="11567">**   &lt;tr&gt;&lt;td&gt;sqlite3session_changeset_strm&lt;td&gt;[sqlite3session_changeset]</Line>
  <Line number="11568">**   &lt;tr&gt;&lt;td&gt;sqlite3session_patchset_strm&lt;td&gt;[sqlite3session_patchset]</Line>
  <Line number="11569">** &lt;/table&gt;</Line>
  <Line number="11570">**</Line>
  <Line number="11571">** Non-streaming functions that accept changesets (or patchsets) as input</Line>
  <Line number="11572">** require that the entire changeset be stored in a single buffer in memory.</Line>
  <Line number="11573">** Similarly, those that return a changeset or patchset do so by returning</Line>
  <Line number="11574">** a pointer to a single large buffer allocated using sqlite3_malloc().</Line>
  <Line number="11575">** Normally this is convenient. However, if an application running in a</Line>
  <Line number="11576">** low-memory environment is required to handle very large changesets, the</Line>
  <Line number="11577">** large contiguous memory allocations required can become onerous.</Line>
  <Line number="11578">**</Line>
  <Line number="11579">** In order to avoid this problem, instead of a single large buffer, input</Line>
  <Line number="11580">** is passed to a streaming API functions by way of a callback function that</Line>
  <Line number="11581">** the sessions module invokes to incrementally request input data as it is</Line>
  <Line number="11582">** required. In all cases, a pair of API function parameters such as</Line>
  <Line number="11583">**</Line>
  <Line number="11584">**  &lt;pre&gt;</Line>
  <Line number="11585">**  &amp;nbsp;     int nChangeset,</Line>
  <Line number="11586">**  &amp;nbsp;     void *pChangeset,</Line>
  <Line number="11587">**  &lt;/pre&gt;</Line>
  <Line number="11588">**</Line>
  <Line number="11589">** Is replaced by:</Line>
  <Line number="11590">**</Line>
  <Line number="11591">**  &lt;pre&gt;</Line>
  <Line number="11592">**  &amp;nbsp;     int (*xInput)(void *pIn, void *pData, int *pnData),</Line>
  <Line number="11593">**  &amp;nbsp;     void *pIn,</Line>
  <Line number="11594">**  &lt;/pre&gt;</Line>
  <Line number="11595">**</Line>
  <Line number="11596">** Each time the xInput callback is invoked by the sessions module, the first</Line>
  <Line number="11597">** argument passed is a copy of the supplied pIn context pointer. The second</Line>
  <Line number="11598">** argument, pData, points to a buffer (*pnData) bytes in size. Assuming no</Line>
  <Line number="11599">** error occurs the xInput method should copy up to (*pnData) bytes of data</Line>
  <Line number="11600">** into the buffer and set (*pnData) to the actual number of bytes copied</Line>
  <Line number="11601">** before returning SQLITE_OK. If the input is completely exhausted, (*pnData)</Line>
  <Line number="11602">** should be set to zero to indicate this. Or, if an error occurs, an SQLite</Line>
  <Line number="11603">** error code should be returned. In all cases, if an xInput callback returns</Line>
  <Line number="11604">** an error, all processing is abandoned and the streaming API function</Line>
  <Line number="11605">** returns a copy of the error code to the caller.</Line>
  <Line number="11606">**</Line>
  <Line number="11607">** In the case of sqlite3changeset_start_strm(), the xInput callback may be</Line>
  <Line number="11608">** invoked by the sessions module at any point during the lifetime of the</Line>
  <Line number="11609">** iterator. If such an xInput callback returns an error, the iterator enters</Line>
  <Line number="11610">** an error state, whereby all subsequent calls to iterator functions</Line>
  <Line number="11611">** immediately fail with the same error code as returned by xInput.</Line>
  <Line number="11612">**</Line>
  <Line number="11613">** Similarly, streaming API functions that return changesets (or patchsets)</Line>
  <Line number="11614">** return them in chunks by way of a callback function instead of via a</Line>
  <Line number="11615">** pointer to a single large buffer. In this case, a pair of parameters such</Line>
  <Line number="11616">** as:</Line>
  <Line number="11617">**</Line>
  <Line number="11618">**  &lt;pre&gt;</Line>
  <Line number="11619">**  &amp;nbsp;     int *pnChangeset,</Line>
  <Line number="11620">**  &amp;nbsp;     void **ppChangeset,</Line>
  <Line number="11621">**  &lt;/pre&gt;</Line>
  <Line number="11622">**</Line>
  <Line number="11623">** Is replaced by:</Line>
  <Line number="11624">**</Line>
  <Line number="11625">**  &lt;pre&gt;</Line>
  <Line number="11626">**  &amp;nbsp;     int (*xOutput)(void *pOut, const void *pData, int nData),</Line>
  <Line number="11627">**  &amp;nbsp;     void *pOut</Line>
  <Line number="11628">**  &lt;/pre&gt;</Line>
  <Line number="11629">**</Line>
  <Line number="11630">** The xOutput callback is invoked zero or more times to return data to</Line>
  <Line number="11631">** the application. The first parameter passed to each call is a copy of the</Line>
  <Line number="11632">** pOut pointer supplied by the application. The second parameter, pData,</Line>
  <Line number="11633">** points to a buffer nData bytes in size containing the chunk of output</Line>
  <Line number="11634">** data being returned. If the xOutput callback successfully processes the</Line>
  <Line number="11635">** supplied data, it should return SQLITE_OK to indicate success. Otherwise,</Line>
  <Line number="11636">** it should return some other SQLite error code. In this case processing</Line>
  <Line number="11637">** is immediately abandoned and the streaming API function returns a copy</Line>
  <Line number="11638">** of the xOutput error code to the application.</Line>
  <Line number="11639">**</Line>
  <Line number="11640">** The sessions module never invokes an xOutput callback with the third</Line>
  <Line number="11641">** parameter set to a value less than or equal to zero. Other than this,</Line>
  <Line number="11642">** no guarantees are made as to the size of the chunks of data returned.</Line>
  <Line number="11643">*/</Line>
  <Line number="11644">SQLITE_API int sqlite3changeset_apply_strm(</Line>
  <Line number="11645">  sqlite3 *db,                    /* Apply change to &quot;main&quot; db of this handle */</Line>
  <Line number="11646">  int (*xInput)(void *pIn, void *pData, int *pnData), /* Input function */</Line>
  <Line number="11647">  void *pIn,                                          /* First arg for xInput */</Line>
  <Line number="11648">  int(*xFilter)(</Line>
  <Line number="11649">    void *pCtx,                   /* Copy of sixth arg to _apply() */</Line>
  <Line number="11650">    const char *zTab              /* Table name */</Line>
  <Line number="11651">  ),</Line>
  <Line number="11652">  int(*xConflict)(</Line>
  <Line number="11653">    void *pCtx,                   /* Copy of sixth arg to _apply() */</Line>
  <Line number="11654">    int eConflict,                /* DATA, MISSING, CONFLICT, CONSTRAINT */</Line>
  <Line number="11655">    sqlite3_changeset_iter *p     /* Handle describing change and conflict */</Line>
  <Line number="11656">  ),</Line>
  <Line number="11657">  void *pCtx                      /* First argument passed to xConflict */</Line>
  <Line number="11658">);</Line>
  <Line number="11659">SQLITE_API int sqlite3changeset_apply_v2_strm(</Line>
  <Line number="11660">  sqlite3 *db,                    /* Apply change to &quot;main&quot; db of this handle */</Line>
  <Line number="11661">  int (*xInput)(void *pIn, void *pData, int *pnData), /* Input function */</Line>
  <Line number="11662">  void *pIn,                                          /* First arg for xInput */</Line>
  <Line number="11663">  int(*xFilter)(</Line>
  <Line number="11664">    void *pCtx,                   /* Copy of sixth arg to _apply() */</Line>
  <Line number="11665">    const char *zTab              /* Table name */</Line>
  <Line number="11666">  ),</Line>
  <Line number="11667">  int(*xConflict)(</Line>
  <Line number="11668">    void *pCtx,                   /* Copy of sixth arg to _apply() */</Line>
  <Line number="11669">    int eConflict,                /* DATA, MISSING, CONFLICT, CONSTRAINT */</Line>
  <Line number="11670">    sqlite3_changeset_iter *p     /* Handle describing change and conflict */</Line>
  <Line number="11671">  ),</Line>
  <Line number="11672">  void *pCtx,                     /* First argument passed to xConflict */</Line>
  <Line number="11673">  void **ppRebase, int *pnRebase,</Line>
  <Line number="11674">  int flags</Line>
  <Line number="11675">);</Line>
  <Line number="11676">SQLITE_API int sqlite3changeset_concat_strm(</Line>
  <Line number="11677">  int (*xInputA)(void *pIn, void *pData, int *pnData),</Line>
  <Line number="11678">  void *pInA,</Line>
  <Line number="11679">  int (*xInputB)(void *pIn, void *pData, int *pnData),</Line>
  <Line number="11680">  void *pInB,</Line>
  <Line number="11681">  int (*xOutput)(void *pOut, const void *pData, int nData),</Line>
  <Line number="11682">  void *pOut</Line>
  <Line number="11683">);</Line>
  <Line number="11684">SQLITE_API int sqlite3changeset_invert_strm(</Line>
  <Line number="11685">  int (*xInput)(void *pIn, void *pData, int *pnData),</Line>
  <Line number="11686">  void *pIn,</Line>
  <Line number="11687">  int (*xOutput)(void *pOut, const void *pData, int nData),</Line>
  <Line number="11688">  void *pOut</Line>
  <Line number="11689">);</Line>
  <Line number="11690">SQLITE_API int sqlite3changeset_start_strm(</Line>
  <Line number="11691">  sqlite3_changeset_iter **pp,</Line>
  <Line number="11692">  int (*xInput)(void *pIn, void *pData, int *pnData),</Line>
  <Line number="11693">  void *pIn</Line>
  <Line number="11694">);</Line>
  <Line number="11695">SQLITE_API int sqlite3changeset_start_v2_strm(</Line>
  <Line number="11696">  sqlite3_changeset_iter **pp,</Line>
  <Line number="11697">  int (*xInput)(void *pIn, void *pData, int *pnData),</Line>
  <Line number="11698">  void *pIn,</Line>
  <Line number="11699">  int flags</Line>
  <Line number="11700">);</Line>
  <Line number="11701">SQLITE_API int sqlite3session_changeset_strm(</Line>
  <Line number="11702">  sqlite3_session *pSession,</Line>
  <Line number="11703">  int (*xOutput)(void *pOut, const void *pData, int nData),</Line>
  <Line number="11704">  void *pOut</Line>
  <Line number="11705">);</Line>
  <Line number="11706">SQLITE_API int sqlite3session_patchset_strm(</Line>
  <Line number="11707">  sqlite3_session *pSession,</Line>
  <Line number="11708">  int (*xOutput)(void *pOut, const void *pData, int nData),</Line>
  <Line number="11709">  void *pOut</Line>
  <Line number="11710">);</Line>
  <Line number="11711">SQLITE_API int sqlite3changegroup_add_strm(sqlite3_changegroup*,</Line>
  <Line number="11712">    int (*xInput)(void *pIn, void *pData, int *pnData),</Line>
  <Line number="11713">    void *pIn</Line>
  <Line number="11714">);</Line>
  <Line number="11715">SQLITE_API int sqlite3changegroup_output_strm(sqlite3_changegroup*,</Line>
  <Line number="11716">    int (*xOutput)(void *pOut, const void *pData, int nData),</Line>
  <Line number="11717">    void *pOut</Line>
  <Line number="11718">);</Line>
  <Line number="11719">SQLITE_API int sqlite3rebaser_rebase_strm(</Line>
  <Line number="11720">  sqlite3_rebaser *pRebaser,</Line>
  <Line number="11721">  int (*xInput)(void *pIn, void *pData, int *pnData),</Line>
  <Line number="11722">  void *pIn,</Line>
  <Line number="11723">  int (*xOutput)(void *pOut, const void *pData, int nData),</Line>
  <Line number="11724">  void *pOut</Line>
  <Line number="11725">);</Line>
  <Line number="11726"></Line>
  <Line number="11727">/*</Line>
  <Line number="11728">** CAPI3REF: Configure global parameters</Line>
  <Line number="11729">**</Line>
  <Line number="11730">** The sqlite3session_config() interface is used to make global configuration</Line>
  <Line number="11731">** changes to the sessions module in order to tune it to the specific needs</Line>
  <Line number="11732">** of the application.</Line>
  <Line number="11733">**</Line>
  <Line number="11734">** The sqlite3session_config() interface is not threadsafe. If it is invoked</Line>
  <Line number="11735">** while any other thread is inside any other sessions method then the</Line>
  <Line number="11736">** results are undefined. Furthermore, if it is invoked after any sessions</Line>
  <Line number="11737">** related objects have been created, the results are also undefined.</Line>
  <Line number="11738">**</Line>
  <Line number="11739">** The first argument to the sqlite3session_config() function must be one</Line>
  <Line number="11740">** of the SQLITE_SESSION_CONFIG_XXX constants defined below. The</Line>
  <Line number="11741">** interpretation of the (void*) value passed as the second parameter and</Line>
  <Line number="11742">** the effect of calling this function depends on the value of the first</Line>
  <Line number="11743">** parameter.</Line>
  <Line number="11744">**</Line>
  <Line number="11745">** &lt;dl&gt;</Line>
  <Line number="11746">** &lt;dt&gt;SQLITE_SESSION_CONFIG_STRMSIZE&lt;dd&gt;</Line>
  <Line number="11747">**    By default, the sessions module streaming interfaces attempt to input</Line>
  <Line number="11748">**    and output data in approximately 1 KiB chunks. This operand may be used</Line>
  <Line number="11749">**    to set and query the value of this configuration setting. The pointer</Line>
  <Line number="11750">**    passed as the second argument must point to a value of type (int).</Line>
  <Line number="11751">**    If this value is greater than 0, it is used as the new streaming data</Line>
  <Line number="11752">**    chunk size for both input and output. Before returning, the (int) value</Line>
  <Line number="11753">**    pointed to by pArg is set to the final value of the streaming interface</Line>
  <Line number="11754">**    chunk size.</Line>
  <Line number="11755">** &lt;/dl&gt;</Line>
  <Line number="11756">**</Line>
  <Line number="11757">** This function returns SQLITE_OK if successful, or an SQLite error code</Line>
  <Line number="11758">** otherwise.</Line>
  <Line number="11759">*/</Line>
  <Line number="11760">SQLITE_API int sqlite3session_config(int op, void *pArg);</Line>
  <Line number="11761"></Line>
  <Line number="11762">/*</Line>
  <Line number="11763">** CAPI3REF: Values for sqlite3session_config().</Line>
  <Line number="11764">*/</Line>
  <Line number="11765">#define SQLITE_SESSION_CONFIG_STRMSIZE 1</Line>
  <Line number="11766"></Line>
  <Line number="11767">/*</Line>
  <Line number="11768">** Make sure we can call this stuff from C++.</Line>
  <Line number="11769">*/</Line>
  <Line number="11770">#ifdef __cplusplus</Line>
  <Line number="11771">}</Line>
  <Line number="11772">#endif</Line>
  <Line number="11773"></Line>
  <Line number="11774">#endif  /* !defined(__SQLITESESSION_H_) &amp;&amp; defined(SQLITE_ENABLE_SESSION) */</Line>
  <Line number="11775"></Line>
  <Line number="11776">/******** End of sqlite3session.h *********/</Line>
  <Line number="11777">/******** Begin file fts5.h *********/</Line>
  <Line number="11778">/*</Line>
  <Line number="11779">** 2014 May 31</Line>
  <Line number="11780">**</Line>
  <Line number="11781">** The author disclaims copyright to this source code.  In place of</Line>
  <Line number="11782">** a legal notice, here is a blessing:</Line>
  <Line number="11783">**</Line>
  <Line number="11784">**    May you do good and not evil.</Line>
  <Line number="11785">**    May you find forgiveness for yourself and forgive others.</Line>
  <Line number="11786">**    May you share freely, never taking more than you give.</Line>
  <Line number="11787">**</Line>
  <Line number="11788">******************************************************************************</Line>
  <Line number="11789">**</Line>
  <Line number="11790">** Interfaces to extend FTS5. Using the interfaces defined in this file,</Line>
  <Line number="11791">** FTS5 may be extended with:</Line>
  <Line number="11792">**</Line>
  <Line number="11793">**     * custom tokenizers, and</Line>
  <Line number="11794">**     * custom auxiliary functions.</Line>
  <Line number="11795">*/</Line>
  <Line number="11796"></Line>
  <Line number="11797"></Line>
  <Line number="11798">#ifndef _FTS5_H</Line>
  <Line number="11799">#define _FTS5_H</Line>
  <Line number="11800"></Line>
  <Line number="11801"></Line>
  <Line number="11802">#ifdef __cplusplus</Line>
  <Line number="11803">extern &quot;C&quot; {</Line>
  <Line number="11804">#endif</Line>
  <Line number="11805"></Line>
  <Line number="11806">/*************************************************************************</Line>
  <Line number="11807">** CUSTOM AUXILIARY FUNCTIONS</Line>
  <Line number="11808">**</Line>
  <Line number="11809">** Virtual table implementations may overload SQL functions by implementing</Line>
  <Line number="11810">** the sqlite3_module.xFindFunction() method.</Line>
  <Line number="11811">*/</Line>
  <Line number="11812"></Line>
  <Line number="11813">typedef struct Fts5ExtensionApi Fts5ExtensionApi;</Line>
  <Line number="11814">typedef struct Fts5Context Fts5Context;</Line>
  <Line number="11815">typedef struct Fts5PhraseIter Fts5PhraseIter;</Line>
  <Line number="11816"></Line>
  <Line number="11817">typedef void (*fts5_extension_function)(</Line>
  <Line number="11818">  const Fts5ExtensionApi *pApi,   /* API offered by current FTS version */</Line>
  <Line number="11819">  Fts5Context *pFts,              /* First arg to pass to pApi functions */</Line>
  <Line number="11820">  sqlite3_context *pCtx,          /* Context for returning result/error */</Line>
  <Line number="11821">  int nVal,                       /* Number of values in apVal[] array */</Line>
  <Line number="11822">  sqlite3_value **apVal           /* Array of trailing arguments */</Line>
  <Line number="11823">);</Line>
  <Line number="11824"></Line>
  <Line number="11825">struct Fts5PhraseIter {</Line>
  <Line number="11826">  const unsigned char *a;</Line>
  <Line number="11827">  const unsigned char *b;</Line>
  <Line number="11828">};</Line>
  <Line number="11829"></Line>
  <Line number="11830">/*</Line>
  <Line number="11831">** EXTENSION API FUNCTIONS</Line>
  <Line number="11832">**</Line>
  <Line number="11833">** xUserData(pFts):</Line>
  <Line number="11834">**   Return a copy of the context pointer the extension function was</Line>
  <Line number="11835">**   registered with.</Line>
  <Line number="11836">**</Line>
  <Line number="11837">** xColumnTotalSize(pFts, iCol, pnToken):</Line>
  <Line number="11838">**   If parameter iCol is less than zero, set output variable *pnToken</Line>
  <Line number="11839">**   to the total number of tokens in the FTS5 table. Or, if iCol is</Line>
  <Line number="11840">**   non-negative but less than the number of columns in the table, return</Line>
  <Line number="11841">**   the total number of tokens in column iCol, considering all rows in</Line>
  <Line number="11842">**   the FTS5 table.</Line>
  <Line number="11843">**</Line>
  <Line number="11844">**   If parameter iCol is greater than or equal to the number of columns</Line>
  <Line number="11845">**   in the table, SQLITE_RANGE is returned. Or, if an error occurs (e.g.</Line>
  <Line number="11846">**   an OOM condition or IO error), an appropriate SQLite error code is</Line>
  <Line number="11847">**   returned.</Line>
  <Line number="11848">**</Line>
  <Line number="11849">** xColumnCount(pFts):</Line>
  <Line number="11850">**   Return the number of columns in the table.</Line>
  <Line number="11851">**</Line>
  <Line number="11852">** xColumnSize(pFts, iCol, pnToken):</Line>
  <Line number="11853">**   If parameter iCol is less than zero, set output variable *pnToken</Line>
  <Line number="11854">**   to the total number of tokens in the current row. Or, if iCol is</Line>
  <Line number="11855">**   non-negative but less than the number of columns in the table, set</Line>
  <Line number="11856">**   *pnToken to the number of tokens in column iCol of the current row.</Line>
  <Line number="11857">**</Line>
  <Line number="11858">**   If parameter iCol is greater than or equal to the number of columns</Line>
  <Line number="11859">**   in the table, SQLITE_RANGE is returned. Or, if an error occurs (e.g.</Line>
  <Line number="11860">**   an OOM condition or IO error), an appropriate SQLite error code is</Line>
  <Line number="11861">**   returned.</Line>
  <Line number="11862">**</Line>
  <Line number="11863">**   This function may be quite inefficient if used with an FTS5 table</Line>
  <Line number="11864">**   created with the &quot;columnsize=0&quot; option.</Line>
  <Line number="11865">**</Line>
  <Line number="11866">** xColumnText:</Line>
  <Line number="11867">**   This function attempts to retrieve the text of column iCol of the</Line>
  <Line number="11868">**   current document. If successful, (*pz) is set to point to a buffer</Line>
  <Line number="11869">**   containing the text in utf-8 encoding, (*pn) is set to the size in bytes</Line>
  <Line number="11870">**   (not characters) of the buffer and SQLITE_OK is returned. Otherwise,</Line>
  <Line number="11871">**   if an error occurs, an SQLite error code is returned and the final values</Line>
  <Line number="11872">**   of (*pz) and (*pn) are undefined.</Line>
  <Line number="11873">**</Line>
  <Line number="11874">** xPhraseCount:</Line>
  <Line number="11875">**   Returns the number of phrases in the current query expression.</Line>
  <Line number="11876">**</Line>
  <Line number="11877">** xPhraseSize:</Line>
  <Line number="11878">**   Returns the number of tokens in phrase iPhrase of the query. Phrases</Line>
  <Line number="11879">**   are numbered starting from zero.</Line>
  <Line number="11880">**</Line>
  <Line number="11881">** xInstCount:</Line>
  <Line number="11882">**   Set *pnInst to the total number of occurrences of all phrases within</Line>
  <Line number="11883">**   the query within the current row. Return SQLITE_OK if successful, or</Line>
  <Line number="11884">**   an error code (i.e. SQLITE_NOMEM) if an error occurs.</Line>
  <Line number="11885">**</Line>
  <Line number="11886">**   This API can be quite slow if used with an FTS5 table created with the</Line>
  <Line number="11887">**   &quot;detail=none&quot; or &quot;detail=column&quot; option. If the FTS5 table is created</Line>
  <Line number="11888">**   with either &quot;detail=none&quot; or &quot;detail=column&quot; and &quot;content=&quot; option</Line>
  <Line number="11889">**   (i.e. if it is a contentless table), then this API always returns 0.</Line>
  <Line number="11890">**</Line>
  <Line number="11891">** xInst:</Line>
  <Line number="11892">**   Query for the details of phrase match iIdx within the current row.</Line>
  <Line number="11893">**   Phrase matches are numbered starting from zero, so the iIdx argument</Line>
  <Line number="11894">**   should be greater than or equal to zero and smaller than the value</Line>
  <Line number="11895">**   output by xInstCount().</Line>
  <Line number="11896">**</Line>
  <Line number="11897">**   Usually, output parameter *piPhrase is set to the phrase number, *piCol</Line>
  <Line number="11898">**   to the column in which it occurs and *piOff the token offset of the</Line>
  <Line number="11899">**   first token of the phrase. Returns SQLITE_OK if successful, or an error</Line>
  <Line number="11900">**   code (i.e. SQLITE_NOMEM) if an error occurs.</Line>
  <Line number="11901">**</Line>
  <Line number="11902">**   This API can be quite slow if used with an FTS5 table created with the</Line>
  <Line number="11903">**   &quot;detail=none&quot; or &quot;detail=column&quot; option.</Line>
  <Line number="11904">**</Line>
  <Line number="11905">** xRowid:</Line>
  <Line number="11906">**   Returns the rowid of the current row.</Line>
  <Line number="11907">**</Line>
  <Line number="11908">** xTokenize:</Line>
  <Line number="11909">**   Tokenize text using the tokenizer belonging to the FTS5 table.</Line>
  <Line number="11910">**</Line>
  <Line number="11911">** xQueryPhrase(pFts5, iPhrase, pUserData, xCallback):</Line>
  <Line number="11912">**   This API function is used to query the FTS table for phrase iPhrase</Line>
  <Line number="11913">**   of the current query. Specifically, a query equivalent to:</Line>
  <Line number="11914">**</Line>
  <Line number="11915">**       ... FROM ftstable WHERE ftstable MATCH $p ORDER BY rowid</Line>
  <Line number="11916">**</Line>
  <Line number="11917">**   with $p set to a phrase equivalent to the phrase iPhrase of the</Line>
  <Line number="11918">**   current query is executed. Any column filter that applies to</Line>
  <Line number="11919">**   phrase iPhrase of the current query is included in $p. For each</Line>
  <Line number="11920">**   row visited, the callback function passed as the fourth argument</Line>
  <Line number="11921">**   is invoked. The context and API objects passed to the callback</Line>
  <Line number="11922">**   function may be used to access the properties of each matched row.</Line>
  <Line number="11923">**   Invoking Api.xUserData() returns a copy of the pointer passed as</Line>
  <Line number="11924">**   the third argument to pUserData.</Line>
  <Line number="11925">**</Line>
  <Line number="11926">**   If the callback function returns any value other than SQLITE_OK, the</Line>
  <Line number="11927">**   query is abandoned and the xQueryPhrase function returns immediately.</Line>
  <Line number="11928">**   If the returned value is SQLITE_DONE, xQueryPhrase returns SQLITE_OK.</Line>
  <Line number="11929">**   Otherwise, the error code is propagated upwards.</Line>
  <Line number="11930">**</Line>
  <Line number="11931">**   If the query runs to completion without incident, SQLITE_OK is returned.</Line>
  <Line number="11932">**   Or, if some error occurs before the query completes or is aborted by</Line>
  <Line number="11933">**   the callback, an SQLite error code is returned.</Line>
  <Line number="11934">**</Line>
  <Line number="11935">**</Line>
  <Line number="11936">** xSetAuxdata(pFts5, pAux, xDelete)</Line>
  <Line number="11937">**</Line>
  <Line number="11938">**   Save the pointer passed as the second argument as the extension function&apos;s</Line>
  <Line number="11939">**   &quot;auxiliary data&quot;. The pointer may then be retrieved by the current or any</Line>
  <Line number="11940">**   future invocation of the same fts5 extension function made as part of</Line>
  <Line number="11941">**   the same MATCH query using the xGetAuxdata() API.</Line>
  <Line number="11942">**</Line>
  <Line number="11943">**   Each extension function is allocated a single auxiliary data slot for</Line>
  <Line number="11944">**   each FTS query (MATCH expression). If the extension function is invoked</Line>
  <Line number="11945">**   more than once for a single FTS query, then all invocations share a</Line>
  <Line number="11946">**   single auxiliary data context.</Line>
  <Line number="11947">**</Line>
  <Line number="11948">**   If there is already an auxiliary data pointer when this function is</Line>
  <Line number="11949">**   invoked, then it is replaced by the new pointer. If an xDelete callback</Line>
  <Line number="11950">**   was specified along with the original pointer, it is invoked at this</Line>
  <Line number="11951">**   point.</Line>
  <Line number="11952">**</Line>
  <Line number="11953">**   The xDelete callback, if one is specified, is also invoked on the</Line>
  <Line number="11954">**   auxiliary data pointer after the FTS5 query has finished.</Line>
  <Line number="11955">**</Line>
  <Line number="11956">**   If an error (e.g. an OOM condition) occurs within this function,</Line>
  <Line number="11957">**   the auxiliary data is set to NULL and an error code returned. If the</Line>
  <Line number="11958">**   xDelete parameter was not NULL, it is invoked on the auxiliary data</Line>
  <Line number="11959">**   pointer before returning.</Line>
  <Line number="11960">**</Line>
  <Line number="11961">**</Line>
  <Line number="11962">** xGetAuxdata(pFts5, bClear)</Line>
  <Line number="11963">**</Line>
  <Line number="11964">**   Returns the current auxiliary data pointer for the fts5 extension</Line>
  <Line number="11965">**   function. See the xSetAuxdata() method for details.</Line>
  <Line number="11966">**</Line>
  <Line number="11967">**   If the bClear argument is non-zero, then the auxiliary data is cleared</Line>
  <Line number="11968">**   (set to NULL) before this function returns. In this case the xDelete,</Line>
  <Line number="11969">**   if any, is not invoked.</Line>
  <Line number="11970">**</Line>
  <Line number="11971">**</Line>
  <Line number="11972">** xRowCount(pFts5, pnRow)</Line>
  <Line number="11973">**</Line>
  <Line number="11974">**   This function is used to retrieve the total number of rows in the table.</Line>
  <Line number="11975">**   In other words, the same value that would be returned by:</Line>
  <Line number="11976">**</Line>
  <Line number="11977">**        SELECT count(*) FROM ftstable;</Line>
  <Line number="11978">**</Line>
  <Line number="11979">** xPhraseFirst()</Line>
  <Line number="11980">**   This function is used, along with type Fts5PhraseIter and the xPhraseNext</Line>
  <Line number="11981">**   method, to iterate through all instances of a single query phrase within</Line>
  <Line number="11982">**   the current row. This is the same information as is accessible via the</Line>
  <Line number="11983">**   xInstCount/xInst APIs. While the xInstCount/xInst APIs are more convenient</Line>
  <Line number="11984">**   to use, this API may be faster under some circumstances. To iterate</Line>
  <Line number="11985">**   through instances of phrase iPhrase, use the following code:</Line>
  <Line number="11986">**</Line>
  <Line number="11987">**       Fts5PhraseIter iter;</Line>
  <Line number="11988">**       int iCol, iOff;</Line>
  <Line number="11989">**       for(pApi-&gt;xPhraseFirst(pFts, iPhrase, &amp;iter, &amp;iCol, &amp;iOff);</Line>
  <Line number="11990">**           iCol&gt;=0;</Line>
  <Line number="11991">**           pApi-&gt;xPhraseNext(pFts, &amp;iter, &amp;iCol, &amp;iOff)</Line>
  <Line number="11992">**       ){</Line>
  <Line number="11993">**         // An instance of phrase iPhrase at offset iOff of column iCol</Line>
  <Line number="11994">**       }</Line>
  <Line number="11995">**</Line>
  <Line number="11996">**   The Fts5PhraseIter structure is defined above. Applications should not</Line>
  <Line number="11997">**   modify this structure directly - it should only be used as shown above</Line>
  <Line number="11998">**   with the xPhraseFirst() and xPhraseNext() API methods (and by</Line>
  <Line number="11999">**   xPhraseFirstColumn() and xPhraseNextColumn() as illustrated below).</Line>
  <Line number="12000">**</Line>
  <Line number="12001">**   This API can be quite slow if used with an FTS5 table created with the</Line>
  <Line number="12002">**   &quot;detail=none&quot; or &quot;detail=column&quot; option. If the FTS5 table is created</Line>
  <Line number="12003">**   with either &quot;detail=none&quot; or &quot;detail=column&quot; and &quot;content=&quot; option</Line>
  <Line number="12004">**   (i.e. if it is a contentless table), then this API always iterates</Line>
  <Line number="12005">**   through an empty set (all calls to xPhraseFirst() set iCol to -1).</Line>
  <Line number="12006">**</Line>
  <Line number="12007">** xPhraseNext()</Line>
  <Line number="12008">**   See xPhraseFirst above.</Line>
  <Line number="12009">**</Line>
  <Line number="12010">** xPhraseFirstColumn()</Line>
  <Line number="12011">**   This function and xPhraseNextColumn() are similar to the xPhraseFirst()</Line>
  <Line number="12012">**   and xPhraseNext() APIs described above. The difference is that instead</Line>
  <Line number="12013">**   of iterating through all instances of a phrase in the current row, these</Line>
  <Line number="12014">**   APIs are used to iterate through the set of columns in the current row</Line>
  <Line number="12015">**   that contain one or more instances of a specified phrase. For example:</Line>
  <Line number="12016">**</Line>
  <Line number="12017">**       Fts5PhraseIter iter;</Line>
  <Line number="12018">**       int iCol;</Line>
  <Line number="12019">**       for(pApi-&gt;xPhraseFirstColumn(pFts, iPhrase, &amp;iter, &amp;iCol);</Line>
  <Line number="12020">**           iCol&gt;=0;</Line>
  <Line number="12021">**           pApi-&gt;xPhraseNextColumn(pFts, &amp;iter, &amp;iCol)</Line>
  <Line number="12022">**       ){</Line>
  <Line number="12023">**         // Column iCol contains at least one instance of phrase iPhrase</Line>
  <Line number="12024">**       }</Line>
  <Line number="12025">**</Line>
  <Line number="12026">**   This API can be quite slow if used with an FTS5 table created with the</Line>
  <Line number="12027">**   &quot;detail=none&quot; option. If the FTS5 table is created with either</Line>
  <Line number="12028">**   &quot;detail=none&quot; &quot;content=&quot; option (i.e. if it is a contentless table),</Line>
  <Line number="12029">**   then this API always iterates through an empty set (all calls to</Line>
  <Line number="12030">**   xPhraseFirstColumn() set iCol to -1).</Line>
  <Line number="12031">**</Line>
  <Line number="12032">**   The information accessed using this API and its companion</Line>
  <Line number="12033">**   xPhraseFirstColumn() may also be obtained using xPhraseFirst/xPhraseNext</Line>
  <Line number="12034">**   (or xInst/xInstCount). The chief advantage of this API is that it is</Line>
  <Line number="12035">**   significantly more efficient than those alternatives when used with</Line>
  <Line number="12036">**   &quot;detail=column&quot; tables.</Line>
  <Line number="12037">**</Line>
  <Line number="12038">** xPhraseNextColumn()</Line>
  <Line number="12039">**   See xPhraseFirstColumn above.</Line>
  <Line number="12040">*/</Line>
  <Line number="12041">struct Fts5ExtensionApi {</Line>
  <Line number="12042">  int iVersion;                   /* Currently always set to 3 */</Line>
  <Line number="12043"></Line>
  <Line number="12044">  void *(*xUserData)(Fts5Context*);</Line>
  <Line number="12045"></Line>
  <Line number="12046">  int (*xColumnCount)(Fts5Context*);</Line>
  <Line number="12047">  int (*xRowCount)(Fts5Context*, sqlite3_int64 *pnRow);</Line>
  <Line number="12048">  int (*xColumnTotalSize)(Fts5Context*, int iCol, sqlite3_int64 *pnToken);</Line>
  <Line number="12049"></Line>
  <Line number="12050">  int (*xTokenize)(Fts5Context*,</Line>
  <Line number="12051">    const char *pText, int nText, /* Text to tokenize */</Line>
  <Line number="12052">    void *pCtx,                   /* Context passed to xToken() */</Line>
  <Line number="12053">    int (*xToken)(void*, int, const char*, int, int, int)       /* Callback */</Line>
  <Line number="12054">  );</Line>
  <Line number="12055"></Line>
  <Line number="12056">  int (*xPhraseCount)(Fts5Context*);</Line>
  <Line number="12057">  int (*xPhraseSize)(Fts5Context*, int iPhrase);</Line>
  <Line number="12058"></Line>
  <Line number="12059">  int (*xInstCount)(Fts5Context*, int *pnInst);</Line>
  <Line number="12060">  int (*xInst)(Fts5Context*, int iIdx, int *piPhrase, int *piCol, int *piOff);</Line>
  <Line number="12061"></Line>
  <Line number="12062">  sqlite3_int64 (*xRowid)(Fts5Context*);</Line>
  <Line number="12063">  int (*xColumnText)(Fts5Context*, int iCol, const char **pz, int *pn);</Line>
  <Line number="12064">  int (*xColumnSize)(Fts5Context*, int iCol, int *pnToken);</Line>
  <Line number="12065"></Line>
  <Line number="12066">  int (*xQueryPhrase)(Fts5Context*, int iPhrase, void *pUserData,</Line>
  <Line number="12067">    int(*)(const Fts5ExtensionApi*,Fts5Context*,void*)</Line>
  <Line number="12068">  );</Line>
  <Line number="12069">  int (*xSetAuxdata)(Fts5Context*, void *pAux, void(*xDelete)(void*));</Line>
  <Line number="12070">  void *(*xGetAuxdata)(Fts5Context*, int bClear);</Line>
  <Line number="12071"></Line>
  <Line number="12072">  int (*xPhraseFirst)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*, int*);</Line>
  <Line number="12073">  void (*xPhraseNext)(Fts5Context*, Fts5PhraseIter*, int *piCol, int *piOff);</Line>
  <Line number="12074"></Line>
  <Line number="12075">  int (*xPhraseFirstColumn)(Fts5Context*, int iPhrase, Fts5PhraseIter*, int*);</Line>
  <Line number="12076">  void (*xPhraseNextColumn)(Fts5Context*, Fts5PhraseIter*, int *piCol);</Line>
  <Line number="12077">};</Line>
  <Line number="12078"></Line>
  <Line number="12079">/*</Line>
  <Line number="12080">** CUSTOM AUXILIARY FUNCTIONS</Line>
  <Line number="12081">*************************************************************************/</Line>
  <Line number="12082"></Line>
  <Line number="12083">/*************************************************************************</Line>
  <Line number="12084">** CUSTOM TOKENIZERS</Line>
  <Line number="12085">**</Line>
  <Line number="12086">** Applications may also register custom tokenizer types. A tokenizer</Line>
  <Line number="12087">** is registered by providing fts5 with a populated instance of the</Line>
  <Line number="12088">** following structure. All structure methods must be defined, setting</Line>
  <Line number="12089">** any member of the fts5_tokenizer struct to NULL leads to undefined</Line>
  <Line number="12090">** behaviour. The structure methods are expected to function as follows:</Line>
  <Line number="12091">**</Line>
  <Line number="12092">** xCreate:</Line>
  <Line number="12093">**   This function is used to allocate and initialize a tokenizer instance.</Line>
  <Line number="12094">**   A tokenizer instance is required to actually tokenize text.</Line>
  <Line number="12095">**</Line>
  <Line number="12096">**   The first argument passed to this function is a copy of the (void*)</Line>
  <Line number="12097">**   pointer provided by the application when the fts5_tokenizer object</Line>
  <Line number="12098">**   was registered with FTS5 (the third argument to xCreateTokenizer()).</Line>
  <Line number="12099">**   The second and third arguments are an array of nul-terminated strings</Line>
  <Line number="12100">**   containing the tokenizer arguments, if any, specified following the</Line>
  <Line number="12101">**   tokenizer name as part of the CREATE VIRTUAL TABLE statement used</Line>
  <Line number="12102">**   to create the FTS5 table.</Line>
  <Line number="12103">**</Line>
  <Line number="12104">**   The final argument is an output variable. If successful, (*ppOut)</Line>
  <Line number="12105">**   should be set to point to the new tokenizer handle and SQLITE_OK</Line>
  <Line number="12106">**   returned. If an error occurs, some value other than SQLITE_OK should</Line>
  <Line number="12107">**   be returned. In this case, fts5 assumes that the final value of *ppOut</Line>
  <Line number="12108">**   is undefined.</Line>
  <Line number="12109">**</Line>
  <Line number="12110">** xDelete:</Line>
  <Line number="12111">**   This function is invoked to delete a tokenizer handle previously</Line>
  <Line number="12112">**   allocated using xCreate(). Fts5 guarantees that this function will</Line>
  <Line number="12113">**   be invoked exactly once for each successful call to xCreate().</Line>
  <Line number="12114">**</Line>
  <Line number="12115">** xTokenize:</Line>
  <Line number="12116">**   This function is expected to tokenize the nText byte string indicated</Line>
  <Line number="12117">**   by argument pText. pText may or may not be nul-terminated. The first</Line>
  <Line number="12118">**   argument passed to this function is a pointer to an Fts5Tokenizer object</Line>
  <Line number="12119">**   returned by an earlier call to xCreate().</Line>
  <Line number="12120">**</Line>
  <Line number="12121">**   The second argument indicates the reason that FTS5 is requesting</Line>
  <Line number="12122">**   tokenization of the supplied text. This is always one of the following</Line>
  <Line number="12123">**   four values:</Line>
  <Line number="12124">**</Line>
  <Line number="12125">**   &lt;ul&gt;&lt;li&gt; &lt;b&gt;FTS5_TOKENIZE_DOCUMENT&lt;/b&gt; - A document is being inserted into</Line>
  <Line number="12126">**            or removed from the FTS table. The tokenizer is being invoked to</Line>
  <Line number="12127">**            determine the set of tokens to add to (or delete from) the</Line>
  <Line number="12128">**            FTS index.</Line>
  <Line number="12129">**</Line>
  <Line number="12130">**       &lt;li&gt; &lt;b&gt;FTS5_TOKENIZE_QUERY&lt;/b&gt; - A MATCH query is being executed</Line>
  <Line number="12131">**            against the FTS index. The tokenizer is being called to tokenize</Line>
  <Line number="12132">**            a bareword or quoted string specified as part of the query.</Line>
  <Line number="12133">**</Line>
  <Line number="12134">**       &lt;li&gt; &lt;b&gt;(FTS5_TOKENIZE_QUERY | FTS5_TOKENIZE_PREFIX)&lt;/b&gt; - Same as</Line>
  <Line number="12135">**            FTS5_TOKENIZE_QUERY, except that the bareword or quoted string is</Line>
  <Line number="12136">**            followed by a &quot;*&quot; character, indicating that the last token</Line>
  <Line number="12137">**            returned by the tokenizer will be treated as a token prefix.</Line>
  <Line number="12138">**</Line>
  <Line number="12139">**       &lt;li&gt; &lt;b&gt;FTS5_TOKENIZE_AUX&lt;/b&gt; - The tokenizer is being invoked to</Line>
  <Line number="12140">**            satisfy an fts5_api.xTokenize() request made by an auxiliary</Line>
  <Line number="12141">**            function. Or an fts5_api.xColumnSize() request made by the same</Line>
  <Line number="12142">**            on a columnsize=0 database.</Line>
  <Line number="12143">**   &lt;/ul&gt;</Line>
  <Line number="12144">**</Line>
  <Line number="12145">**   For each token in the input string, the supplied callback xToken() must</Line>
  <Line number="12146">**   be invoked. The first argument to it should be a copy of the pointer</Line>
  <Line number="12147">**   passed as the second argument to xTokenize(). The third and fourth</Line>
  <Line number="12148">**   arguments are a pointer to a buffer containing the token text, and the</Line>
  <Line number="12149">**   size of the token in bytes. The 4th and 5th arguments are the byte offsets</Line>
  <Line number="12150">**   of the first byte of and first byte immediately following the text from</Line>
  <Line number="12151">**   which the token is derived within the input.</Line>
  <Line number="12152">**</Line>
  <Line number="12153">**   The second argument passed to the xToken() callback (&quot;tflags&quot;) should</Line>
  <Line number="12154">**   normally be set to 0. The exception is if the tokenizer supports</Line>
  <Line number="12155">**   synonyms. In this case see the discussion below for details.</Line>
  <Line number="12156">**</Line>
  <Line number="12157">**   FTS5 assumes the xToken() callback is invoked for each token in the</Line>
  <Line number="12158">**   order that they occur within the input text.</Line>
  <Line number="12159">**</Line>
  <Line number="12160">**   If an xToken() callback returns any value other than SQLITE_OK, then</Line>
  <Line number="12161">**   the tokenization should be abandoned and the xTokenize() method should</Line>
  <Line number="12162">**   immediately return a copy of the xToken() return value. Or, if the</Line>
  <Line number="12163">**   input buffer is exhausted, xTokenize() should return SQLITE_OK. Finally,</Line>
  <Line number="12164">**   if an error occurs with the xTokenize() implementation itself, it</Line>
  <Line number="12165">**   may abandon the tokenization and return any error code other than</Line>
  <Line number="12166">**   SQLITE_OK or SQLITE_DONE.</Line>
  <Line number="12167">**</Line>
  <Line number="12168">** SYNONYM SUPPORT</Line>
  <Line number="12169">**</Line>
  <Line number="12170">**   Custom tokenizers may also support synonyms. Consider a case in which a</Line>
  <Line number="12171">**   user wishes to query for a phrase such as &quot;first place&quot;. Using the</Line>
  <Line number="12172">**   built-in tokenizers, the FTS5 query &apos;first + place&apos; will match instances</Line>
  <Line number="12173">**   of &quot;first place&quot; within the document set, but not alternative forms</Line>
  <Line number="12174">**   such as &quot;1st place&quot;. In some applications, it would be better to match</Line>
  <Line number="12175">**   all instances of &quot;first place&quot; or &quot;1st place&quot; regardless of which form</Line>
  <Line number="12176">**   the user specified in the MATCH query text.</Line>
  <Line number="12177">**</Line>
  <Line number="12178">**   There are several ways to approach this in FTS5:</Line>
  <Line number="12179">**</Line>
  <Line number="12180">**   &lt;ol&gt;&lt;li&gt; By mapping all synonyms to a single token. In this case, using</Line>
  <Line number="12181">**            the above example, this means that the tokenizer returns the</Line>
  <Line number="12182">**            same token for inputs &quot;first&quot; and &quot;1st&quot;. Say that token is in</Line>
  <Line number="12183">**            fact &quot;first&quot;, so that when the user inserts the document &quot;I won</Line>
  <Line number="12184">**            1st place&quot; entries are added to the index for tokens &quot;i&quot;, &quot;won&quot;,</Line>
  <Line number="12185">**            &quot;first&quot; and &quot;place&quot;. If the user then queries for &apos;1st + place&apos;,</Line>
  <Line number="12186">**            the tokenizer substitutes &quot;first&quot; for &quot;1st&quot; and the query works</Line>
  <Line number="12187">**            as expected.</Line>
  <Line number="12188">**</Line>
  <Line number="12189">**       &lt;li&gt; By querying the index for all synonyms of each query term</Line>
  <Line number="12190">**            separately. In this case, when tokenizing query text, the</Line>
  <Line number="12191">**            tokenizer may provide multiple synonyms for a single term</Line>
  <Line number="12192">**            within the document. FTS5 then queries the index for each</Line>
  <Line number="12193">**            synonym individually. For example, faced with the query:</Line>
  <Line number="12194">**</Line>
  <Line number="12195">**   &lt;codeblock&gt;</Line>
  <Line number="12196">**     ... MATCH &apos;first place&apos;&lt;/codeblock&gt;</Line>
  <Line number="12197">**</Line>
  <Line number="12198">**            the tokenizer offers both &quot;1st&quot; and &quot;first&quot; as synonyms for the</Line>
  <Line number="12199">**            first token in the MATCH query and FTS5 effectively runs a query</Line>
  <Line number="12200">**            similar to:</Line>
  <Line number="12201">**</Line>
  <Line number="12202">**   &lt;codeblock&gt;</Line>
  <Line number="12203">**     ... MATCH &apos;(first OR 1st) place&apos;&lt;/codeblock&gt;</Line>
  <Line number="12204">**</Line>
  <Line number="12205">**            except that, for the purposes of auxiliary functions, the query</Line>
  <Line number="12206">**            still appears to contain just two phrases - &quot;(first OR 1st)&quot;</Line>
  <Line number="12207">**            being treated as a single phrase.</Line>
  <Line number="12208">**</Line>
  <Line number="12209">**       &lt;li&gt; By adding multiple synonyms for a single term to the FTS index.</Line>
  <Line number="12210">**            Using this method, when tokenizing document text, the tokenizer</Line>
  <Line number="12211">**            provides multiple synonyms for each token. So that when a</Line>
  <Line number="12212">**            document such as &quot;I won first place&quot; is tokenized, entries are</Line>
  <Line number="12213">**            added to the FTS index for &quot;i&quot;, &quot;won&quot;, &quot;first&quot;, &quot;1st&quot; and</Line>
  <Line number="12214">**            &quot;place&quot;.</Line>
  <Line number="12215">**</Line>
  <Line number="12216">**            This way, even if the tokenizer does not provide synonyms</Line>
  <Line number="12217">**            when tokenizing query text (it should not - to do so would be</Line>
  <Line number="12218">**            inefficient), it doesn&apos;t matter if the user queries for</Line>
  <Line number="12219">**            &apos;first + place&apos; or &apos;1st + place&apos;, as there are entries in the</Line>
  <Line number="12220">**            FTS index corresponding to both forms of the first token.</Line>
  <Line number="12221">**   &lt;/ol&gt;</Line>
  <Line number="12222">**</Line>
  <Line number="12223">**   Whether it is parsing document or query text, any call to xToken that</Line>
  <Line number="12224">**   specifies a &lt;i&gt;tflags&lt;/i&gt; argument with the FTS5_TOKEN_COLOCATED bit</Line>
  <Line number="12225">**   is considered to supply a synonym for the previous token. For example,</Line>
  <Line number="12226">**   when parsing the document &quot;I won first place&quot;, a tokenizer that supports</Line>
  <Line number="12227">**   synonyms would call xToken() 5 times, as follows:</Line>
  <Line number="12228">**</Line>
  <Line number="12229">**   &lt;codeblock&gt;</Line>
  <Line number="12230">**       xToken(pCtx, 0, &quot;i&quot;,                      1,  0,  1);</Line>
  <Line number="12231">**       xToken(pCtx, 0, &quot;won&quot;,                    3,  2,  5);</Line>
  <Line number="12232">**       xToken(pCtx, 0, &quot;first&quot;,                  5,  6, 11);</Line>
  <Line number="12233">**       xToken(pCtx, FTS5_TOKEN_COLOCATED, &quot;1st&quot;, 3,  6, 11);</Line>
  <Line number="12234">**       xToken(pCtx, 0, &quot;place&quot;,                  5, 12, 17);</Line>
  <Line number="12235">**&lt;/codeblock&gt;</Line>
  <Line number="12236">**</Line>
  <Line number="12237">**   It is an error to specify the FTS5_TOKEN_COLOCATED flag the first time</Line>
  <Line number="12238">**   xToken() is called. Multiple synonyms may be specified for a single token</Line>
  <Line number="12239">**   by making multiple calls to xToken(FTS5_TOKEN_COLOCATED) in sequence.</Line>
  <Line number="12240">**   There is no limit to the number of synonyms that may be provided for a</Line>
  <Line number="12241">**   single token.</Line>
  <Line number="12242">**</Line>
  <Line number="12243">**   In many cases, method (1) above is the best approach. It does not add</Line>
  <Line number="12244">**   extra data to the FTS index or require FTS5 to query for multiple terms,</Line>
  <Line number="12245">**   so it is efficient in terms of disk space and query speed. However, it</Line>
  <Line number="12246">**   does not support prefix queries very well. If, as suggested above, the</Line>
  <Line number="12247">**   token &quot;first&quot; is substituted for &quot;1st&quot; by the tokenizer, then the query:</Line>
  <Line number="12248">**</Line>
  <Line number="12249">**   &lt;codeblock&gt;</Line>
  <Line number="12250">**     ... MATCH &apos;1s*&apos;&lt;/codeblock&gt;</Line>
  <Line number="12251">**</Line>
  <Line number="12252">**   will not match documents that contain the token &quot;1st&quot; (as the tokenizer</Line>
  <Line number="12253">**   will probably not map &quot;1s&quot; to any prefix of &quot;first&quot;).</Line>
  <Line number="12254">**</Line>
  <Line number="12255">**   For full prefix support, method (3) may be preferred. In this case,</Line>
  <Line number="12256">**   because the index contains entries for both &quot;first&quot; and &quot;1st&quot;, prefix</Line>
  <Line number="12257">**   queries such as &apos;fi*&apos; or &apos;1s*&apos; will match correctly. However, because</Line>
  <Line number="12258">**   extra entries are added to the FTS index, this method uses more space</Line>
  <Line number="12259">**   within the database.</Line>
  <Line number="12260">**</Line>
  <Line number="12261">**   Method (2) offers a midpoint between (1) and (3). Using this method,</Line>
  <Line number="12262">**   a query such as &apos;1s*&apos; will match documents that contain the literal</Line>
  <Line number="12263">**   token &quot;1st&quot;, but not &quot;first&quot; (assuming the tokenizer is not able to</Line>
  <Line number="12264">**   provide synonyms for prefixes). However, a non-prefix query like &apos;1st&apos;</Line>
  <Line number="12265">**   will match against &quot;1st&quot; and &quot;first&quot;. This method does not require</Line>
  <Line number="12266">**   extra disk space, as no extra entries are added to the FTS index.</Line>
  <Line number="12267">**   On the other hand, it may require more CPU cycles to run MATCH queries,</Line>
  <Line number="12268">**   as separate queries of the FTS index are required for each synonym.</Line>
  <Line number="12269">**</Line>
  <Line number="12270">**   When using methods (2) or (3), it is important that the tokenizer only</Line>
  <Line number="12271">**   provide synonyms when tokenizing document text (method (2)) or query</Line>
  <Line number="12272">**   text (method (3)), not both. Doing so will not cause any errors, but is</Line>
  <Line number="12273">**   inefficient.</Line>
  <Line number="12274">*/</Line>
  <Line number="12275">typedef struct Fts5Tokenizer Fts5Tokenizer;</Line>
  <Line number="12276">typedef struct fts5_tokenizer fts5_tokenizer;</Line>
  <Line number="12277">struct fts5_tokenizer {</Line>
  <Line number="12278">  int (*xCreate)(void*, const char **azArg, int nArg, Fts5Tokenizer **ppOut);</Line>
  <Line number="12279">  void (*xDelete)(Fts5Tokenizer*);</Line>
  <Line number="12280">  int (*xTokenize)(Fts5Tokenizer*,</Line>
  <Line number="12281">      void *pCtx,</Line>
  <Line number="12282">      int flags,            /* Mask of FTS5_TOKENIZE_* flags */</Line>
  <Line number="12283">      const char *pText, int nText,</Line>
  <Line number="12284">      int (*xToken)(</Line>
  <Line number="12285">        void *pCtx,         /* Copy of 2nd argument to xTokenize() */</Line>
  <Line number="12286">        int tflags,         /* Mask of FTS5_TOKEN_* flags */</Line>
  <Line number="12287">        const char *pToken, /* Pointer to buffer containing token */</Line>
  <Line number="12288">        int nToken,         /* Size of token in bytes */</Line>
  <Line number="12289">        int iStart,         /* Byte offset of token within input text */</Line>
  <Line number="12290">        int iEnd            /* Byte offset of end of token within input text */</Line>
  <Line number="12291">      )</Line>
  <Line number="12292">  );</Line>
  <Line number="12293">};</Line>
  <Line number="12294"></Line>
  <Line number="12295">/* Flags that may be passed as the third argument to xTokenize() */</Line>
  <Line number="12296">#define FTS5_TOKENIZE_QUERY     0x0001</Line>
  <Line number="12297">#define FTS5_TOKENIZE_PREFIX    0x0002</Line>
  <Line number="12298">#define FTS5_TOKENIZE_DOCUMENT  0x0004</Line>
  <Line number="12299">#define FTS5_TOKENIZE_AUX       0x0008</Line>
  <Line number="12300"></Line>
  <Line number="12301">/* Flags that may be passed by the tokenizer implementation back to FTS5</Line>
  <Line number="12302">** as the third argument to the supplied xToken callback. */</Line>
  <Line number="12303">#define FTS5_TOKEN_COLOCATED    0x0001      /* Same position as prev. token */</Line>
  <Line number="12304"></Line>
  <Line number="12305">/*</Line>
  <Line number="12306">** END OF CUSTOM TOKENIZERS</Line>
  <Line number="12307">*************************************************************************/</Line>
  <Line number="12308"></Line>
  <Line number="12309">/*************************************************************************</Line>
  <Line number="12310">** FTS5 EXTENSION REGISTRATION API</Line>
  <Line number="12311">*/</Line>
  <Line number="12312">typedef struct fts5_api fts5_api;</Line>
  <Line number="12313">struct fts5_api {</Line>
  <Line number="12314">  int iVersion;                   /* Currently always set to 2 */</Line>
  <Line number="12315"></Line>
  <Line number="12316">  /* Create a new tokenizer */</Line>
  <Line number="12317">  int (*xCreateTokenizer)(</Line>
  <Line number="12318">    fts5_api *pApi,</Line>
  <Line number="12319">    const char *zName,</Line>
  <Line number="12320">    void *pContext,</Line>
  <Line number="12321">    fts5_tokenizer *pTokenizer,</Line>
  <Line number="12322">    void (*xDestroy)(void*)</Line>
  <Line number="12323">  );</Line>
  <Line number="12324"></Line>
  <Line number="12325">  /* Find an existing tokenizer */</Line>
  <Line number="12326">  int (*xFindTokenizer)(</Line>
  <Line number="12327">    fts5_api *pApi,</Line>
  <Line number="12328">    const char *zName,</Line>
  <Line number="12329">    void **ppContext,</Line>
  <Line number="12330">    fts5_tokenizer *pTokenizer</Line>
  <Line number="12331">  );</Line>
  <Line number="12332"></Line>
  <Line number="12333">  /* Create a new auxiliary function */</Line>
  <Line number="12334">  int (*xCreateFunction)(</Line>
  <Line number="12335">    fts5_api *pApi,</Line>
  <Line number="12336">    const char *zName,</Line>
  <Line number="12337">    void *pContext,</Line>
  <Line number="12338">    fts5_extension_function xFunction,</Line>
  <Line number="12339">    void (*xDestroy)(void*)</Line>
  <Line number="12340">  );</Line>
  <Line number="12341">};</Line>
  <Line number="12342"></Line>
  <Line number="12343">/*</Line>
  <Line number="12344">** END OF REGISTRATION API</Line>
  <Line number="12345">*************************************************************************/</Line>
  <Line number="12346"></Line>
  <Line number="12347">#ifdef __cplusplus</Line>
  <Line number="12348">}  /* end of the &apos;extern &quot;C&quot;&apos; block */</Line>
  <Line number="12349">#endif</Line>
  <Line number="12350"></Line>
  <Line number="12351">#endif /* _FTS5_H */</Line>
  <Line number="12352"></Line>
  <Line number="12353">/******** End of fts5.h *********/</Line>
</SourceFile>
