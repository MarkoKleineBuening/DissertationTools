runJobCommand
precondition analysis with entry:sqlite3TableLock
arguents: child
arguents: job
arguents: mode
arguents: precondition
handleJobInSeparateProcess0

Checking job 5678 ...about to run job:
preconNumber: 5, 1

  Running Model Checker with 1 checks ...entry: sqlite3TableLock, functionName: lockTable
  call void @qpr.precondition.lockTable(%struct.Parse.129* %0, i32 %1, i32 %2, i8 %3, i8* %4)
entry: sqlite3TableLock, functionName: lockTable
entry: sqlite3TableLock, functionName: sqlite3TableLock
try
try ready

    SMTSolver : stp
    CallStackBound : 0
    StopEncodingAfterCheckLoop : 1
    LoopUnrollBound : 1
    HavocLimit : 0
    PreconditionNumber : 5
    PreconditionLocation : jobs/5678
    TimeOut : 600
    InitializedGlobals : false
    IgnoreMissingFunctions : false
    StopEncodingAfterCheck : true
    OverApproxVaArgs : false
    PreconditionCheckMemory : false
    PreconditionOnlyArguments : trueI [0] lib/ModelChecker/Verifier.cpp:247 | EntryPoint : sqlite3TableLock
m_checker->run()

    Performing bounded model checking ...
      Performing pre-transformations on LLVM IR ...        0 sec [DONE]
        
      Performing logical encoding ...size Alloca: 1
size Alloca: 1
TODO MKB implement precondition handling: IE
Reading in precondition at: jobs/5678/precondition_lockTable.txt
preconFile: jobs/5678/precondition_lockTable.txt
ref: [underoverapprox]name of function arguments, argValue:  
ref: [underoverapprox]name of function arguments, argValue:  
name of function arguments line
param: i32 %arg1:0
---name: i32 %arg1, value: 0.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 0
###new bool cond: bool % = compare(%arg1, %i32__0)
param:  i32 %arg2:0
---name:  i32 %arg2, value: 0.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 0
###added bool cond: bool % = or(%, %)
param:  i8 %arg3:arbitrary
---name:  i8 %arg3, value: arbitrary.
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:1
---name: i32 %arg1, value: 1.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 1
###new bool cond: bool % = compare(%arg1, %i32__1)
param:  i32 %arg2:1
---name:  i32 %arg2, value: 1.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 1
###added bool cond: bool % = or(%, %)
param:  i8 %arg3:arbitrary
---name:  i8 %arg3, value: arbitrary.
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:1
---name: i32 %arg1, value: 1.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 1
###new bool cond: bool % = compare(%arg1, %i32__1)
param:  i32 %arg2:0
---name:  i32 %arg2, value: 0.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 0
###added bool cond: bool % = or(%, %)
param:  i8 %arg3:arbitrary
---name:  i8 %arg3, value: arbitrary.
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:2
---name: i32 %arg1, value: 2.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 2
###new bool cond: bool % = compare(%arg1, %i32__2)
param:  i32 %arg2:0
---name:  i32 %arg2, value: 0.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 0
###added bool cond: bool % = or(%, %)
param:  i8 %arg3:arbitrary
---name:  i8 %arg3, value: arbitrary.
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:3
---name: i32 %arg1, value: 3.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 3
###new bool cond: bool % = compare(%arg1, %i32__3)
param:  i32 %arg2:0
---name:  i32 %arg2, value: 0.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 0
###added bool cond: bool % = or(%, %)
param:  i8 %arg3:arbitrary
---name:  i8 %arg3, value: arbitrary.
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
Writing precondition type at: jobs/5678/precondition_type_sqlite3TableLock.txt

Type of Precondition:
[underoverapprox]
precondition found, end encoding
                      0 sec [DONE]
        Number of expressions:                        155077
        after encoding

      5 assertions before transformations (5 custom).

      Performing formula transformations ...
        Simplifier
          Number of rewrites                            3364
        Fixed Memory Address Assigner
          Number of moved ops                              8
          Number of rewrites                            5210
        Simplifier
          Number of moved ops                              2
          Number of rewrites                           73286
        Memory Model Encoder
          Number of moved ops                              0
          Number of rewrites                               0
        Simplifier
          Number of rewrites                               0
        Simplifier
          Number of rewrites                           69268
        ToASC Analyser
          Memcpy/memset found                             no
        Byte-Based Memory Creator
        Instantiation-Based ToASC Simplifier
        Simplifier
        FP Abstraction
          Number of rewrites                              44

Abstracted floating point operations.  The result might be a false positive.

        Simplifier
          Number of moved ops                              0
          Number of rewrites                               0
                                                           0 sec [DONE]
        
      5 assertions remain after transformations (5 custom).
after rewriteFormula
after sanityCheckFormula

      Running SMT solver (STP with MiniSat) ...32 %arg1:1; i32 %arg2:1; i8 %arg3:arbitrary; 
i32 %arg1:1; i32 %arg2:0; i8 %arg3:arbitrary; 
i32 %arg1:2; i32 %arg2:0; i8 %arg3:arbitrary; 
i32 %arg1:3; i32 %arg2:0; i8 %arg3:arbitrary; 

                                                           1 sec [DONE]
    allunsafe
    
                                                           1 sec [DONE]
  