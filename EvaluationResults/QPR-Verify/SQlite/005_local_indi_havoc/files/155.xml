<SourceFile>
  <Line number="1">/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */</Line>
  <Line number="2">#ifndef _ASM_GENERIC_IOCTL_H</Line>
  <Line number="3">#define _ASM_GENERIC_IOCTL_H</Line>
  <Line number="4"></Line>
  <Line number="5">/* ioctl command encoding: 32 bits total, command in lower 16 bits,</Line>
  <Line number="6"> * size of the parameter structure in the lower 14 bits of the</Line>
  <Line number="7"> * upper 16 bits.</Line>
  <Line number="8"> * Encoding the size of the parameter structure in the ioctl request</Line>
  <Line number="9"> * is useful for catching programs compiled with old versions</Line>
  <Line number="10"> * and to avoid overwriting user space outside the user buffer area.</Line>
  <Line number="11"> * The highest 2 bits are reserved for indicating the ``access mode&apos;&apos;.</Line>
  <Line number="12"> * NOTE: This limits the max parameter size to 16kB -1 !</Line>
  <Line number="13"> */</Line>
  <Line number="14"></Line>
  <Line number="15">/*</Line>
  <Line number="16"> * The following is for compatibility across the various Linux</Line>
  <Line number="17"> * platforms.  The generic ioctl numbering scheme doesn&apos;t really enforce</Line>
  <Line number="18"> * a type field.  De facto, however, the top 8 bits of the lower 16</Line>
  <Line number="19"> * bits are indeed used as a type field, so we might just as well make</Line>
  <Line number="20"> * this explicit here.  Please be sure to use the decoding macros</Line>
  <Line number="21"> * below from now on.</Line>
  <Line number="22"> */</Line>
  <Line number="23">#define _IOC_NRBITS	8</Line>
  <Line number="24">#define _IOC_TYPEBITS	8</Line>
  <Line number="25"></Line>
  <Line number="26">/*</Line>
  <Line number="27"> * Let any architecture override either of the following before</Line>
  <Line number="28"> * including this file.</Line>
  <Line number="29"> */</Line>
  <Line number="30"></Line>
  <Line number="31">#ifndef _IOC_SIZEBITS</Line>
  <Line number="32"># define _IOC_SIZEBITS	14</Line>
  <Line number="33">#endif</Line>
  <Line number="34"></Line>
  <Line number="35">#ifndef _IOC_DIRBITS</Line>
  <Line number="36"># define _IOC_DIRBITS	2</Line>
  <Line number="37">#endif</Line>
  <Line number="38"></Line>
  <Line number="39">#define _IOC_NRMASK	((1 &lt;&lt; _IOC_NRBITS)-1)</Line>
  <Line number="40">#define _IOC_TYPEMASK	((1 &lt;&lt; _IOC_TYPEBITS)-1)</Line>
  <Line number="41">#define _IOC_SIZEMASK	((1 &lt;&lt; _IOC_SIZEBITS)-1)</Line>
  <Line number="42">#define _IOC_DIRMASK	((1 &lt;&lt; _IOC_DIRBITS)-1)</Line>
  <Line number="43"></Line>
  <Line number="44">#define _IOC_NRSHIFT	0</Line>
  <Line number="45">#define _IOC_TYPESHIFT	(_IOC_NRSHIFT+_IOC_NRBITS)</Line>
  <Line number="46">#define _IOC_SIZESHIFT	(_IOC_TYPESHIFT+_IOC_TYPEBITS)</Line>
  <Line number="47">#define _IOC_DIRSHIFT	(_IOC_SIZESHIFT+_IOC_SIZEBITS)</Line>
  <Line number="48"></Line>
  <Line number="49">/*</Line>
  <Line number="50"> * Direction bits, which any architecture can choose to override</Line>
  <Line number="51"> * before including this file.</Line>
  <Line number="52"> *</Line>
  <Line number="53"> * NOTE: _IOC_WRITE means userland is writing and kernel is</Line>
  <Line number="54"> * reading. _IOC_READ means userland is reading and kernel is writing.</Line>
  <Line number="55"> */</Line>
  <Line number="56"></Line>
  <Line number="57">#ifndef _IOC_NONE</Line>
  <Line number="58"># define _IOC_NONE	0U</Line>
  <Line number="59">#endif</Line>
  <Line number="60"></Line>
  <Line number="61">#ifndef _IOC_WRITE</Line>
  <Line number="62"># define _IOC_WRITE	1U</Line>
  <Line number="63">#endif</Line>
  <Line number="64"></Line>
  <Line number="65">#ifndef _IOC_READ</Line>
  <Line number="66"># define _IOC_READ	2U</Line>
  <Line number="67">#endif</Line>
  <Line number="68"></Line>
  <Line number="69">#define _IOC(dir,type,nr,size) \</Line>
  <Line number="70">	(((dir)  &lt;&lt; _IOC_DIRSHIFT) | \</Line>
  <Line number="71">	 ((type) &lt;&lt; _IOC_TYPESHIFT) | \</Line>
  <Line number="72">	 ((nr)   &lt;&lt; _IOC_NRSHIFT) | \</Line>
  <Line number="73">	 ((size) &lt;&lt; _IOC_SIZESHIFT))</Line>
  <Line number="74"></Line>
  <Line number="75">#define _IOC_TYPECHECK(t) (sizeof(t))</Line>
  <Line number="76"></Line>
  <Line number="77">/*</Line>
  <Line number="78"> * Used to create numbers.</Line>
  <Line number="79"> *</Line>
  <Line number="80"> * NOTE: _IOW means userland is writing and kernel is reading. _IOR</Line>
  <Line number="81"> * means userland is reading and kernel is writing.</Line>
  <Line number="82"> */</Line>
  <Line number="83">#define _IO(type,nr)		_IOC(_IOC_NONE,(type),(nr),0)</Line>
  <Line number="84">#define _IOR(type,nr,size)	_IOC(_IOC_READ,(type),(nr),(_IOC_TYPECHECK(size)))</Line>
  <Line number="85">#define _IOW(type,nr,size)	_IOC(_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))</Line>
  <Line number="86">#define _IOWR(type,nr,size)	_IOC(_IOC_READ|_IOC_WRITE,(type),(nr),(_IOC_TYPECHECK(size)))</Line>
  <Line number="87">#define _IOR_BAD(type,nr,size)	_IOC(_IOC_READ,(type),(nr),sizeof(size))</Line>
  <Line number="88">#define _IOW_BAD(type,nr,size)	_IOC(_IOC_WRITE,(type),(nr),sizeof(size))</Line>
  <Line number="89">#define _IOWR_BAD(type,nr,size)	_IOC(_IOC_READ|_IOC_WRITE,(type),(nr),sizeof(size))</Line>
  <Line number="90"></Line>
  <Line number="91">/* used to decode ioctl numbers.. */</Line>
  <Line number="92">#define _IOC_DIR(nr)		(((nr) &gt;&gt; _IOC_DIRSHIFT) &amp; _IOC_DIRMASK)</Line>
  <Line number="93">#define _IOC_TYPE(nr)		(((nr) &gt;&gt; _IOC_TYPESHIFT) &amp; _IOC_TYPEMASK)</Line>
  <Line number="94">#define _IOC_NR(nr)		(((nr) &gt;&gt; _IOC_NRSHIFT) &amp; _IOC_NRMASK)</Line>
  <Line number="95">#define _IOC_SIZE(nr)		(((nr) &gt;&gt; _IOC_SIZESHIFT) &amp; _IOC_SIZEMASK)</Line>
  <Line number="96"></Line>
  <Line number="97">/* ...and for the drivers/sound files... */</Line>
  <Line number="98"></Line>
  <Line number="99">#define IOC_IN		(_IOC_WRITE &lt;&lt; _IOC_DIRSHIFT)</Line>
  <Line number="100">#define IOC_OUT		(_IOC_READ &lt;&lt; _IOC_DIRSHIFT)</Line>
  <Line number="101">#define IOC_INOUT	((_IOC_WRITE|_IOC_READ) &lt;&lt; _IOC_DIRSHIFT)</Line>
  <Line number="102">#define IOCSIZE_MASK	(_IOC_SIZEMASK &lt;&lt; _IOC_SIZESHIFT)</Line>
  <Line number="103">#define IOCSIZE_SHIFT	(_IOC_SIZESHIFT)</Line>
  <Line number="104"></Line>
  <Line number="105">#endif /* _ASM_GENERIC_IOCTL_H */</Line>
</SourceFile>
