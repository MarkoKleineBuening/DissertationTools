<SourceFile>
  <Line number="1">/* Define iscanonical macro.  ldbl-96 version.</Line>
  <Line number="2">   Copyright (C) 2016-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef _MATH_H</Line>
  <Line number="20"># error &quot;Never use &lt;bits/iscanonical.h&gt; directly; include &lt;math.h&gt; instead.&quot;</Line>
  <Line number="21">#endif</Line>
  <Line number="22"></Line>
  <Line number="23">extern int __iscanonicall (long double __x)</Line>
  <Line number="24">     __THROW __attribute__ ((__const__));</Line>
  <Line number="25">#define __iscanonicalf(x) ((void) (__typeof (x)) (x), 1)</Line>
  <Line number="26">#define __iscanonical(x) ((void) (__typeof (x)) (x), 1)</Line>
  <Line number="27">#if __HAVE_DISTINCT_FLOAT128</Line>
  <Line number="28"># define __iscanonicalf128(x) ((void) (__typeof (x)) (x), 1)</Line>
  <Line number="29">#endif</Line>
  <Line number="30"></Line>
  <Line number="31">/* Return nonzero value if X is canonical.  In IEEE interchange binary</Line>
  <Line number="32">   formats, all values are canonical, but the argument must still be</Line>
  <Line number="33">   converted to its semantic type for any exceptions arising from the</Line>
  <Line number="34">   conversion, before being discarded; in extended precision, there</Line>
  <Line number="35">   are encodings that are not consistently handled as corresponding to</Line>
  <Line number="36">   any particular value of the type, and we return 0 for those.  */</Line>
  <Line number="37">#ifndef __cplusplus</Line>
  <Line number="38"># define iscanonical(x) __MATH_TG ((x), __iscanonical, (x))</Line>
  <Line number="39">#else</Line>
  <Line number="40">/* In C++ mode, __MATH_TG cannot be used, because it relies on</Line>
  <Line number="41">   __builtin_types_compatible_p, which is a C-only builtin.  On the</Line>
  <Line number="42">   other hand, overloading provides the means to distinguish between</Line>
  <Line number="43">   the floating-point types.  The overloading resolution will match</Line>
  <Line number="44">   the correct parameter (regardless of type qualifiers (i.e.: const</Line>
  <Line number="45">   and volatile)).  */</Line>
  <Line number="46">extern &quot;C++&quot; {</Line>
  <Line number="47">inline int iscanonical (float __val) { return __iscanonicalf (__val); }</Line>
  <Line number="48">inline int iscanonical (double __val) { return __iscanonical (__val); }</Line>
  <Line number="49">inline int iscanonical (long double __val) { return __iscanonicall (__val); }</Line>
  <Line number="50"># if __HAVE_DISTINCT_FLOAT128</Line>
  <Line number="51">inline int iscanonical (_Float128 __val) { return __iscanonicalf128 (__val); }</Line>
  <Line number="52"># endif</Line>
  <Line number="53">}</Line>
  <Line number="54">#endif /* __cplusplus */</Line>
</SourceFile>
