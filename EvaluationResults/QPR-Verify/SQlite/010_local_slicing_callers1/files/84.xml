<SourceFile>
  <Line number="1">/* Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">/*</Line>
  <Line number="19"> *	ISO C99 Standard: 7.23 Date and time	&lt;time.h&gt;</Line>
  <Line number="20"> */</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef	_TIME_H</Line>
  <Line number="23">#define _TIME_H	1</Line>
  <Line number="24"></Line>
  <Line number="25">#include &lt;features.h&gt;</Line>
  <Line number="26"></Line>
  <Line number="27">#define __need_size_t</Line>
  <Line number="28">#define __need_NULL</Line>
  <Line number="29">#include &lt;stddef.h&gt;</Line>
  <Line number="30"></Line>
  <Line number="31">/* This defines CLOCKS_PER_SEC, which is the number of processor clock</Line>
  <Line number="32">   ticks per second, and possibly a number of other constants.   */</Line>
  <Line number="33">#include &lt;bits/time.h&gt;</Line>
  <Line number="34"></Line>
  <Line number="35">/* Many of the typedefs and structs whose official home is this header</Line>
  <Line number="36">   may also need to be defined by other headers.  */</Line>
  <Line number="37">#include &lt;bits/types/clock_t.h&gt;</Line>
  <Line number="38">#include &lt;bits/types/time_t.h&gt;</Line>
  <Line number="39">#include &lt;bits/types/struct_tm.h&gt;</Line>
  <Line number="40"></Line>
  <Line number="41">#if defined __USE_POSIX199309 || defined __USE_ISOC11</Line>
  <Line number="42"># include &lt;bits/types/struct_timespec.h&gt;</Line>
  <Line number="43">#endif</Line>
  <Line number="44"></Line>
  <Line number="45">#ifdef __USE_POSIX199309</Line>
  <Line number="46"># include &lt;bits/types/clockid_t.h&gt;</Line>
  <Line number="47"># include &lt;bits/types/timer_t.h&gt;</Line>
  <Line number="48"># include &lt;bits/types/struct_itimerspec.h&gt;</Line>
  <Line number="49">struct sigevent;</Line>
  <Line number="50">#endif</Line>
  <Line number="51"></Line>
  <Line number="52">#ifdef __USE_XOPEN2K</Line>
  <Line number="53"># ifndef __pid_t_defined</Line>
  <Line number="54">typedef __pid_t pid_t;</Line>
  <Line number="55">#  define __pid_t_defined</Line>
  <Line number="56"># endif</Line>
  <Line number="57">#endif</Line>
  <Line number="58"></Line>
  <Line number="59">#ifdef __USE_XOPEN2K8</Line>
  <Line number="60"># include &lt;bits/types/locale_t.h&gt;</Line>
  <Line number="61">#endif</Line>
  <Line number="62"></Line>
  <Line number="63">#ifdef __USE_ISOC11</Line>
  <Line number="64">/* Time base values for timespec_get.  */</Line>
  <Line number="65"># define TIME_UTC 1</Line>
  <Line number="66">#endif</Line>
  <Line number="67"></Line>
  <Line number="68">__BEGIN_DECLS</Line>
  <Line number="69"></Line>
  <Line number="70">/* Time used by the program so far (user time + system time).</Line>
  <Line number="71">   The result / CLOCKS_PER_SEC is program time in seconds.  */</Line>
  <Line number="72">extern clock_t clock (void) __THROW;</Line>
  <Line number="73"></Line>
  <Line number="74">/* Return the current time and put it in *TIMER if TIMER is not NULL.  */</Line>
  <Line number="75">extern time_t time (time_t *__timer) __THROW;</Line>
  <Line number="76"></Line>
  <Line number="77">/* Return the difference between TIME1 and TIME0.  */</Line>
  <Line number="78">extern double difftime (time_t __time1, time_t __time0)</Line>
  <Line number="79">     __THROW __attribute__ ((__const__));</Line>
  <Line number="80"></Line>
  <Line number="81">/* Return the `time_t&apos; representation of TP and normalize TP.  */</Line>
  <Line number="82">extern time_t mktime (struct tm *__tp) __THROW;</Line>
  <Line number="83"></Line>
  <Line number="84"></Line>
  <Line number="85">/* Format TP into S according to FORMAT.</Line>
  <Line number="86">   Write no more than MAXSIZE characters and return the number</Line>
  <Line number="87">   of characters written, or 0 if it would exceed MAXSIZE.  */</Line>
  <Line number="88">extern size_t strftime (char *__restrict __s, size_t __maxsize,</Line>
  <Line number="89">			const char *__restrict __format,</Line>
  <Line number="90">			const struct tm *__restrict __tp) __THROW;</Line>
  <Line number="91"></Line>
  <Line number="92">#ifdef __USE_XOPEN</Line>
  <Line number="93">/* Parse S according to FORMAT and store binary time information in TP.</Line>
  <Line number="94">   The return value is a pointer to the first unparsed character in S.  */</Line>
  <Line number="95">extern char *strptime (const char *__restrict __s,</Line>
  <Line number="96">		       const char *__restrict __fmt, struct tm *__tp)</Line>
  <Line number="97">     __THROW;</Line>
  <Line number="98">#endif</Line>
  <Line number="99"></Line>
  <Line number="100">#ifdef __USE_XOPEN2K8</Line>
  <Line number="101">/* Similar to the two functions above but take the information from</Line>
  <Line number="102">   the provided locale and not the global locale.  */</Line>
  <Line number="103"></Line>
  <Line number="104">extern size_t strftime_l (char *__restrict __s, size_t __maxsize,</Line>
  <Line number="105">			  const char *__restrict __format,</Line>
  <Line number="106">			  const struct tm *__restrict __tp,</Line>
  <Line number="107">			  locale_t __loc) __THROW;</Line>
  <Line number="108">#endif</Line>
  <Line number="109"></Line>
  <Line number="110">#ifdef __USE_GNU</Line>
  <Line number="111">extern char *strptime_l (const char *__restrict __s,</Line>
  <Line number="112">			 const char *__restrict __fmt, struct tm *__tp,</Line>
  <Line number="113">			 locale_t __loc) __THROW;</Line>
  <Line number="114">#endif</Line>
  <Line number="115"></Line>
  <Line number="116"></Line>
  <Line number="117">/* Return the `struct tm&apos; representation of *TIMER</Line>
  <Line number="118">   in Universal Coordinated Time (aka Greenwich Mean Time).  */</Line>
  <Line number="119">extern struct tm *gmtime (const time_t *__timer) __THROW;</Line>
  <Line number="120"></Line>
  <Line number="121">/* Return the `struct tm&apos; representation</Line>
  <Line number="122">   of *TIMER in the local timezone.  */</Line>
  <Line number="123">extern struct tm *localtime (const time_t *__timer) __THROW;</Line>
  <Line number="124"></Line>
  <Line number="125">#if defined __USE_POSIX || __GLIBC_USE (ISOC2X)</Line>
  <Line number="126">/* Return the `struct tm&apos; representation of *TIMER in UTC,</Line>
  <Line number="127">   using *TP to store the result.  */</Line>
  <Line number="128">extern struct tm *gmtime_r (const time_t *__restrict __timer,</Line>
  <Line number="129">			    struct tm *__restrict __tp) __THROW;</Line>
  <Line number="130"></Line>
  <Line number="131">/* Return the `struct tm&apos; representation of *TIMER in local time,</Line>
  <Line number="132">   using *TP to store the result.  */</Line>
  <Line number="133">extern struct tm *localtime_r (const time_t *__restrict __timer,</Line>
  <Line number="134">			       struct tm *__restrict __tp) __THROW;</Line>
  <Line number="135">#endif	/* POSIX || C2X */</Line>
  <Line number="136"></Line>
  <Line number="137">/* Return a string of the form &quot;Day Mon dd hh:mm:ss yyyy\n&quot;</Line>
  <Line number="138">   that is the representation of TP in this format.  */</Line>
  <Line number="139">extern char *asctime (const struct tm *__tp) __THROW;</Line>
  <Line number="140"></Line>
  <Line number="141">/* Equivalent to `asctime (localtime (timer))&apos;.  */</Line>
  <Line number="142">extern char *ctime (const time_t *__timer) __THROW;</Line>
  <Line number="143"></Line>
  <Line number="144">#if defined __USE_POSIX || __GLIBC_USE (ISOC2X)</Line>
  <Line number="145">/* Reentrant versions of the above functions.  */</Line>
  <Line number="146"></Line>
  <Line number="147">/* Return in BUF a string of the form &quot;Day Mon dd hh:mm:ss yyyy\n&quot;</Line>
  <Line number="148">   that is the representation of TP in this format.  */</Line>
  <Line number="149">extern char *asctime_r (const struct tm *__restrict __tp,</Line>
  <Line number="150">			char *__restrict __buf) __THROW;</Line>
  <Line number="151"></Line>
  <Line number="152">/* Equivalent to `asctime_r (localtime_r (timer, *TMP*), buf)&apos;.  */</Line>
  <Line number="153">extern char *ctime_r (const time_t *__restrict __timer,</Line>
  <Line number="154">		      char *__restrict __buf) __THROW;</Line>
  <Line number="155">#endif	/* POSIX || C2X */</Line>
  <Line number="156"></Line>
  <Line number="157"></Line>
  <Line number="158">/* Defined in localtime.c.  */</Line>
  <Line number="159">extern char *__tzname[2];	/* Current timezone names.  */</Line>
  <Line number="160">extern int __daylight;		/* If daylight-saving time is ever in use.  */</Line>
  <Line number="161">extern long int __timezone;	/* Seconds west of UTC.  */</Line>
  <Line number="162"></Line>
  <Line number="163"></Line>
  <Line number="164">#ifdef	__USE_POSIX</Line>
  <Line number="165">/* Same as above.  */</Line>
  <Line number="166">extern char *tzname[2];</Line>
  <Line number="167"></Line>
  <Line number="168">/* Set time conversion information from the TZ environment variable.</Line>
  <Line number="169">   If TZ is not defined, a locale-dependent default is used.  */</Line>
  <Line number="170">extern void tzset (void) __THROW;</Line>
  <Line number="171">#endif</Line>
  <Line number="172"></Line>
  <Line number="173">#if defined __USE_MISC || defined __USE_XOPEN</Line>
  <Line number="174">extern int daylight;</Line>
  <Line number="175">extern long int timezone;</Line>
  <Line number="176">#endif</Line>
  <Line number="177"></Line>
  <Line number="178"></Line>
  <Line number="179">/* Nonzero if YEAR is a leap year (every 4 years,</Line>
  <Line number="180">   except every 100th isn&apos;t, and every 400th is).  */</Line>
  <Line number="181">#define __isleap(year)	\</Line>
  <Line number="182">  ((year) % 4 == 0 &amp;&amp; ((year) % 100 != 0 || (year) % 400 == 0))</Line>
  <Line number="183"></Line>
  <Line number="184"></Line>
  <Line number="185">#ifdef __USE_MISC</Line>
  <Line number="186">/* Miscellaneous functions many Unices inherited from the public domain</Line>
  <Line number="187">   localtime package.  These are included only for compatibility.  */</Line>
  <Line number="188"></Line>
  <Line number="189">/* Like `mktime&apos;, but for TP represents Universal Time, not local time.  */</Line>
  <Line number="190">extern time_t timegm (struct tm *__tp) __THROW;</Line>
  <Line number="191"></Line>
  <Line number="192">/* Another name for `mktime&apos;.  */</Line>
  <Line number="193">extern time_t timelocal (struct tm *__tp) __THROW;</Line>
  <Line number="194"></Line>
  <Line number="195">/* Return the number of days in YEAR.  */</Line>
  <Line number="196">extern int dysize (int __year) __THROW  __attribute__ ((__const__));</Line>
  <Line number="197">#endif</Line>
  <Line number="198"></Line>
  <Line number="199"></Line>
  <Line number="200">#ifdef __USE_POSIX199309</Line>
  <Line number="201">/* Pause execution for a number of nanoseconds.</Line>
  <Line number="202"></Line>
  <Line number="203">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="204">   __THROW.  */</Line>
  <Line number="205">extern int nanosleep (const struct timespec *__requested_time,</Line>
  <Line number="206">		      struct timespec *__remaining);</Line>
  <Line number="207"></Line>
  <Line number="208"></Line>
  <Line number="209">/* Get resolution of clock CLOCK_ID.  */</Line>
  <Line number="210">extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __THROW;</Line>
  <Line number="211"></Line>
  <Line number="212">/* Get current value of clock CLOCK_ID and store it in TP.  */</Line>
  <Line number="213">extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __THROW;</Line>
  <Line number="214"></Line>
  <Line number="215">/* Set clock CLOCK_ID to value TP.  */</Line>
  <Line number="216">extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)</Line>
  <Line number="217">     __THROW;</Line>
  <Line number="218"></Line>
  <Line number="219"># ifdef __USE_XOPEN2K</Line>
  <Line number="220">/* High-resolution sleep with the specified clock.</Line>
  <Line number="221"></Line>
  <Line number="222">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="223">   __THROW.  */</Line>
  <Line number="224">extern int clock_nanosleep (clockid_t __clock_id, int __flags,</Line>
  <Line number="225">			    const struct timespec *__req,</Line>
  <Line number="226">			    struct timespec *__rem);</Line>
  <Line number="227"></Line>
  <Line number="228">/* Return clock ID for CPU-time clock.  */</Line>
  <Line number="229">extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __THROW;</Line>
  <Line number="230"># endif</Line>
  <Line number="231"></Line>
  <Line number="232"></Line>
  <Line number="233">/* Create new per-process timer using CLOCK_ID.  */</Line>
  <Line number="234">extern int timer_create (clockid_t __clock_id,</Line>
  <Line number="235">			 struct sigevent *__restrict __evp,</Line>
  <Line number="236">			 timer_t *__restrict __timerid) __THROW;</Line>
  <Line number="237"></Line>
  <Line number="238">/* Delete timer TIMERID.  */</Line>
  <Line number="239">extern int timer_delete (timer_t __timerid) __THROW;</Line>
  <Line number="240"></Line>
  <Line number="241">/* Set timer TIMERID to VALUE, returning old value in OVALUE.  */</Line>
  <Line number="242">extern int timer_settime (timer_t __timerid, int __flags,</Line>
  <Line number="243">			  const struct itimerspec *__restrict __value,</Line>
  <Line number="244">			  struct itimerspec *__restrict __ovalue) __THROW;</Line>
  <Line number="245"></Line>
  <Line number="246">/* Get current value of timer TIMERID and store it in VALUE.  */</Line>
  <Line number="247">extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)</Line>
  <Line number="248">     __THROW;</Line>
  <Line number="249"></Line>
  <Line number="250">/* Get expiration overrun for timer TIMERID.  */</Line>
  <Line number="251">extern int timer_getoverrun (timer_t __timerid) __THROW;</Line>
  <Line number="252">#endif</Line>
  <Line number="253"></Line>
  <Line number="254"></Line>
  <Line number="255">#ifdef __USE_ISOC11</Line>
  <Line number="256">/* Set TS to calendar time based in time base BASE.  */</Line>
  <Line number="257">extern int timespec_get (struct timespec *__ts, int __base)</Line>
  <Line number="258">     __THROW __nonnull ((1));</Line>
  <Line number="259">#endif</Line>
  <Line number="260"></Line>
  <Line number="261"></Line>
  <Line number="262">#ifdef __USE_XOPEN_EXTENDED</Line>
  <Line number="263">/* Set to one of the following values to indicate an error.</Line>
  <Line number="264">     1  the DATEMSK environment variable is null or undefined,</Line>
  <Line number="265">     2  the template file cannot be opened for reading,</Line>
  <Line number="266">     3  failed to get file status information,</Line>
  <Line number="267">     4  the template file is not a regular file,</Line>
  <Line number="268">     5  an error is encountered while reading the template file,</Line>
  <Line number="269">     6  memory allication failed (not enough memory available),</Line>
  <Line number="270">     7  there is no line in the template that matches the input,</Line>
  <Line number="271">     8  invalid input specification Example: February 31 or a time is</Line>
  <Line number="272">	specified that can not be represented in a time_t (representing</Line>
  <Line number="273">	the time in seconds since 00:00:00 UTC, January 1, 1970) */</Line>
  <Line number="274">extern int getdate_err;</Line>
  <Line number="275"></Line>
  <Line number="276">/* Parse the given string as a date specification and return a value</Line>
  <Line number="277">   representing the value.  The templates from the file identified by</Line>
  <Line number="278">   the environment variable DATEMSK are used.  In case of an error</Line>
  <Line number="279">   `getdate_err&apos; is set.</Line>
  <Line number="280"></Line>
  <Line number="281">   This function is a possible cancellation point and therefore not</Line>
  <Line number="282">   marked with __THROW.  */</Line>
  <Line number="283">extern struct tm *getdate (const char *__string);</Line>
  <Line number="284">#endif</Line>
  <Line number="285"></Line>
  <Line number="286">#ifdef __USE_GNU</Line>
  <Line number="287">/* Since `getdate&apos; is not reentrant because of the use of `getdate_err&apos;</Line>
  <Line number="288">   and the static buffer to return the result in, we provide a thread-safe</Line>
  <Line number="289">   variant.  The functionality is the same.  The result is returned in</Line>
  <Line number="290">   the buffer pointed to by RESBUFP and in case of an error the return</Line>
  <Line number="291">   value is != 0 with the same values as given above for `getdate_err&apos;.</Line>
  <Line number="292"></Line>
  <Line number="293">   This function is not part of POSIX and therefore no official</Line>
  <Line number="294">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="295">   or due to the implementation it is a cancellation point and</Line>
  <Line number="296">   therefore not marked with __THROW.  */</Line>
  <Line number="297">extern int getdate_r (const char *__restrict __string,</Line>
  <Line number="298">		      struct tm *__restrict __resbufp);</Line>
  <Line number="299">#endif</Line>
  <Line number="300"></Line>
  <Line number="301">__END_DECLS</Line>
  <Line number="302"></Line>
  <Line number="303">#endif /* time.h.  */</Line>
</SourceFile>
