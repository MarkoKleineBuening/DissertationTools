<SourceFile>
  <Line number="1">/* bits/types.h -- definitions of __*_t types underlying *_t types.</Line>
  <Line number="2">   Copyright (C) 2002-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">/*</Line>
  <Line number="20"> * Never include this file directly; use &lt;sys/types.h&gt; instead.</Line>
  <Line number="21"> */</Line>
  <Line number="22"></Line>
  <Line number="23">#ifndef	_BITS_TYPES_H</Line>
  <Line number="24">#define	_BITS_TYPES_H	1</Line>
  <Line number="25"></Line>
  <Line number="26">#include &lt;features.h&gt;</Line>
  <Line number="27">#include &lt;bits/wordsize.h&gt;</Line>
  <Line number="28">#include &lt;bits/timesize.h&gt;</Line>
  <Line number="29"></Line>
  <Line number="30">/* Convenience types.  */</Line>
  <Line number="31">typedef unsigned char __u_char;</Line>
  <Line number="32">typedef unsigned short int __u_short;</Line>
  <Line number="33">typedef unsigned int __u_int;</Line>
  <Line number="34">typedef unsigned long int __u_long;</Line>
  <Line number="35"></Line>
  <Line number="36">/* Fixed-size types, underlying types depend on word size and compiler.  */</Line>
  <Line number="37">typedef signed char __int8_t;</Line>
  <Line number="38">typedef unsigned char __uint8_t;</Line>
  <Line number="39">typedef signed short int __int16_t;</Line>
  <Line number="40">typedef unsigned short int __uint16_t;</Line>
  <Line number="41">typedef signed int __int32_t;</Line>
  <Line number="42">typedef unsigned int __uint32_t;</Line>
  <Line number="43">#if __WORDSIZE == 64</Line>
  <Line number="44">typedef signed long int __int64_t;</Line>
  <Line number="45">typedef unsigned long int __uint64_t;</Line>
  <Line number="46">#else</Line>
  <Line number="47">__extension__ typedef signed long long int __int64_t;</Line>
  <Line number="48">__extension__ typedef unsigned long long int __uint64_t;</Line>
  <Line number="49">#endif</Line>
  <Line number="50"></Line>
  <Line number="51">/* Smallest types with at least a given width.  */</Line>
  <Line number="52">typedef __int8_t __int_least8_t;</Line>
  <Line number="53">typedef __uint8_t __uint_least8_t;</Line>
  <Line number="54">typedef __int16_t __int_least16_t;</Line>
  <Line number="55">typedef __uint16_t __uint_least16_t;</Line>
  <Line number="56">typedef __int32_t __int_least32_t;</Line>
  <Line number="57">typedef __uint32_t __uint_least32_t;</Line>
  <Line number="58">typedef __int64_t __int_least64_t;</Line>
  <Line number="59">typedef __uint64_t __uint_least64_t;</Line>
  <Line number="60"></Line>
  <Line number="61">/* quad_t is also 64 bits.  */</Line>
  <Line number="62">#if __WORDSIZE == 64</Line>
  <Line number="63">typedef long int __quad_t;</Line>
  <Line number="64">typedef unsigned long int __u_quad_t;</Line>
  <Line number="65">#else</Line>
  <Line number="66">__extension__ typedef long long int __quad_t;</Line>
  <Line number="67">__extension__ typedef unsigned long long int __u_quad_t;</Line>
  <Line number="68">#endif</Line>
  <Line number="69"></Line>
  <Line number="70">/* Largest integral types.  */</Line>
  <Line number="71">#if __WORDSIZE == 64</Line>
  <Line number="72">typedef long int __intmax_t;</Line>
  <Line number="73">typedef unsigned long int __uintmax_t;</Line>
  <Line number="74">#else</Line>
  <Line number="75">__extension__ typedef long long int __intmax_t;</Line>
  <Line number="76">__extension__ typedef unsigned long long int __uintmax_t;</Line>
  <Line number="77">#endif</Line>
  <Line number="78"></Line>
  <Line number="79"></Line>
  <Line number="80">/* The machine-dependent file &lt;bits/typesizes.h&gt; defines __*_T_TYPE</Line>
  <Line number="81">   macros for each of the OS types we define below.  The definitions</Line>
  <Line number="82">   of those macros must use the following macros for underlying types.</Line>
  <Line number="83">   We define __S&lt;SIZE&gt;_TYPE and __U&lt;SIZE&gt;_TYPE for the signed and unsigned</Line>
  <Line number="84">   variants of each of the following integer types on this machine.</Line>
  <Line number="85"></Line>
  <Line number="86">	16		-- &quot;natural&quot; 16-bit type (always short)</Line>
  <Line number="87">	32		-- &quot;natural&quot; 32-bit type (always int)</Line>
  <Line number="88">	64		-- &quot;natural&quot; 64-bit type (long or long long)</Line>
  <Line number="89">	LONG32		-- 32-bit type, traditionally long</Line>
  <Line number="90">	QUAD		-- 64-bit type, traditionally long long</Line>
  <Line number="91">	WORD		-- natural type of __WORDSIZE bits (int or long)</Line>
  <Line number="92">	LONGWORD	-- type of __WORDSIZE bits, traditionally long</Line>
  <Line number="93"></Line>
  <Line number="94">   We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the</Line>
  <Line number="95">   conventional uses of `long&apos; or `long long&apos; type modifiers match the</Line>
  <Line number="96">   types we define, even when a less-adorned type would be the same size.</Line>
  <Line number="97">   This matters for (somewhat) portably writing printf/scanf formats for</Line>
  <Line number="98">   these types, where using the appropriate l or ll format modifiers can</Line>
  <Line number="99">   make the typedefs and the formats match up across all GNU platforms.  If</Line>
  <Line number="100">   we used `long&apos; when it&apos;s 64 bits where `long long&apos; is expected, then the</Line>
  <Line number="101">   compiler would warn about the formats not matching the argument types,</Line>
  <Line number="102">   and the programmer changing them to shut up the compiler would break the</Line>
  <Line number="103">   program&apos;s portability.</Line>
  <Line number="104"></Line>
  <Line number="105">   Here we assume what is presently the case in all the GCC configurations</Line>
  <Line number="106">   we support: long long is always 64 bits, long is always word/address size,</Line>
  <Line number="107">   and int is always 32 bits.  */</Line>
  <Line number="108"></Line>
  <Line number="109">#define	__S16_TYPE		short int</Line>
  <Line number="110">#define __U16_TYPE		unsigned short int</Line>
  <Line number="111">#define	__S32_TYPE		int</Line>
  <Line number="112">#define __U32_TYPE		unsigned int</Line>
  <Line number="113">#define __SLONGWORD_TYPE	long int</Line>
  <Line number="114">#define __ULONGWORD_TYPE	unsigned long int</Line>
  <Line number="115">#if __WORDSIZE == 32</Line>
  <Line number="116"># define __SQUAD_TYPE		__int64_t</Line>
  <Line number="117"># define __UQUAD_TYPE		__uint64_t</Line>
  <Line number="118"># define __SWORD_TYPE		int</Line>
  <Line number="119"># define __UWORD_TYPE		unsigned int</Line>
  <Line number="120"># define __SLONG32_TYPE		long int</Line>
  <Line number="121"># define __ULONG32_TYPE		unsigned long int</Line>
  <Line number="122"># define __S64_TYPE		__int64_t</Line>
  <Line number="123"># define __U64_TYPE		__uint64_t</Line>
  <Line number="124">/* We want __extension__ before typedef&apos;s that use nonstandard base types</Line>
  <Line number="125">   such as `long long&apos; in C89 mode.  */</Line>
  <Line number="126"># define __STD_TYPE		__extension__ typedef</Line>
  <Line number="127">#elif __WORDSIZE == 64</Line>
  <Line number="128"># define __SQUAD_TYPE		long int</Line>
  <Line number="129"># define __UQUAD_TYPE		unsigned long int</Line>
  <Line number="130"># define __SWORD_TYPE		long int</Line>
  <Line number="131"># define __UWORD_TYPE		unsigned long int</Line>
  <Line number="132"># define __SLONG32_TYPE		int</Line>
  <Line number="133"># define __ULONG32_TYPE		unsigned int</Line>
  <Line number="134"># define __S64_TYPE		long int</Line>
  <Line number="135"># define __U64_TYPE		unsigned long int</Line>
  <Line number="136">/* No need to mark the typedef with __extension__.   */</Line>
  <Line number="137"># define __STD_TYPE		typedef</Line>
  <Line number="138">#else</Line>
  <Line number="139"># error</Line>
  <Line number="140">#endif</Line>
  <Line number="141">#include &lt;bits/typesizes.h&gt;	/* Defines __*_T_TYPE macros.  */</Line>
  <Line number="142">#include &lt;bits/time64.h&gt;	/* Defines __TIME*_T_TYPE macros.  */</Line>
  <Line number="143"></Line>
  <Line number="144"></Line>
  <Line number="145">__STD_TYPE __DEV_T_TYPE __dev_t;	/* Type of device numbers.  */</Line>
  <Line number="146">__STD_TYPE __UID_T_TYPE __uid_t;	/* Type of user identifications.  */</Line>
  <Line number="147">__STD_TYPE __GID_T_TYPE __gid_t;	/* Type of group identifications.  */</Line>
  <Line number="148">__STD_TYPE __INO_T_TYPE __ino_t;	/* Type of file serial numbers.  */</Line>
  <Line number="149">__STD_TYPE __INO64_T_TYPE __ino64_t;	/* Type of file serial numbers (LFS).*/</Line>
  <Line number="150">__STD_TYPE __MODE_T_TYPE __mode_t;	/* Type of file attribute bitmasks.  */</Line>
  <Line number="151">__STD_TYPE __NLINK_T_TYPE __nlink_t;	/* Type of file link counts.  */</Line>
  <Line number="152">__STD_TYPE __OFF_T_TYPE __off_t;	/* Type of file sizes and offsets.  */</Line>
  <Line number="153">__STD_TYPE __OFF64_T_TYPE __off64_t;	/* Type of file sizes and offsets (LFS).  */</Line>
  <Line number="154">__STD_TYPE __PID_T_TYPE __pid_t;	/* Type of process identifications.  */</Line>
  <Line number="155">__STD_TYPE __FSID_T_TYPE __fsid_t;	/* Type of file system IDs.  */</Line>
  <Line number="156">__STD_TYPE __CLOCK_T_TYPE __clock_t;	/* Type of CPU usage counts.  */</Line>
  <Line number="157">__STD_TYPE __RLIM_T_TYPE __rlim_t;	/* Type for resource measurement.  */</Line>
  <Line number="158">__STD_TYPE __RLIM64_T_TYPE __rlim64_t;	/* Type for resource measurement (LFS).  */</Line>
  <Line number="159">__STD_TYPE __ID_T_TYPE __id_t;		/* General type for IDs.  */</Line>
  <Line number="160">__STD_TYPE __TIME_T_TYPE __time_t;	/* Seconds since the Epoch.  */</Line>
  <Line number="161">__STD_TYPE __USECONDS_T_TYPE __useconds_t; /* Count of microseconds.  */</Line>
  <Line number="162">__STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; /* Signed count of microseconds.  */</Line>
  <Line number="163"></Line>
  <Line number="164">__STD_TYPE __DADDR_T_TYPE __daddr_t;	/* The type of a disk address.  */</Line>
  <Line number="165">__STD_TYPE __KEY_T_TYPE __key_t;	/* Type of an IPC key.  */</Line>
  <Line number="166"></Line>
  <Line number="167">/* Clock ID used in clock and timer functions.  */</Line>
  <Line number="168">__STD_TYPE __CLOCKID_T_TYPE __clockid_t;</Line>
  <Line number="169"></Line>
  <Line number="170">/* Timer ID returned by `timer_create&apos;.  */</Line>
  <Line number="171">__STD_TYPE __TIMER_T_TYPE __timer_t;</Line>
  <Line number="172"></Line>
  <Line number="173">/* Type to represent block size.  */</Line>
  <Line number="174">__STD_TYPE __BLKSIZE_T_TYPE __blksize_t;</Line>
  <Line number="175"></Line>
  <Line number="176">/* Types from the Large File Support interface.  */</Line>
  <Line number="177"></Line>
  <Line number="178">/* Type to count number of disk blocks.  */</Line>
  <Line number="179">__STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;</Line>
  <Line number="180">__STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;</Line>
  <Line number="181"></Line>
  <Line number="182">/* Type to count file system blocks.  */</Line>
  <Line number="183">__STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;</Line>
  <Line number="184">__STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;</Line>
  <Line number="185"></Line>
  <Line number="186">/* Type to count file system nodes.  */</Line>
  <Line number="187">__STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;</Line>
  <Line number="188">__STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;</Line>
  <Line number="189"></Line>
  <Line number="190">/* Type of miscellaneous file system fields.  */</Line>
  <Line number="191">__STD_TYPE __FSWORD_T_TYPE __fsword_t;</Line>
  <Line number="192"></Line>
  <Line number="193">__STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.  */</Line>
  <Line number="194"></Line>
  <Line number="195">/* Signed long type used in system calls.  */</Line>
  <Line number="196">__STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;</Line>
  <Line number="197">/* Unsigned long type used in system calls.  */</Line>
  <Line number="198">__STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;</Line>
  <Line number="199"></Line>
  <Line number="200">/* These few don&apos;t really vary by system, they always correspond</Line>
  <Line number="201">   to one of the other defined types.  */</Line>
  <Line number="202">typedef __off64_t __loff_t;	/* Type of file sizes and offsets (LFS).  */</Line>
  <Line number="203">typedef char *__caddr_t;</Line>
  <Line number="204"></Line>
  <Line number="205">/* Duplicates info from stdint.h but this is used in unistd.h.  */</Line>
  <Line number="206">__STD_TYPE __SWORD_TYPE __intptr_t;</Line>
  <Line number="207"></Line>
  <Line number="208">/* Duplicate info from sys/socket.h.  */</Line>
  <Line number="209">__STD_TYPE __U32_TYPE __socklen_t;</Line>
  <Line number="210"></Line>
  <Line number="211">/* C99: An integer type that can be accessed as an atomic entity,</Line>
  <Line number="212">   even in the presence of asynchronous interrupts.</Line>
  <Line number="213">   It is not currently necessary for this to be machine-specific.  */</Line>
  <Line number="214">typedef int __sig_atomic_t;</Line>
  <Line number="215"></Line>
  <Line number="216">/* Seconds since the Epoch, visible to user code when time_t is too</Line>
  <Line number="217">   narrow only for consistency with the old way of widening too-narrow</Line>
  <Line number="218">   types.  User code should never use __time64_t.  */</Line>
  <Line number="219">#if __TIMESIZE == 64 &amp;&amp; defined __LIBC</Line>
  <Line number="220"># define __time64_t __time_t</Line>
  <Line number="221">#elif __TIMESIZE != 64</Line>
  <Line number="222">__STD_TYPE __TIME64_T_TYPE __time64_t;</Line>
  <Line number="223">#endif</Line>
  <Line number="224"></Line>
  <Line number="225">#undef __STD_TYPE</Line>
  <Line number="226"></Line>
  <Line number="227">#endif /* bits/types.h */</Line>
</SourceFile>
