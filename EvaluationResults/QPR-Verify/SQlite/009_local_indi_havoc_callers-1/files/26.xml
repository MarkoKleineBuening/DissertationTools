<SourceFile>
  <Line number="1">/* Macros to control TS 18661-3 glibc features on x86.</Line>
  <Line number="2">   Copyright (C) 2017-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef _BITS_FLOATN_H</Line>
  <Line number="20">#define _BITS_FLOATN_H</Line>
  <Line number="21"></Line>
  <Line number="22">#include &lt;features.h&gt;</Line>
  <Line number="23"></Line>
  <Line number="24">/* Defined to 1 if the current compiler invocation provides a</Line>
  <Line number="25">   floating-point type with the IEEE 754 binary128 format, and this</Line>
  <Line number="26">   glibc includes corresponding *f128 interfaces for it.  The required</Line>
  <Line number="27">   libgcc support was added some time after the basic compiler</Line>
  <Line number="28">   support, for x86_64 and x86.  */</Line>
  <Line number="29">#if (defined __x86_64__							\</Line>
  <Line number="30">     ? __GNUC_PREREQ (4, 3)						\</Line>
  <Line number="31">     : (defined __GNU__ ? __GNUC_PREREQ (4, 5) : __GNUC_PREREQ (4, 4)))</Line>
  <Line number="32"># define __HAVE_FLOAT128 1</Line>
  <Line number="33">#else</Line>
  <Line number="34"># define __HAVE_FLOAT128 0</Line>
  <Line number="35">#endif</Line>
  <Line number="36"></Line>
  <Line number="37">/* Defined to 1 if __HAVE_FLOAT128 is 1 and the type is ABI-distinct</Line>
  <Line number="38">   from the default float, double and long double types in this glibc.  */</Line>
  <Line number="39">#if __HAVE_FLOAT128</Line>
  <Line number="40"># define __HAVE_DISTINCT_FLOAT128 1</Line>
  <Line number="41">#else</Line>
  <Line number="42"># define __HAVE_DISTINCT_FLOAT128 0</Line>
  <Line number="43">#endif</Line>
  <Line number="44"></Line>
  <Line number="45">/* Defined to 1 if the current compiler invocation provides a</Line>
  <Line number="46">   floating-point type with the right format for _Float64x, and this</Line>
  <Line number="47">   glibc includes corresponding *f64x interfaces for it.  */</Line>
  <Line number="48">#define __HAVE_FLOAT64X 1</Line>
  <Line number="49"></Line>
  <Line number="50">/* Defined to 1 if __HAVE_FLOAT64X is 1 and _Float64x has the format</Line>
  <Line number="51">   of long double.  Otherwise, if __HAVE_FLOAT64X is 1, _Float64x has</Line>
  <Line number="52">   the format of _Float128, which must be different from that of long</Line>
  <Line number="53">   double.  */</Line>
  <Line number="54">#define __HAVE_FLOAT64X_LONG_DOUBLE 1</Line>
  <Line number="55"></Line>
  <Line number="56">#ifndef __ASSEMBLER__</Line>
  <Line number="57"></Line>
  <Line number="58">/* Defined to concatenate the literal suffix to be used with _Float128</Line>
  <Line number="59">   types, if __HAVE_FLOAT128 is 1. */</Line>
  <Line number="60"># if __HAVE_FLOAT128</Line>
  <Line number="61">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="62">/* The literal suffix f128 exists only since GCC 7.0.  */</Line>
  <Line number="63">#   define __f128(x) x##q</Line>
  <Line number="64">#  else</Line>
  <Line number="65">#   define __f128(x) x##f128</Line>
  <Line number="66">#  endif</Line>
  <Line number="67"># endif</Line>
  <Line number="68"></Line>
  <Line number="69">/* Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.  */</Line>
  <Line number="70"># if __HAVE_FLOAT128</Line>
  <Line number="71">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="72">/* Add a typedef for older GCC compilers which don&apos;t natively support</Line>
  <Line number="73">   _Complex _Float128.  */</Line>
  <Line number="74">typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));</Line>
  <Line number="75">#   define __CFLOAT128 __cfloat128</Line>
  <Line number="76">#  else</Line>
  <Line number="77">#   define __CFLOAT128 _Complex _Float128</Line>
  <Line number="78">#  endif</Line>
  <Line number="79"># endif</Line>
  <Line number="80"></Line>
  <Line number="81">/* The remaining of this file provides support for older compilers.  */</Line>
  <Line number="82"># if __HAVE_FLOAT128</Line>
  <Line number="83"></Line>
  <Line number="84">/* The type _Float128 exists only since GCC 7.0.  */</Line>
  <Line number="85">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="86">typedef __float128 _Float128;</Line>
  <Line number="87">#  endif</Line>
  <Line number="88"></Line>
  <Line number="89">/* __builtin_huge_valf128 doesn&apos;t exist before GCC 7.0.  */</Line>
  <Line number="90">#  if !__GNUC_PREREQ (7, 0)</Line>
  <Line number="91">#   define __builtin_huge_valf128() ((_Float128) __builtin_huge_val ())</Line>
  <Line number="92">#  endif</Line>
  <Line number="93"></Line>
  <Line number="94">/* Older GCC has only a subset of built-in functions for _Float128 on</Line>
  <Line number="95">   x86, and __builtin_infq is not usable in static initializers.</Line>
  <Line number="96">   Converting a narrower sNaN to _Float128 produces a quiet NaN, so</Line>
  <Line number="97">   attempts to use _Float128 sNaNs will not work properly with older</Line>
  <Line number="98">   compilers.  */</Line>
  <Line number="99">#  if !__GNUC_PREREQ (7, 0)</Line>
  <Line number="100">#   define __builtin_copysignf128 __builtin_copysignq</Line>
  <Line number="101">#   define __builtin_fabsf128 __builtin_fabsq</Line>
  <Line number="102">#   define __builtin_inff128() ((_Float128) __builtin_inf ())</Line>
  <Line number="103">#   define __builtin_nanf128(x) ((_Float128) __builtin_nan (x))</Line>
  <Line number="104">#   define __builtin_nansf128(x) ((_Float128) __builtin_nans (x))</Line>
  <Line number="105">#  endif</Line>
  <Line number="106"></Line>
  <Line number="107">/* In math/math.h, __MATH_TG will expand signbit to __builtin_signbit*,</Line>
  <Line number="108">   e.g.: __builtin_signbitf128, before GCC 6.  However, there has never</Line>
  <Line number="109">   been a __builtin_signbitf128 in GCC and the type-generic builtin is</Line>
  <Line number="110">   only available since GCC 6.  */</Line>
  <Line number="111">#  if !__GNUC_PREREQ (6, 0)</Line>
  <Line number="112">#   define __builtin_signbitf128 __signbitf128</Line>
  <Line number="113">#  endif</Line>
  <Line number="114"></Line>
  <Line number="115"># endif</Line>
  <Line number="116"></Line>
  <Line number="117">#endif /* !__ASSEMBLER__.  */</Line>
  <Line number="118"></Line>
  <Line number="119">#include &lt;bits/floatn-common.h&gt;</Line>
  <Line number="120"></Line>
  <Line number="121">#endif /* _BITS_FLOATN_H */</Line>
</SourceFile>
