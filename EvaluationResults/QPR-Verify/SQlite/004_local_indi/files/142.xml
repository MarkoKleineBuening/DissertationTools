<SourceFile>
  <Line number="1">/* System dependent definitions for run-time dynamic loading.</Line>
  <Line number="2">   Copyright (C) 1996-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef _DLFCN_H</Line>
  <Line number="20"># error &quot;Never use &lt;bits/dlfcn.h&gt; directly; include &lt;dlfcn.h&gt; instead.&quot;</Line>
  <Line number="21">#endif</Line>
  <Line number="22"></Line>
  <Line number="23">/* The MODE argument to `dlopen&apos; contains one of the following: */</Line>
  <Line number="24">#define RTLD_LAZY	0x00001	/* Lazy function call binding.  */</Line>
  <Line number="25">#define RTLD_NOW	0x00002	/* Immediate function call binding.  */</Line>
  <Line number="26">#define	RTLD_BINDING_MASK   0x3	/* Mask of binding time value.  */</Line>
  <Line number="27">#define RTLD_NOLOAD	0x00004	/* Do not load the object.  */</Line>
  <Line number="28">#define RTLD_DEEPBIND	0x00008	/* Use deep binding.  */</Line>
  <Line number="29"></Line>
  <Line number="30">/* If the following bit is set in the MODE argument to `dlopen&apos;,</Line>
  <Line number="31">   the symbols of the loaded object and its dependencies are made</Line>
  <Line number="32">   visible as if the object were linked directly into the program.  */</Line>
  <Line number="33">#define RTLD_GLOBAL	0x00100</Line>
  <Line number="34"></Line>
  <Line number="35">/* Unix98 demands the following flag which is the inverse to RTLD_GLOBAL.</Line>
  <Line number="36">   The implementation does this by default and so we can define the</Line>
  <Line number="37">   value to zero.  */</Line>
  <Line number="38">#define RTLD_LOCAL	0</Line>
  <Line number="39"></Line>
  <Line number="40">/* Do not delete object when closed.  */</Line>
  <Line number="41">#define RTLD_NODELETE	0x01000</Line>
  <Line number="42"></Line>
  <Line number="43">#ifdef __USE_GNU</Line>
  <Line number="44">/* To support profiling of shared objects it is a good idea to call</Line>
  <Line number="45">   the function found using `dlsym&apos; using the following macro since</Line>
  <Line number="46">   these calls do not use the PLT.  But this would mean the dynamic</Line>
  <Line number="47">   loader has no chance to find out when the function is called.  The</Line>
  <Line number="48">   macro applies the necessary magic so that profiling is possible.</Line>
  <Line number="49">   Rewrite</Line>
  <Line number="50">	foo = (*fctp) (arg1, arg2);</Line>
  <Line number="51">   into</Line>
  <Line number="52">        foo = DL_CALL_FCT (fctp, (arg1, arg2));</Line>
  <Line number="53">*/</Line>
  <Line number="54"># define DL_CALL_FCT(fctp, args) \</Line>
  <Line number="55">  (_dl_mcount_wrapper_check ((void *) (fctp)), (*(fctp)) args)</Line>
  <Line number="56"></Line>
  <Line number="57">__BEGIN_DECLS</Line>
  <Line number="58"></Line>
  <Line number="59">/* This function calls the profiling functions.  */</Line>
  <Line number="60">extern void _dl_mcount_wrapper_check (void *__selfpc) __THROW;</Line>
  <Line number="61"></Line>
  <Line number="62">__END_DECLS</Line>
  <Line number="63"></Line>
  <Line number="64">#endif</Line>
</SourceFile>
