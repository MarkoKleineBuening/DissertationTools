<SourceFile>
  <Line number="1">/* The proper definitions for Linux&apos;s sigaction.</Line>
  <Line number="2">   Copyright (C) 1993-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef _BITS_SIGACTION_H</Line>
  <Line number="20">#define _BITS_SIGACTION_H 1</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef _SIGNAL_H</Line>
  <Line number="23"># error &quot;Never include &lt;bits/sigaction.h&gt; directly; use &lt;signal.h&gt; instead.&quot;</Line>
  <Line number="24">#endif</Line>
  <Line number="25"></Line>
  <Line number="26">/* Structure describing the action to be taken when a signal arrives.  */</Line>
  <Line number="27">struct sigaction</Line>
  <Line number="28">  {</Line>
  <Line number="29">    /* Signal handler.  */</Line>
  <Line number="30">#if defined __USE_POSIX199309 || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="31">    union</Line>
  <Line number="32">      {</Line>
  <Line number="33">	/* Used if SA_SIGINFO is not set.  */</Line>
  <Line number="34">	__sighandler_t sa_handler;</Line>
  <Line number="35">	/* Used if SA_SIGINFO is set.  */</Line>
  <Line number="36">	void (*sa_sigaction) (int, siginfo_t *, void *);</Line>
  <Line number="37">      }</Line>
  <Line number="38">    __sigaction_handler;</Line>
  <Line number="39"># define sa_handler	__sigaction_handler.sa_handler</Line>
  <Line number="40"># define sa_sigaction	__sigaction_handler.sa_sigaction</Line>
  <Line number="41">#else</Line>
  <Line number="42">    __sighandler_t sa_handler;</Line>
  <Line number="43">#endif</Line>
  <Line number="44"></Line>
  <Line number="45">    /* Additional set of signals to be blocked.  */</Line>
  <Line number="46">    __sigset_t sa_mask;</Line>
  <Line number="47"></Line>
  <Line number="48">    /* Special flags.  */</Line>
  <Line number="49">    int sa_flags;</Line>
  <Line number="50"></Line>
  <Line number="51">    /* Restore handler.  */</Line>
  <Line number="52">    void (*sa_restorer) (void);</Line>
  <Line number="53">  };</Line>
  <Line number="54"></Line>
  <Line number="55">/* Bits in `sa_flags&apos;.  */</Line>
  <Line number="56">#define	SA_NOCLDSTOP  1		 /* Don&apos;t send SIGCHLD when children stop.  */</Line>
  <Line number="57">#define SA_NOCLDWAIT  2		 /* Don&apos;t create zombie on child death.  */</Line>
  <Line number="58">#define SA_SIGINFO    4		 /* Invoke signal-catching function with</Line>
  <Line number="59">				    three arguments instead of one.  */</Line>
  <Line number="60">#if defined __USE_XOPEN_EXTENDED || defined __USE_MISC</Line>
  <Line number="61"># define SA_ONSTACK   0x08000000 /* Use signal stack by using `sa_restorer&apos;. */</Line>
  <Line number="62">#endif</Line>
  <Line number="63">#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</Line>
  <Line number="64"># define SA_RESTART   0x10000000 /* Restart syscall on signal return.  */</Line>
  <Line number="65"># define SA_NODEFER   0x40000000 /* Don&apos;t automatically block the signal when</Line>
  <Line number="66">				    its handler is being executed.  */</Line>
  <Line number="67"># define SA_RESETHAND 0x80000000 /* Reset to SIG_DFL on entry to handler.  */</Line>
  <Line number="68">#endif</Line>
  <Line number="69">#ifdef __USE_MISC</Line>
  <Line number="70"># define SA_INTERRUPT 0x20000000 /* Historical no-op.  */</Line>
  <Line number="71"></Line>
  <Line number="72">/* Some aliases for the SA_ constants.  */</Line>
  <Line number="73"># define SA_NOMASK    SA_NODEFER</Line>
  <Line number="74"># define SA_ONESHOT   SA_RESETHAND</Line>
  <Line number="75"># define SA_STACK     SA_ONSTACK</Line>
  <Line number="76">#endif</Line>
  <Line number="77"></Line>
  <Line number="78">/* Values for the HOW argument to `sigprocmask&apos;.  */</Line>
  <Line number="79">#define	SIG_BLOCK     0		 /* Block signals.  */</Line>
  <Line number="80">#define	SIG_UNBLOCK   1		 /* Unblock signals.  */</Line>
  <Line number="81">#define	SIG_SETMASK   2		 /* Set the set of blocked signals.  */</Line>
  <Line number="82"></Line>
  <Line number="83">#endif</Line>
</SourceFile>
