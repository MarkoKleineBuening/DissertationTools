<SourceFile>
  <Line number="1">/* Copyright (C) 1995-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">#ifndef	_BITS_TIMEX_H</Line>
  <Line number="19">#define	_BITS_TIMEX_H	1</Line>
  <Line number="20"></Line>
  <Line number="21">#include &lt;bits/types.h&gt;</Line>
  <Line number="22">#include &lt;bits/types/struct_timeval.h&gt;</Line>
  <Line number="23"></Line>
  <Line number="24">/* These definitions from linux/timex.h as of 3.18.  */</Line>
  <Line number="25"></Line>
  <Line number="26">struct timex</Line>
  <Line number="27">{</Line>
  <Line number="28">  unsigned int modes;		/* mode selector */</Line>
  <Line number="29">  __syscall_slong_t offset;	/* time offset (usec) */</Line>
  <Line number="30">  __syscall_slong_t freq;	/* frequency offset (scaled ppm) */</Line>
  <Line number="31">  __syscall_slong_t maxerror;	/* maximum error (usec) */</Line>
  <Line number="32">  __syscall_slong_t esterror;	/* estimated error (usec) */</Line>
  <Line number="33">  int status;			/* clock command/status */</Line>
  <Line number="34">  __syscall_slong_t constant;	/* pll time constant */</Line>
  <Line number="35">  __syscall_slong_t precision;	/* clock precision (usec) (ro) */</Line>
  <Line number="36">  __syscall_slong_t tolerance;	/* clock frequency tolerance (ppm) (ro) */</Line>
  <Line number="37">  struct timeval time;		/* (read only, except for ADJ_SETOFFSET) */</Line>
  <Line number="38">  __syscall_slong_t tick;	/* (modified) usecs between clock ticks */</Line>
  <Line number="39">  __syscall_slong_t ppsfreq;	/* pps frequency (scaled ppm) (ro) */</Line>
  <Line number="40">  __syscall_slong_t jitter;	/* pps jitter (us) (ro) */</Line>
  <Line number="41">  int shift;			/* interval duration (s) (shift) (ro) */</Line>
  <Line number="42">  __syscall_slong_t stabil;	/* pps stability (scaled ppm) (ro) */</Line>
  <Line number="43">  __syscall_slong_t jitcnt;	/* jitter limit exceeded (ro) */</Line>
  <Line number="44">  __syscall_slong_t calcnt;	/* calibration intervals (ro) */</Line>
  <Line number="45">  __syscall_slong_t errcnt;	/* calibration errors (ro) */</Line>
  <Line number="46">  __syscall_slong_t stbcnt;	/* stability limit exceeded (ro) */</Line>
  <Line number="47"></Line>
  <Line number="48">  int tai;			/* TAI offset (ro) */</Line>
  <Line number="49"></Line>
  <Line number="50">  /* ??? */</Line>
  <Line number="51">  int  :32; int  :32; int  :32; int  :32;</Line>
  <Line number="52">  int  :32; int  :32; int  :32; int  :32;</Line>
  <Line number="53">  int  :32; int  :32; int  :32;</Line>
  <Line number="54">};</Line>
  <Line number="55"></Line>
  <Line number="56">/* Mode codes (timex.mode) */</Line>
  <Line number="57">#define ADJ_OFFSET		0x0001	/* time offset */</Line>
  <Line number="58">#define ADJ_FREQUENCY		0x0002	/* frequency offset */</Line>
  <Line number="59">#define ADJ_MAXERROR		0x0004	/* maximum time error */</Line>
  <Line number="60">#define ADJ_ESTERROR		0x0008	/* estimated time error */</Line>
  <Line number="61">#define ADJ_STATUS		0x0010	/* clock status */</Line>
  <Line number="62">#define ADJ_TIMECONST		0x0020	/* pll time constant */</Line>
  <Line number="63">#define ADJ_TAI			0x0080	/* set TAI offset */</Line>
  <Line number="64">#define ADJ_SETOFFSET		0x0100	/* add &apos;time&apos; to current time */</Line>
  <Line number="65">#define ADJ_MICRO		0x1000	/* select microsecond resolution */</Line>
  <Line number="66">#define ADJ_NANO		0x2000	/* select nanosecond resolution */</Line>
  <Line number="67">#define ADJ_TICK		0x4000	/* tick value */</Line>
  <Line number="68">#define ADJ_OFFSET_SINGLESHOT	0x8001	/* old-fashioned adjtime */</Line>
  <Line number="69">#define ADJ_OFFSET_SS_READ	0xa001	/* read-only adjtime */</Line>
  <Line number="70"></Line>
  <Line number="71">/* xntp 3.4 compatibility names */</Line>
  <Line number="72">#define MOD_OFFSET	ADJ_OFFSET</Line>
  <Line number="73">#define MOD_FREQUENCY	ADJ_FREQUENCY</Line>
  <Line number="74">#define MOD_MAXERROR	ADJ_MAXERROR</Line>
  <Line number="75">#define MOD_ESTERROR	ADJ_ESTERROR</Line>
  <Line number="76">#define MOD_STATUS	ADJ_STATUS</Line>
  <Line number="77">#define MOD_TIMECONST	ADJ_TIMECONST</Line>
  <Line number="78">#define MOD_CLKB	ADJ_TICK</Line>
  <Line number="79">#define MOD_CLKA	ADJ_OFFSET_SINGLESHOT /* 0x8000 in original */</Line>
  <Line number="80">#define MOD_TAI		ADJ_TAI</Line>
  <Line number="81">#define MOD_MICRO	ADJ_MICRO</Line>
  <Line number="82">#define MOD_NANO	ADJ_NANO</Line>
  <Line number="83"></Line>
  <Line number="84"></Line>
  <Line number="85">/* Status codes (timex.status) */</Line>
  <Line number="86">#define STA_PLL		0x0001	/* enable PLL updates (rw) */</Line>
  <Line number="87">#define STA_PPSFREQ	0x0002	/* enable PPS freq discipline (rw) */</Line>
  <Line number="88">#define STA_PPSTIME	0x0004	/* enable PPS time discipline (rw) */</Line>
  <Line number="89">#define STA_FLL		0x0008	/* select frequency-lock mode (rw) */</Line>
  <Line number="90"></Line>
  <Line number="91">#define STA_INS		0x0010	/* insert leap (rw) */</Line>
  <Line number="92">#define STA_DEL		0x0020	/* delete leap (rw) */</Line>
  <Line number="93">#define STA_UNSYNC	0x0040	/* clock unsynchronized (rw) */</Line>
  <Line number="94">#define STA_FREQHOLD	0x0080	/* hold frequency (rw) */</Line>
  <Line number="95"></Line>
  <Line number="96">#define STA_PPSSIGNAL	0x0100	/* PPS signal present (ro) */</Line>
  <Line number="97">#define STA_PPSJITTER	0x0200	/* PPS signal jitter exceeded (ro) */</Line>
  <Line number="98">#define STA_PPSWANDER	0x0400	/* PPS signal wander exceeded (ro) */</Line>
  <Line number="99">#define STA_PPSERROR	0x0800	/* PPS signal calibration error (ro) */</Line>
  <Line number="100"></Line>
  <Line number="101">#define STA_CLOCKERR	0x1000	/* clock hardware fault (ro) */</Line>
  <Line number="102">#define STA_NANO	0x2000	/* resolution (0 = us, 1 = ns) (ro) */</Line>
  <Line number="103">#define STA_MODE	0x4000	/* mode (0 = PLL, 1 = FLL) (ro) */</Line>
  <Line number="104">#define STA_CLK		0x8000	/* clock source (0 = A, 1 = B) (ro) */</Line>
  <Line number="105"></Line>
  <Line number="106">/* Read-only bits */</Line>
  <Line number="107">#define STA_RONLY (STA_PPSSIGNAL | STA_PPSJITTER | STA_PPSWANDER \</Line>
  <Line number="108">    | STA_PPSERROR | STA_CLOCKERR | STA_NANO | STA_MODE | STA_CLK)</Line>
  <Line number="109"></Line>
  <Line number="110">#endif /* bits/timex.h */</Line>
</SourceFile>
