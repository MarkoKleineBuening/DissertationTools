<SourceFile>
  <Line number="1">/* Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">/*</Line>
  <Line number="19"> *	ISO C99 Standard: 7.14 Signal handling &lt;signal.h&gt;</Line>
  <Line number="20"> */</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef	_SIGNAL_H</Line>
  <Line number="23">#define _SIGNAL_H</Line>
  <Line number="24"></Line>
  <Line number="25">#include &lt;features.h&gt;</Line>
  <Line number="26"></Line>
  <Line number="27">__BEGIN_DECLS</Line>
  <Line number="28"></Line>
  <Line number="29">#include &lt;bits/types.h&gt;</Line>
  <Line number="30">#include &lt;bits/signum.h&gt;</Line>
  <Line number="31"></Line>
  <Line number="32">#include &lt;bits/types/sig_atomic_t.h&gt;</Line>
  <Line number="33"></Line>
  <Line number="34">#if defined __USE_POSIX</Line>
  <Line number="35">#include &lt;bits/types/sigset_t.h&gt;</Line>
  <Line number="36">#endif</Line>
  <Line number="37"></Line>
  <Line number="38">#if defined __USE_XOPEN || defined __USE_XOPEN2K</Line>
  <Line number="39"># ifndef __pid_t_defined</Line>
  <Line number="40">typedef __pid_t pid_t;</Line>
  <Line number="41">#  define __pid_t_defined</Line>
  <Line number="42">#endif</Line>
  <Line number="43">#ifdef __USE_XOPEN</Line>
  <Line number="44"># endif</Line>
  <Line number="45"># ifndef __uid_t_defined</Line>
  <Line number="46">typedef __uid_t uid_t;</Line>
  <Line number="47">#  define __uid_t_defined</Line>
  <Line number="48"># endif</Line>
  <Line number="49">#endif	/* Unix98 */</Line>
  <Line number="50"></Line>
  <Line number="51">#ifdef __USE_POSIX199309</Line>
  <Line number="52">/* We need `struct timespec&apos; later on.  */</Line>
  <Line number="53"># include &lt;bits/types/struct_timespec.h&gt;</Line>
  <Line number="54">#endif</Line>
  <Line number="55"></Line>
  <Line number="56">#if defined __USE_POSIX199309 || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="57"># include &lt;bits/types/siginfo_t.h&gt;</Line>
  <Line number="58"># include &lt;bits/siginfo-consts.h&gt;</Line>
  <Line number="59">#endif</Line>
  <Line number="60"></Line>
  <Line number="61">#ifdef __USE_MISC</Line>
  <Line number="62"># include &lt;bits/types/sigval_t.h&gt;</Line>
  <Line number="63">#endif</Line>
  <Line number="64"></Line>
  <Line number="65">#ifdef __USE_POSIX199309</Line>
  <Line number="66"># include &lt;bits/types/sigevent_t.h&gt;</Line>
  <Line number="67"># include &lt;bits/sigevent-consts.h&gt;</Line>
  <Line number="68">#endif</Line>
  <Line number="69"></Line>
  <Line number="70"></Line>
  <Line number="71">/* Type of a signal handler.  */</Line>
  <Line number="72">typedef void (*__sighandler_t) (int);</Line>
  <Line number="73"></Line>
  <Line number="74">/* The X/Open definition of `signal&apos; specifies the SVID semantic.  Use</Line>
  <Line number="75">   the additional function `sysv_signal&apos; when X/Open compatibility is</Line>
  <Line number="76">   requested.  */</Line>
  <Line number="77">extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)</Line>
  <Line number="78">     __THROW;</Line>
  <Line number="79">#ifdef __USE_GNU</Line>
  <Line number="80">extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)</Line>
  <Line number="81">     __THROW;</Line>
  <Line number="82">#endif</Line>
  <Line number="83"></Line>
  <Line number="84">/* Set the handler for the signal SIG to HANDLER, returning the old</Line>
  <Line number="85">   handler, or SIG_ERR on error.</Line>
  <Line number="86">   By default `signal&apos; has the BSD semantic.  */</Line>
  <Line number="87">#ifdef __USE_MISC</Line>
  <Line number="88">extern __sighandler_t signal (int __sig, __sighandler_t __handler)</Line>
  <Line number="89">     __THROW;</Line>
  <Line number="90">#else</Line>
  <Line number="91">/* Make sure the used `signal&apos; implementation is the SVID version. */</Line>
  <Line number="92"># ifdef __REDIRECT_NTH</Line>
  <Line number="93">extern __sighandler_t __REDIRECT_NTH (signal,</Line>
  <Line number="94">				      (int __sig, __sighandler_t __handler),</Line>
  <Line number="95">				      __sysv_signal);</Line>
  <Line number="96"># else</Line>
  <Line number="97">#  define signal __sysv_signal</Line>
  <Line number="98"># endif</Line>
  <Line number="99">#endif</Line>
  <Line number="100"></Line>
  <Line number="101">#if defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8</Line>
  <Line number="102">/* The X/Open definition of `signal&apos; conflicts with the BSD version.</Line>
  <Line number="103">   So they defined another function `bsd_signal&apos;.  */</Line>
  <Line number="104">extern __sighandler_t bsd_signal (int __sig, __sighandler_t __handler)</Line>
  <Line number="105">     __THROW;</Line>
  <Line number="106">#endif</Line>
  <Line number="107"></Line>
  <Line number="108">/* Send signal SIG to process number PID.  If PID is zero,</Line>
  <Line number="109">   send SIG to all processes in the current process&apos;s process group.</Line>
  <Line number="110">   If PID is &lt; -1, send SIG to all processes in process group - PID.  */</Line>
  <Line number="111">#ifdef __USE_POSIX</Line>
  <Line number="112">extern int kill (__pid_t __pid, int __sig) __THROW;</Line>
  <Line number="113">#endif /* Use POSIX.  */</Line>
  <Line number="114"></Line>
  <Line number="115">#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="116">/* Send SIG to all processes in process group PGRP.</Line>
  <Line number="117">   If PGRP is zero, send SIG to all processes in</Line>
  <Line number="118">   the current process&apos;s process group.  */</Line>
  <Line number="119">extern int killpg (__pid_t __pgrp, int __sig) __THROW;</Line>
  <Line number="120">#endif /* Use misc || X/Open Unix.  */</Line>
  <Line number="121"></Line>
  <Line number="122">/* Raise signal SIG, i.e., send SIG to yourself.  */</Line>
  <Line number="123">extern int raise (int __sig) __THROW;</Line>
  <Line number="124"></Line>
  <Line number="125">#ifdef __USE_MISC</Line>
  <Line number="126">/* SVID names for the same things.  */</Line>
  <Line number="127">extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)</Line>
  <Line number="128">     __THROW;</Line>
  <Line number="129">extern int gsignal (int __sig) __THROW;</Line>
  <Line number="130">#endif /* Use misc.  */</Line>
  <Line number="131"></Line>
  <Line number="132">#ifdef __USE_XOPEN2K8</Line>
  <Line number="133">/* Print a message describing the meaning of the given signal number.  */</Line>
  <Line number="134">extern void psignal (int __sig, const char *__s);</Line>
  <Line number="135"></Line>
  <Line number="136">/* Print a message describing the meaning of the given signal information.  */</Line>
  <Line number="137">extern void psiginfo (const siginfo_t *__pinfo, const char *__s);</Line>
  <Line number="138">#endif /* POSIX 2008.  */</Line>
  <Line number="139"></Line>
  <Line number="140"></Line>
  <Line number="141"></Line>
  <Line number="142">/* The `sigpause&apos; function in X/Open defines the argument as the</Line>
  <Line number="143">   signal number.  This requires redirecting to another function</Line>
  <Line number="144">   because the default version in glibc uses an old BSD interface.</Line>
  <Line number="145"></Line>
  <Line number="146">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="147">   __THROW.  */</Line>
  <Line number="148"></Line>
  <Line number="149">#ifdef __USE_XOPEN_EXTENDED</Line>
  <Line number="150"># ifdef __GNUC__</Line>
  <Line number="151">extern int sigpause (int __sig) __asm__ (&quot;__xpg_sigpause&quot;);</Line>
  <Line number="152"># else</Line>
  <Line number="153">extern int __sigpause (int __sig_or_mask, int __is_sig);</Line>
  <Line number="154">/* Remove a signal from the signal mask and suspend the process.  */</Line>
  <Line number="155">#  define sigpause(sig) __sigpause ((sig), 1)</Line>
  <Line number="156"># endif</Line>
  <Line number="157">#endif</Line>
  <Line number="158"></Line>
  <Line number="159"></Line>
  <Line number="160">#ifdef __USE_MISC</Line>
  <Line number="161">/* None of the following functions should be used anymore.  They are here</Line>
  <Line number="162">   only for compatibility.  A single word (`int&apos;) is not guaranteed to be</Line>
  <Line number="163">   enough to hold a complete signal mask and therefore these functions</Line>
  <Line number="164">   simply do not work in many situations.  Use `sigprocmask&apos; instead.  */</Line>
  <Line number="165"></Line>
  <Line number="166">/* Compute mask for signal SIG.  */</Line>
  <Line number="167"># define sigmask(sig) ((int)(1u &lt;&lt; ((sig) - 1)))</Line>
  <Line number="168"></Line>
  <Line number="169">/* Block signals in MASK, returning the old mask.  */</Line>
  <Line number="170">extern int sigblock (int __mask) __THROW __attribute_deprecated__;</Line>
  <Line number="171"></Line>
  <Line number="172">/* Set the mask of blocked signals to MASK, returning the old mask.  */</Line>
  <Line number="173">extern int sigsetmask (int __mask) __THROW __attribute_deprecated__;</Line>
  <Line number="174"></Line>
  <Line number="175">/* Return currently selected signal mask.  */</Line>
  <Line number="176">extern int siggetmask (void) __THROW __attribute_deprecated__;</Line>
  <Line number="177">#endif /* Use misc.  */</Line>
  <Line number="178"></Line>
  <Line number="179"></Line>
  <Line number="180">#ifdef __USE_MISC</Line>
  <Line number="181"># define NSIG	_NSIG</Line>
  <Line number="182">#endif</Line>
  <Line number="183"></Line>
  <Line number="184">#ifdef __USE_GNU</Line>
  <Line number="185">typedef __sighandler_t sighandler_t;</Line>
  <Line number="186">#endif</Line>
  <Line number="187"></Line>
  <Line number="188">/* 4.4 BSD uses the name `sig_t&apos; for this.  */</Line>
  <Line number="189">#ifdef __USE_MISC</Line>
  <Line number="190">typedef __sighandler_t sig_t;</Line>
  <Line number="191">#endif</Line>
  <Line number="192"></Line>
  <Line number="193">#ifdef __USE_POSIX</Line>
  <Line number="194"></Line>
  <Line number="195">/* Clear all signals from SET.  */</Line>
  <Line number="196">extern int sigemptyset (sigset_t *__set) __THROW __nonnull ((1));</Line>
  <Line number="197"></Line>
  <Line number="198">/* Set all signals in SET.  */</Line>
  <Line number="199">extern int sigfillset (sigset_t *__set) __THROW __nonnull ((1));</Line>
  <Line number="200"></Line>
  <Line number="201">/* Add SIGNO to SET.  */</Line>
  <Line number="202">extern int sigaddset (sigset_t *__set, int __signo) __THROW __nonnull ((1));</Line>
  <Line number="203"></Line>
  <Line number="204">/* Remove SIGNO from SET.  */</Line>
  <Line number="205">extern int sigdelset (sigset_t *__set, int __signo) __THROW __nonnull ((1));</Line>
  <Line number="206"></Line>
  <Line number="207">/* Return 1 if SIGNO is in SET, 0 if not.  */</Line>
  <Line number="208">extern int sigismember (const sigset_t *__set, int __signo)</Line>
  <Line number="209">     __THROW __nonnull ((1));</Line>
  <Line number="210"></Line>
  <Line number="211"># ifdef __USE_GNU</Line>
  <Line number="212">/* Return non-empty value is SET is not empty.  */</Line>
  <Line number="213">extern int sigisemptyset (const sigset_t *__set) __THROW __nonnull ((1));</Line>
  <Line number="214"></Line>
  <Line number="215">/* Build new signal set by combining the two inputs set using logical AND.  */</Line>
  <Line number="216">extern int sigandset (sigset_t *__set, const sigset_t *__left,</Line>
  <Line number="217">		      const sigset_t *__right) __THROW __nonnull ((1, 2, 3));</Line>
  <Line number="218"></Line>
  <Line number="219">/* Build new signal set by combining the two inputs set using logical OR.  */</Line>
  <Line number="220">extern int sigorset (sigset_t *__set, const sigset_t *__left,</Line>
  <Line number="221">		     const sigset_t *__right) __THROW __nonnull ((1, 2, 3));</Line>
  <Line number="222"># endif /* GNU */</Line>
  <Line number="223"></Line>
  <Line number="224">/* Get the system-specific definitions of `struct sigaction&apos;</Line>
  <Line number="225">   and the `SA_*&apos; and `SIG_*&apos;. constants.  */</Line>
  <Line number="226"># include &lt;bits/sigaction.h&gt;</Line>
  <Line number="227"></Line>
  <Line number="228">/* Get and/or change the set of blocked signals.  */</Line>
  <Line number="229">extern int sigprocmask (int __how, const sigset_t *__restrict __set,</Line>
  <Line number="230">			sigset_t *__restrict __oset) __THROW;</Line>
  <Line number="231"></Line>
  <Line number="232">/* Change the set of blocked signals to SET,</Line>
  <Line number="233">   wait until a signal arrives, and restore the set of blocked signals.</Line>
  <Line number="234"></Line>
  <Line number="235">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="236">   __THROW.  */</Line>
  <Line number="237">extern int sigsuspend (const sigset_t *__set) __nonnull ((1));</Line>
  <Line number="238"></Line>
  <Line number="239">/* Get and/or set the action for signal SIG.  */</Line>
  <Line number="240">extern int sigaction (int __sig, const struct sigaction *__restrict __act,</Line>
  <Line number="241">		      struct sigaction *__restrict __oact) __THROW;</Line>
  <Line number="242"></Line>
  <Line number="243">/* Put in SET all signals that are blocked and waiting to be delivered.  */</Line>
  <Line number="244">extern int sigpending (sigset_t *__set) __THROW __nonnull ((1));</Line>
  <Line number="245"></Line>
  <Line number="246"></Line>
  <Line number="247"># ifdef __USE_POSIX199506</Line>
  <Line number="248">/* Select any of pending signals from SET or wait for any to arrive.</Line>
  <Line number="249"></Line>
  <Line number="250">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="251">   __THROW.  */</Line>
  <Line number="252">extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)</Line>
  <Line number="253">     __nonnull ((1, 2));</Line>
  <Line number="254"># endif /* Use POSIX 1995.  */</Line>
  <Line number="255"></Line>
  <Line number="256"># ifdef __USE_POSIX199309</Line>
  <Line number="257">/* Select any of pending signals from SET and place information in INFO.</Line>
  <Line number="258"></Line>
  <Line number="259">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="260">   __THROW.  */</Line>
  <Line number="261">extern int sigwaitinfo (const sigset_t *__restrict __set,</Line>
  <Line number="262">			siginfo_t *__restrict __info) __nonnull ((1));</Line>
  <Line number="263"></Line>
  <Line number="264">/* Select any of pending signals from SET and place information in INFO.</Line>
  <Line number="265">   Wait the time specified by TIMEOUT if no signal is pending.</Line>
  <Line number="266"></Line>
  <Line number="267">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="268">   __THROW.  */</Line>
  <Line number="269">extern int sigtimedwait (const sigset_t *__restrict __set,</Line>
  <Line number="270">			 siginfo_t *__restrict __info,</Line>
  <Line number="271">			 const struct timespec *__restrict __timeout)</Line>
  <Line number="272">     __nonnull ((1));</Line>
  <Line number="273"></Line>
  <Line number="274">/* Send signal SIG to the process PID.  Associate data in VAL with the</Line>
  <Line number="275">   signal.  */</Line>
  <Line number="276">extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)</Line>
  <Line number="277">     __THROW;</Line>
  <Line number="278"># endif	/* Use POSIX 199306.  */</Line>
  <Line number="279"></Line>
  <Line number="280">#endif /* Use POSIX.  */</Line>
  <Line number="281"></Line>
  <Line number="282">#ifdef __USE_MISC</Line>
  <Line number="283"></Line>
  <Line number="284">/* Names of the signals.  This variable exists only for compatibility.</Line>
  <Line number="285">   Use `strsignal&apos; instead (see &lt;string.h&gt;).  */</Line>
  <Line number="286">extern const char *const _sys_siglist[_NSIG];</Line>
  <Line number="287">extern const char *const sys_siglist[_NSIG];</Line>
  <Line number="288"></Line>
  <Line number="289"></Line>
  <Line number="290">/* Get machine-dependent `struct sigcontext&apos; and signal subcodes.  */</Line>
  <Line number="291"># include &lt;bits/sigcontext.h&gt;</Line>
  <Line number="292"></Line>
  <Line number="293">/* Restore the state saved in SCP.  */</Line>
  <Line number="294">extern int sigreturn (struct sigcontext *__scp) __THROW;</Line>
  <Line number="295"></Line>
  <Line number="296">#endif /* Use misc.  */</Line>
  <Line number="297"></Line>
  <Line number="298"></Line>
  <Line number="299">#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</Line>
  <Line number="300"># define __need_size_t</Line>
  <Line number="301"># include &lt;stddef.h&gt;</Line>
  <Line number="302"></Line>
  <Line number="303"># include &lt;bits/types/stack_t.h&gt;</Line>
  <Line number="304"># if defined __USE_XOPEN || defined __USE_XOPEN2K8</Line>
  <Line number="305">/* This will define `ucontext_t&apos; and `mcontext_t&apos;.  */</Line>
  <Line number="306">#  include &lt;sys/ucontext.h&gt;</Line>
  <Line number="307"># endif</Line>
  <Line number="308">#endif /* Use POSIX.1-2008 or X/Open Unix.  */</Line>
  <Line number="309"></Line>
  <Line number="310">#if defined __USE_XOPEN_EXTENDED || defined __USE_MISC</Line>
  <Line number="311">/* If INTERRUPT is nonzero, make signal SIG interrupt system calls</Line>
  <Line number="312">   (causing them to fail with EINTR); if INTERRUPT is zero, make system</Line>
  <Line number="313">   calls be restarted after signal SIG.  */</Line>
  <Line number="314">extern int siginterrupt (int __sig, int __interrupt) __THROW;</Line>
  <Line number="315"></Line>
  <Line number="316"># include &lt;bits/sigstack.h&gt;</Line>
  <Line number="317"># include &lt;bits/ss_flags.h&gt;</Line>
  <Line number="318"></Line>
  <Line number="319">/* Alternate signal handler stack interface.</Line>
  <Line number="320">   This interface should always be preferred over `sigstack&apos;.  */</Line>
  <Line number="321">extern int sigaltstack (const stack_t *__restrict __ss,</Line>
  <Line number="322">			stack_t *__restrict __oss) __THROW;</Line>
  <Line number="323">#endif /* __USE_XOPEN_EXTENDED || __USE_MISC */</Line>
  <Line number="324"></Line>
  <Line number="325">#if ((defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8)	\</Line>
  <Line number="326">     || defined __USE_MISC)</Line>
  <Line number="327"># include &lt;bits/types/struct_sigstack.h&gt;</Line>
  <Line number="328">#endif</Line>
  <Line number="329"></Line>
  <Line number="330">#if ((defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K)	\</Line>
  <Line number="331">     || defined __USE_MISC)</Line>
  <Line number="332">/* Run signals handlers on the stack specified by SS (if not NULL).</Line>
  <Line number="333">   If OSS is not NULL, it is filled in with the old signal stack status.</Line>
  <Line number="334">   This interface is obsolete and on many platform not implemented.  */</Line>
  <Line number="335">extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)</Line>
  <Line number="336">     __THROW __attribute_deprecated__;</Line>
  <Line number="337">#endif</Line>
  <Line number="338"></Line>
  <Line number="339">#ifdef __USE_XOPEN_EXTENDED</Line>
  <Line number="340">/* Simplified interface for signal management.  */</Line>
  <Line number="341"></Line>
  <Line number="342">/* Add SIG to the calling process&apos; signal mask.  */</Line>
  <Line number="343">extern int sighold (int __sig) __THROW;</Line>
  <Line number="344"></Line>
  <Line number="345">/* Remove SIG from the calling process&apos; signal mask.  */</Line>
  <Line number="346">extern int sigrelse (int __sig) __THROW;</Line>
  <Line number="347"></Line>
  <Line number="348">/* Set the disposition of SIG to SIG_IGN.  */</Line>
  <Line number="349">extern int sigignore (int __sig) __THROW;</Line>
  <Line number="350"></Line>
  <Line number="351">/* Set the disposition of SIG.  */</Line>
  <Line number="352">extern __sighandler_t sigset (int __sig, __sighandler_t __disp) __THROW;</Line>
  <Line number="353">#endif</Line>
  <Line number="354"></Line>
  <Line number="355">#if defined __USE_POSIX199506 || defined __USE_UNIX98</Line>
  <Line number="356">/* Some of the functions for handling signals in threaded programs must</Line>
  <Line number="357">   be defined here.  */</Line>
  <Line number="358"># include &lt;bits/pthreadtypes.h&gt;</Line>
  <Line number="359"># include &lt;bits/sigthread.h&gt;</Line>
  <Line number="360">#endif /* use Unix98 */</Line>
  <Line number="361"></Line>
  <Line number="362">/* The following functions are used internally in the C library and in</Line>
  <Line number="363">   other code which need deep insights.  */</Line>
  <Line number="364"></Line>
  <Line number="365">/* Return number of available real-time signal with highest priority.  */</Line>
  <Line number="366">extern int __libc_current_sigrtmin (void) __THROW;</Line>
  <Line number="367">/* Return number of available real-time signal with lowest priority.  */</Line>
  <Line number="368">extern int __libc_current_sigrtmax (void) __THROW;</Line>
  <Line number="369"></Line>
  <Line number="370">#define SIGRTMIN        (__libc_current_sigrtmin ())</Line>
  <Line number="371">#define SIGRTMAX        (__libc_current_sigrtmax ())</Line>
  <Line number="372"></Line>
  <Line number="373">/* System-specific extensions.  */</Line>
  <Line number="374">#include &lt;bits/signal_ext.h&gt;</Line>
  <Line number="375"></Line>
  <Line number="376">__END_DECLS</Line>
  <Line number="377"></Line>
  <Line number="378">#endif /* not signal.h */</Line>
</SourceFile>
