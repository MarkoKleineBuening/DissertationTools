<SourceFile>
  <Line number="1">/* Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">/*</Line>
  <Line number="19"> *	ISO C99 Standard: 7.2 Diagnostics	&lt;assert.h&gt;</Line>
  <Line number="20"> */</Line>
  <Line number="21"></Line>
  <Line number="22">#ifdef	_ASSERT_H</Line>
  <Line number="23"></Line>
  <Line number="24"># undef	_ASSERT_H</Line>
  <Line number="25"># undef	assert</Line>
  <Line number="26"># undef __ASSERT_VOID_CAST</Line>
  <Line number="27"></Line>
  <Line number="28"># ifdef	__USE_GNU</Line>
  <Line number="29">#  undef assert_perror</Line>
  <Line number="30"># endif</Line>
  <Line number="31"></Line>
  <Line number="32">#endif /* assert.h	*/</Line>
  <Line number="33"></Line>
  <Line number="34">#define	_ASSERT_H	1</Line>
  <Line number="35">#include &lt;features.h&gt;</Line>
  <Line number="36"></Line>
  <Line number="37">#if defined __cplusplus &amp;&amp; __GNUC_PREREQ (2,95)</Line>
  <Line number="38"># define __ASSERT_VOID_CAST static_cast&lt;void&gt;</Line>
  <Line number="39">#else</Line>
  <Line number="40"># define __ASSERT_VOID_CAST (void)</Line>
  <Line number="41">#endif</Line>
  <Line number="42"></Line>
  <Line number="43">/* void assert (int expression);</Line>
  <Line number="44"></Line>
  <Line number="45">   If NDEBUG is defined, do nothing.</Line>
  <Line number="46">   If not, and EXPRESSION is zero, print an error message and abort.  */</Line>
  <Line number="47"></Line>
  <Line number="48">#ifdef	NDEBUG</Line>
  <Line number="49"></Line>
  <Line number="50"># define assert(expr)		(__ASSERT_VOID_CAST (0))</Line>
  <Line number="51"></Line>
  <Line number="52">/* void assert_perror (int errnum);</Line>
  <Line number="53"></Line>
  <Line number="54">   If NDEBUG is defined, do nothing.  If not, and ERRNUM is not zero, print an</Line>
  <Line number="55">   error message with the error text for ERRNUM and abort.</Line>
  <Line number="56">   (This is a GNU extension.) */</Line>
  <Line number="57"></Line>
  <Line number="58"># ifdef	__USE_GNU</Line>
  <Line number="59">#  define assert_perror(errnum)	(__ASSERT_VOID_CAST (0))</Line>
  <Line number="60"># endif</Line>
  <Line number="61"></Line>
  <Line number="62">#else /* Not NDEBUG.  */</Line>
  <Line number="63"></Line>
  <Line number="64">__BEGIN_DECLS</Line>
  <Line number="65"></Line>
  <Line number="66">/* This prints an &quot;Assertion failed&quot; message and aborts.  */</Line>
  <Line number="67">extern void __assert_fail (const char *__assertion, const char *__file,</Line>
  <Line number="68">			   unsigned int __line, const char *__function)</Line>
  <Line number="69">     __THROW __attribute__ ((__noreturn__));</Line>
  <Line number="70"></Line>
  <Line number="71">/* Likewise, but prints the error text for ERRNUM.  */</Line>
  <Line number="72">extern void __assert_perror_fail (int __errnum, const char *__file,</Line>
  <Line number="73">				  unsigned int __line, const char *__function)</Line>
  <Line number="74">     __THROW __attribute__ ((__noreturn__));</Line>
  <Line number="75"></Line>
  <Line number="76"></Line>
  <Line number="77">/* The following is not at all used here but needed for standard</Line>
  <Line number="78">   compliance.  */</Line>
  <Line number="79">extern void __assert (const char *__assertion, const char *__file, int __line)</Line>
  <Line number="80">     __THROW __attribute__ ((__noreturn__));</Line>
  <Line number="81"></Line>
  <Line number="82"></Line>
  <Line number="83">__END_DECLS</Line>
  <Line number="84"></Line>
  <Line number="85">/* When possible, define assert so that it does not add extra</Line>
  <Line number="86">   parentheses around EXPR.  Otherwise, those added parentheses would</Line>
  <Line number="87">   suppress warnings we&apos;d expect to be detected by gcc&apos;s -Wparentheses.  */</Line>
  <Line number="88"># if defined __cplusplus</Line>
  <Line number="89">#  define assert(expr)							\</Line>
  <Line number="90">     (static_cast &lt;bool&gt; (expr)						\</Line>
  <Line number="91">      ? void (0)							\</Line>
  <Line number="92">      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))</Line>
  <Line number="93"># elif !defined __GNUC__ || defined __STRICT_ANSI__</Line>
  <Line number="94">#  define assert(expr)							\</Line>
  <Line number="95">    ((expr)								\</Line>
  <Line number="96">     ? __ASSERT_VOID_CAST (0)						\</Line>
  <Line number="97">     : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))</Line>
  <Line number="98"># else</Line>
  <Line number="99">/* The first occurrence of EXPR is not evaluated due to the sizeof,</Line>
  <Line number="100">   but will trigger any pedantic warnings masked by the __extension__</Line>
  <Line number="101">   for the second occurrence.  The ternary operator is required to</Line>
  <Line number="102">   support function pointers and bit fields in this context, and to</Line>
  <Line number="103">   suppress the evaluation of variable length arrays.  */</Line>
  <Line number="104">#  define assert(expr)							\</Line>
  <Line number="105">  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({			\</Line>
  <Line number="106">      if (expr)								\</Line>
  <Line number="107">        ; /* empty */							\</Line>
  <Line number="108">      else								\</Line>
  <Line number="109">        __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION);	\</Line>
  <Line number="110">    }))</Line>
  <Line number="111"># endif</Line>
  <Line number="112"></Line>
  <Line number="113"># ifdef	__USE_GNU</Line>
  <Line number="114">#  define assert_perror(errnum)						\</Line>
  <Line number="115">  (!(errnum)								\</Line>
  <Line number="116">   ? __ASSERT_VOID_CAST (0)						\</Line>
  <Line number="117">   : __assert_perror_fail ((errnum), __FILE__, __LINE__, __ASSERT_FUNCTION))</Line>
  <Line number="118"># endif</Line>
  <Line number="119"></Line>
  <Line number="120">/* Version 2.4 and later of GCC define a magical variable `__PRETTY_FUNCTION__&apos;</Line>
  <Line number="121">   which contains the name of the function currently being defined.</Line>
  <Line number="122">   This is broken in G++ before version 2.6.</Line>
  <Line number="123">   C9x has a similar variable called __func__, but prefer the GCC one since</Line>
  <Line number="124">   it demangles C++ function names.  */</Line>
  <Line number="125"># if defined __cplusplus ? __GNUC_PREREQ (2, 6) : __GNUC_PREREQ (2, 4)</Line>
  <Line number="126">#   define __ASSERT_FUNCTION	__extension__ __PRETTY_FUNCTION__</Line>
  <Line number="127"># else</Line>
  <Line number="128">#  if defined __STDC_VERSION__ &amp;&amp; __STDC_VERSION__ &gt;= 199901L</Line>
  <Line number="129">#   define __ASSERT_FUNCTION	__func__</Line>
  <Line number="130">#  else</Line>
  <Line number="131">#   define __ASSERT_FUNCTION	((const char *) 0)</Line>
  <Line number="132">#  endif</Line>
  <Line number="133"># endif</Line>
  <Line number="134"></Line>
  <Line number="135">#endif /* NDEBUG.  */</Line>
  <Line number="136"></Line>
  <Line number="137"></Line>
  <Line number="138">#if defined __USE_ISOC11 &amp;&amp; !defined __cplusplus</Line>
  <Line number="139"># undef static_assert</Line>
  <Line number="140"># define static_assert _Static_assert</Line>
  <Line number="141">#endif</Line>
</SourceFile>
