<SourceFile>
  <Line number="1">/* Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">/*</Line>
  <Line number="19"> *	POSIX Standard: 9.2.2 User Database Access	&lt;pwd.h&gt;</Line>
  <Line number="20"> */</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef	_PWD_H</Line>
  <Line number="23">#define	_PWD_H	1</Line>
  <Line number="24"></Line>
  <Line number="25">#include &lt;features.h&gt;</Line>
  <Line number="26"></Line>
  <Line number="27">__BEGIN_DECLS</Line>
  <Line number="28"></Line>
  <Line number="29">#include &lt;bits/types.h&gt;</Line>
  <Line number="30"></Line>
  <Line number="31">#define __need_size_t</Line>
  <Line number="32">#include &lt;stddef.h&gt;</Line>
  <Line number="33"></Line>
  <Line number="34">#if defined __USE_XOPEN || defined __USE_XOPEN2K</Line>
  <Line number="35">/* The Single Unix specification says that some more types are</Line>
  <Line number="36">   available here.  */</Line>
  <Line number="37"># ifndef __gid_t_defined</Line>
  <Line number="38">typedef __gid_t gid_t;</Line>
  <Line number="39">#  define __gid_t_defined</Line>
  <Line number="40"># endif</Line>
  <Line number="41"></Line>
  <Line number="42"># ifndef __uid_t_defined</Line>
  <Line number="43">typedef __uid_t uid_t;</Line>
  <Line number="44">#  define __uid_t_defined</Line>
  <Line number="45"># endif</Line>
  <Line number="46">#endif</Line>
  <Line number="47"></Line>
  <Line number="48">/* A record in the user database.  */</Line>
  <Line number="49">struct passwd</Line>
  <Line number="50">{</Line>
  <Line number="51">  char *pw_name;		/* Username.  */</Line>
  <Line number="52">  char *pw_passwd;		/* Hashed passphrase, if shadow database</Line>
  <Line number="53">                                   not in use (see shadow.h).  */</Line>
  <Line number="54">  __uid_t pw_uid;		/* User ID.  */</Line>
  <Line number="55">  __gid_t pw_gid;		/* Group ID.  */</Line>
  <Line number="56">  char *pw_gecos;		/* Real name.  */</Line>
  <Line number="57">  char *pw_dir;			/* Home directory.  */</Line>
  <Line number="58">  char *pw_shell;		/* Shell program.  */</Line>
  <Line number="59">};</Line>
  <Line number="60"></Line>
  <Line number="61"></Line>
  <Line number="62">#ifdef __USE_MISC</Line>
  <Line number="63"># include &lt;bits/types/FILE.h&gt;</Line>
  <Line number="64">#endif</Line>
  <Line number="65"></Line>
  <Line number="66"></Line>
  <Line number="67">#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="68">/* Rewind the user database stream.</Line>
  <Line number="69"></Line>
  <Line number="70">   This function is a possible cancellation point and therefore not</Line>
  <Line number="71">   marked with __THROW.  */</Line>
  <Line number="72">extern void setpwent (void);</Line>
  <Line number="73"></Line>
  <Line number="74">/* Close the user database stream.</Line>
  <Line number="75"></Line>
  <Line number="76">   This function is a possible cancellation point and therefore not</Line>
  <Line number="77">   marked with __THROW.  */</Line>
  <Line number="78">extern void endpwent (void);</Line>
  <Line number="79"></Line>
  <Line number="80">/* Read an entry from the user database stream, opening it if necessary.</Line>
  <Line number="81"></Line>
  <Line number="82">   This function is a possible cancellation point and therefore not</Line>
  <Line number="83">   marked with __THROW.  */</Line>
  <Line number="84">extern struct passwd *getpwent (void);</Line>
  <Line number="85">#endif</Line>
  <Line number="86"></Line>
  <Line number="87">#ifdef	__USE_MISC</Line>
  <Line number="88">/* Read a user database entry from STREAM.</Line>
  <Line number="89"></Line>
  <Line number="90">   This function is not part of POSIX and therefore no official</Line>
  <Line number="91">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="92">   or due to the implementation it is a cancellation point and</Line>
  <Line number="93">   therefore not marked with __THROW.  */</Line>
  <Line number="94">extern struct passwd *fgetpwent (FILE *__stream) __nonnull ((1));</Line>
  <Line number="95"></Line>
  <Line number="96">/* Write a given user database entry onto the given stream.</Line>
  <Line number="97"></Line>
  <Line number="98">   This function is not part of POSIX and therefore no official</Line>
  <Line number="99">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="100">   or due to the implementation it is a cancellation point and</Line>
  <Line number="101">   therefore not marked with __THROW.  */</Line>
  <Line number="102">extern int putpwent (const struct passwd *__restrict __p,</Line>
  <Line number="103">		     FILE *__restrict __f);</Line>
  <Line number="104">#endif</Line>
  <Line number="105"></Line>
  <Line number="106">/* Retrieve the user database entry for the given user ID.</Line>
  <Line number="107"></Line>
  <Line number="108">   This function is a possible cancellation point and therefore not</Line>
  <Line number="109">   marked with __THROW.  */</Line>
  <Line number="110">extern struct passwd *getpwuid (__uid_t __uid);</Line>
  <Line number="111"></Line>
  <Line number="112">/* Retrieve the user database entry for the given username.</Line>
  <Line number="113"></Line>
  <Line number="114">   This function is a possible cancellation point and therefore not</Line>
  <Line number="115">   marked with __THROW.  */</Line>
  <Line number="116">extern struct passwd *getpwnam (const char *__name) __nonnull ((1));</Line>
  <Line number="117"></Line>
  <Line number="118">#ifdef __USE_POSIX</Line>
  <Line number="119"></Line>
  <Line number="120"># ifdef __USE_MISC</Line>
  <Line number="121">/* Reasonable value for the buffer sized used in the reentrant</Line>
  <Line number="122">   functions below.  But better use `sysconf&apos;.  */</Line>
  <Line number="123">#  define NSS_BUFLEN_PASSWD	1024</Line>
  <Line number="124"># endif</Line>
  <Line number="125"></Line>
  <Line number="126">/* Reentrant versions of some of the functions above.</Line>
  <Line number="127"></Line>
  <Line number="128">   PLEASE NOTE: the `getpwent_r&apos; function is not (yet) standardized.</Line>
  <Line number="129">   The interface may change in later versions of this library.  But</Line>
  <Line number="130">   the interface is designed following the principals used for the</Line>
  <Line number="131">   other reentrant functions so the chances are good this is what the</Line>
  <Line number="132">   POSIX people would choose.  */</Line>
  <Line number="133"></Line>
  <Line number="134"># ifdef __USE_MISC</Line>
  <Line number="135">/* This function is not part of POSIX and therefore no official</Line>
  <Line number="136">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="137">   or due to the implementation it is a cancellation point and</Line>
  <Line number="138">   therefore not marked with __THROW.  */</Line>
  <Line number="139">extern int getpwent_r (struct passwd *__restrict __resultbuf,</Line>
  <Line number="140">		       char *__restrict __buffer, size_t __buflen,</Line>
  <Line number="141">		       struct passwd **__restrict __result)</Line>
  <Line number="142">		       __nonnull ((1, 2, 4));</Line>
  <Line number="143"># endif</Line>
  <Line number="144"></Line>
  <Line number="145">extern int getpwuid_r (__uid_t __uid,</Line>
  <Line number="146">		       struct passwd *__restrict __resultbuf,</Line>
  <Line number="147">		       char *__restrict __buffer, size_t __buflen,</Line>
  <Line number="148">		       struct passwd **__restrict __result)</Line>
  <Line number="149">		       __nonnull ((2, 3, 5));</Line>
  <Line number="150"></Line>
  <Line number="151">extern int getpwnam_r (const char *__restrict __name,</Line>
  <Line number="152">		       struct passwd *__restrict __resultbuf,</Line>
  <Line number="153">		       char *__restrict __buffer, size_t __buflen,</Line>
  <Line number="154">		       struct passwd **__restrict __result)</Line>
  <Line number="155">		       __nonnull ((1, 2, 3, 5));</Line>
  <Line number="156"></Line>
  <Line number="157"></Line>
  <Line number="158"># ifdef	__USE_MISC</Line>
  <Line number="159">/* Read a user database entry from STREAM.  This function is not</Line>
  <Line number="160">   standardized and probably never will.</Line>
  <Line number="161"></Line>
  <Line number="162">   This function is not part of POSIX and therefore no official</Line>
  <Line number="163">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="164">   or due to the implementation it is a cancellation point and</Line>
  <Line number="165">   therefore not marked with __THROW.  */</Line>
  <Line number="166">extern int fgetpwent_r (FILE *__restrict __stream,</Line>
  <Line number="167">			struct passwd *__restrict __resultbuf,</Line>
  <Line number="168">			char *__restrict __buffer, size_t __buflen,</Line>
  <Line number="169">			struct passwd **__restrict __result)</Line>
  <Line number="170">			__nonnull ((1, 2, 3, 5));</Line>
  <Line number="171"># endif</Line>
  <Line number="172"></Line>
  <Line number="173">#endif	/* POSIX or reentrant */</Line>
  <Line number="174"></Line>
  <Line number="175">#ifdef __USE_GNU</Line>
  <Line number="176">/* Write a traditional /etc/passwd line, based on the user database</Line>
  <Line number="177">   entry for the given UID, to BUFFER; space for BUFFER must be</Line>
  <Line number="178">   allocated by the caller.</Line>
  <Line number="179"></Line>
  <Line number="180">   This function is not part of POSIX and therefore no official</Line>
  <Line number="181">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="182">   or due to the implementation it is a cancellation point and</Line>
  <Line number="183">   therefore not marked with __THROW.  */</Line>
  <Line number="184">extern int getpw (__uid_t __uid, char *__buffer);</Line>
  <Line number="185">#endif</Line>
  <Line number="186"></Line>
  <Line number="187">__END_DECLS</Line>
  <Line number="188"></Line>
  <Line number="189">#endif /* pwd.h  */</Line>
</SourceFile>
