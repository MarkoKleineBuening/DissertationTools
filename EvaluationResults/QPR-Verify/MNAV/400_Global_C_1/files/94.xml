<SourceFile>
  <Line number="1">/* Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">/*</Line>
  <Line number="19"> *	POSIX Standard: 5.6 File Characteristics	&lt;sys/stat.h&gt;</Line>
  <Line number="20"> */</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef	_SYS_STAT_H</Line>
  <Line number="23">#define	_SYS_STAT_H	1</Line>
  <Line number="24"></Line>
  <Line number="25">#include &lt;features.h&gt;</Line>
  <Line number="26"></Line>
  <Line number="27">#include &lt;bits/types.h&gt;		/* For __mode_t and __dev_t.  */</Line>
  <Line number="28"></Line>
  <Line number="29">#ifdef __USE_XOPEN2K8</Line>
  <Line number="30"># include &lt;bits/types/struct_timespec.h&gt;</Line>
  <Line number="31">#endif</Line>
  <Line number="32"></Line>
  <Line number="33">#if defined __USE_XOPEN || defined __USE_XOPEN2K</Line>
  <Line number="34">/* The Single Unix specification says that some more types are</Line>
  <Line number="35">   available here.  */</Line>
  <Line number="36"></Line>
  <Line number="37"># include &lt;bits/types/time_t.h&gt;</Line>
  <Line number="38"></Line>
  <Line number="39"># ifndef __dev_t_defined</Line>
  <Line number="40">typedef __dev_t dev_t;</Line>
  <Line number="41">#  define __dev_t_defined</Line>
  <Line number="42"># endif</Line>
  <Line number="43"></Line>
  <Line number="44"># ifndef __gid_t_defined</Line>
  <Line number="45">typedef __gid_t gid_t;</Line>
  <Line number="46">#  define __gid_t_defined</Line>
  <Line number="47"># endif</Line>
  <Line number="48"></Line>
  <Line number="49"># ifndef __ino_t_defined</Line>
  <Line number="50">#  ifndef __USE_FILE_OFFSET64</Line>
  <Line number="51">typedef __ino_t ino_t;</Line>
  <Line number="52">#  else</Line>
  <Line number="53">typedef __ino64_t ino_t;</Line>
  <Line number="54">#  endif</Line>
  <Line number="55">#  define __ino_t_defined</Line>
  <Line number="56"># endif</Line>
  <Line number="57"></Line>
  <Line number="58"># ifndef __mode_t_defined</Line>
  <Line number="59">typedef __mode_t mode_t;</Line>
  <Line number="60">#  define __mode_t_defined</Line>
  <Line number="61"># endif</Line>
  <Line number="62"></Line>
  <Line number="63"># ifndef __nlink_t_defined</Line>
  <Line number="64">typedef __nlink_t nlink_t;</Line>
  <Line number="65">#  define __nlink_t_defined</Line>
  <Line number="66"># endif</Line>
  <Line number="67"></Line>
  <Line number="68"># ifndef __off_t_defined</Line>
  <Line number="69">#  ifndef __USE_FILE_OFFSET64</Line>
  <Line number="70">typedef __off_t off_t;</Line>
  <Line number="71">#  else</Line>
  <Line number="72">typedef __off64_t off_t;</Line>
  <Line number="73">#  endif</Line>
  <Line number="74">#  define __off_t_defined</Line>
  <Line number="75"># endif</Line>
  <Line number="76"></Line>
  <Line number="77"># ifndef __uid_t_defined</Line>
  <Line number="78">typedef __uid_t uid_t;</Line>
  <Line number="79">#  define __uid_t_defined</Line>
  <Line number="80"># endif</Line>
  <Line number="81">#endif	/* X/Open */</Line>
  <Line number="82"></Line>
  <Line number="83">#ifdef __USE_UNIX98</Line>
  <Line number="84"># ifndef __blkcnt_t_defined</Line>
  <Line number="85">#  ifndef __USE_FILE_OFFSET64</Line>
  <Line number="86">typedef __blkcnt_t blkcnt_t;</Line>
  <Line number="87">#  else</Line>
  <Line number="88">typedef __blkcnt64_t blkcnt_t;</Line>
  <Line number="89">#  endif</Line>
  <Line number="90">#  define __blkcnt_t_defined</Line>
  <Line number="91"># endif</Line>
  <Line number="92"></Line>
  <Line number="93"># ifndef __blksize_t_defined</Line>
  <Line number="94">typedef __blksize_t blksize_t;</Line>
  <Line number="95">#  define __blksize_t_defined</Line>
  <Line number="96"># endif</Line>
  <Line number="97">#endif	/* Unix98 */</Line>
  <Line number="98"></Line>
  <Line number="99">__BEGIN_DECLS</Line>
  <Line number="100"></Line>
  <Line number="101">#include &lt;bits/stat.h&gt;</Line>
  <Line number="102"></Line>
  <Line number="103">#if defined __USE_MISC || defined __USE_XOPEN</Line>
  <Line number="104"># define S_IFMT		__S_IFMT</Line>
  <Line number="105"># define S_IFDIR	__S_IFDIR</Line>
  <Line number="106"># define S_IFCHR	__S_IFCHR</Line>
  <Line number="107"># define S_IFBLK	__S_IFBLK</Line>
  <Line number="108"># define S_IFREG	__S_IFREG</Line>
  <Line number="109"># ifdef __S_IFIFO</Line>
  <Line number="110">#  define S_IFIFO	__S_IFIFO</Line>
  <Line number="111"># endif</Line>
  <Line number="112"># ifdef __S_IFLNK</Line>
  <Line number="113">#  define S_IFLNK	__S_IFLNK</Line>
  <Line number="114"># endif</Line>
  <Line number="115"># if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) \</Line>
  <Line number="116">     &amp;&amp; defined __S_IFSOCK</Line>
  <Line number="117">#  define S_IFSOCK	__S_IFSOCK</Line>
  <Line number="118"># endif</Line>
  <Line number="119">#endif</Line>
  <Line number="120"></Line>
  <Line number="121">/* Test macros for file types.	*/</Line>
  <Line number="122"></Line>
  <Line number="123">#define	__S_ISTYPE(mode, mask)	(((mode) &amp; __S_IFMT) == (mask))</Line>
  <Line number="124"></Line>
  <Line number="125">#define	S_ISDIR(mode)	 __S_ISTYPE((mode), __S_IFDIR)</Line>
  <Line number="126">#define	S_ISCHR(mode)	 __S_ISTYPE((mode), __S_IFCHR)</Line>
  <Line number="127">#define	S_ISBLK(mode)	 __S_ISTYPE((mode), __S_IFBLK)</Line>
  <Line number="128">#define	S_ISREG(mode)	 __S_ISTYPE((mode), __S_IFREG)</Line>
  <Line number="129">#ifdef __S_IFIFO</Line>
  <Line number="130"># define S_ISFIFO(mode)	 __S_ISTYPE((mode), __S_IFIFO)</Line>
  <Line number="131">#endif</Line>
  <Line number="132">#ifdef __S_IFLNK</Line>
  <Line number="133"># define S_ISLNK(mode)	 __S_ISTYPE((mode), __S_IFLNK)</Line>
  <Line number="134">#endif</Line>
  <Line number="135"></Line>
  <Line number="136">#if defined __USE_MISC &amp;&amp; !defined __S_IFLNK</Line>
  <Line number="137"># define S_ISLNK(mode)  0</Line>
  <Line number="138">#endif</Line>
  <Line number="139"></Line>
  <Line number="140">#if (defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K) \</Line>
  <Line number="141">    &amp;&amp; defined __S_IFSOCK</Line>
  <Line number="142"># define S_ISSOCK(mode) __S_ISTYPE((mode), __S_IFSOCK)</Line>
  <Line number="143">#elif defined __USE_XOPEN2K</Line>
  <Line number="144"># define S_ISSOCK(mode) 0</Line>
  <Line number="145">#endif</Line>
  <Line number="146"></Line>
  <Line number="147">/* These are from POSIX.1b.  If the objects are not implemented using separate</Line>
  <Line number="148">   distinct file types, the macros always will evaluate to zero.  Unlike the</Line>
  <Line number="149">   other S_* macros the following three take a pointer to a `struct stat&apos;</Line>
  <Line number="150">   object as the argument.  */</Line>
  <Line number="151">#ifdef	__USE_POSIX199309</Line>
  <Line number="152"># define S_TYPEISMQ(buf) __S_TYPEISMQ(buf)</Line>
  <Line number="153"># define S_TYPEISSEM(buf) __S_TYPEISSEM(buf)</Line>
  <Line number="154"># define S_TYPEISSHM(buf) __S_TYPEISSHM(buf)</Line>
  <Line number="155">#endif</Line>
  <Line number="156"></Line>
  <Line number="157"></Line>
  <Line number="158">/* Protection bits.  */</Line>
  <Line number="159"></Line>
  <Line number="160">#define	S_ISUID __S_ISUID	/* Set user ID on execution.  */</Line>
  <Line number="161">#define	S_ISGID	__S_ISGID	/* Set group ID on execution.  */</Line>
  <Line number="162"></Line>
  <Line number="163">#if defined __USE_MISC || defined __USE_XOPEN</Line>
  <Line number="164">/* Save swapped text after use (sticky bit).  This is pretty well obsolete.  */</Line>
  <Line number="165"># define S_ISVTX	__S_ISVTX</Line>
  <Line number="166">#endif</Line>
  <Line number="167"></Line>
  <Line number="168">#define	S_IRUSR	__S_IREAD	/* Read by owner.  */</Line>
  <Line number="169">#define	S_IWUSR	__S_IWRITE	/* Write by owner.  */</Line>
  <Line number="170">#define	S_IXUSR	__S_IEXEC	/* Execute by owner.  */</Line>
  <Line number="171">/* Read, write, and execute by owner.  */</Line>
  <Line number="172">#define	S_IRWXU	(__S_IREAD|__S_IWRITE|__S_IEXEC)</Line>
  <Line number="173"></Line>
  <Line number="174">#ifdef __USE_MISC</Line>
  <Line number="175"># define S_IREAD	S_IRUSR</Line>
  <Line number="176"># define S_IWRITE	S_IWUSR</Line>
  <Line number="177"># define S_IEXEC	S_IXUSR</Line>
  <Line number="178">#endif</Line>
  <Line number="179"></Line>
  <Line number="180">#define	S_IRGRP	(S_IRUSR &gt;&gt; 3)	/* Read by group.  */</Line>
  <Line number="181">#define	S_IWGRP	(S_IWUSR &gt;&gt; 3)	/* Write by group.  */</Line>
  <Line number="182">#define	S_IXGRP	(S_IXUSR &gt;&gt; 3)	/* Execute by group.  */</Line>
  <Line number="183">/* Read, write, and execute by group.  */</Line>
  <Line number="184">#define	S_IRWXG	(S_IRWXU &gt;&gt; 3)</Line>
  <Line number="185"></Line>
  <Line number="186">#define	S_IROTH	(S_IRGRP &gt;&gt; 3)	/* Read by others.  */</Line>
  <Line number="187">#define	S_IWOTH	(S_IWGRP &gt;&gt; 3)	/* Write by others.  */</Line>
  <Line number="188">#define	S_IXOTH	(S_IXGRP &gt;&gt; 3)	/* Execute by others.  */</Line>
  <Line number="189">/* Read, write, and execute by others.  */</Line>
  <Line number="190">#define	S_IRWXO	(S_IRWXG &gt;&gt; 3)</Line>
  <Line number="191"></Line>
  <Line number="192"></Line>
  <Line number="193">#ifdef	__USE_MISC</Line>
  <Line number="194">/* Macros for common mode bit masks.  */</Line>
  <Line number="195"># define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO) /* 0777 */</Line>
  <Line number="196"># define ALLPERMS (S_ISUID|S_ISGID|S_ISVTX|S_IRWXU|S_IRWXG|S_IRWXO)/* 07777 */</Line>
  <Line number="197"># define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)/* 0666*/</Line>
  <Line number="198"></Line>
  <Line number="199"># define S_BLKSIZE	512	/* Block size for `st_blocks&apos;.  */</Line>
  <Line number="200">#endif</Line>
  <Line number="201"></Line>
  <Line number="202"></Line>
  <Line number="203">#ifndef __USE_FILE_OFFSET64</Line>
  <Line number="204">/* Get file attributes for FILE and put them in BUF.  */</Line>
  <Line number="205">extern int stat (const char *__restrict __file,</Line>
  <Line number="206">		 struct stat *__restrict __buf) __THROW __nonnull ((1, 2));</Line>
  <Line number="207"></Line>
  <Line number="208">/* Get file attributes for the file, device, pipe, or socket</Line>
  <Line number="209">   that file descriptor FD is open on and put them in BUF.  */</Line>
  <Line number="210">extern int fstat (int __fd, struct stat *__buf) __THROW __nonnull ((2));</Line>
  <Line number="211">#else</Line>
  <Line number="212"># ifdef __REDIRECT_NTH</Line>
  <Line number="213">extern int __REDIRECT_NTH (stat, (const char *__restrict __file,</Line>
  <Line number="214">				  struct stat *__restrict __buf), stat64)</Line>
  <Line number="215">     __nonnull ((1, 2));</Line>
  <Line number="216">extern int __REDIRECT_NTH (fstat, (int __fd, struct stat *__buf), fstat64)</Line>
  <Line number="217">     __nonnull ((2));</Line>
  <Line number="218"># else</Line>
  <Line number="219">#  define stat stat64</Line>
  <Line number="220">#  define fstat fstat64</Line>
  <Line number="221"># endif</Line>
  <Line number="222">#endif</Line>
  <Line number="223">#ifdef __USE_LARGEFILE64</Line>
  <Line number="224">extern int stat64 (const char *__restrict __file,</Line>
  <Line number="225">		   struct stat64 *__restrict __buf) __THROW __nonnull ((1, 2));</Line>
  <Line number="226">extern int fstat64 (int __fd, struct stat64 *__buf) __THROW __nonnull ((2));</Line>
  <Line number="227">#endif</Line>
  <Line number="228"></Line>
  <Line number="229">#ifdef __USE_ATFILE</Line>
  <Line number="230">/* Similar to stat, get the attributes for FILE and put them in BUF.</Line>
  <Line number="231">   Relative path names are interpreted relative to FD unless FD is</Line>
  <Line number="232">   AT_FDCWD.  */</Line>
  <Line number="233"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="234">extern int fstatat (int __fd, const char *__restrict __file,</Line>
  <Line number="235">		    struct stat *__restrict __buf, int __flag)</Line>
  <Line number="236">     __THROW __nonnull ((2, 3));</Line>
  <Line number="237"># else</Line>
  <Line number="238">#  ifdef __REDIRECT_NTH</Line>
  <Line number="239">extern int __REDIRECT_NTH (fstatat, (int __fd, const char *__restrict __file,</Line>
  <Line number="240">				     struct stat *__restrict __buf,</Line>
  <Line number="241">				     int __flag),</Line>
  <Line number="242">			   fstatat64) __nonnull ((2, 3));</Line>
  <Line number="243">#  else</Line>
  <Line number="244">#   define fstatat fstatat64</Line>
  <Line number="245">#  endif</Line>
  <Line number="246"># endif</Line>
  <Line number="247"></Line>
  <Line number="248"># ifdef __USE_LARGEFILE64</Line>
  <Line number="249">extern int fstatat64 (int __fd, const char *__restrict __file,</Line>
  <Line number="250">		      struct stat64 *__restrict __buf, int __flag)</Line>
  <Line number="251">     __THROW __nonnull ((2, 3));</Line>
  <Line number="252"># endif</Line>
  <Line number="253">#endif</Line>
  <Line number="254"></Line>
  <Line number="255">#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K</Line>
  <Line number="256"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="257">/* Get file attributes about FILE and put them in BUF.</Line>
  <Line number="258">   If FILE is a symbolic link, do not follow it.  */</Line>
  <Line number="259">extern int lstat (const char *__restrict __file,</Line>
  <Line number="260">		  struct stat *__restrict __buf) __THROW __nonnull ((1, 2));</Line>
  <Line number="261"># else</Line>
  <Line number="262">#  ifdef __REDIRECT_NTH</Line>
  <Line number="263">extern int __REDIRECT_NTH (lstat,</Line>
  <Line number="264">			   (const char *__restrict __file,</Line>
  <Line number="265">			    struct stat *__restrict __buf), lstat64)</Line>
  <Line number="266">     __nonnull ((1, 2));</Line>
  <Line number="267">#  else</Line>
  <Line number="268">#   define lstat lstat64</Line>
  <Line number="269">#  endif</Line>
  <Line number="270"># endif</Line>
  <Line number="271"># ifdef __USE_LARGEFILE64</Line>
  <Line number="272">extern int lstat64 (const char *__restrict __file,</Line>
  <Line number="273">		    struct stat64 *__restrict __buf)</Line>
  <Line number="274">     __THROW __nonnull ((1, 2));</Line>
  <Line number="275"># endif</Line>
  <Line number="276">#endif</Line>
  <Line number="277"></Line>
  <Line number="278">/* Set file access permissions for FILE to MODE.</Line>
  <Line number="279">   If FILE is a symbolic link, this affects its target instead.  */</Line>
  <Line number="280">extern int chmod (const char *__file, __mode_t __mode)</Line>
  <Line number="281">     __THROW __nonnull ((1));</Line>
  <Line number="282"></Line>
  <Line number="283">#ifdef __USE_MISC</Line>
  <Line number="284">/* Set file access permissions for FILE to MODE.</Line>
  <Line number="285">   If FILE is a symbolic link, this affects the link itself</Line>
  <Line number="286">   rather than its target.  */</Line>
  <Line number="287">extern int lchmod (const char *__file, __mode_t __mode)</Line>
  <Line number="288">     __THROW __nonnull ((1));</Line>
  <Line number="289">#endif</Line>
  <Line number="290"></Line>
  <Line number="291">/* Set file access permissions of the file FD is open on to MODE.  */</Line>
  <Line number="292">#if defined __USE_POSIX199309 || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="293">extern int fchmod (int __fd, __mode_t __mode) __THROW;</Line>
  <Line number="294">#endif</Line>
  <Line number="295"></Line>
  <Line number="296">#ifdef __USE_ATFILE</Line>
  <Line number="297">/* Set file access permissions of FILE relative to</Line>
  <Line number="298">   the directory FD is open on.  */</Line>
  <Line number="299">extern int fchmodat (int __fd, const char *__file, __mode_t __mode,</Line>
  <Line number="300">		     int __flag)</Line>
  <Line number="301">     __THROW __nonnull ((2)) __wur;</Line>
  <Line number="302">#endif /* Use ATFILE.  */</Line>
  <Line number="303"></Line>
  <Line number="304"></Line>
  <Line number="305"></Line>
  <Line number="306">/* Set the file creation mask of the current process to MASK,</Line>
  <Line number="307">   and return the old creation mask.  */</Line>
  <Line number="308">extern __mode_t umask (__mode_t __mask) __THROW;</Line>
  <Line number="309"></Line>
  <Line number="310">#ifdef	__USE_GNU</Line>
  <Line number="311">/* Get the current `umask&apos; value without changing it.</Line>
  <Line number="312">   This function is only available under the GNU Hurd.  */</Line>
  <Line number="313">extern __mode_t getumask (void) __THROW;</Line>
  <Line number="314">#endif</Line>
  <Line number="315"></Line>
  <Line number="316">/* Create a new directory named PATH, with permission bits MODE.  */</Line>
  <Line number="317">extern int mkdir (const char *__path, __mode_t __mode)</Line>
  <Line number="318">     __THROW __nonnull ((1));</Line>
  <Line number="319"></Line>
  <Line number="320">#ifdef __USE_ATFILE</Line>
  <Line number="321">/* Like mkdir, create a new directory with permission bits MODE.  But</Line>
  <Line number="322">   interpret relative PATH names relative to the directory associated</Line>
  <Line number="323">   with FD.  */</Line>
  <Line number="324">extern int mkdirat (int __fd, const char *__path, __mode_t __mode)</Line>
  <Line number="325">     __THROW __nonnull ((2));</Line>
  <Line number="326">#endif</Line>
  <Line number="327"></Line>
  <Line number="328">/* Create a device file named PATH, with permission and special bits MODE</Line>
  <Line number="329">   and device number DEV (which can be constructed from major and minor</Line>
  <Line number="330">   device numbers with the `makedev&apos; macro above).  */</Line>
  <Line number="331">#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="332">extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)</Line>
  <Line number="333">     __THROW __nonnull ((1));</Line>
  <Line number="334"></Line>
  <Line number="335"># ifdef __USE_ATFILE</Line>
  <Line number="336">/* Like mknod, create a new device file with permission bits MODE and</Line>
  <Line number="337">   device number DEV.  But interpret relative PATH names relative to</Line>
  <Line number="338">   the directory associated with FD.  */</Line>
  <Line number="339">extern int mknodat (int __fd, const char *__path, __mode_t __mode,</Line>
  <Line number="340">		    __dev_t __dev) __THROW __nonnull ((2));</Line>
  <Line number="341"># endif</Line>
  <Line number="342">#endif</Line>
  <Line number="343"></Line>
  <Line number="344"></Line>
  <Line number="345">/* Create a new FIFO named PATH, with permission bits MODE.  */</Line>
  <Line number="346">extern int mkfifo (const char *__path, __mode_t __mode)</Line>
  <Line number="347">     __THROW __nonnull ((1));</Line>
  <Line number="348"></Line>
  <Line number="349">#ifdef __USE_ATFILE</Line>
  <Line number="350">/* Like mkfifo, create a new FIFO with permission bits MODE.  But</Line>
  <Line number="351">   interpret relative PATH names relative to the directory associated</Line>
  <Line number="352">   with FD.  */</Line>
  <Line number="353">extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)</Line>
  <Line number="354">     __THROW __nonnull ((2));</Line>
  <Line number="355">#endif</Line>
  <Line number="356"></Line>
  <Line number="357">#ifdef __USE_ATFILE</Line>
  <Line number="358">/* Set file access and modification times relative to directory file</Line>
  <Line number="359">   descriptor.  */</Line>
  <Line number="360">extern int utimensat (int __fd, const char *__path,</Line>
  <Line number="361">		      const struct timespec __times[2],</Line>
  <Line number="362">		      int __flags)</Line>
  <Line number="363">     __THROW __nonnull ((2));</Line>
  <Line number="364">#endif</Line>
  <Line number="365"></Line>
  <Line number="366">#ifdef __USE_XOPEN2K8</Line>
  <Line number="367">/* Set file access and modification times of the file associated with FD.  */</Line>
  <Line number="368">extern int futimens (int __fd, const struct timespec __times[2]) __THROW;</Line>
  <Line number="369">#endif</Line>
  <Line number="370"></Line>
  <Line number="371">/* To allow the `struct stat&apos; structure and the file type `mode_t&apos;</Line>
  <Line number="372">   bits to vary without changing shared library major version number,</Line>
  <Line number="373">   the `stat&apos; family of functions and `mknod&apos; are in fact inline</Line>
  <Line number="374">   wrappers around calls to `xstat&apos;, `fxstat&apos;, `lxstat&apos;, and `xmknod&apos;,</Line>
  <Line number="375">   which all take a leading version-number argument designating the</Line>
  <Line number="376">   data structure and bits used.  &lt;bits/stat.h&gt; defines _STAT_VER with</Line>
  <Line number="377">   the version number corresponding to `struct stat&apos; as defined in</Line>
  <Line number="378">   that file; and _MKNOD_VER with the version number corresponding to</Line>
  <Line number="379">   the S_IF* macros defined therein.  It is arranged that when not</Line>
  <Line number="380">   inlined these function are always statically linked; that way a</Line>
  <Line number="381">   dynamically-linked executable always encodes the version number</Line>
  <Line number="382">   corresponding to the data structures it uses, so the `x&apos; functions</Line>
  <Line number="383">   in the shared library can adapt without needing to recompile all</Line>
  <Line number="384">   callers.  */</Line>
  <Line number="385"></Line>
  <Line number="386">#ifndef _STAT_VER</Line>
  <Line number="387"># define _STAT_VER	0</Line>
  <Line number="388">#endif</Line>
  <Line number="389">#ifndef _MKNOD_VER</Line>
  <Line number="390"># define _MKNOD_VER	0</Line>
  <Line number="391">#endif</Line>
  <Line number="392"></Line>
  <Line number="393">/* Wrappers for stat and mknod system calls.  */</Line>
  <Line number="394">#ifndef __USE_FILE_OFFSET64</Line>
  <Line number="395">extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)</Line>
  <Line number="396">     __THROW __nonnull ((3));</Line>
  <Line number="397">extern int __xstat (int __ver, const char *__filename,</Line>
  <Line number="398">		    struct stat *__stat_buf) __THROW __nonnull ((2, 3));</Line>
  <Line number="399">extern int __lxstat (int __ver, const char *__filename,</Line>
  <Line number="400">		     struct stat *__stat_buf) __THROW __nonnull ((2, 3));</Line>
  <Line number="401">extern int __fxstatat (int __ver, int __fildes, const char *__filename,</Line>
  <Line number="402">		       struct stat *__stat_buf, int __flag)</Line>
  <Line number="403">     __THROW __nonnull ((3, 4));</Line>
  <Line number="404">#else</Line>
  <Line number="405"># ifdef __REDIRECT_NTH</Line>
  <Line number="406">extern int __REDIRECT_NTH (__fxstat, (int __ver, int __fildes,</Line>
  <Line number="407">				      struct stat *__stat_buf), __fxstat64)</Line>
  <Line number="408">     __nonnull ((3));</Line>
  <Line number="409">extern int __REDIRECT_NTH (__xstat, (int __ver, const char *__filename,</Line>
  <Line number="410">				     struct stat *__stat_buf), __xstat64)</Line>
  <Line number="411">     __nonnull ((2, 3));</Line>
  <Line number="412">extern int __REDIRECT_NTH (__lxstat, (int __ver, const char *__filename,</Line>
  <Line number="413">				      struct stat *__stat_buf), __lxstat64)</Line>
  <Line number="414">     __nonnull ((2, 3));</Line>
  <Line number="415">extern int __REDIRECT_NTH (__fxstatat, (int __ver, int __fildes,</Line>
  <Line number="416">					const char *__filename,</Line>
  <Line number="417">					struct stat *__stat_buf, int __flag),</Line>
  <Line number="418">			   __fxstatat64) __nonnull ((3, 4));</Line>
  <Line number="419"></Line>
  <Line number="420"># else</Line>
  <Line number="421">#  define __fxstat __fxstat64</Line>
  <Line number="422">#  define __xstat __xstat64</Line>
  <Line number="423">#  define __lxstat __lxstat64</Line>
  <Line number="424"># endif</Line>
  <Line number="425">#endif</Line>
  <Line number="426"></Line>
  <Line number="427">#ifdef __USE_LARGEFILE64</Line>
  <Line number="428">extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)</Line>
  <Line number="429">     __THROW __nonnull ((3));</Line>
  <Line number="430">extern int __xstat64 (int __ver, const char *__filename,</Line>
  <Line number="431">		      struct stat64 *__stat_buf) __THROW __nonnull ((2, 3));</Line>
  <Line number="432">extern int __lxstat64 (int __ver, const char *__filename,</Line>
  <Line number="433">		       struct stat64 *__stat_buf) __THROW __nonnull ((2, 3));</Line>
  <Line number="434">extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,</Line>
  <Line number="435">			 struct stat64 *__stat_buf, int __flag)</Line>
  <Line number="436">     __THROW __nonnull ((3, 4));</Line>
  <Line number="437">#endif</Line>
  <Line number="438">extern int __xmknod (int __ver, const char *__path, __mode_t __mode,</Line>
  <Line number="439">		     __dev_t *__dev) __THROW __nonnull ((2, 4));</Line>
  <Line number="440"></Line>
  <Line number="441">extern int __xmknodat (int __ver, int __fd, const char *__path,</Line>
  <Line number="442">		       __mode_t __mode, __dev_t *__dev)</Line>
  <Line number="443">     __THROW __nonnull ((3, 5));</Line>
  <Line number="444"></Line>
  <Line number="445">#ifdef __USE_GNU</Line>
  <Line number="446"># include &lt;bits/statx.h&gt;</Line>
  <Line number="447">#endif</Line>
  <Line number="448"></Line>
  <Line number="449">#ifdef __USE_EXTERN_INLINES</Line>
  <Line number="450">/* Inlined versions of the real stat and mknod functions.  */</Line>
  <Line number="451"></Line>
  <Line number="452">__extern_inline int</Line>
  <Line number="453">__NTH (stat (const char *__path, struct stat *__statbuf))</Line>
  <Line number="454">{</Line>
  <Line number="455">  return __xstat (_STAT_VER, __path, __statbuf);</Line>
  <Line number="456">}</Line>
  <Line number="457"></Line>
  <Line number="458"># if defined __USE_MISC || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="459">__extern_inline int</Line>
  <Line number="460">__NTH (lstat (const char *__path, struct stat *__statbuf))</Line>
  <Line number="461">{</Line>
  <Line number="462">  return __lxstat (_STAT_VER, __path, __statbuf);</Line>
  <Line number="463">}</Line>
  <Line number="464"># endif</Line>
  <Line number="465"></Line>
  <Line number="466">__extern_inline int</Line>
  <Line number="467">__NTH (fstat (int __fd, struct stat *__statbuf))</Line>
  <Line number="468">{</Line>
  <Line number="469">  return __fxstat (_STAT_VER, __fd, __statbuf);</Line>
  <Line number="470">}</Line>
  <Line number="471"></Line>
  <Line number="472"># ifdef __USE_ATFILE</Line>
  <Line number="473">__extern_inline int</Line>
  <Line number="474">__NTH (fstatat (int __fd, const char *__filename, struct stat *__statbuf,</Line>
  <Line number="475">		int __flag))</Line>
  <Line number="476">{</Line>
  <Line number="477">  return __fxstatat (_STAT_VER, __fd, __filename, __statbuf, __flag);</Line>
  <Line number="478">}</Line>
  <Line number="479"># endif</Line>
  <Line number="480"></Line>
  <Line number="481"># ifdef __USE_MISC</Line>
  <Line number="482">__extern_inline int</Line>
  <Line number="483">__NTH (mknod (const char *__path, __mode_t __mode, __dev_t __dev))</Line>
  <Line number="484">{</Line>
  <Line number="485">  return __xmknod (_MKNOD_VER, __path, __mode, &amp;__dev);</Line>
  <Line number="486">}</Line>
  <Line number="487"># endif</Line>
  <Line number="488"></Line>
  <Line number="489"># ifdef __USE_ATFILE</Line>
  <Line number="490">__extern_inline int</Line>
  <Line number="491">__NTH (mknodat (int __fd, const char *__path, __mode_t __mode,</Line>
  <Line number="492">		__dev_t __dev))</Line>
  <Line number="493">{</Line>
  <Line number="494">  return __xmknodat (_MKNOD_VER, __fd, __path, __mode, &amp;__dev);</Line>
  <Line number="495">}</Line>
  <Line number="496"># endif</Line>
  <Line number="497"></Line>
  <Line number="498"># if defined __USE_LARGEFILE64 \</Line>
  <Line number="499">  &amp;&amp; (! defined __USE_FILE_OFFSET64 \</Line>
  <Line number="500">      || (defined __REDIRECT_NTH &amp;&amp; defined __OPTIMIZE__))</Line>
  <Line number="501">__extern_inline int</Line>
  <Line number="502">__NTH (stat64 (const char *__path, struct stat64 *__statbuf))</Line>
  <Line number="503">{</Line>
  <Line number="504">  return __xstat64 (_STAT_VER, __path, __statbuf);</Line>
  <Line number="505">}</Line>
  <Line number="506"></Line>
  <Line number="507">#  if defined __USE_MISC || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="508">__extern_inline int</Line>
  <Line number="509">__NTH (lstat64 (const char *__path, struct stat64 *__statbuf))</Line>
  <Line number="510">{</Line>
  <Line number="511">  return __lxstat64 (_STAT_VER, __path, __statbuf);</Line>
  <Line number="512">}</Line>
  <Line number="513">#  endif</Line>
  <Line number="514"></Line>
  <Line number="515">__extern_inline int</Line>
  <Line number="516">__NTH (fstat64 (int __fd, struct stat64 *__statbuf))</Line>
  <Line number="517">{</Line>
  <Line number="518">  return __fxstat64 (_STAT_VER, __fd, __statbuf);</Line>
  <Line number="519">}</Line>
  <Line number="520"></Line>
  <Line number="521">#  ifdef __USE_ATFILE</Line>
  <Line number="522">__extern_inline int</Line>
  <Line number="523">__NTH (fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf,</Line>
  <Line number="524">		  int __flag))</Line>
  <Line number="525">{</Line>
  <Line number="526">  return __fxstatat64 (_STAT_VER, __fd, __filename, __statbuf, __flag);</Line>
  <Line number="527">}</Line>
  <Line number="528">#  endif</Line>
  <Line number="529"></Line>
  <Line number="530"># endif</Line>
  <Line number="531"></Line>
  <Line number="532">#endif</Line>
  <Line number="533"></Line>
  <Line number="534">__END_DECLS</Line>
  <Line number="535"></Line>
  <Line number="536"></Line>
  <Line number="537">#endif /* sys/stat.h  */</Line>
</SourceFile>
