<SourceFile>
  <Line number="1">/* Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">#ifndef	_STRINGS_H</Line>
  <Line number="19">#define	_STRINGS_H	1</Line>
  <Line number="20"></Line>
  <Line number="21">#include &lt;features.h&gt;</Line>
  <Line number="22">#define __need_size_t</Line>
  <Line number="23">#include &lt;stddef.h&gt;</Line>
  <Line number="24"></Line>
  <Line number="25">/* Tell the caller that we provide correct C++ prototypes.  */</Line>
  <Line number="26">#if defined __cplusplus &amp;&amp; __GNUC_PREREQ (4, 4)</Line>
  <Line number="27"># define __CORRECT_ISO_CPP_STRINGS_H_PROTO</Line>
  <Line number="28">#endif</Line>
  <Line number="29"></Line>
  <Line number="30">__BEGIN_DECLS</Line>
  <Line number="31"></Line>
  <Line number="32">#if defined __USE_MISC || !defined __USE_XOPEN2K8</Line>
  <Line number="33">/* Compare N bytes of S1 and S2 (same as memcmp).  */</Line>
  <Line number="34">extern int bcmp (const void *__s1, const void *__s2, size_t __n)</Line>
  <Line number="35">     __THROW __attribute_pure__ __nonnull ((1, 2));</Line>
  <Line number="36"></Line>
  <Line number="37">/* Copy N bytes of SRC to DEST (like memmove, but args reversed).  */</Line>
  <Line number="38">extern void bcopy (const void *__src, void *__dest, size_t __n)</Line>
  <Line number="39">  __THROW __nonnull ((1, 2));</Line>
  <Line number="40"></Line>
  <Line number="41">/* Set N bytes of S to 0.  */</Line>
  <Line number="42">extern void bzero (void *__s, size_t __n) __THROW __nonnull ((1));</Line>
  <Line number="43"></Line>
  <Line number="44">/* Find the first occurrence of C in S (same as strchr).  */</Line>
  <Line number="45"># ifdef __CORRECT_ISO_CPP_STRINGS_H_PROTO</Line>
  <Line number="46">extern &quot;C++&quot;</Line>
  <Line number="47">{</Line>
  <Line number="48">extern char *index (char *__s, int __c)</Line>
  <Line number="49">     __THROW __asm (&quot;index&quot;) __attribute_pure__ __nonnull ((1));</Line>
  <Line number="50">extern const char *index (const char *__s, int __c)</Line>
  <Line number="51">     __THROW __asm (&quot;index&quot;) __attribute_pure__ __nonnull ((1));</Line>
  <Line number="52"></Line>
  <Line number="53">#  if defined __OPTIMIZE__</Line>
  <Line number="54">__extern_always_inline char *</Line>
  <Line number="55">index (char *__s, int __c) __THROW</Line>
  <Line number="56">{</Line>
  <Line number="57">  return __builtin_index (__s, __c);</Line>
  <Line number="58">}</Line>
  <Line number="59"></Line>
  <Line number="60">__extern_always_inline const char *</Line>
  <Line number="61">index (const char *__s, int __c) __THROW</Line>
  <Line number="62">{</Line>
  <Line number="63">  return __builtin_index (__s, __c);</Line>
  <Line number="64">}</Line>
  <Line number="65">#  endif</Line>
  <Line number="66">}</Line>
  <Line number="67"># else</Line>
  <Line number="68">extern char *index (const char *__s, int __c)</Line>
  <Line number="69">     __THROW __attribute_pure__ __nonnull ((1));</Line>
  <Line number="70"># endif</Line>
  <Line number="71"></Line>
  <Line number="72">/* Find the last occurrence of C in S (same as strrchr).  */</Line>
  <Line number="73"># ifdef __CORRECT_ISO_CPP_STRINGS_H_PROTO</Line>
  <Line number="74">extern &quot;C++&quot;</Line>
  <Line number="75">{</Line>
  <Line number="76">extern char *rindex (char *__s, int __c)</Line>
  <Line number="77">     __THROW __asm (&quot;rindex&quot;) __attribute_pure__ __nonnull ((1));</Line>
  <Line number="78">extern const char *rindex (const char *__s, int __c)</Line>
  <Line number="79">     __THROW __asm (&quot;rindex&quot;) __attribute_pure__ __nonnull ((1));</Line>
  <Line number="80"></Line>
  <Line number="81">#  if defined __OPTIMIZE__</Line>
  <Line number="82">__extern_always_inline char *</Line>
  <Line number="83">rindex (char *__s, int __c) __THROW</Line>
  <Line number="84">{</Line>
  <Line number="85">  return __builtin_rindex (__s, __c);</Line>
  <Line number="86">}</Line>
  <Line number="87"></Line>
  <Line number="88">__extern_always_inline const char *</Line>
  <Line number="89">rindex (const char *__s, int __c) __THROW</Line>
  <Line number="90">{</Line>
  <Line number="91">  return __builtin_rindex (__s, __c);</Line>
  <Line number="92">}</Line>
  <Line number="93">#  endif</Line>
  <Line number="94">}</Line>
  <Line number="95"># else</Line>
  <Line number="96">extern char *rindex (const char *__s, int __c)</Line>
  <Line number="97">     __THROW __attribute_pure__ __nonnull ((1));</Line>
  <Line number="98"># endif</Line>
  <Line number="99">#endif</Line>
  <Line number="100"></Line>
  <Line number="101">#if defined __USE_MISC || !defined __USE_XOPEN2K8 || defined __USE_XOPEN2K8XSI</Line>
  <Line number="102">/* Return the position of the first bit set in I, or 0 if none are set.</Line>
  <Line number="103">   The least-significant bit is position 1, the most-significant 32.  */</Line>
  <Line number="104">extern int ffs (int __i) __THROW __attribute_const__;</Line>
  <Line number="105">#endif</Line>
  <Line number="106"></Line>
  <Line number="107">/* The following two functions are non-standard but necessary for non-32 bit</Line>
  <Line number="108">   platforms.  */</Line>
  <Line number="109"># ifdef	__USE_MISC</Line>
  <Line number="110">extern int ffsl (long int __l) __THROW __attribute_const__;</Line>
  <Line number="111">__extension__ extern int ffsll (long long int __ll)</Line>
  <Line number="112">     __THROW __attribute_const__;</Line>
  <Line number="113"># endif</Line>
  <Line number="114"></Line>
  <Line number="115">/* Compare S1 and S2, ignoring case.  */</Line>
  <Line number="116">extern int strcasecmp (const char *__s1, const char *__s2)</Line>
  <Line number="117">     __THROW __attribute_pure__ __nonnull ((1, 2));</Line>
  <Line number="118"></Line>
  <Line number="119">/* Compare no more than N chars of S1 and S2, ignoring case.  */</Line>
  <Line number="120">extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)</Line>
  <Line number="121">     __THROW __attribute_pure__ __nonnull ((1, 2));</Line>
  <Line number="122"></Line>
  <Line number="123">#ifdef	__USE_XOPEN2K8</Line>
  <Line number="124">/* POSIX.1-2008 extended locale interface (see locale.h).  */</Line>
  <Line number="125"># include &lt;bits/types/locale_t.h&gt;</Line>
  <Line number="126"></Line>
  <Line number="127">/* Compare S1 and S2, ignoring case, using collation rules from LOC.  */</Line>
  <Line number="128">extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)</Line>
  <Line number="129">     __THROW __attribute_pure__ __nonnull ((1, 2, 3));</Line>
  <Line number="130"></Line>
  <Line number="131">/* Compare no more than N chars of S1 and S2, ignoring case, using</Line>
  <Line number="132">   collation rules from LOC.  */</Line>
  <Line number="133">extern int strncasecmp_l (const char *__s1, const char *__s2,</Line>
  <Line number="134">			  size_t __n, locale_t __loc)</Line>
  <Line number="135">     __THROW __attribute_pure__ __nonnull ((1, 2, 4));</Line>
  <Line number="136">#endif</Line>
  <Line number="137"></Line>
  <Line number="138">__END_DECLS</Line>
  <Line number="139"></Line>
  <Line number="140">#if __GNUC_PREREQ (3,4) &amp;&amp; __USE_FORTIFY_LEVEL &gt; 0 \</Line>
  <Line number="141">    &amp;&amp; defined __fortify_function</Line>
  <Line number="142">/* Functions with security checks.  */</Line>
  <Line number="143"># if defined __USE_MISC || !defined __USE_XOPEN2K8</Line>
  <Line number="144">#  include &lt;bits/strings_fortified.h&gt;</Line>
  <Line number="145"># endif</Line>
  <Line number="146">#endif</Line>
  <Line number="147"></Line>
  <Line number="148">#endif	/* strings.h  */</Line>
</SourceFile>
