<SourceFile>
  <Line number="1">/*-------------------------------------------------------------------</Line>
  <Line number="2"> *</Line>
  <Line number="3"> *     Module:          navfunc.h</Line>
  <Line number="4"> *     Modified:        Gokhan Inalhan (remaining) </Line>
  <Line number="5"> *                      Demoz Gebre (first three functions)</Line>
  <Line number="6"> *                      Jung Soon Jang</Line>
  <Line number="7"> *     Description:     navfunc.h contains all the variable, </Line>
  <Line number="8"> *                      constants and function prototypes that are </Line>
  <Line number="9"> *                      used with the inertial navigation software.</Line>
  <Line number="10"> *</Line>
  <Line number="11"> *--------------------------------------------------------------------*/</Line>
  <Line number="12"></Line>
  <Line number="13">#include &quot;matrix.h&quot;</Line>
  <Line number="14">#if defined (NAVFUNC_H)</Line>
  <Line number="15">#else</Line>
  <Line number="16">#define NAVFUNC_H</Line>
  <Line number="17"></Line>
  <Line number="18">/*     Define Constants   */</Line>
  <Line number="19"></Line>
  <Line number="20">#define EARTH_RATE   0.00007292115   /* rotation rate of earth (rad/sec) */</Line>
  <Line number="21">#define EARTH_RADIUS 6378137         /* earth semi-major axis radius (m) */</Line>
  <Line number="22">#define ECCENTRICITY 0.0818191908426 /* major eccentricity of earth ellipsoid */</Line>
  <Line number="23">#define FLATTENING   0.0033528106650 /* flattening of the ellipsoid */</Line>
  <Line number="24">#define GRAVITY_0    9.7803730       /* zeroth coefficient for gravity model */</Line>
  <Line number="25">#define GRAVITY_1    0.0052891       /* first coefficient for the gravity model*/ </Line>
  <Line number="26">#define GRAVITY_2    0.0000059       /* second coefficient for the gravity model*/</Line>
  <Line number="27">#define GRAVITY_NOM  9.81            /* nominal gravity */ </Line>
  <Line number="28">#define SCHULER2     1.533421593170545E-06 /* Sculer Frequency (rad/sec) Squared */</Line>
  <Line number="29">#define R2D          57.29577951308232     /* radians to degrees conversion factor */</Line>
  <Line number="30">#define D2R          0.01745329251994      /* degrees to radians conversion factor */  </Line>
  <Line number="31">#define FT2M         0.3048                /* feet to meters conversion factor */</Line>
  <Line number="32">#define KTS2ms       0.5144                /* Knots to meters/sec conversion factor*/</Line>
  <Line number="33">#define PI           3.14159265358979      /* pi */</Line>
  <Line number="34">#define MAG_DEC      0.270944862           /*magnetic declination of Stanford (rad): 15.15 degrees */</Line>
  <Line number="35">#define MM2M         0.001                 /*mm to m*/</Line>
  <Line number="36"></Line>
  <Line number="37">/*---------------     Define Structures and Enumerated Types -------------*/</Line>
  <Line number="38">typedef enum {OFF, ON} toggle;</Line>
  <Line number="39"></Line>
  <Line number="40"></Line>
  <Line number="41">/*</Line>
  <Line number="42"> * Function:     MATRIX EulerToDcm(MATRIX euler)</Line>
  <Line number="43"> *----------------------------------------------------------------------</Line>
  <Line number="44"> * Computer the direction cosine matrix that transforms a vector in</Line>
  <Line number="45"> * a reference axis system at time k to a reference axis system</Line>
  <Line number="46"> * at time k+1.  The input argument &apos;euler&apos; is a vector containing the</Line>
  <Line number="47"> * the three euler angles in radians.  The order of the angles is assumed</Line>
  <Line number="48"> * to be yaw, pitch and roll (i.e., 3-2-1 rotation convention).</Line>
  <Line number="49"> */</Line>
  <Line number="50">MATRIX EulerToDcm(MATRIX euler, double dipA, MATRIX dcm);</Line>
  <Line number="51"></Line>
  <Line number="52">/* Function    void EcefToEnu(MATRIX outputVector, MATRIX inputVector,</Line>
  <Line number="53"> *                              MATRIX position);</Line>
  <Line number="54"> *-------------------------------------------------------------</Line>
  <Line number="55"> * Converts the vector given in ECEF coordinates to a vector in </Line>
  <Line number="56"> * ENU (East, North, Up) coordinates centered at the location</Line>
  <Line number="57"> * given in position (in lattitude, longitude, altitude);</Line>
  <Line number="58"> */ </Line>
  <Line number="59">void EcefToEnu(MATRIX outputVector, MATRIX inputVector, MATRIX position);</Line>
  <Line number="60"></Line>
  <Line number="61"></Line>
  <Line number="62">/* Function    void EcefToLatLonAlt(MATRIX vector);</Line>
  <Line number="63"> *-----------------------------------------------------</Line>
  <Line number="64"> * Converts a position vector given in ECEF coordinates</Line>
  <Line number="65"> * into latitude, longitude and altitude.</Line>
  <Line number="66"> */</Line>
  <Line number="67">void EcefToLatLonAlt(MATRIX vector);</Line>
  <Line number="68"></Line>
  <Line number="69">/* Function void LatLonAltToEcef(MATRIX vector, MATRIX position );</Line>
  <Line number="70"> *--------------------------------------------------------------</Line>
  <Line number="71"> * Converts a position vector given in lattitude, longitude and </Line>
  <Line number="72"> * altitude to a vector in ECEF coordinates.</Line>
  <Line number="73"> */</Line>
  <Line number="74">void LatLonAltToEcef(MATRIX vector, MATRIX position);</Line>
  <Line number="75"></Line>
  <Line number="76">/* Function void nCltrans(MATRIX n_C_l, double magdec)</Line>
  <Line number="77"> *--------------------------------------------------------------</Line>
  <Line number="78"> * Creates the transformation matrix from IMU level earth frame </Line>
  <Line number="79"> * to instantenous Navigation ENU frame</Line>
  <Line number="80"> */</Line>
  <Line number="81">void nCltrans(MATRIX n_C_l, double magdec);</Line>
  <Line number="82"></Line>
  <Line number="83">/* Function void eCntrans(MATRIX e_C_n, MATRIX LatLon)</Line>
  <Line number="84"> *--------------------------------------------------------------</Line>
  <Line number="85"> * Creates the transformation matrix from Navigation ENU frame</Line>
  <Line number="86"> * to ECEF frame through LatLon matrix=[Lat Lon]&apos; (rad)</Line>
  <Line number="87"> */</Line>
  <Line number="88">void eCntrans(MATRIX e_C_n, MATRIX LatLon);</Line>
  <Line number="89"></Line>
  <Line number="90">/* void lCbtrans(MATRIX l_C_b, MATRIX YawPitchRoll)</Line>
  <Line number="91"> *---------------------------------------------------------------</Line>
  <Line number="92"> * Creates the transformation matrix from B(b:body) to ELF(l:earth level) frame</Line>
  <Line number="93"> * input: yaw-psi(rad) pitch-theta(rad) roll-phi(rad) inverse of 3-2-1 Euler transformation</Line>
  <Line number="94"> */</Line>
  <Line number="95">void lCbtrans(MATRIX l_C_b, MATRIX YawPitchRoll); </Line>
  <Line number="96"> </Line>
  <Line number="97">#endif</Line>
  <Line number="98"></Line>
  <Line number="99"></Line>
  <Line number="100"></Line>
  <Line number="101"></Line>
  <Line number="102"></Line>
  <Line number="103"></Line>
  <Line number="104"></Line>
  <Line number="105"></Line>
  <Line number="106"></Line>
  <Line number="107"></Line>
  <Line number="108"></Line>
  <Line number="109"></Line>
</SourceFile>
