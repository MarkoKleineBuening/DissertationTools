<SourceFile>
  <Line number="1">/* Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">/*</Line>
  <Line number="19"> *	ISO C99 Standard: 7.20 General utilities	&lt;stdlib.h&gt;</Line>
  <Line number="20"> */</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef	_STDLIB_H</Line>
  <Line number="23"></Line>
  <Line number="24">#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION</Line>
  <Line number="25">#include &lt;bits/libc-header-start.h&gt;</Line>
  <Line number="26"></Line>
  <Line number="27">/* Get size_t, wchar_t and NULL from &lt;stddef.h&gt;.  */</Line>
  <Line number="28">#define __need_size_t</Line>
  <Line number="29">#define __need_wchar_t</Line>
  <Line number="30">#define __need_NULL</Line>
  <Line number="31">#include &lt;stddef.h&gt;</Line>
  <Line number="32"></Line>
  <Line number="33">__BEGIN_DECLS</Line>
  <Line number="34"></Line>
  <Line number="35">#define	_STDLIB_H	1</Line>
  <Line number="36"></Line>
  <Line number="37">#if (defined __USE_XOPEN || defined __USE_XOPEN2K8) &amp;&amp; !defined _SYS_WAIT_H</Line>
  <Line number="38">/* XPG requires a few symbols from &lt;sys/wait.h&gt; being defined.  */</Line>
  <Line number="39"># include &lt;bits/waitflags.h&gt;</Line>
  <Line number="40"># include &lt;bits/waitstatus.h&gt;</Line>
  <Line number="41"></Line>
  <Line number="42">/* Define the macros &lt;sys/wait.h&gt; also would define this way.  */</Line>
  <Line number="43"># define WEXITSTATUS(status)	__WEXITSTATUS (status)</Line>
  <Line number="44"># define WTERMSIG(status)	__WTERMSIG (status)</Line>
  <Line number="45"># define WSTOPSIG(status)	__WSTOPSIG (status)</Line>
  <Line number="46"># define WIFEXITED(status)	__WIFEXITED (status)</Line>
  <Line number="47"># define WIFSIGNALED(status)	__WIFSIGNALED (status)</Line>
  <Line number="48"># define WIFSTOPPED(status)	__WIFSTOPPED (status)</Line>
  <Line number="49"># ifdef __WIFCONTINUED</Line>
  <Line number="50">#  define WIFCONTINUED(status)	__WIFCONTINUED (status)</Line>
  <Line number="51"># endif</Line>
  <Line number="52">#endif	/* X/Open or XPG7 and &lt;sys/wait.h&gt; not included.  */</Line>
  <Line number="53"></Line>
  <Line number="54">/* _FloatN API tests for enablement.  */</Line>
  <Line number="55">#include &lt;bits/floatn.h&gt;</Line>
  <Line number="56"></Line>
  <Line number="57">/* Returned by `div&apos;.  */</Line>
  <Line number="58">typedef struct</Line>
  <Line number="59">  {</Line>
  <Line number="60">    int quot;			/* Quotient.  */</Line>
  <Line number="61">    int rem;			/* Remainder.  */</Line>
  <Line number="62">  } div_t;</Line>
  <Line number="63"></Line>
  <Line number="64">/* Returned by `ldiv&apos;.  */</Line>
  <Line number="65">#ifndef __ldiv_t_defined</Line>
  <Line number="66">typedef struct</Line>
  <Line number="67">  {</Line>
  <Line number="68">    long int quot;		/* Quotient.  */</Line>
  <Line number="69">    long int rem;		/* Remainder.  */</Line>
  <Line number="70">  } ldiv_t;</Line>
  <Line number="71"># define __ldiv_t_defined	1</Line>
  <Line number="72">#endif</Line>
  <Line number="73"></Line>
  <Line number="74">#if defined __USE_ISOC99 &amp;&amp; !defined __lldiv_t_defined</Line>
  <Line number="75">/* Returned by `lldiv&apos;.  */</Line>
  <Line number="76">__extension__ typedef struct</Line>
  <Line number="77">  {</Line>
  <Line number="78">    long long int quot;		/* Quotient.  */</Line>
  <Line number="79">    long long int rem;		/* Remainder.  */</Line>
  <Line number="80">  } lldiv_t;</Line>
  <Line number="81"># define __lldiv_t_defined	1</Line>
  <Line number="82">#endif</Line>
  <Line number="83"></Line>
  <Line number="84"></Line>
  <Line number="85">/* The largest number rand will return (same as INT_MAX).  */</Line>
  <Line number="86">#define	RAND_MAX	2147483647</Line>
  <Line number="87"></Line>
  <Line number="88"></Line>
  <Line number="89">/* We define these the same for all machines.</Line>
  <Line number="90">   Changes from this to the outside world should be done in `_exit&apos;.  */</Line>
  <Line number="91">#define	EXIT_FAILURE	1	/* Failing exit status.  */</Line>
  <Line number="92">#define	EXIT_SUCCESS	0	/* Successful exit status.  */</Line>
  <Line number="93"></Line>
  <Line number="94"></Line>
  <Line number="95">/* Maximum length of a multibyte character in the current locale.  */</Line>
  <Line number="96">#define	MB_CUR_MAX	(__ctype_get_mb_cur_max ())</Line>
  <Line number="97">extern size_t __ctype_get_mb_cur_max (void) __THROW __wur;</Line>
  <Line number="98"></Line>
  <Line number="99"></Line>
  <Line number="100">/* Convert a string to a floating-point number.  */</Line>
  <Line number="101">extern double atof (const char *__nptr)</Line>
  <Line number="102">     __THROW __attribute_pure__ __nonnull ((1)) __wur;</Line>
  <Line number="103">/* Convert a string to an integer.  */</Line>
  <Line number="104">extern int atoi (const char *__nptr)</Line>
  <Line number="105">     __THROW __attribute_pure__ __nonnull ((1)) __wur;</Line>
  <Line number="106">/* Convert a string to a long integer.  */</Line>
  <Line number="107">extern long int atol (const char *__nptr)</Line>
  <Line number="108">     __THROW __attribute_pure__ __nonnull ((1)) __wur;</Line>
  <Line number="109"></Line>
  <Line number="110">#ifdef __USE_ISOC99</Line>
  <Line number="111">/* Convert a string to a long long integer.  */</Line>
  <Line number="112">__extension__ extern long long int atoll (const char *__nptr)</Line>
  <Line number="113">     __THROW __attribute_pure__ __nonnull ((1)) __wur;</Line>
  <Line number="114">#endif</Line>
  <Line number="115"></Line>
  <Line number="116">/* Convert a string to a floating-point number.  */</Line>
  <Line number="117">extern double strtod (const char *__restrict __nptr,</Line>
  <Line number="118">		      char **__restrict __endptr)</Line>
  <Line number="119">     __THROW __nonnull ((1));</Line>
  <Line number="120"></Line>
  <Line number="121">#ifdef	__USE_ISOC99</Line>
  <Line number="122">/* Likewise for `float&apos; and `long double&apos; sizes of floating-point numbers.  */</Line>
  <Line number="123">extern float strtof (const char *__restrict __nptr,</Line>
  <Line number="124">		     char **__restrict __endptr) __THROW __nonnull ((1));</Line>
  <Line number="125"></Line>
  <Line number="126">extern long double strtold (const char *__restrict __nptr,</Line>
  <Line number="127">			    char **__restrict __endptr)</Line>
  <Line number="128">     __THROW __nonnull ((1));</Line>
  <Line number="129">#endif</Line>
  <Line number="130"></Line>
  <Line number="131">/* Likewise for &apos;_FloatN&apos; and &apos;_FloatNx&apos;.  */</Line>
  <Line number="132"></Line>
  <Line number="133">#if __HAVE_FLOAT16 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="134">extern _Float16 strtof16 (const char *__restrict __nptr,</Line>
  <Line number="135">			  char **__restrict __endptr)</Line>
  <Line number="136">     __THROW __nonnull ((1));</Line>
  <Line number="137">#endif</Line>
  <Line number="138"></Line>
  <Line number="139">#if __HAVE_FLOAT32 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="140">extern _Float32 strtof32 (const char *__restrict __nptr,</Line>
  <Line number="141">			  char **__restrict __endptr)</Line>
  <Line number="142">     __THROW __nonnull ((1));</Line>
  <Line number="143">#endif</Line>
  <Line number="144"></Line>
  <Line number="145">#if __HAVE_FLOAT64 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="146">extern _Float64 strtof64 (const char *__restrict __nptr,</Line>
  <Line number="147">			  char **__restrict __endptr)</Line>
  <Line number="148">     __THROW __nonnull ((1));</Line>
  <Line number="149">#endif</Line>
  <Line number="150"></Line>
  <Line number="151">#if __HAVE_FLOAT128 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="152">extern _Float128 strtof128 (const char *__restrict __nptr,</Line>
  <Line number="153">			    char **__restrict __endptr)</Line>
  <Line number="154">     __THROW __nonnull ((1));</Line>
  <Line number="155">#endif</Line>
  <Line number="156"></Line>
  <Line number="157">#if __HAVE_FLOAT32X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="158">extern _Float32x strtof32x (const char *__restrict __nptr,</Line>
  <Line number="159">			    char **__restrict __endptr)</Line>
  <Line number="160">     __THROW __nonnull ((1));</Line>
  <Line number="161">#endif</Line>
  <Line number="162"></Line>
  <Line number="163">#if __HAVE_FLOAT64X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="164">extern _Float64x strtof64x (const char *__restrict __nptr,</Line>
  <Line number="165">			    char **__restrict __endptr)</Line>
  <Line number="166">     __THROW __nonnull ((1));</Line>
  <Line number="167">#endif</Line>
  <Line number="168"></Line>
  <Line number="169">#if __HAVE_FLOAT128X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="170">extern _Float128x strtof128x (const char *__restrict __nptr,</Line>
  <Line number="171">			      char **__restrict __endptr)</Line>
  <Line number="172">     __THROW __nonnull ((1));</Line>
  <Line number="173">#endif</Line>
  <Line number="174"></Line>
  <Line number="175">/* Convert a string to a long integer.  */</Line>
  <Line number="176">extern long int strtol (const char *__restrict __nptr,</Line>
  <Line number="177">			char **__restrict __endptr, int __base)</Line>
  <Line number="178">     __THROW __nonnull ((1));</Line>
  <Line number="179">/* Convert a string to an unsigned long integer.  */</Line>
  <Line number="180">extern unsigned long int strtoul (const char *__restrict __nptr,</Line>
  <Line number="181">				  char **__restrict __endptr, int __base)</Line>
  <Line number="182">     __THROW __nonnull ((1));</Line>
  <Line number="183"></Line>
  <Line number="184">#ifdef __USE_MISC</Line>
  <Line number="185">/* Convert a string to a quadword integer.  */</Line>
  <Line number="186">__extension__</Line>
  <Line number="187">extern long long int strtoq (const char *__restrict __nptr,</Line>
  <Line number="188">			     char **__restrict __endptr, int __base)</Line>
  <Line number="189">     __THROW __nonnull ((1));</Line>
  <Line number="190">/* Convert a string to an unsigned quadword integer.  */</Line>
  <Line number="191">__extension__</Line>
  <Line number="192">extern unsigned long long int strtouq (const char *__restrict __nptr,</Line>
  <Line number="193">				       char **__restrict __endptr, int __base)</Line>
  <Line number="194">     __THROW __nonnull ((1));</Line>
  <Line number="195">#endif /* Use misc.  */</Line>
  <Line number="196"></Line>
  <Line number="197">#ifdef __USE_ISOC99</Line>
  <Line number="198">/* Convert a string to a quadword integer.  */</Line>
  <Line number="199">__extension__</Line>
  <Line number="200">extern long long int strtoll (const char *__restrict __nptr,</Line>
  <Line number="201">			      char **__restrict __endptr, int __base)</Line>
  <Line number="202">     __THROW __nonnull ((1));</Line>
  <Line number="203">/* Convert a string to an unsigned quadword integer.  */</Line>
  <Line number="204">__extension__</Line>
  <Line number="205">extern unsigned long long int strtoull (const char *__restrict __nptr,</Line>
  <Line number="206">					char **__restrict __endptr, int __base)</Line>
  <Line number="207">     __THROW __nonnull ((1));</Line>
  <Line number="208">#endif /* ISO C99 or use MISC.  */</Line>
  <Line number="209"></Line>
  <Line number="210">/* Convert a floating-point number to a string.  */</Line>
  <Line number="211">#if __GLIBC_USE (IEC_60559_BFP_EXT_C2X)</Line>
  <Line number="212">extern int strfromd (char *__dest, size_t __size, const char *__format,</Line>
  <Line number="213">		     double __f)</Line>
  <Line number="214">     __THROW __nonnull ((3));</Line>
  <Line number="215"></Line>
  <Line number="216">extern int strfromf (char *__dest, size_t __size, const char *__format,</Line>
  <Line number="217">		     float __f)</Line>
  <Line number="218">     __THROW __nonnull ((3));</Line>
  <Line number="219"></Line>
  <Line number="220">extern int strfroml (char *__dest, size_t __size, const char *__format,</Line>
  <Line number="221">		     long double __f)</Line>
  <Line number="222">     __THROW __nonnull ((3));</Line>
  <Line number="223">#endif</Line>
  <Line number="224"></Line>
  <Line number="225">#if __HAVE_FLOAT16 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="226">extern int strfromf16 (char *__dest, size_t __size, const char * __format,</Line>
  <Line number="227">		       _Float16 __f)</Line>
  <Line number="228">     __THROW __nonnull ((3));</Line>
  <Line number="229">#endif</Line>
  <Line number="230"></Line>
  <Line number="231">#if __HAVE_FLOAT32 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="232">extern int strfromf32 (char *__dest, size_t __size, const char * __format,</Line>
  <Line number="233">		       _Float32 __f)</Line>
  <Line number="234">     __THROW __nonnull ((3));</Line>
  <Line number="235">#endif</Line>
  <Line number="236"></Line>
  <Line number="237">#if __HAVE_FLOAT64 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="238">extern int strfromf64 (char *__dest, size_t __size, const char * __format,</Line>
  <Line number="239">		       _Float64 __f)</Line>
  <Line number="240">     __THROW __nonnull ((3));</Line>
  <Line number="241">#endif</Line>
  <Line number="242"></Line>
  <Line number="243">#if __HAVE_FLOAT128 &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="244">extern int strfromf128 (char *__dest, size_t __size, const char * __format,</Line>
  <Line number="245">			_Float128 __f)</Line>
  <Line number="246">     __THROW __nonnull ((3));</Line>
  <Line number="247">#endif</Line>
  <Line number="248"></Line>
  <Line number="249">#if __HAVE_FLOAT32X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="250">extern int strfromf32x (char *__dest, size_t __size, const char * __format,</Line>
  <Line number="251">			_Float32x __f)</Line>
  <Line number="252">     __THROW __nonnull ((3));</Line>
  <Line number="253">#endif</Line>
  <Line number="254"></Line>
  <Line number="255">#if __HAVE_FLOAT64X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="256">extern int strfromf64x (char *__dest, size_t __size, const char * __format,</Line>
  <Line number="257">			_Float64x __f)</Line>
  <Line number="258">     __THROW __nonnull ((3));</Line>
  <Line number="259">#endif</Line>
  <Line number="260"></Line>
  <Line number="261">#if __HAVE_FLOAT128X &amp;&amp; __GLIBC_USE (IEC_60559_TYPES_EXT)</Line>
  <Line number="262">extern int strfromf128x (char *__dest, size_t __size, const char * __format,</Line>
  <Line number="263">			 _Float128x __f)</Line>
  <Line number="264">     __THROW __nonnull ((3));</Line>
  <Line number="265">#endif</Line>
  <Line number="266"></Line>
  <Line number="267"></Line>
  <Line number="268">#ifdef __USE_GNU</Line>
  <Line number="269">/* Parallel versions of the functions above which take the locale to</Line>
  <Line number="270">   use as an additional parameter.  These are GNU extensions inspired</Line>
  <Line number="271">   by the POSIX.1-2008 extended locale API.  */</Line>
  <Line number="272"># include &lt;bits/types/locale_t.h&gt;</Line>
  <Line number="273"></Line>
  <Line number="274">extern long int strtol_l (const char *__restrict __nptr,</Line>
  <Line number="275">			  char **__restrict __endptr, int __base,</Line>
  <Line number="276">			  locale_t __loc) __THROW __nonnull ((1, 4));</Line>
  <Line number="277"></Line>
  <Line number="278">extern unsigned long int strtoul_l (const char *__restrict __nptr,</Line>
  <Line number="279">				    char **__restrict __endptr,</Line>
  <Line number="280">				    int __base, locale_t __loc)</Line>
  <Line number="281">     __THROW __nonnull ((1, 4));</Line>
  <Line number="282"></Line>
  <Line number="283">__extension__</Line>
  <Line number="284">extern long long int strtoll_l (const char *__restrict __nptr,</Line>
  <Line number="285">				char **__restrict __endptr, int __base,</Line>
  <Line number="286">				locale_t __loc)</Line>
  <Line number="287">     __THROW __nonnull ((1, 4));</Line>
  <Line number="288"></Line>
  <Line number="289">__extension__</Line>
  <Line number="290">extern unsigned long long int strtoull_l (const char *__restrict __nptr,</Line>
  <Line number="291">					  char **__restrict __endptr,</Line>
  <Line number="292">					  int __base, locale_t __loc)</Line>
  <Line number="293">     __THROW __nonnull ((1, 4));</Line>
  <Line number="294"></Line>
  <Line number="295">extern double strtod_l (const char *__restrict __nptr,</Line>
  <Line number="296">			char **__restrict __endptr, locale_t __loc)</Line>
  <Line number="297">     __THROW __nonnull ((1, 3));</Line>
  <Line number="298"></Line>
  <Line number="299">extern float strtof_l (const char *__restrict __nptr,</Line>
  <Line number="300">		       char **__restrict __endptr, locale_t __loc)</Line>
  <Line number="301">     __THROW __nonnull ((1, 3));</Line>
  <Line number="302"></Line>
  <Line number="303">extern long double strtold_l (const char *__restrict __nptr,</Line>
  <Line number="304">			      char **__restrict __endptr,</Line>
  <Line number="305">			      locale_t __loc)</Line>
  <Line number="306">     __THROW __nonnull ((1, 3));</Line>
  <Line number="307"></Line>
  <Line number="308"># if __HAVE_FLOAT16</Line>
  <Line number="309">extern _Float16 strtof16_l (const char *__restrict __nptr,</Line>
  <Line number="310">			    char **__restrict __endptr,</Line>
  <Line number="311">			    locale_t __loc)</Line>
  <Line number="312">     __THROW __nonnull ((1, 3));</Line>
  <Line number="313"># endif</Line>
  <Line number="314"></Line>
  <Line number="315"># if __HAVE_FLOAT32</Line>
  <Line number="316">extern _Float32 strtof32_l (const char *__restrict __nptr,</Line>
  <Line number="317">			    char **__restrict __endptr,</Line>
  <Line number="318">			    locale_t __loc)</Line>
  <Line number="319">     __THROW __nonnull ((1, 3));</Line>
  <Line number="320"># endif</Line>
  <Line number="321"></Line>
  <Line number="322"># if __HAVE_FLOAT64</Line>
  <Line number="323">extern _Float64 strtof64_l (const char *__restrict __nptr,</Line>
  <Line number="324">			    char **__restrict __endptr,</Line>
  <Line number="325">			    locale_t __loc)</Line>
  <Line number="326">     __THROW __nonnull ((1, 3));</Line>
  <Line number="327"># endif</Line>
  <Line number="328"></Line>
  <Line number="329"># if __HAVE_FLOAT128</Line>
  <Line number="330">extern _Float128 strtof128_l (const char *__restrict __nptr,</Line>
  <Line number="331">			      char **__restrict __endptr,</Line>
  <Line number="332">			      locale_t __loc)</Line>
  <Line number="333">     __THROW __nonnull ((1, 3));</Line>
  <Line number="334"># endif</Line>
  <Line number="335"></Line>
  <Line number="336"># if __HAVE_FLOAT32X</Line>
  <Line number="337">extern _Float32x strtof32x_l (const char *__restrict __nptr,</Line>
  <Line number="338">			      char **__restrict __endptr,</Line>
  <Line number="339">			      locale_t __loc)</Line>
  <Line number="340">     __THROW __nonnull ((1, 3));</Line>
  <Line number="341"># endif</Line>
  <Line number="342"></Line>
  <Line number="343"># if __HAVE_FLOAT64X</Line>
  <Line number="344">extern _Float64x strtof64x_l (const char *__restrict __nptr,</Line>
  <Line number="345">			      char **__restrict __endptr,</Line>
  <Line number="346">			      locale_t __loc)</Line>
  <Line number="347">     __THROW __nonnull ((1, 3));</Line>
  <Line number="348"># endif</Line>
  <Line number="349"></Line>
  <Line number="350"># if __HAVE_FLOAT128X</Line>
  <Line number="351">extern _Float128x strtof128x_l (const char *__restrict __nptr,</Line>
  <Line number="352">				char **__restrict __endptr,</Line>
  <Line number="353">				locale_t __loc)</Line>
  <Line number="354">     __THROW __nonnull ((1, 3));</Line>
  <Line number="355"># endif</Line>
  <Line number="356">#endif /* GNU */</Line>
  <Line number="357"></Line>
  <Line number="358"></Line>
  <Line number="359">#ifdef __USE_EXTERN_INLINES</Line>
  <Line number="360">__extern_inline int</Line>
  <Line number="361">__NTH (atoi (const char *__nptr))</Line>
  <Line number="362">{</Line>
  <Line number="363">  return (int) strtol (__nptr, (char **) NULL, 10);</Line>
  <Line number="364">}</Line>
  <Line number="365">__extern_inline long int</Line>
  <Line number="366">__NTH (atol (const char *__nptr))</Line>
  <Line number="367">{</Line>
  <Line number="368">  return strtol (__nptr, (char **) NULL, 10);</Line>
  <Line number="369">}</Line>
  <Line number="370"></Line>
  <Line number="371"># ifdef __USE_ISOC99</Line>
  <Line number="372">__extension__ __extern_inline long long int</Line>
  <Line number="373">__NTH (atoll (const char *__nptr))</Line>
  <Line number="374">{</Line>
  <Line number="375">  return strtoll (__nptr, (char **) NULL, 10);</Line>
  <Line number="376">}</Line>
  <Line number="377"># endif</Line>
  <Line number="378">#endif /* Optimizing and Inlining.  */</Line>
  <Line number="379"></Line>
  <Line number="380"></Line>
  <Line number="381">#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="382">/* Convert N to base 64 using the digits &quot;./0-9A-Za-z&quot;, least-significant</Line>
  <Line number="383">   digit first.  Returns a pointer to static storage overwritten by the</Line>
  <Line number="384">   next call.  */</Line>
  <Line number="385">extern char *l64a (long int __n) __THROW __wur;</Line>
  <Line number="386"></Line>
  <Line number="387">/* Read a number from a string S in base 64 as above.  */</Line>
  <Line number="388">extern long int a64l (const char *__s)</Line>
  <Line number="389">     __THROW __attribute_pure__ __nonnull ((1)) __wur;</Line>
  <Line number="390"></Line>
  <Line number="391">#endif	/* Use misc || extended X/Open.  */</Line>
  <Line number="392"></Line>
  <Line number="393">#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="394"># include &lt;sys/types.h&gt;	/* we need int32_t... */</Line>
  <Line number="395"></Line>
  <Line number="396">/* These are the functions that actually do things.  The `random&apos;, `srandom&apos;,</Line>
  <Line number="397">   `initstate&apos; and `setstate&apos; functions are those from BSD Unices.</Line>
  <Line number="398">   The `rand&apos; and `srand&apos; functions are required by the ANSI standard.</Line>
  <Line number="399">   We provide both interfaces to the same random number generator.  */</Line>
  <Line number="400">/* Return a random long integer between 0 and RAND_MAX inclusive.  */</Line>
  <Line number="401">extern long int random (void) __THROW;</Line>
  <Line number="402"></Line>
  <Line number="403">/* Seed the random number generator with the given number.  */</Line>
  <Line number="404">extern void srandom (unsigned int __seed) __THROW;</Line>
  <Line number="405"></Line>
  <Line number="406">/* Initialize the random number generator to use state buffer STATEBUF,</Line>
  <Line number="407">   of length STATELEN, and seed it with SEED.  Optimal lengths are 8, 16,</Line>
  <Line number="408">   32, 64, 128 and 256, the bigger the better; values less than 8 will</Line>
  <Line number="409">   cause an error and values greater than 256 will be rounded down.  */</Line>
  <Line number="410">extern char *initstate (unsigned int __seed, char *__statebuf,</Line>
  <Line number="411">			size_t __statelen) __THROW __nonnull ((2));</Line>
  <Line number="412"></Line>
  <Line number="413">/* Switch the random number generator to state buffer STATEBUF,</Line>
  <Line number="414">   which should have been previously initialized by `initstate&apos;.  */</Line>
  <Line number="415">extern char *setstate (char *__statebuf) __THROW __nonnull ((1));</Line>
  <Line number="416"></Line>
  <Line number="417"></Line>
  <Line number="418"># ifdef __USE_MISC</Line>
  <Line number="419">/* Reentrant versions of the `random&apos; family of functions.</Line>
  <Line number="420">   These functions all use the following data structure to contain</Line>
  <Line number="421">   state, rather than global state variables.  */</Line>
  <Line number="422"></Line>
  <Line number="423">struct random_data</Line>
  <Line number="424">  {</Line>
  <Line number="425">    int32_t *fptr;		/* Front pointer.  */</Line>
  <Line number="426">    int32_t *rptr;		/* Rear pointer.  */</Line>
  <Line number="427">    int32_t *state;		/* Array of state values.  */</Line>
  <Line number="428">    int rand_type;		/* Type of random number generator.  */</Line>
  <Line number="429">    int rand_deg;		/* Degree of random number generator.  */</Line>
  <Line number="430">    int rand_sep;		/* Distance between front and rear.  */</Line>
  <Line number="431">    int32_t *end_ptr;		/* Pointer behind state table.  */</Line>
  <Line number="432">  };</Line>
  <Line number="433"></Line>
  <Line number="434">extern int random_r (struct random_data *__restrict __buf,</Line>
  <Line number="435">		     int32_t *__restrict __result) __THROW __nonnull ((1, 2));</Line>
  <Line number="436"></Line>
  <Line number="437">extern int srandom_r (unsigned int __seed, struct random_data *__buf)</Line>
  <Line number="438">     __THROW __nonnull ((2));</Line>
  <Line number="439"></Line>
  <Line number="440">extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,</Line>
  <Line number="441">			size_t __statelen,</Line>
  <Line number="442">			struct random_data *__restrict __buf)</Line>
  <Line number="443">     __THROW __nonnull ((2, 4));</Line>
  <Line number="444"></Line>
  <Line number="445">extern int setstate_r (char *__restrict __statebuf,</Line>
  <Line number="446">		       struct random_data *__restrict __buf)</Line>
  <Line number="447">     __THROW __nonnull ((1, 2));</Line>
  <Line number="448"># endif	/* Use misc.  */</Line>
  <Line number="449">#endif	/* Use extended X/Open || misc. */</Line>
  <Line number="450"></Line>
  <Line number="451"></Line>
  <Line number="452">/* Return a random integer between 0 and RAND_MAX inclusive.  */</Line>
  <Line number="453">extern int rand (void) __THROW;</Line>
  <Line number="454">/* Seed the random number generator with the given number.  */</Line>
  <Line number="455">extern void srand (unsigned int __seed) __THROW;</Line>
  <Line number="456"></Line>
  <Line number="457">#ifdef __USE_POSIX199506</Line>
  <Line number="458">/* Reentrant interface according to POSIX.1.  */</Line>
  <Line number="459">extern int rand_r (unsigned int *__seed) __THROW;</Line>
  <Line number="460">#endif</Line>
  <Line number="461"></Line>
  <Line number="462"></Line>
  <Line number="463">#if defined __USE_MISC || defined __USE_XOPEN</Line>
  <Line number="464">/* System V style 48-bit random number generator functions.  */</Line>
  <Line number="465"></Line>
  <Line number="466">/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */</Line>
  <Line number="467">extern double drand48 (void) __THROW;</Line>
  <Line number="468">extern double erand48 (unsigned short int __xsubi[3]) __THROW __nonnull ((1));</Line>
  <Line number="469"></Line>
  <Line number="470">/* Return non-negative, long integer in [0,2^31).  */</Line>
  <Line number="471">extern long int lrand48 (void) __THROW;</Line>
  <Line number="472">extern long int nrand48 (unsigned short int __xsubi[3])</Line>
  <Line number="473">     __THROW __nonnull ((1));</Line>
  <Line number="474"></Line>
  <Line number="475">/* Return signed, long integers in [-2^31,2^31).  */</Line>
  <Line number="476">extern long int mrand48 (void) __THROW;</Line>
  <Line number="477">extern long int jrand48 (unsigned short int __xsubi[3])</Line>
  <Line number="478">     __THROW __nonnull ((1));</Line>
  <Line number="479"></Line>
  <Line number="480">/* Seed random number generator.  */</Line>
  <Line number="481">extern void srand48 (long int __seedval) __THROW;</Line>
  <Line number="482">extern unsigned short int *seed48 (unsigned short int __seed16v[3])</Line>
  <Line number="483">     __THROW __nonnull ((1));</Line>
  <Line number="484">extern void lcong48 (unsigned short int __param[7]) __THROW __nonnull ((1));</Line>
  <Line number="485"></Line>
  <Line number="486"># ifdef __USE_MISC</Line>
  <Line number="487">/* Data structure for communication with thread safe versions.  This</Line>
  <Line number="488">   type is to be regarded as opaque.  It&apos;s only exported because users</Line>
  <Line number="489">   have to allocate objects of this type.  */</Line>
  <Line number="490">struct drand48_data</Line>
  <Line number="491">  {</Line>
  <Line number="492">    unsigned short int __x[3];	/* Current state.  */</Line>
  <Line number="493">    unsigned short int __old_x[3]; /* Old state.  */</Line>
  <Line number="494">    unsigned short int __c;	/* Additive const. in congruential formula.  */</Line>
  <Line number="495">    unsigned short int __init;	/* Flag for initializing.  */</Line>
  <Line number="496">    __extension__ unsigned long long int __a;	/* Factor in congruential</Line>
  <Line number="497">						   formula.  */</Line>
  <Line number="498">  };</Line>
  <Line number="499"></Line>
  <Line number="500">/* Return non-negative, double-precision floating-point value in [0.0,1.0).  */</Line>
  <Line number="501">extern int drand48_r (struct drand48_data *__restrict __buffer,</Line>
  <Line number="502">		      double *__restrict __result) __THROW __nonnull ((1, 2));</Line>
  <Line number="503">extern int erand48_r (unsigned short int __xsubi[3],</Line>
  <Line number="504">		      struct drand48_data *__restrict __buffer,</Line>
  <Line number="505">		      double *__restrict __result) __THROW __nonnull ((1, 2));</Line>
  <Line number="506"></Line>
  <Line number="507">/* Return non-negative, long integer in [0,2^31).  */</Line>
  <Line number="508">extern int lrand48_r (struct drand48_data *__restrict __buffer,</Line>
  <Line number="509">		      long int *__restrict __result)</Line>
  <Line number="510">     __THROW __nonnull ((1, 2));</Line>
  <Line number="511">extern int nrand48_r (unsigned short int __xsubi[3],</Line>
  <Line number="512">		      struct drand48_data *__restrict __buffer,</Line>
  <Line number="513">		      long int *__restrict __result)</Line>
  <Line number="514">     __THROW __nonnull ((1, 2));</Line>
  <Line number="515"></Line>
  <Line number="516">/* Return signed, long integers in [-2^31,2^31).  */</Line>
  <Line number="517">extern int mrand48_r (struct drand48_data *__restrict __buffer,</Line>
  <Line number="518">		      long int *__restrict __result)</Line>
  <Line number="519">     __THROW __nonnull ((1, 2));</Line>
  <Line number="520">extern int jrand48_r (unsigned short int __xsubi[3],</Line>
  <Line number="521">		      struct drand48_data *__restrict __buffer,</Line>
  <Line number="522">		      long int *__restrict __result)</Line>
  <Line number="523">     __THROW __nonnull ((1, 2));</Line>
  <Line number="524"></Line>
  <Line number="525">/* Seed random number generator.  */</Line>
  <Line number="526">extern int srand48_r (long int __seedval, struct drand48_data *__buffer)</Line>
  <Line number="527">     __THROW __nonnull ((2));</Line>
  <Line number="528"></Line>
  <Line number="529">extern int seed48_r (unsigned short int __seed16v[3],</Line>
  <Line number="530">		     struct drand48_data *__buffer) __THROW __nonnull ((1, 2));</Line>
  <Line number="531"></Line>
  <Line number="532">extern int lcong48_r (unsigned short int __param[7],</Line>
  <Line number="533">		      struct drand48_data *__buffer)</Line>
  <Line number="534">     __THROW __nonnull ((1, 2));</Line>
  <Line number="535"># endif	/* Use misc.  */</Line>
  <Line number="536">#endif	/* Use misc or X/Open.  */</Line>
  <Line number="537"></Line>
  <Line number="538">/* Allocate SIZE bytes of memory.  */</Line>
  <Line number="539">extern void *malloc (size_t __size) __THROW __attribute_malloc__</Line>
  <Line number="540">     __attribute_alloc_size__ ((1)) __wur;</Line>
  <Line number="541">/* Allocate NMEMB elements of SIZE bytes each, all initialized to 0.  */</Line>
  <Line number="542">extern void *calloc (size_t __nmemb, size_t __size)</Line>
  <Line number="543">     __THROW __attribute_malloc__ __attribute_alloc_size__ ((1, 2)) __wur;</Line>
  <Line number="544"></Line>
  <Line number="545">/* Re-allocate the previously allocated block</Line>
  <Line number="546">   in PTR, making the new block SIZE bytes long.  */</Line>
  <Line number="547">/* __attribute_malloc__ is not used, because if realloc returns</Line>
  <Line number="548">   the same pointer that was passed to it, aliasing needs to be allowed</Line>
  <Line number="549">   between objects pointed by the old and new pointers.  */</Line>
  <Line number="550">extern void *realloc (void *__ptr, size_t __size)</Line>
  <Line number="551">     __THROW __attribute_warn_unused_result__ __attribute_alloc_size__ ((2));</Line>
  <Line number="552"></Line>
  <Line number="553">#ifdef __USE_MISC</Line>
  <Line number="554">/* Re-allocate the previously allocated block in PTR, making the new</Line>
  <Line number="555">   block large enough for NMEMB elements of SIZE bytes each.  */</Line>
  <Line number="556">/* __attribute_malloc__ is not used, because if reallocarray returns</Line>
  <Line number="557">   the same pointer that was passed to it, aliasing needs to be allowed</Line>
  <Line number="558">   between objects pointed by the old and new pointers.  */</Line>
  <Line number="559">extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)</Line>
  <Line number="560">     __THROW __attribute_warn_unused_result__</Line>
  <Line number="561">     __attribute_alloc_size__ ((2, 3));</Line>
  <Line number="562">#endif</Line>
  <Line number="563"></Line>
  <Line number="564">/* Free a block allocated by `malloc&apos;, `realloc&apos; or `calloc&apos;.  */</Line>
  <Line number="565">extern void free (void *__ptr) __THROW;</Line>
  <Line number="566"></Line>
  <Line number="567">#ifdef __USE_MISC</Line>
  <Line number="568"># include &lt;alloca.h&gt;</Line>
  <Line number="569">#endif /* Use misc.  */</Line>
  <Line number="570"></Line>
  <Line number="571">#if (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K) \</Line>
  <Line number="572">    || defined __USE_MISC</Line>
  <Line number="573">/* Allocate SIZE bytes on a page boundary.  The storage cannot be freed.  */</Line>
  <Line number="574">extern void *valloc (size_t __size) __THROW __attribute_malloc__</Line>
  <Line number="575">     __attribute_alloc_size__ ((1)) __wur;</Line>
  <Line number="576">#endif</Line>
  <Line number="577"></Line>
  <Line number="578">#ifdef __USE_XOPEN2K</Line>
  <Line number="579">/* Allocate memory of SIZE bytes with an alignment of ALIGNMENT.  */</Line>
  <Line number="580">extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)</Line>
  <Line number="581">     __THROW __nonnull ((1)) __wur;</Line>
  <Line number="582">#endif</Line>
  <Line number="583"></Line>
  <Line number="584">#ifdef __USE_ISOC11</Line>
  <Line number="585">/* ISO C variant of aligned allocation.  */</Line>
  <Line number="586">extern void *aligned_alloc (size_t __alignment, size_t __size)</Line>
  <Line number="587">     __THROW __attribute_malloc__ __attribute_alloc_size__ ((2)) __wur;</Line>
  <Line number="588">#endif</Line>
  <Line number="589"></Line>
  <Line number="590">/* Abort execution and generate a core-dump.  */</Line>
  <Line number="591">extern void abort (void) __THROW __attribute__ ((__noreturn__));</Line>
  <Line number="592"></Line>
  <Line number="593"></Line>
  <Line number="594">/* Register a function to be called when `exit&apos; is called.  */</Line>
  <Line number="595">extern int atexit (void (*__func) (void)) __THROW __nonnull ((1));</Line>
  <Line number="596"></Line>
  <Line number="597">#if defined __USE_ISOC11 || defined __USE_ISOCXX11</Line>
  <Line number="598">/* Register a function to be called when `quick_exit&apos; is called.  */</Line>
  <Line number="599"># ifdef __cplusplus</Line>
  <Line number="600">extern &quot;C++&quot; int at_quick_exit (void (*__func) (void))</Line>
  <Line number="601">     __THROW __asm (&quot;at_quick_exit&quot;) __nonnull ((1));</Line>
  <Line number="602"># else</Line>
  <Line number="603">extern int at_quick_exit (void (*__func) (void)) __THROW __nonnull ((1));</Line>
  <Line number="604"># endif</Line>
  <Line number="605">#endif</Line>
  <Line number="606"></Line>
  <Line number="607">#ifdef	__USE_MISC</Line>
  <Line number="608">/* Register a function to be called with the status</Line>
  <Line number="609">   given to `exit&apos; and the given argument.  */</Line>
  <Line number="610">extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)</Line>
  <Line number="611">     __THROW __nonnull ((1));</Line>
  <Line number="612">#endif</Line>
  <Line number="613"></Line>
  <Line number="614">/* Call all functions registered with `atexit&apos; and `on_exit&apos;,</Line>
  <Line number="615">   in the reverse of the order in which they were registered,</Line>
  <Line number="616">   perform stdio cleanup, and terminate program execution with STATUS.  */</Line>
  <Line number="617">extern void exit (int __status) __THROW __attribute__ ((__noreturn__));</Line>
  <Line number="618"></Line>
  <Line number="619">#if defined __USE_ISOC11 || defined __USE_ISOCXX11</Line>
  <Line number="620">/* Call all functions registered with `at_quick_exit&apos; in the reverse</Line>
  <Line number="621">   of the order in which they were registered and terminate program</Line>
  <Line number="622">   execution with STATUS.  */</Line>
  <Line number="623">extern void quick_exit (int __status) __THROW __attribute__ ((__noreturn__));</Line>
  <Line number="624">#endif</Line>
  <Line number="625"></Line>
  <Line number="626">#ifdef __USE_ISOC99</Line>
  <Line number="627">/* Terminate the program with STATUS without calling any of the</Line>
  <Line number="628">   functions registered with `atexit&apos; or `on_exit&apos;.  */</Line>
  <Line number="629">extern void _Exit (int __status) __THROW __attribute__ ((__noreturn__));</Line>
  <Line number="630">#endif</Line>
  <Line number="631"></Line>
  <Line number="632"></Line>
  <Line number="633">/* Return the value of envariable NAME, or NULL if it doesn&apos;t exist.  */</Line>
  <Line number="634">extern char *getenv (const char *__name) __THROW __nonnull ((1)) __wur;</Line>
  <Line number="635"></Line>
  <Line number="636">#ifdef __USE_GNU</Line>
  <Line number="637">/* This function is similar to the above but returns NULL if the</Line>
  <Line number="638">   programs is running with SUID or SGID enabled.  */</Line>
  <Line number="639">extern char *secure_getenv (const char *__name)</Line>
  <Line number="640">     __THROW __nonnull ((1)) __wur;</Line>
  <Line number="641">#endif</Line>
  <Line number="642"></Line>
  <Line number="643">#if defined __USE_MISC || defined __USE_XOPEN</Line>
  <Line number="644">/* The SVID says this is in &lt;stdio.h&gt;, but this seems a better place.	*/</Line>
  <Line number="645">/* Put STRING, which is of the form &quot;NAME=VALUE&quot;, in the environment.</Line>
  <Line number="646">   If there is no `=&apos;, remove NAME from the environment.  */</Line>
  <Line number="647">extern int putenv (char *__string) __THROW __nonnull ((1));</Line>
  <Line number="648">#endif</Line>
  <Line number="649"></Line>
  <Line number="650">#ifdef __USE_XOPEN2K</Line>
  <Line number="651">/* Set NAME to VALUE in the environment.</Line>
  <Line number="652">   If REPLACE is nonzero, overwrite an existing value.  */</Line>
  <Line number="653">extern int setenv (const char *__name, const char *__value, int __replace)</Line>
  <Line number="654">     __THROW __nonnull ((2));</Line>
  <Line number="655"></Line>
  <Line number="656">/* Remove the variable NAME from the environment.  */</Line>
  <Line number="657">extern int unsetenv (const char *__name) __THROW __nonnull ((1));</Line>
  <Line number="658">#endif</Line>
  <Line number="659"></Line>
  <Line number="660">#ifdef	__USE_MISC</Line>
  <Line number="661">/* The `clearenv&apos; was planned to be added to POSIX.1 but probably</Line>
  <Line number="662">   never made it.  Nevertheless the POSIX.9 standard (POSIX bindings</Line>
  <Line number="663">   for Fortran 77) requires this function.  */</Line>
  <Line number="664">extern int clearenv (void) __THROW;</Line>
  <Line number="665">#endif</Line>
  <Line number="666"></Line>
  <Line number="667"></Line>
  <Line number="668">#if defined __USE_MISC \</Line>
  <Line number="669">    || (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8)</Line>
  <Line number="670">/* Generate a unique temporary file name from TEMPLATE.</Line>
  <Line number="671">   The last six characters of TEMPLATE must be &quot;XXXXXX&quot;;</Line>
  <Line number="672">   they are replaced with a string that makes the file name unique.</Line>
  <Line number="673">   Always returns TEMPLATE, it&apos;s either a temporary file name or a null</Line>
  <Line number="674">   string if it cannot get a unique file name.  */</Line>
  <Line number="675">extern char *mktemp (char *__template) __THROW __nonnull ((1));</Line>
  <Line number="676">#endif</Line>
  <Line number="677"></Line>
  <Line number="678">#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</Line>
  <Line number="679">/* Generate a unique temporary file name from TEMPLATE.</Line>
  <Line number="680">   The last six characters of TEMPLATE must be &quot;XXXXXX&quot;;</Line>
  <Line number="681">   they are replaced with a string that makes the filename unique.</Line>
  <Line number="682">   Returns a file descriptor open on the file for reading and writing,</Line>
  <Line number="683">   or -1 if it cannot create a uniquely-named file.</Line>
  <Line number="684"></Line>
  <Line number="685">   This function is a possible cancellation point and therefore not</Line>
  <Line number="686">   marked with __THROW.  */</Line>
  <Line number="687"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="688">extern int mkstemp (char *__template) __nonnull ((1)) __wur;</Line>
  <Line number="689"># else</Line>
  <Line number="690">#  ifdef __REDIRECT</Line>
  <Line number="691">extern int __REDIRECT (mkstemp, (char *__template), mkstemp64)</Line>
  <Line number="692">     __nonnull ((1)) __wur;</Line>
  <Line number="693">#  else</Line>
  <Line number="694">#   define mkstemp mkstemp64</Line>
  <Line number="695">#  endif</Line>
  <Line number="696"># endif</Line>
  <Line number="697"># ifdef __USE_LARGEFILE64</Line>
  <Line number="698">extern int mkstemp64 (char *__template) __nonnull ((1)) __wur;</Line>
  <Line number="699"># endif</Line>
  <Line number="700">#endif</Line>
  <Line number="701"></Line>
  <Line number="702">#ifdef __USE_MISC</Line>
  <Line number="703">/* Similar to mkstemp, but the template can have a suffix after the</Line>
  <Line number="704">   XXXXXX.  The length of the suffix is specified in the second</Line>
  <Line number="705">   parameter.</Line>
  <Line number="706"></Line>
  <Line number="707">   This function is a possible cancellation point and therefore not</Line>
  <Line number="708">   marked with __THROW.  */</Line>
  <Line number="709"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="710">extern int mkstemps (char *__template, int __suffixlen) __nonnull ((1)) __wur;</Line>
  <Line number="711"># else</Line>
  <Line number="712">#  ifdef __REDIRECT</Line>
  <Line number="713">extern int __REDIRECT (mkstemps, (char *__template, int __suffixlen),</Line>
  <Line number="714">		       mkstemps64) __nonnull ((1)) __wur;</Line>
  <Line number="715">#  else</Line>
  <Line number="716">#   define mkstemps mkstemps64</Line>
  <Line number="717">#  endif</Line>
  <Line number="718"># endif</Line>
  <Line number="719"># ifdef __USE_LARGEFILE64</Line>
  <Line number="720">extern int mkstemps64 (char *__template, int __suffixlen)</Line>
  <Line number="721">     __nonnull ((1)) __wur;</Line>
  <Line number="722"># endif</Line>
  <Line number="723">#endif</Line>
  <Line number="724"></Line>
  <Line number="725">#ifdef __USE_XOPEN2K8</Line>
  <Line number="726">/* Create a unique temporary directory from TEMPLATE.</Line>
  <Line number="727">   The last six characters of TEMPLATE must be &quot;XXXXXX&quot;;</Line>
  <Line number="728">   they are replaced with a string that makes the directory name unique.</Line>
  <Line number="729">   Returns TEMPLATE, or a null pointer if it cannot get a unique name.</Line>
  <Line number="730">   The directory is created mode 700.  */</Line>
  <Line number="731">extern char *mkdtemp (char *__template) __THROW __nonnull ((1)) __wur;</Line>
  <Line number="732">#endif</Line>
  <Line number="733"></Line>
  <Line number="734">#ifdef __USE_GNU</Line>
  <Line number="735">/* Generate a unique temporary file name from TEMPLATE similar to</Line>
  <Line number="736">   mkstemp.  But allow the caller to pass additional flags which are</Line>
  <Line number="737">   used in the open call to create the file..</Line>
  <Line number="738"></Line>
  <Line number="739">   This function is a possible cancellation point and therefore not</Line>
  <Line number="740">   marked with __THROW.  */</Line>
  <Line number="741"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="742">extern int mkostemp (char *__template, int __flags) __nonnull ((1)) __wur;</Line>
  <Line number="743"># else</Line>
  <Line number="744">#  ifdef __REDIRECT</Line>
  <Line number="745">extern int __REDIRECT (mkostemp, (char *__template, int __flags), mkostemp64)</Line>
  <Line number="746">     __nonnull ((1)) __wur;</Line>
  <Line number="747">#  else</Line>
  <Line number="748">#   define mkostemp mkostemp64</Line>
  <Line number="749">#  endif</Line>
  <Line number="750"># endif</Line>
  <Line number="751"># ifdef __USE_LARGEFILE64</Line>
  <Line number="752">extern int mkostemp64 (char *__template, int __flags) __nonnull ((1)) __wur;</Line>
  <Line number="753"># endif</Line>
  <Line number="754"></Line>
  <Line number="755">/* Similar to mkostemp, but the template can have a suffix after the</Line>
  <Line number="756">   XXXXXX.  The length of the suffix is specified in the second</Line>
  <Line number="757">   parameter.</Line>
  <Line number="758"></Line>
  <Line number="759">   This function is a possible cancellation point and therefore not</Line>
  <Line number="760">   marked with __THROW.  */</Line>
  <Line number="761"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="762">extern int mkostemps (char *__template, int __suffixlen, int __flags)</Line>
  <Line number="763">     __nonnull ((1)) __wur;</Line>
  <Line number="764"># else</Line>
  <Line number="765">#  ifdef __REDIRECT</Line>
  <Line number="766">extern int __REDIRECT (mkostemps, (char *__template, int __suffixlen,</Line>
  <Line number="767">				   int __flags), mkostemps64)</Line>
  <Line number="768">     __nonnull ((1)) __wur;</Line>
  <Line number="769">#  else</Line>
  <Line number="770">#   define mkostemps mkostemps64</Line>
  <Line number="771">#  endif</Line>
  <Line number="772"># endif</Line>
  <Line number="773"># ifdef __USE_LARGEFILE64</Line>
  <Line number="774">extern int mkostemps64 (char *__template, int __suffixlen, int __flags)</Line>
  <Line number="775">     __nonnull ((1)) __wur;</Line>
  <Line number="776"># endif</Line>
  <Line number="777">#endif</Line>
  <Line number="778"></Line>
  <Line number="779"></Line>
  <Line number="780">/* Execute the given line as a shell command.</Line>
  <Line number="781"></Line>
  <Line number="782">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="783">   __THROW.  */</Line>
  <Line number="784">extern int system (const char *__command) __wur;</Line>
  <Line number="785"></Line>
  <Line number="786"></Line>
  <Line number="787">#ifdef	__USE_GNU</Line>
  <Line number="788">/* Return a malloc&apos;d string containing the canonical absolute name of the</Line>
  <Line number="789">   existing named file.  */</Line>
  <Line number="790">extern char *canonicalize_file_name (const char *__name)</Line>
  <Line number="791">     __THROW __nonnull ((1)) __wur;</Line>
  <Line number="792">#endif</Line>
  <Line number="793"></Line>
  <Line number="794">#if defined __USE_MISC || defined __USE_XOPEN_EXTENDED</Line>
  <Line number="795">/* Return the canonical absolute name of file NAME.  If RESOLVED is</Line>
  <Line number="796">   null, the result is malloc&apos;d; otherwise, if the canonical name is</Line>
  <Line number="797">   PATH_MAX chars or more, returns null with `errno&apos; set to</Line>
  <Line number="798">   ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,</Line>
  <Line number="799">   returns the name in RESOLVED.  */</Line>
  <Line number="800">extern char *realpath (const char *__restrict __name,</Line>
  <Line number="801">		       char *__restrict __resolved) __THROW __wur;</Line>
  <Line number="802">#endif</Line>
  <Line number="803"></Line>
  <Line number="804"></Line>
  <Line number="805">/* Shorthand for type of comparison functions.  */</Line>
  <Line number="806">#ifndef __COMPAR_FN_T</Line>
  <Line number="807"># define __COMPAR_FN_T</Line>
  <Line number="808">typedef int (*__compar_fn_t) (const void *, const void *);</Line>
  <Line number="809"></Line>
  <Line number="810"># ifdef	__USE_GNU</Line>
  <Line number="811">typedef __compar_fn_t comparison_fn_t;</Line>
  <Line number="812"># endif</Line>
  <Line number="813">#endif</Line>
  <Line number="814">#ifdef __USE_GNU</Line>
  <Line number="815">typedef int (*__compar_d_fn_t) (const void *, const void *, void *);</Line>
  <Line number="816">#endif</Line>
  <Line number="817"></Line>
  <Line number="818">/* Do a binary search for KEY in BASE, which consists of NMEMB elements</Line>
  <Line number="819">   of SIZE bytes each, using COMPAR to perform the comparisons.  */</Line>
  <Line number="820">extern void *bsearch (const void *__key, const void *__base,</Line>
  <Line number="821">		      size_t __nmemb, size_t __size, __compar_fn_t __compar)</Line>
  <Line number="822">     __nonnull ((1, 2, 5)) __wur;</Line>
  <Line number="823"></Line>
  <Line number="824">#ifdef __USE_EXTERN_INLINES</Line>
  <Line number="825"># include &lt;bits/stdlib-bsearch.h&gt;</Line>
  <Line number="826">#endif</Line>
  <Line number="827"></Line>
  <Line number="828">/* Sort NMEMB elements of BASE, of SIZE bytes each,</Line>
  <Line number="829">   using COMPAR to perform the comparisons.  */</Line>
  <Line number="830">extern void qsort (void *__base, size_t __nmemb, size_t __size,</Line>
  <Line number="831">		   __compar_fn_t __compar) __nonnull ((1, 4));</Line>
  <Line number="832">#ifdef __USE_GNU</Line>
  <Line number="833">extern void qsort_r (void *__base, size_t __nmemb, size_t __size,</Line>
  <Line number="834">		     __compar_d_fn_t __compar, void *__arg)</Line>
  <Line number="835">  __nonnull ((1, 4));</Line>
  <Line number="836">#endif</Line>
  <Line number="837"></Line>
  <Line number="838"></Line>
  <Line number="839">/* Return the absolute value of X.  */</Line>
  <Line number="840">extern int abs (int __x) __THROW __attribute__ ((__const__)) __wur;</Line>
  <Line number="841">extern long int labs (long int __x) __THROW __attribute__ ((__const__)) __wur;</Line>
  <Line number="842"></Line>
  <Line number="843">#ifdef __USE_ISOC99</Line>
  <Line number="844">__extension__ extern long long int llabs (long long int __x)</Line>
  <Line number="845">     __THROW __attribute__ ((__const__)) __wur;</Line>
  <Line number="846">#endif</Line>
  <Line number="847"></Line>
  <Line number="848"></Line>
  <Line number="849">/* Return the `div_t&apos;, `ldiv_t&apos; or `lldiv_t&apos; representation</Line>
  <Line number="850">   of the value of NUMER over DENOM. */</Line>
  <Line number="851">/* GCC may have built-ins for these someday.  */</Line>
  <Line number="852">extern div_t div (int __numer, int __denom)</Line>
  <Line number="853">     __THROW __attribute__ ((__const__)) __wur;</Line>
  <Line number="854">extern ldiv_t ldiv (long int __numer, long int __denom)</Line>
  <Line number="855">     __THROW __attribute__ ((__const__)) __wur;</Line>
  <Line number="856"></Line>
  <Line number="857">#ifdef __USE_ISOC99</Line>
  <Line number="858">__extension__ extern lldiv_t lldiv (long long int __numer,</Line>
  <Line number="859">				    long long int __denom)</Line>
  <Line number="860">     __THROW __attribute__ ((__const__)) __wur;</Line>
  <Line number="861">#endif</Line>
  <Line number="862"></Line>
  <Line number="863"></Line>
  <Line number="864">#if (defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K8) \</Line>
  <Line number="865">    || defined __USE_MISC</Line>
  <Line number="866">/* Convert floating point numbers to strings.  The returned values are</Line>
  <Line number="867">   valid only until another call to the same function.  */</Line>
  <Line number="868"></Line>
  <Line number="869">/* Convert VALUE to a string with NDIGIT digits and return a pointer to</Line>
  <Line number="870">   this.  Set *DECPT with the position of the decimal character and *SIGN</Line>
  <Line number="871">   with the sign of the number.  */</Line>
  <Line number="872">extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,</Line>
  <Line number="873">		   int *__restrict __sign) __THROW __nonnull ((3, 4)) __wur;</Line>
  <Line number="874"></Line>
  <Line number="875">/* Convert VALUE to a string rounded to NDIGIT decimal digits.  Set *DECPT</Line>
  <Line number="876">   with the position of the decimal character and *SIGN with the sign of</Line>
  <Line number="877">   the number.  */</Line>
  <Line number="878">extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,</Line>
  <Line number="879">		   int *__restrict __sign) __THROW __nonnull ((3, 4)) __wur;</Line>
  <Line number="880"></Line>
  <Line number="881">/* If possible convert VALUE to a string with NDIGIT significant digits.</Line>
  <Line number="882">   Otherwise use exponential representation.  The resulting string will</Line>
  <Line number="883">   be written to BUF.  */</Line>
  <Line number="884">extern char *gcvt (double __value, int __ndigit, char *__buf)</Line>
  <Line number="885">     __THROW __nonnull ((3)) __wur;</Line>
  <Line number="886">#endif</Line>
  <Line number="887"></Line>
  <Line number="888">#ifdef __USE_MISC</Line>
  <Line number="889">/* Long double versions of above functions.  */</Line>
  <Line number="890">extern char *qecvt (long double __value, int __ndigit,</Line>
  <Line number="891">		    int *__restrict __decpt, int *__restrict __sign)</Line>
  <Line number="892">     __THROW __nonnull ((3, 4)) __wur;</Line>
  <Line number="893">extern char *qfcvt (long double __value, int __ndigit,</Line>
  <Line number="894">		    int *__restrict __decpt, int *__restrict __sign)</Line>
  <Line number="895">     __THROW __nonnull ((3, 4)) __wur;</Line>
  <Line number="896">extern char *qgcvt (long double __value, int __ndigit, char *__buf)</Line>
  <Line number="897">     __THROW __nonnull ((3)) __wur;</Line>
  <Line number="898"></Line>
  <Line number="899"></Line>
  <Line number="900">/* Reentrant version of the functions above which provide their own</Line>
  <Line number="901">   buffers.  */</Line>
  <Line number="902">extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,</Line>
  <Line number="903">		   int *__restrict __sign, char *__restrict __buf,</Line>
  <Line number="904">		   size_t __len) __THROW __nonnull ((3, 4, 5));</Line>
  <Line number="905">extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,</Line>
  <Line number="906">		   int *__restrict __sign, char *__restrict __buf,</Line>
  <Line number="907">		   size_t __len) __THROW __nonnull ((3, 4, 5));</Line>
  <Line number="908"></Line>
  <Line number="909">extern int qecvt_r (long double __value, int __ndigit,</Line>
  <Line number="910">		    int *__restrict __decpt, int *__restrict __sign,</Line>
  <Line number="911">		    char *__restrict __buf, size_t __len)</Line>
  <Line number="912">     __THROW __nonnull ((3, 4, 5));</Line>
  <Line number="913">extern int qfcvt_r (long double __value, int __ndigit,</Line>
  <Line number="914">		    int *__restrict __decpt, int *__restrict __sign,</Line>
  <Line number="915">		    char *__restrict __buf, size_t __len)</Line>
  <Line number="916">     __THROW __nonnull ((3, 4, 5));</Line>
  <Line number="917">#endif	/* misc */</Line>
  <Line number="918"></Line>
  <Line number="919"></Line>
  <Line number="920">/* Return the length of the multibyte character</Line>
  <Line number="921">   in S, which is no longer than N.  */</Line>
  <Line number="922">extern int mblen (const char *__s, size_t __n) __THROW;</Line>
  <Line number="923">/* Return the length of the given multibyte character,</Line>
  <Line number="924">   putting its `wchar_t&apos; representation in *PWC.  */</Line>
  <Line number="925">extern int mbtowc (wchar_t *__restrict __pwc,</Line>
  <Line number="926">		   const char *__restrict __s, size_t __n) __THROW;</Line>
  <Line number="927">/* Put the multibyte character represented</Line>
  <Line number="928">   by WCHAR in S, returning its length.  */</Line>
  <Line number="929">extern int wctomb (char *__s, wchar_t __wchar) __THROW;</Line>
  <Line number="930"></Line>
  <Line number="931"></Line>
  <Line number="932">/* Convert a multibyte string to a wide char string.  */</Line>
  <Line number="933">extern size_t mbstowcs (wchar_t *__restrict  __pwcs,</Line>
  <Line number="934">			const char *__restrict __s, size_t __n) __THROW;</Line>
  <Line number="935">/* Convert a wide char string to multibyte string.  */</Line>
  <Line number="936">extern size_t wcstombs (char *__restrict __s,</Line>
  <Line number="937">			const wchar_t *__restrict __pwcs, size_t __n)</Line>
  <Line number="938">     __THROW;</Line>
  <Line number="939"></Line>
  <Line number="940"></Line>
  <Line number="941">#ifdef __USE_MISC</Line>
  <Line number="942">/* Determine whether the string value of RESPONSE matches the affirmation</Line>
  <Line number="943">   or negative response expression as specified by the LC_MESSAGES category</Line>
  <Line number="944">   in the program&apos;s current locale.  Returns 1 if affirmative, 0 if</Line>
  <Line number="945">   negative, and -1 if not matching.  */</Line>
  <Line number="946">extern int rpmatch (const char *__response) __THROW __nonnull ((1)) __wur;</Line>
  <Line number="947">#endif</Line>
  <Line number="948"></Line>
  <Line number="949"></Line>
  <Line number="950">#if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</Line>
  <Line number="951">/* Parse comma separated suboption from *OPTIONP and match against</Line>
  <Line number="952">   strings in TOKENS.  If found return index and set *VALUEP to</Line>
  <Line number="953">   optional value introduced by an equal sign.  If the suboption is</Line>
  <Line number="954">   not part of TOKENS return in *VALUEP beginning of unknown</Line>
  <Line number="955">   suboption.  On exit *OPTIONP is set to the beginning of the next</Line>
  <Line number="956">   token or at the terminating NUL character.  */</Line>
  <Line number="957">extern int getsubopt (char **__restrict __optionp,</Line>
  <Line number="958">		      char *const *__restrict __tokens,</Line>
  <Line number="959">		      char **__restrict __valuep)</Line>
  <Line number="960">     __THROW __nonnull ((1, 2, 3)) __wur;</Line>
  <Line number="961">#endif</Line>
  <Line number="962"></Line>
  <Line number="963"></Line>
  <Line number="964">/* X/Open pseudo terminal handling.  */</Line>
  <Line number="965"></Line>
  <Line number="966">#ifdef __USE_XOPEN2KXSI</Line>
  <Line number="967">/* Return a master pseudo-terminal handle.  */</Line>
  <Line number="968">extern int posix_openpt (int __oflag) __wur;</Line>
  <Line number="969">#endif</Line>
  <Line number="970"></Line>
  <Line number="971">#ifdef __USE_XOPEN_EXTENDED</Line>
  <Line number="972">/* The next four functions all take a master pseudo-tty fd and</Line>
  <Line number="973">   perform an operation on the associated slave:  */</Line>
  <Line number="974"></Line>
  <Line number="975">/* Chown the slave to the calling user.  */</Line>
  <Line number="976">extern int grantpt (int __fd) __THROW;</Line>
  <Line number="977"></Line>
  <Line number="978">/* Release an internal lock so the slave can be opened.</Line>
  <Line number="979">   Call after grantpt().  */</Line>
  <Line number="980">extern int unlockpt (int __fd) __THROW;</Line>
  <Line number="981"></Line>
  <Line number="982">/* Return the pathname of the pseudo terminal slave associated with</Line>
  <Line number="983">   the master FD is open on, or NULL on errors.</Line>
  <Line number="984">   The returned storage is good until the next call to this function.  */</Line>
  <Line number="985">extern char *ptsname (int __fd) __THROW __wur;</Line>
  <Line number="986">#endif</Line>
  <Line number="987"></Line>
  <Line number="988">#ifdef __USE_GNU</Line>
  <Line number="989">/* Store at most BUFLEN characters of the pathname of the slave pseudo</Line>
  <Line number="990">   terminal associated with the master FD is open on in BUF.</Line>
  <Line number="991">   Return 0 on success, otherwise an error number.  */</Line>
  <Line number="992">extern int ptsname_r (int __fd, char *__buf, size_t __buflen)</Line>
  <Line number="993">     __THROW __nonnull ((2));</Line>
  <Line number="994"></Line>
  <Line number="995">/* Open a master pseudo terminal and return its file descriptor.  */</Line>
  <Line number="996">extern int getpt (void);</Line>
  <Line number="997">#endif</Line>
  <Line number="998"></Line>
  <Line number="999">#ifdef __USE_MISC</Line>
  <Line number="1000">/* Put the 1 minute, 5 minute and 15 minute load averages into the first</Line>
  <Line number="1001">   NELEM elements of LOADAVG.  Return the number written (never more than</Line>
  <Line number="1002">   three, but may be less than NELEM), or -1 if an error occurred.  */</Line>
  <Line number="1003">extern int getloadavg (double __loadavg[], int __nelem)</Line>
  <Line number="1004">     __THROW __nonnull ((1));</Line>
  <Line number="1005">#endif</Line>
  <Line number="1006"></Line>
  <Line number="1007">#if defined __USE_XOPEN_EXTENDED &amp;&amp; !defined __USE_XOPEN2K</Line>
  <Line number="1008">/* Return the index into the active-logins file (utmp) for</Line>
  <Line number="1009">   the controlling terminal.  */</Line>
  <Line number="1010">extern int ttyslot (void) __THROW;</Line>
  <Line number="1011">#endif</Line>
  <Line number="1012"></Line>
  <Line number="1013">#include &lt;bits/stdlib-float.h&gt;</Line>
  <Line number="1014"></Line>
  <Line number="1015">/* Define some macros helping to catch buffer overflows.  */</Line>
  <Line number="1016">#if __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __fortify_function</Line>
  <Line number="1017"># include &lt;bits/stdlib.h&gt;</Line>
  <Line number="1018">#endif</Line>
  <Line number="1019">#ifdef __LDBL_COMPAT</Line>
  <Line number="1020"># include &lt;bits/stdlib-ldbl.h&gt;</Line>
  <Line number="1021">#endif</Line>
  <Line number="1022"></Line>
  <Line number="1023">__END_DECLS</Line>
  <Line number="1024"></Line>
  <Line number="1025">#endif /* stdlib.h  */</Line>
</SourceFile>
