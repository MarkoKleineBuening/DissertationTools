<SourceFile>
  <Line number="1">/* Define struct rusage.</Line>
  <Line number="2">   Copyright (C) 1994-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef __rusage_defined</Line>
  <Line number="20">#define __rusage_defined 1</Line>
  <Line number="21"></Line>
  <Line number="22">#include &lt;bits/types.h&gt;</Line>
  <Line number="23">#include &lt;bits/types/struct_timeval.h&gt;</Line>
  <Line number="24"></Line>
  <Line number="25">/* Structure which says how much of each resource has been used.  If</Line>
  <Line number="26">   the system does not keep track of a particular value, the struct</Line>
  <Line number="27">   field is always zero.  */</Line>
  <Line number="28"></Line>
  <Line number="29">/* The purpose of all the unions is to have the kernel-compatible layout</Line>
  <Line number="30">   while keeping the API type as &apos;long int&apos;, and among machines where</Line>
  <Line number="31">   __syscall_slong_t is not &apos;long int&apos;, this only does the right thing</Line>
  <Line number="32">   for little-endian ones, like x32.  */</Line>
  <Line number="33">struct rusage</Line>
  <Line number="34">  {</Line>
  <Line number="35">    /* Total amount of user time used.  */</Line>
  <Line number="36">    struct timeval ru_utime;</Line>
  <Line number="37">    /* Total amount of system time used.  */</Line>
  <Line number="38">    struct timeval ru_stime;</Line>
  <Line number="39">    /* Maximum resident set size (in kilobytes).  */</Line>
  <Line number="40">    __extension__ union</Line>
  <Line number="41">      {</Line>
  <Line number="42">	long int ru_maxrss;</Line>
  <Line number="43">	__syscall_slong_t __ru_maxrss_word;</Line>
  <Line number="44">      };</Line>
  <Line number="45">    /* Amount of sharing of text segment memory</Line>
  <Line number="46">       with other processes (kilobyte-seconds).  */</Line>
  <Line number="47">    __extension__ union</Line>
  <Line number="48">      {</Line>
  <Line number="49">	long int ru_ixrss;</Line>
  <Line number="50">	__syscall_slong_t __ru_ixrss_word;</Line>
  <Line number="51">      };</Line>
  <Line number="52">    /* Amount of data segment memory used (kilobyte-seconds).  */</Line>
  <Line number="53">    __extension__ union</Line>
  <Line number="54">      {</Line>
  <Line number="55">	long int ru_idrss;</Line>
  <Line number="56">	__syscall_slong_t __ru_idrss_word;</Line>
  <Line number="57">      };</Line>
  <Line number="58">    /* Amount of stack memory used (kilobyte-seconds).  */</Line>
  <Line number="59">    __extension__ union</Line>
  <Line number="60">      {</Line>
  <Line number="61">	long int ru_isrss;</Line>
  <Line number="62">	 __syscall_slong_t __ru_isrss_word;</Line>
  <Line number="63">      };</Line>
  <Line number="64">    /* Number of soft page faults (i.e. those serviced by reclaiming</Line>
  <Line number="65">       a page from the list of pages awaiting reallocation.  */</Line>
  <Line number="66">    __extension__ union</Line>
  <Line number="67">      {</Line>
  <Line number="68">	long int ru_minflt;</Line>
  <Line number="69">	__syscall_slong_t __ru_minflt_word;</Line>
  <Line number="70">      };</Line>
  <Line number="71">    /* Number of hard page faults (i.e. those that required I/O).  */</Line>
  <Line number="72">    __extension__ union</Line>
  <Line number="73">      {</Line>
  <Line number="74">	long int ru_majflt;</Line>
  <Line number="75">	__syscall_slong_t __ru_majflt_word;</Line>
  <Line number="76">      };</Line>
  <Line number="77">    /* Number of times a process was swapped out of physical memory.  */</Line>
  <Line number="78">    __extension__ union</Line>
  <Line number="79">      {</Line>
  <Line number="80">	long int ru_nswap;</Line>
  <Line number="81">	__syscall_slong_t __ru_nswap_word;</Line>
  <Line number="82">      };</Line>
  <Line number="83">    /* Number of input operations via the file system.  Note: This</Line>
  <Line number="84">       and `ru_oublock&apos; do not include operations with the cache.  */</Line>
  <Line number="85">    __extension__ union</Line>
  <Line number="86">      {</Line>
  <Line number="87">	long int ru_inblock;</Line>
  <Line number="88">	__syscall_slong_t __ru_inblock_word;</Line>
  <Line number="89">      };</Line>
  <Line number="90">    /* Number of output operations via the file system.  */</Line>
  <Line number="91">    __extension__ union</Line>
  <Line number="92">      {</Line>
  <Line number="93">	long int ru_oublock;</Line>
  <Line number="94">	__syscall_slong_t __ru_oublock_word;</Line>
  <Line number="95">      };</Line>
  <Line number="96">    /* Number of IPC messages sent.  */</Line>
  <Line number="97">    __extension__ union</Line>
  <Line number="98">      {</Line>
  <Line number="99">	long int ru_msgsnd;</Line>
  <Line number="100">	__syscall_slong_t __ru_msgsnd_word;</Line>
  <Line number="101">      };</Line>
  <Line number="102">    /* Number of IPC messages received.  */</Line>
  <Line number="103">    __extension__ union</Line>
  <Line number="104">      {</Line>
  <Line number="105">	long int ru_msgrcv;</Line>
  <Line number="106">	__syscall_slong_t __ru_msgrcv_word;</Line>
  <Line number="107">      };</Line>
  <Line number="108">    /* Number of signals delivered.  */</Line>
  <Line number="109">    __extension__ union</Line>
  <Line number="110">      {</Line>
  <Line number="111">	long int ru_nsignals;</Line>
  <Line number="112">	__syscall_slong_t __ru_nsignals_word;</Line>
  <Line number="113">      };</Line>
  <Line number="114">    /* Number of voluntary context switches, i.e. because the process</Line>
  <Line number="115">       gave up the process before it had to (usually to wait for some</Line>
  <Line number="116">       resource to be available).  */</Line>
  <Line number="117">    __extension__ union</Line>
  <Line number="118">      {</Line>
  <Line number="119">	long int ru_nvcsw;</Line>
  <Line number="120">	__syscall_slong_t __ru_nvcsw_word;</Line>
  <Line number="121">      };</Line>
  <Line number="122">    /* Number of involuntary context switches, i.e. a higher priority process</Line>
  <Line number="123">       became runnable or the current process used up its time slice.  */</Line>
  <Line number="124">    __extension__ union</Line>
  <Line number="125">      {</Line>
  <Line number="126">	long int ru_nivcsw;</Line>
  <Line number="127">	__syscall_slong_t __ru_nivcsw_word;</Line>
  <Line number="128">      };</Line>
  <Line number="129">  };</Line>
  <Line number="130"></Line>
  <Line number="131">#endif</Line>
</SourceFile>
