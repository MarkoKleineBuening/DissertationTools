<SourceFile>
  <Line number="1">/* Define ISO C stdio on top of C++ iostreams.</Line>
  <Line number="2">   Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">/*</Line>
  <Line number="20"> *	ISO C99 Standard: 7.19 Input/output	&lt;stdio.h&gt;</Line>
  <Line number="21"> */</Line>
  <Line number="22"></Line>
  <Line number="23">#ifndef _STDIO_H</Line>
  <Line number="24">#define _STDIO_H	1</Line>
  <Line number="25"></Line>
  <Line number="26">#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION</Line>
  <Line number="27">#include &lt;bits/libc-header-start.h&gt;</Line>
  <Line number="28"></Line>
  <Line number="29">__BEGIN_DECLS</Line>
  <Line number="30"></Line>
  <Line number="31">#define __need_size_t</Line>
  <Line number="32">#define __need_NULL</Line>
  <Line number="33">#include &lt;stddef.h&gt;</Line>
  <Line number="34"></Line>
  <Line number="35">#define __need___va_list</Line>
  <Line number="36">#include &lt;stdarg.h&gt;</Line>
  <Line number="37"></Line>
  <Line number="38">#include &lt;bits/types.h&gt;</Line>
  <Line number="39">#include &lt;bits/types/__fpos_t.h&gt;</Line>
  <Line number="40">#include &lt;bits/types/__fpos64_t.h&gt;</Line>
  <Line number="41">#include &lt;bits/types/__FILE.h&gt;</Line>
  <Line number="42">#include &lt;bits/types/FILE.h&gt;</Line>
  <Line number="43">#include &lt;bits/types/struct_FILE.h&gt;</Line>
  <Line number="44"></Line>
  <Line number="45">#ifdef __USE_GNU</Line>
  <Line number="46"># include &lt;bits/types/cookie_io_functions_t.h&gt;</Line>
  <Line number="47">#endif</Line>
  <Line number="48"></Line>
  <Line number="49">#if defined __USE_XOPEN || defined __USE_XOPEN2K8</Line>
  <Line number="50"># ifdef __GNUC__</Line>
  <Line number="51">#  ifndef _VA_LIST_DEFINED</Line>
  <Line number="52">typedef __gnuc_va_list va_list;</Line>
  <Line number="53">#   define _VA_LIST_DEFINED</Line>
  <Line number="54">#  endif</Line>
  <Line number="55"># else</Line>
  <Line number="56">#  include &lt;stdarg.h&gt;</Line>
  <Line number="57"># endif</Line>
  <Line number="58">#endif</Line>
  <Line number="59"></Line>
  <Line number="60">#if defined __USE_UNIX98 || defined __USE_XOPEN2K</Line>
  <Line number="61"># ifndef __off_t_defined</Line>
  <Line number="62"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="63">typedef __off_t off_t;</Line>
  <Line number="64"># else</Line>
  <Line number="65">typedef __off64_t off_t;</Line>
  <Line number="66"># endif</Line>
  <Line number="67"># define __off_t_defined</Line>
  <Line number="68"># endif</Line>
  <Line number="69"># if defined __USE_LARGEFILE64 &amp;&amp; !defined __off64_t_defined</Line>
  <Line number="70">typedef __off64_t off64_t;</Line>
  <Line number="71"># define __off64_t_defined</Line>
  <Line number="72"># endif</Line>
  <Line number="73">#endif</Line>
  <Line number="74"></Line>
  <Line number="75">#ifdef __USE_XOPEN2K8</Line>
  <Line number="76"># ifndef __ssize_t_defined</Line>
  <Line number="77">typedef __ssize_t ssize_t;</Line>
  <Line number="78"># define __ssize_t_defined</Line>
  <Line number="79"># endif</Line>
  <Line number="80">#endif</Line>
  <Line number="81"></Line>
  <Line number="82">/* The type of the second argument to `fgetpos&apos; and `fsetpos&apos;.  */</Line>
  <Line number="83">#ifndef __USE_FILE_OFFSET64</Line>
  <Line number="84">typedef __fpos_t fpos_t;</Line>
  <Line number="85">#else</Line>
  <Line number="86">typedef __fpos64_t fpos_t;</Line>
  <Line number="87">#endif</Line>
  <Line number="88">#ifdef __USE_LARGEFILE64</Line>
  <Line number="89">typedef __fpos64_t fpos64_t;</Line>
  <Line number="90">#endif</Line>
  <Line number="91"></Line>
  <Line number="92">/* The possibilities for the third argument to `setvbuf&apos;.  */</Line>
  <Line number="93">#define _IOFBF 0		/* Fully buffered.  */</Line>
  <Line number="94">#define _IOLBF 1		/* Line buffered.  */</Line>
  <Line number="95">#define _IONBF 2		/* No buffering.  */</Line>
  <Line number="96"></Line>
  <Line number="97"></Line>
  <Line number="98">/* Default buffer size.  */</Line>
  <Line number="99">#define BUFSIZ 8192</Line>
  <Line number="100"></Line>
  <Line number="101"></Line>
  <Line number="102">/* The value returned by fgetc and similar functions to indicate the</Line>
  <Line number="103">   end of the file.  */</Line>
  <Line number="104">#define EOF (-1)</Line>
  <Line number="105"></Line>
  <Line number="106"></Line>
  <Line number="107">/* The possibilities for the third argument to `fseek&apos;.</Line>
  <Line number="108">   These values should not be changed.  */</Line>
  <Line number="109">#define SEEK_SET	0	/* Seek from beginning of file.  */</Line>
  <Line number="110">#define SEEK_CUR	1	/* Seek from current position.  */</Line>
  <Line number="111">#define SEEK_END	2	/* Seek from end of file.  */</Line>
  <Line number="112">#ifdef __USE_GNU</Line>
  <Line number="113"># define SEEK_DATA	3	/* Seek to next data.  */</Line>
  <Line number="114"># define SEEK_HOLE	4	/* Seek to next hole.  */</Line>
  <Line number="115">#endif</Line>
  <Line number="116"></Line>
  <Line number="117"></Line>
  <Line number="118">#if defined __USE_MISC || defined __USE_XOPEN</Line>
  <Line number="119">/* Default path prefix for `tempnam&apos; and `tmpnam&apos;.  */</Line>
  <Line number="120"># define P_tmpdir	&quot;/tmp&quot;</Line>
  <Line number="121">#endif</Line>
  <Line number="122"></Line>
  <Line number="123"></Line>
  <Line number="124">/* Get the values:</Line>
  <Line number="125">   L_tmpnam	How long an array of chars must be to be passed to `tmpnam&apos;.</Line>
  <Line number="126">   TMP_MAX	The minimum number of unique filenames generated by tmpnam</Line>
  <Line number="127">		(and tempnam when it uses tmpnam&apos;s name space),</Line>
  <Line number="128">		or tempnam (the two are separate).</Line>
  <Line number="129">   L_ctermid	How long an array to pass to `ctermid&apos;.</Line>
  <Line number="130">   L_cuserid	How long an array to pass to `cuserid&apos;.</Line>
  <Line number="131">   FOPEN_MAX	Minimum number of files that can be open at once.</Line>
  <Line number="132">   FILENAME_MAX	Maximum length of a filename.  */</Line>
  <Line number="133">#include &lt;bits/stdio_lim.h&gt;</Line>
  <Line number="134"></Line>
  <Line number="135"></Line>
  <Line number="136">/* Standard streams.  */</Line>
  <Line number="137">extern FILE *stdin;		/* Standard input stream.  */</Line>
  <Line number="138">extern FILE *stdout;		/* Standard output stream.  */</Line>
  <Line number="139">extern FILE *stderr;		/* Standard error output stream.  */</Line>
  <Line number="140">/* C89/C99 say they&apos;re macros.  Make them happy.  */</Line>
  <Line number="141">#define stdin stdin</Line>
  <Line number="142">#define stdout stdout</Line>
  <Line number="143">#define stderr stderr</Line>
  <Line number="144"></Line>
  <Line number="145">/* Remove file FILENAME.  */</Line>
  <Line number="146">extern int remove (const char *__filename) __THROW;</Line>
  <Line number="147">/* Rename file OLD to NEW.  */</Line>
  <Line number="148">extern int rename (const char *__old, const char *__new) __THROW;</Line>
  <Line number="149"></Line>
  <Line number="150">#ifdef __USE_ATFILE</Line>
  <Line number="151">/* Rename file OLD relative to OLDFD to NEW relative to NEWFD.  */</Line>
  <Line number="152">extern int renameat (int __oldfd, const char *__old, int __newfd,</Line>
  <Line number="153">		     const char *__new) __THROW;</Line>
  <Line number="154">#endif</Line>
  <Line number="155"></Line>
  <Line number="156">#ifdef __USE_GNU</Line>
  <Line number="157">/* Flags for renameat2.  */</Line>
  <Line number="158"># define RENAME_NOREPLACE (1 &lt;&lt; 0)</Line>
  <Line number="159"># define RENAME_EXCHANGE (1 &lt;&lt; 1)</Line>
  <Line number="160"># define RENAME_WHITEOUT (1 &lt;&lt; 2)</Line>
  <Line number="161"></Line>
  <Line number="162">/* Rename file OLD relative to OLDFD to NEW relative to NEWFD, with</Line>
  <Line number="163">   additional flags.  */</Line>
  <Line number="164">extern int renameat2 (int __oldfd, const char *__old, int __newfd,</Line>
  <Line number="165">		      const char *__new, unsigned int __flags) __THROW;</Line>
  <Line number="166">#endif</Line>
  <Line number="167"></Line>
  <Line number="168">/* Create a temporary file and open it read/write.</Line>
  <Line number="169"></Line>
  <Line number="170">   This function is a possible cancellation point and therefore not</Line>
  <Line number="171">   marked with __THROW.  */</Line>
  <Line number="172">#ifndef __USE_FILE_OFFSET64</Line>
  <Line number="173">extern FILE *tmpfile (void) __wur;</Line>
  <Line number="174">#else</Line>
  <Line number="175"># ifdef __REDIRECT</Line>
  <Line number="176">extern FILE *__REDIRECT (tmpfile, (void), tmpfile64) __wur;</Line>
  <Line number="177"># else</Line>
  <Line number="178">#  define tmpfile tmpfile64</Line>
  <Line number="179"># endif</Line>
  <Line number="180">#endif</Line>
  <Line number="181"></Line>
  <Line number="182">#ifdef __USE_LARGEFILE64</Line>
  <Line number="183">extern FILE *tmpfile64 (void) __wur;</Line>
  <Line number="184">#endif</Line>
  <Line number="185"></Line>
  <Line number="186">/* Generate a temporary filename.  */</Line>
  <Line number="187">extern char *tmpnam (char *__s) __THROW __wur;</Line>
  <Line number="188"></Line>
  <Line number="189">#ifdef __USE_MISC</Line>
  <Line number="190">/* This is the reentrant variant of `tmpnam&apos;.  The only difference is</Line>
  <Line number="191">   that it does not allow S to be NULL.  */</Line>
  <Line number="192">extern char *tmpnam_r (char *__s) __THROW __wur;</Line>
  <Line number="193">#endif</Line>
  <Line number="194"></Line>
  <Line number="195"></Line>
  <Line number="196">#if defined __USE_MISC || defined __USE_XOPEN</Line>
  <Line number="197">/* Generate a unique temporary filename using up to five characters of PFX</Line>
  <Line number="198">   if it is not NULL.  The directory to put this file in is searched for</Line>
  <Line number="199">   as follows: First the environment variable &quot;TMPDIR&quot; is checked.</Line>
  <Line number="200">   If it contains the name of a writable directory, that directory is used.</Line>
  <Line number="201">   If not and if DIR is not NULL, that value is checked.  If that fails,</Line>
  <Line number="202">   P_tmpdir is tried and finally &quot;/tmp&quot;.  The storage for the filename</Line>
  <Line number="203">   is allocated by `malloc&apos;.  */</Line>
  <Line number="204">extern char *tempnam (const char *__dir, const char *__pfx)</Line>
  <Line number="205">     __THROW __attribute_malloc__ __wur;</Line>
  <Line number="206">#endif</Line>
  <Line number="207"></Line>
  <Line number="208"></Line>
  <Line number="209">/* Close STREAM.</Line>
  <Line number="210"></Line>
  <Line number="211">   This function is a possible cancellation point and therefore not</Line>
  <Line number="212">   marked with __THROW.  */</Line>
  <Line number="213">extern int fclose (FILE *__stream);</Line>
  <Line number="214">/* Flush STREAM, or all streams if STREAM is NULL.</Line>
  <Line number="215"></Line>
  <Line number="216">   This function is a possible cancellation point and therefore not</Line>
  <Line number="217">   marked with __THROW.  */</Line>
  <Line number="218">extern int fflush (FILE *__stream);</Line>
  <Line number="219"></Line>
  <Line number="220">#ifdef __USE_MISC</Line>
  <Line number="221">/* Faster versions when locking is not required.</Line>
  <Line number="222"></Line>
  <Line number="223">   This function is not part of POSIX and therefore no official</Line>
  <Line number="224">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="225">   or due to the implementation it is a cancellation point and</Line>
  <Line number="226">   therefore not marked with __THROW.  */</Line>
  <Line number="227">extern int fflush_unlocked (FILE *__stream);</Line>
  <Line number="228">#endif</Line>
  <Line number="229"></Line>
  <Line number="230">#ifdef __USE_GNU</Line>
  <Line number="231">/* Close all streams.</Line>
  <Line number="232"></Line>
  <Line number="233">   This function is not part of POSIX and therefore no official</Line>
  <Line number="234">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="235">   or due to the implementation it is a cancellation point and</Line>
  <Line number="236">   therefore not marked with __THROW.  */</Line>
  <Line number="237">extern int fcloseall (void);</Line>
  <Line number="238">#endif</Line>
  <Line number="239"></Line>
  <Line number="240"></Line>
  <Line number="241">#ifndef __USE_FILE_OFFSET64</Line>
  <Line number="242">/* Open a file and create a new stream for it.</Line>
  <Line number="243"></Line>
  <Line number="244">   This function is a possible cancellation point and therefore not</Line>
  <Line number="245">   marked with __THROW.  */</Line>
  <Line number="246">extern FILE *fopen (const char *__restrict __filename,</Line>
  <Line number="247">		    const char *__restrict __modes) __wur;</Line>
  <Line number="248">/* Open a file, replacing an existing stream with it.</Line>
  <Line number="249"></Line>
  <Line number="250">   This function is a possible cancellation point and therefore not</Line>
  <Line number="251">   marked with __THROW.  */</Line>
  <Line number="252">extern FILE *freopen (const char *__restrict __filename,</Line>
  <Line number="253">		      const char *__restrict __modes,</Line>
  <Line number="254">		      FILE *__restrict __stream) __wur;</Line>
  <Line number="255">#else</Line>
  <Line number="256"># ifdef __REDIRECT</Line>
  <Line number="257">extern FILE *__REDIRECT (fopen, (const char *__restrict __filename,</Line>
  <Line number="258">				 const char *__restrict __modes), fopen64)</Line>
  <Line number="259">  __wur;</Line>
  <Line number="260">extern FILE *__REDIRECT (freopen, (const char *__restrict __filename,</Line>
  <Line number="261">				   const char *__restrict __modes,</Line>
  <Line number="262">				   FILE *__restrict __stream), freopen64)</Line>
  <Line number="263">  __wur;</Line>
  <Line number="264"># else</Line>
  <Line number="265">#  define fopen fopen64</Line>
  <Line number="266">#  define freopen freopen64</Line>
  <Line number="267"># endif</Line>
  <Line number="268">#endif</Line>
  <Line number="269">#ifdef __USE_LARGEFILE64</Line>
  <Line number="270">extern FILE *fopen64 (const char *__restrict __filename,</Line>
  <Line number="271">		      const char *__restrict __modes) __wur;</Line>
  <Line number="272">extern FILE *freopen64 (const char *__restrict __filename,</Line>
  <Line number="273">			const char *__restrict __modes,</Line>
  <Line number="274">			FILE *__restrict __stream) __wur;</Line>
  <Line number="275">#endif</Line>
  <Line number="276"></Line>
  <Line number="277">#ifdef	__USE_POSIX</Line>
  <Line number="278">/* Create a new stream that refers to an existing system file descriptor.  */</Line>
  <Line number="279">extern FILE *fdopen (int __fd, const char *__modes) __THROW __wur;</Line>
  <Line number="280">#endif</Line>
  <Line number="281"></Line>
  <Line number="282">#ifdef	__USE_GNU</Line>
  <Line number="283">/* Create a new stream that refers to the given magic cookie,</Line>
  <Line number="284">   and uses the given functions for input and output.  */</Line>
  <Line number="285">extern FILE *fopencookie (void *__restrict __magic_cookie,</Line>
  <Line number="286">			  const char *__restrict __modes,</Line>
  <Line number="287">			  cookie_io_functions_t __io_funcs) __THROW __wur;</Line>
  <Line number="288">#endif</Line>
  <Line number="289"></Line>
  <Line number="290">#if defined __USE_XOPEN2K8 || __GLIBC_USE (LIB_EXT2)</Line>
  <Line number="291">/* Create a new stream that refers to a memory buffer.  */</Line>
  <Line number="292">extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)</Line>
  <Line number="293">  __THROW __wur;</Line>
  <Line number="294"></Line>
  <Line number="295">/* Open a stream that writes into a malloc&apos;d buffer that is expanded as</Line>
  <Line number="296">   necessary.  *BUFLOC and *SIZELOC are updated with the buffer&apos;s location</Line>
  <Line number="297">   and the number of characters written on fflush or fclose.  */</Line>
  <Line number="298">extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __THROW __wur;</Line>
  <Line number="299">#endif</Line>
  <Line number="300"></Line>
  <Line number="301"></Line>
  <Line number="302">/* If BUF is NULL, make STREAM unbuffered.</Line>
  <Line number="303">   Else make it use buffer BUF, of size BUFSIZ.  */</Line>
  <Line number="304">extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __THROW;</Line>
  <Line number="305">/* Make STREAM use buffering mode MODE.</Line>
  <Line number="306">   If BUF is not NULL, use N bytes of it for buffering;</Line>
  <Line number="307">   else allocate an internal buffer N bytes long.  */</Line>
  <Line number="308">extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,</Line>
  <Line number="309">		    int __modes, size_t __n) __THROW;</Line>
  <Line number="310"></Line>
  <Line number="311">#ifdef	__USE_MISC</Line>
  <Line number="312">/* If BUF is NULL, make STREAM unbuffered.</Line>
  <Line number="313">   Else make it use SIZE bytes of BUF for buffering.  */</Line>
  <Line number="314">extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,</Line>
  <Line number="315">		       size_t __size) __THROW;</Line>
  <Line number="316"></Line>
  <Line number="317">/* Make STREAM line-buffered.  */</Line>
  <Line number="318">extern void setlinebuf (FILE *__stream) __THROW;</Line>
  <Line number="319">#endif</Line>
  <Line number="320"></Line>
  <Line number="321"></Line>
  <Line number="322">/* Write formatted output to STREAM.</Line>
  <Line number="323"></Line>
  <Line number="324">   This function is a possible cancellation point and therefore not</Line>
  <Line number="325">   marked with __THROW.  */</Line>
  <Line number="326">extern int fprintf (FILE *__restrict __stream,</Line>
  <Line number="327">		    const char *__restrict __format, ...);</Line>
  <Line number="328">/* Write formatted output to stdout.</Line>
  <Line number="329"></Line>
  <Line number="330">   This function is a possible cancellation point and therefore not</Line>
  <Line number="331">   marked with __THROW.  */</Line>
  <Line number="332">extern int printf (const char *__restrict __format, ...);</Line>
  <Line number="333">/* Write formatted output to S.  */</Line>
  <Line number="334">extern int sprintf (char *__restrict __s,</Line>
  <Line number="335">		    const char *__restrict __format, ...) __THROWNL;</Line>
  <Line number="336"></Line>
  <Line number="337">/* Write formatted output to S from argument list ARG.</Line>
  <Line number="338"></Line>
  <Line number="339">   This function is a possible cancellation point and therefore not</Line>
  <Line number="340">   marked with __THROW.  */</Line>
  <Line number="341">extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,</Line>
  <Line number="342">		     __gnuc_va_list __arg);</Line>
  <Line number="343">/* Write formatted output to stdout from argument list ARG.</Line>
  <Line number="344"></Line>
  <Line number="345">   This function is a possible cancellation point and therefore not</Line>
  <Line number="346">   marked with __THROW.  */</Line>
  <Line number="347">extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);</Line>
  <Line number="348">/* Write formatted output to S from argument list ARG.  */</Line>
  <Line number="349">extern int vsprintf (char *__restrict __s, const char *__restrict __format,</Line>
  <Line number="350">		     __gnuc_va_list __arg) __THROWNL;</Line>
  <Line number="351"></Line>
  <Line number="352">#if defined __USE_ISOC99 || defined __USE_UNIX98</Line>
  <Line number="353">/* Maximum chars of output to write in MAXLEN.  */</Line>
  <Line number="354">extern int snprintf (char *__restrict __s, size_t __maxlen,</Line>
  <Line number="355">		     const char *__restrict __format, ...)</Line>
  <Line number="356">     __THROWNL __attribute__ ((__format__ (__printf__, 3, 4)));</Line>
  <Line number="357"></Line>
  <Line number="358">extern int vsnprintf (char *__restrict __s, size_t __maxlen,</Line>
  <Line number="359">		      const char *__restrict __format, __gnuc_va_list __arg)</Line>
  <Line number="360">     __THROWNL __attribute__ ((__format__ (__printf__, 3, 0)));</Line>
  <Line number="361">#endif</Line>
  <Line number="362"></Line>
  <Line number="363">#if __GLIBC_USE (LIB_EXT2)</Line>
  <Line number="364">/* Write formatted output to a string dynamically allocated with `malloc&apos;.</Line>
  <Line number="365">   Store the address of the string in *PTR.  */</Line>
  <Line number="366">extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,</Line>
  <Line number="367">		      __gnuc_va_list __arg)</Line>
  <Line number="368">     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0))) __wur;</Line>
  <Line number="369">extern int __asprintf (char **__restrict __ptr,</Line>
  <Line number="370">		       const char *__restrict __fmt, ...)</Line>
  <Line number="371">     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;</Line>
  <Line number="372">extern int asprintf (char **__restrict __ptr,</Line>
  <Line number="373">		     const char *__restrict __fmt, ...)</Line>
  <Line number="374">     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3))) __wur;</Line>
  <Line number="375">#endif</Line>
  <Line number="376"></Line>
  <Line number="377">#ifdef __USE_XOPEN2K8</Line>
  <Line number="378">/* Write formatted output to a file descriptor.  */</Line>
  <Line number="379">extern int vdprintf (int __fd, const char *__restrict __fmt,</Line>
  <Line number="380">		     __gnuc_va_list __arg)</Line>
  <Line number="381">     __attribute__ ((__format__ (__printf__, 2, 0)));</Line>
  <Line number="382">extern int dprintf (int __fd, const char *__restrict __fmt, ...)</Line>
  <Line number="383">     __attribute__ ((__format__ (__printf__, 2, 3)));</Line>
  <Line number="384">#endif</Line>
  <Line number="385"></Line>
  <Line number="386"></Line>
  <Line number="387">/* Read formatted input from STREAM.</Line>
  <Line number="388"></Line>
  <Line number="389">   This function is a possible cancellation point and therefore not</Line>
  <Line number="390">   marked with __THROW.  */</Line>
  <Line number="391">extern int fscanf (FILE *__restrict __stream,</Line>
  <Line number="392">		   const char *__restrict __format, ...) __wur;</Line>
  <Line number="393">/* Read formatted input from stdin.</Line>
  <Line number="394"></Line>
  <Line number="395">   This function is a possible cancellation point and therefore not</Line>
  <Line number="396">   marked with __THROW.  */</Line>
  <Line number="397">extern int scanf (const char *__restrict __format, ...) __wur;</Line>
  <Line number="398">/* Read formatted input from S.  */</Line>
  <Line number="399">extern int sscanf (const char *__restrict __s,</Line>
  <Line number="400">		   const char *__restrict __format, ...) __THROW;</Line>
  <Line number="401"></Line>
  <Line number="402">/* For historical reasons, the C99-compliant versions of the scanf</Line>
  <Line number="403">   functions are at alternative names.  When __LDBL_COMPAT is in</Line>
  <Line number="404">   effect, this is handled in bits/stdio-ldbl.h.  */</Line>
  <Line number="405">#if !__GLIBC_USE (DEPRECATED_SCANF) &amp;&amp; !defined __LDBL_COMPAT</Line>
  <Line number="406"># ifdef __REDIRECT</Line>
  <Line number="407">extern int __REDIRECT (fscanf, (FILE *__restrict __stream,</Line>
  <Line number="408">				const char *__restrict __format, ...),</Line>
  <Line number="409">		       __isoc99_fscanf) __wur;</Line>
  <Line number="410">extern int __REDIRECT (scanf, (const char *__restrict __format, ...),</Line>
  <Line number="411">		       __isoc99_scanf) __wur;</Line>
  <Line number="412">extern int __REDIRECT_NTH (sscanf, (const char *__restrict __s,</Line>
  <Line number="413">				    const char *__restrict __format, ...),</Line>
  <Line number="414">			   __isoc99_sscanf);</Line>
  <Line number="415"># else</Line>
  <Line number="416">extern int __isoc99_fscanf (FILE *__restrict __stream,</Line>
  <Line number="417">			    const char *__restrict __format, ...) __wur;</Line>
  <Line number="418">extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;</Line>
  <Line number="419">extern int __isoc99_sscanf (const char *__restrict __s,</Line>
  <Line number="420">			    const char *__restrict __format, ...) __THROW;</Line>
  <Line number="421">#  define fscanf __isoc99_fscanf</Line>
  <Line number="422">#  define scanf __isoc99_scanf</Line>
  <Line number="423">#  define sscanf __isoc99_sscanf</Line>
  <Line number="424"># endif</Line>
  <Line number="425">#endif</Line>
  <Line number="426"></Line>
  <Line number="427">#ifdef	__USE_ISOC99</Line>
  <Line number="428">/* Read formatted input from S into argument list ARG.</Line>
  <Line number="429"></Line>
  <Line number="430">   This function is a possible cancellation point and therefore not</Line>
  <Line number="431">   marked with __THROW.  */</Line>
  <Line number="432">extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,</Line>
  <Line number="433">		    __gnuc_va_list __arg)</Line>
  <Line number="434">     __attribute__ ((__format__ (__scanf__, 2, 0))) __wur;</Line>
  <Line number="435"></Line>
  <Line number="436">/* Read formatted input from stdin into argument list ARG.</Line>
  <Line number="437"></Line>
  <Line number="438">   This function is a possible cancellation point and therefore not</Line>
  <Line number="439">   marked with __THROW.  */</Line>
  <Line number="440">extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)</Line>
  <Line number="441">     __attribute__ ((__format__ (__scanf__, 1, 0))) __wur;</Line>
  <Line number="442"></Line>
  <Line number="443">/* Read formatted input from S into argument list ARG.  */</Line>
  <Line number="444">extern int vsscanf (const char *__restrict __s,</Line>
  <Line number="445">		    const char *__restrict __format, __gnuc_va_list __arg)</Line>
  <Line number="446">     __THROW __attribute__ ((__format__ (__scanf__, 2, 0)));</Line>
  <Line number="447"></Line>
  <Line number="448">/* Same redirection as above for the v*scanf family.  */</Line>
  <Line number="449"># if !__GLIBC_USE (DEPRECATED_SCANF)</Line>
  <Line number="450">#  if defined __REDIRECT &amp;&amp; !defined __LDBL_COMPAT</Line>
  <Line number="451">extern int __REDIRECT (vfscanf,</Line>
  <Line number="452">		       (FILE *__restrict __s,</Line>
  <Line number="453">			const char *__restrict __format, __gnuc_va_list __arg),</Line>
  <Line number="454">		       __isoc99_vfscanf)</Line>
  <Line number="455">     __attribute__ ((__format__ (__scanf__, 2, 0))) __wur;</Line>
  <Line number="456">extern int __REDIRECT (vscanf, (const char *__restrict __format,</Line>
  <Line number="457">				__gnuc_va_list __arg), __isoc99_vscanf)</Line>
  <Line number="458">     __attribute__ ((__format__ (__scanf__, 1, 0))) __wur;</Line>
  <Line number="459">extern int __REDIRECT_NTH (vsscanf,</Line>
  <Line number="460">			   (const char *__restrict __s,</Line>
  <Line number="461">			    const char *__restrict __format,</Line>
  <Line number="462">			    __gnuc_va_list __arg), __isoc99_vsscanf)</Line>
  <Line number="463">     __attribute__ ((__format__ (__scanf__, 2, 0)));</Line>
  <Line number="464">#  elif !defined __REDIRECT</Line>
  <Line number="465">extern int __isoc99_vfscanf (FILE *__restrict __s,</Line>
  <Line number="466">			     const char *__restrict __format,</Line>
  <Line number="467">			     __gnuc_va_list __arg) __wur;</Line>
  <Line number="468">extern int __isoc99_vscanf (const char *__restrict __format,</Line>
  <Line number="469">			    __gnuc_va_list __arg) __wur;</Line>
  <Line number="470">extern int __isoc99_vsscanf (const char *__restrict __s,</Line>
  <Line number="471">			     const char *__restrict __format,</Line>
  <Line number="472">			     __gnuc_va_list __arg) __THROW;</Line>
  <Line number="473">#   define vfscanf __isoc99_vfscanf</Line>
  <Line number="474">#   define vscanf __isoc99_vscanf</Line>
  <Line number="475">#   define vsscanf __isoc99_vsscanf</Line>
  <Line number="476">#  endif</Line>
  <Line number="477"># endif</Line>
  <Line number="478">#endif /* Use ISO C9x.  */</Line>
  <Line number="479"></Line>
  <Line number="480"></Line>
  <Line number="481">/* Read a character from STREAM.</Line>
  <Line number="482"></Line>
  <Line number="483">   These functions are possible cancellation points and therefore not</Line>
  <Line number="484">   marked with __THROW.  */</Line>
  <Line number="485">extern int fgetc (FILE *__stream);</Line>
  <Line number="486">extern int getc (FILE *__stream);</Line>
  <Line number="487"></Line>
  <Line number="488">/* Read a character from stdin.</Line>
  <Line number="489"></Line>
  <Line number="490">   This function is a possible cancellation point and therefore not</Line>
  <Line number="491">   marked with __THROW.  */</Line>
  <Line number="492">extern int getchar (void);</Line>
  <Line number="493"></Line>
  <Line number="494">#ifdef __USE_POSIX199506</Line>
  <Line number="495">/* These are defined in POSIX.1:1996.</Line>
  <Line number="496"></Line>
  <Line number="497">   These functions are possible cancellation points and therefore not</Line>
  <Line number="498">   marked with __THROW.  */</Line>
  <Line number="499">extern int getc_unlocked (FILE *__stream);</Line>
  <Line number="500">extern int getchar_unlocked (void);</Line>
  <Line number="501">#endif /* Use POSIX.  */</Line>
  <Line number="502"></Line>
  <Line number="503">#ifdef __USE_MISC</Line>
  <Line number="504">/* Faster version when locking is not necessary.</Line>
  <Line number="505"></Line>
  <Line number="506">   This function is not part of POSIX and therefore no official</Line>
  <Line number="507">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="508">   or due to the implementation it is a cancellation point and</Line>
  <Line number="509">   therefore not marked with __THROW.  */</Line>
  <Line number="510">extern int fgetc_unlocked (FILE *__stream);</Line>
  <Line number="511">#endif /* Use MISC.  */</Line>
  <Line number="512"></Line>
  <Line number="513"></Line>
  <Line number="514">/* Write a character to STREAM.</Line>
  <Line number="515"></Line>
  <Line number="516">   These functions are possible cancellation points and therefore not</Line>
  <Line number="517">   marked with __THROW.</Line>
  <Line number="518"></Line>
  <Line number="519">   These functions is a possible cancellation point and therefore not</Line>
  <Line number="520">   marked with __THROW.  */</Line>
  <Line number="521">extern int fputc (int __c, FILE *__stream);</Line>
  <Line number="522">extern int putc (int __c, FILE *__stream);</Line>
  <Line number="523"></Line>
  <Line number="524">/* Write a character to stdout.</Line>
  <Line number="525"></Line>
  <Line number="526">   This function is a possible cancellation point and therefore not</Line>
  <Line number="527">   marked with __THROW.  */</Line>
  <Line number="528">extern int putchar (int __c);</Line>
  <Line number="529"></Line>
  <Line number="530">#ifdef __USE_MISC</Line>
  <Line number="531">/* Faster version when locking is not necessary.</Line>
  <Line number="532"></Line>
  <Line number="533">   This function is not part of POSIX and therefore no official</Line>
  <Line number="534">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="535">   or due to the implementation it is a cancellation point and</Line>
  <Line number="536">   therefore not marked with __THROW.  */</Line>
  <Line number="537">extern int fputc_unlocked (int __c, FILE *__stream);</Line>
  <Line number="538">#endif /* Use MISC.  */</Line>
  <Line number="539"></Line>
  <Line number="540">#ifdef __USE_POSIX199506</Line>
  <Line number="541">/* These are defined in POSIX.1:1996.</Line>
  <Line number="542"></Line>
  <Line number="543">   These functions are possible cancellation points and therefore not</Line>
  <Line number="544">   marked with __THROW.  */</Line>
  <Line number="545">extern int putc_unlocked (int __c, FILE *__stream);</Line>
  <Line number="546">extern int putchar_unlocked (int __c);</Line>
  <Line number="547">#endif /* Use POSIX.  */</Line>
  <Line number="548"></Line>
  <Line number="549"></Line>
  <Line number="550">#if defined __USE_MISC \</Line>
  <Line number="551">    || (defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K)</Line>
  <Line number="552">/* Get a word (int) from STREAM.  */</Line>
  <Line number="553">extern int getw (FILE *__stream);</Line>
  <Line number="554"></Line>
  <Line number="555">/* Write a word (int) to STREAM.  */</Line>
  <Line number="556">extern int putw (int __w, FILE *__stream);</Line>
  <Line number="557">#endif</Line>
  <Line number="558"></Line>
  <Line number="559"></Line>
  <Line number="560">/* Get a newline-terminated string of finite length from STREAM.</Line>
  <Line number="561"></Line>
  <Line number="562">   This function is a possible cancellation point and therefore not</Line>
  <Line number="563">   marked with __THROW.  */</Line>
  <Line number="564">extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)</Line>
  <Line number="565">     __wur;</Line>
  <Line number="566"></Line>
  <Line number="567">#if __GLIBC_USE (DEPRECATED_GETS)</Line>
  <Line number="568">/* Get a newline-terminated string from stdin, removing the newline.</Line>
  <Line number="569"></Line>
  <Line number="570">   This function is impossible to use safely.  It has been officially</Line>
  <Line number="571">   removed from ISO C11 and ISO C++14, and we have also removed it</Line>
  <Line number="572">   from the _GNU_SOURCE feature list.  It remains available when</Line>
  <Line number="573">   explicitly using an old ISO C, Unix, or POSIX standard.</Line>
  <Line number="574"></Line>
  <Line number="575">   This function is a possible cancellation point and therefore not</Line>
  <Line number="576">   marked with __THROW.  */</Line>
  <Line number="577">extern char *gets (char *__s) __wur __attribute_deprecated__;</Line>
  <Line number="578">#endif</Line>
  <Line number="579"></Line>
  <Line number="580">#ifdef __USE_GNU</Line>
  <Line number="581">/* This function does the same as `fgets&apos; but does not lock the stream.</Line>
  <Line number="582"></Line>
  <Line number="583">   This function is not part of POSIX and therefore no official</Line>
  <Line number="584">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="585">   or due to the implementation it is a cancellation point and</Line>
  <Line number="586">   therefore not marked with __THROW.  */</Line>
  <Line number="587">extern char *fgets_unlocked (char *__restrict __s, int __n,</Line>
  <Line number="588">			     FILE *__restrict __stream) __wur;</Line>
  <Line number="589">#endif</Line>
  <Line number="590"></Line>
  <Line number="591"></Line>
  <Line number="592">#if defined __USE_XOPEN2K8 || __GLIBC_USE (LIB_EXT2)</Line>
  <Line number="593">/* Read up to (and including) a DELIMITER from STREAM into *LINEPTR</Line>
  <Line number="594">   (and null-terminate it). *LINEPTR is a pointer returned from malloc (or</Line>
  <Line number="595">   NULL), pointing to *N characters of space.  It is realloc&apos;d as</Line>
  <Line number="596">   necessary.  Returns the number of characters read (not including the</Line>
  <Line number="597">   null terminator), or -1 on error or EOF.</Line>
  <Line number="598"></Line>
  <Line number="599">   These functions are not part of POSIX and therefore no official</Line>
  <Line number="600">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="601">   or due to the implementation they are cancellation points and</Line>
  <Line number="602">   therefore not marked with __THROW.  */</Line>
  <Line number="603">extern __ssize_t __getdelim (char **__restrict __lineptr,</Line>
  <Line number="604">                             size_t *__restrict __n, int __delimiter,</Line>
  <Line number="605">                             FILE *__restrict __stream) __wur;</Line>
  <Line number="606">extern __ssize_t getdelim (char **__restrict __lineptr,</Line>
  <Line number="607">                           size_t *__restrict __n, int __delimiter,</Line>
  <Line number="608">                           FILE *__restrict __stream) __wur;</Line>
  <Line number="609"></Line>
  <Line number="610">/* Like `getdelim&apos;, but reads up to a newline.</Line>
  <Line number="611"></Line>
  <Line number="612">   This function is not part of POSIX and therefore no official</Line>
  <Line number="613">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="614">   or due to the implementation it is a cancellation point and</Line>
  <Line number="615">   therefore not marked with __THROW.  */</Line>
  <Line number="616">extern __ssize_t getline (char **__restrict __lineptr,</Line>
  <Line number="617">                          size_t *__restrict __n,</Line>
  <Line number="618">                          FILE *__restrict __stream) __wur;</Line>
  <Line number="619">#endif</Line>
  <Line number="620"></Line>
  <Line number="621"></Line>
  <Line number="622">/* Write a string to STREAM.</Line>
  <Line number="623"></Line>
  <Line number="624">   This function is a possible cancellation point and therefore not</Line>
  <Line number="625">   marked with __THROW.  */</Line>
  <Line number="626">extern int fputs (const char *__restrict __s, FILE *__restrict __stream);</Line>
  <Line number="627"></Line>
  <Line number="628">/* Write a string, followed by a newline, to stdout.</Line>
  <Line number="629"></Line>
  <Line number="630">   This function is a possible cancellation point and therefore not</Line>
  <Line number="631">   marked with __THROW.  */</Line>
  <Line number="632">extern int puts (const char *__s);</Line>
  <Line number="633"></Line>
  <Line number="634"></Line>
  <Line number="635">/* Push a character back onto the input buffer of STREAM.</Line>
  <Line number="636"></Line>
  <Line number="637">   This function is a possible cancellation point and therefore not</Line>
  <Line number="638">   marked with __THROW.  */</Line>
  <Line number="639">extern int ungetc (int __c, FILE *__stream);</Line>
  <Line number="640"></Line>
  <Line number="641"></Line>
  <Line number="642">/* Read chunks of generic data from STREAM.</Line>
  <Line number="643"></Line>
  <Line number="644">   This function is a possible cancellation point and therefore not</Line>
  <Line number="645">   marked with __THROW.  */</Line>
  <Line number="646">extern size_t fread (void *__restrict __ptr, size_t __size,</Line>
  <Line number="647">		     size_t __n, FILE *__restrict __stream) __wur;</Line>
  <Line number="648">/* Write chunks of generic data to STREAM.</Line>
  <Line number="649"></Line>
  <Line number="650">   This function is a possible cancellation point and therefore not</Line>
  <Line number="651">   marked with __THROW.  */</Line>
  <Line number="652">extern size_t fwrite (const void *__restrict __ptr, size_t __size,</Line>
  <Line number="653">		      size_t __n, FILE *__restrict __s);</Line>
  <Line number="654"></Line>
  <Line number="655">#ifdef __USE_GNU</Line>
  <Line number="656">/* This function does the same as `fputs&apos; but does not lock the stream.</Line>
  <Line number="657"></Line>
  <Line number="658">   This function is not part of POSIX and therefore no official</Line>
  <Line number="659">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="660">   or due to the implementation it is a cancellation point and</Line>
  <Line number="661">   therefore not marked with __THROW.  */</Line>
  <Line number="662">extern int fputs_unlocked (const char *__restrict __s,</Line>
  <Line number="663">			   FILE *__restrict __stream);</Line>
  <Line number="664">#endif</Line>
  <Line number="665"></Line>
  <Line number="666">#ifdef __USE_MISC</Line>
  <Line number="667">/* Faster versions when locking is not necessary.</Line>
  <Line number="668"></Line>
  <Line number="669">   These functions are not part of POSIX and therefore no official</Line>
  <Line number="670">   cancellation point.  But due to similarity with an POSIX interface</Line>
  <Line number="671">   or due to the implementation they are cancellation points and</Line>
  <Line number="672">   therefore not marked with __THROW.  */</Line>
  <Line number="673">extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,</Line>
  <Line number="674">			      size_t __n, FILE *__restrict __stream) __wur;</Line>
  <Line number="675">extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,</Line>
  <Line number="676">			       size_t __n, FILE *__restrict __stream);</Line>
  <Line number="677">#endif</Line>
  <Line number="678"></Line>
  <Line number="679"></Line>
  <Line number="680">/* Seek to a certain position on STREAM.</Line>
  <Line number="681"></Line>
  <Line number="682">   This function is a possible cancellation point and therefore not</Line>
  <Line number="683">   marked with __THROW.  */</Line>
  <Line number="684">extern int fseek (FILE *__stream, long int __off, int __whence);</Line>
  <Line number="685">/* Return the current position of STREAM.</Line>
  <Line number="686"></Line>
  <Line number="687">   This function is a possible cancellation point and therefore not</Line>
  <Line number="688">   marked with __THROW.  */</Line>
  <Line number="689">extern long int ftell (FILE *__stream) __wur;</Line>
  <Line number="690">/* Rewind to the beginning of STREAM.</Line>
  <Line number="691"></Line>
  <Line number="692">   This function is a possible cancellation point and therefore not</Line>
  <Line number="693">   marked with __THROW.  */</Line>
  <Line number="694">extern void rewind (FILE *__stream);</Line>
  <Line number="695"></Line>
  <Line number="696">/* The Single Unix Specification, Version 2, specifies an alternative,</Line>
  <Line number="697">   more adequate interface for the two functions above which deal with</Line>
  <Line number="698">   file offset.  `long int&apos; is not the right type.  These definitions</Line>
  <Line number="699">   are originally defined in the Large File Support API.  */</Line>
  <Line number="700"></Line>
  <Line number="701">#if defined __USE_LARGEFILE || defined __USE_XOPEN2K</Line>
  <Line number="702"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="703">/* Seek to a certain position on STREAM.</Line>
  <Line number="704"></Line>
  <Line number="705">   This function is a possible cancellation point and therefore not</Line>
  <Line number="706">   marked with __THROW.  */</Line>
  <Line number="707">extern int fseeko (FILE *__stream, __off_t __off, int __whence);</Line>
  <Line number="708">/* Return the current position of STREAM.</Line>
  <Line number="709"></Line>
  <Line number="710">   This function is a possible cancellation point and therefore not</Line>
  <Line number="711">   marked with __THROW.  */</Line>
  <Line number="712">extern __off_t ftello (FILE *__stream) __wur;</Line>
  <Line number="713"># else</Line>
  <Line number="714">#  ifdef __REDIRECT</Line>
  <Line number="715">extern int __REDIRECT (fseeko,</Line>
  <Line number="716">		       (FILE *__stream, __off64_t __off, int __whence),</Line>
  <Line number="717">		       fseeko64);</Line>
  <Line number="718">extern __off64_t __REDIRECT (ftello, (FILE *__stream), ftello64);</Line>
  <Line number="719">#  else</Line>
  <Line number="720">#   define fseeko fseeko64</Line>
  <Line number="721">#   define ftello ftello64</Line>
  <Line number="722">#  endif</Line>
  <Line number="723"># endif</Line>
  <Line number="724">#endif</Line>
  <Line number="725"></Line>
  <Line number="726">#ifndef __USE_FILE_OFFSET64</Line>
  <Line number="727">/* Get STREAM&apos;s position.</Line>
  <Line number="728"></Line>
  <Line number="729">   This function is a possible cancellation point and therefore not</Line>
  <Line number="730">   marked with __THROW.  */</Line>
  <Line number="731">extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);</Line>
  <Line number="732">/* Set STREAM&apos;s position.</Line>
  <Line number="733"></Line>
  <Line number="734">   This function is a possible cancellation point and therefore not</Line>
  <Line number="735">   marked with __THROW.  */</Line>
  <Line number="736">extern int fsetpos (FILE *__stream, const fpos_t *__pos);</Line>
  <Line number="737">#else</Line>
  <Line number="738"># ifdef __REDIRECT</Line>
  <Line number="739">extern int __REDIRECT (fgetpos, (FILE *__restrict __stream,</Line>
  <Line number="740">				 fpos_t *__restrict __pos), fgetpos64);</Line>
  <Line number="741">extern int __REDIRECT (fsetpos,</Line>
  <Line number="742">		       (FILE *__stream, const fpos_t *__pos), fsetpos64);</Line>
  <Line number="743"># else</Line>
  <Line number="744">#  define fgetpos fgetpos64</Line>
  <Line number="745">#  define fsetpos fsetpos64</Line>
  <Line number="746"># endif</Line>
  <Line number="747">#endif</Line>
  <Line number="748"></Line>
  <Line number="749">#ifdef __USE_LARGEFILE64</Line>
  <Line number="750">extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);</Line>
  <Line number="751">extern __off64_t ftello64 (FILE *__stream) __wur;</Line>
  <Line number="752">extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);</Line>
  <Line number="753">extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);</Line>
  <Line number="754">#endif</Line>
  <Line number="755"></Line>
  <Line number="756">/* Clear the error and EOF indicators for STREAM.  */</Line>
  <Line number="757">extern void clearerr (FILE *__stream) __THROW;</Line>
  <Line number="758">/* Return the EOF indicator for STREAM.  */</Line>
  <Line number="759">extern int feof (FILE *__stream) __THROW __wur;</Line>
  <Line number="760">/* Return the error indicator for STREAM.  */</Line>
  <Line number="761">extern int ferror (FILE *__stream) __THROW __wur;</Line>
  <Line number="762"></Line>
  <Line number="763">#ifdef __USE_MISC</Line>
  <Line number="764">/* Faster versions when locking is not required.  */</Line>
  <Line number="765">extern void clearerr_unlocked (FILE *__stream) __THROW;</Line>
  <Line number="766">extern int feof_unlocked (FILE *__stream) __THROW __wur;</Line>
  <Line number="767">extern int ferror_unlocked (FILE *__stream) __THROW __wur;</Line>
  <Line number="768">#endif</Line>
  <Line number="769"></Line>
  <Line number="770"></Line>
  <Line number="771">/* Print a message describing the meaning of the value of errno.</Line>
  <Line number="772"></Line>
  <Line number="773">   This function is a possible cancellation point and therefore not</Line>
  <Line number="774">   marked with __THROW.  */</Line>
  <Line number="775">extern void perror (const char *__s);</Line>
  <Line number="776"></Line>
  <Line number="777">/* Provide the declarations for `sys_errlist&apos; and `sys_nerr&apos; if they</Line>
  <Line number="778">   are available on this system.  Even if available, these variables</Line>
  <Line number="779">   should not be used directly.  The `strerror&apos; function provides</Line>
  <Line number="780">   all the necessary functionality.  */</Line>
  <Line number="781">#include &lt;bits/sys_errlist.h&gt;</Line>
  <Line number="782"></Line>
  <Line number="783"></Line>
  <Line number="784">#ifdef	__USE_POSIX</Line>
  <Line number="785">/* Return the system file descriptor for STREAM.  */</Line>
  <Line number="786">extern int fileno (FILE *__stream) __THROW __wur;</Line>
  <Line number="787">#endif /* Use POSIX.  */</Line>
  <Line number="788"></Line>
  <Line number="789">#ifdef __USE_MISC</Line>
  <Line number="790">/* Faster version when locking is not required.  */</Line>
  <Line number="791">extern int fileno_unlocked (FILE *__stream) __THROW __wur;</Line>
  <Line number="792">#endif</Line>
  <Line number="793"></Line>
  <Line number="794"></Line>
  <Line number="795">#ifdef __USE_POSIX2</Line>
  <Line number="796">/* Create a new stream connected to a pipe running the given command.</Line>
  <Line number="797"></Line>
  <Line number="798">   This function is a possible cancellation point and therefore not</Line>
  <Line number="799">   marked with __THROW.  */</Line>
  <Line number="800">extern FILE *popen (const char *__command, const char *__modes) __wur;</Line>
  <Line number="801"></Line>
  <Line number="802">/* Close a stream opened by popen and return the status of its child.</Line>
  <Line number="803"></Line>
  <Line number="804">   This function is a possible cancellation point and therefore not</Line>
  <Line number="805">   marked with __THROW.  */</Line>
  <Line number="806">extern int pclose (FILE *__stream);</Line>
  <Line number="807">#endif</Line>
  <Line number="808"></Line>
  <Line number="809"></Line>
  <Line number="810">#ifdef	__USE_POSIX</Line>
  <Line number="811">/* Return the name of the controlling terminal.  */</Line>
  <Line number="812">extern char *ctermid (char *__s) __THROW;</Line>
  <Line number="813">#endif /* Use POSIX.  */</Line>
  <Line number="814"></Line>
  <Line number="815"></Line>
  <Line number="816">#if (defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K) || defined __USE_GNU</Line>
  <Line number="817">/* Return the name of the current user.  */</Line>
  <Line number="818">extern char *cuserid (char *__s);</Line>
  <Line number="819">#endif /* Use X/Open, but not issue 6.  */</Line>
  <Line number="820"></Line>
  <Line number="821"></Line>
  <Line number="822">#ifdef	__USE_GNU</Line>
  <Line number="823">struct obstack;			/* See &lt;obstack.h&gt;.  */</Line>
  <Line number="824"></Line>
  <Line number="825">/* Write formatted output to an obstack.  */</Line>
  <Line number="826">extern int obstack_printf (struct obstack *__restrict __obstack,</Line>
  <Line number="827">			   const char *__restrict __format, ...)</Line>
  <Line number="828">     __THROWNL __attribute__ ((__format__ (__printf__, 2, 3)));</Line>
  <Line number="829">extern int obstack_vprintf (struct obstack *__restrict __obstack,</Line>
  <Line number="830">			    const char *__restrict __format,</Line>
  <Line number="831">			    __gnuc_va_list __args)</Line>
  <Line number="832">     __THROWNL __attribute__ ((__format__ (__printf__, 2, 0)));</Line>
  <Line number="833">#endif /* Use GNU.  */</Line>
  <Line number="834"></Line>
  <Line number="835"></Line>
  <Line number="836">#ifdef __USE_POSIX199506</Line>
  <Line number="837">/* These are defined in POSIX.1:1996.  */</Line>
  <Line number="838"></Line>
  <Line number="839">/* Acquire ownership of STREAM.  */</Line>
  <Line number="840">extern void flockfile (FILE *__stream) __THROW;</Line>
  <Line number="841"></Line>
  <Line number="842">/* Try to acquire ownership of STREAM but do not block if it is not</Line>
  <Line number="843">   possible.  */</Line>
  <Line number="844">extern int ftrylockfile (FILE *__stream) __THROW __wur;</Line>
  <Line number="845"></Line>
  <Line number="846">/* Relinquish the ownership granted for STREAM.  */</Line>
  <Line number="847">extern void funlockfile (FILE *__stream) __THROW;</Line>
  <Line number="848">#endif /* POSIX */</Line>
  <Line number="849"></Line>
  <Line number="850">#if defined __USE_XOPEN &amp;&amp; !defined __USE_XOPEN2K &amp;&amp; !defined __USE_GNU</Line>
  <Line number="851">/*  X/Open Issues 1-5 required getopt to be declared in this</Line>
  <Line number="852">   header.  It was removed in Issue 6.  GNU follows Issue 6.  */</Line>
  <Line number="853"># include &lt;bits/getopt_posix.h&gt;</Line>
  <Line number="854">#endif</Line>
  <Line number="855"></Line>
  <Line number="856">/* Slow-path routines used by the optimized inline functions in</Line>
  <Line number="857">   bits/stdio.h.  */</Line>
  <Line number="858">extern int __uflow (FILE *);</Line>
  <Line number="859">extern int __overflow (FILE *, int);</Line>
  <Line number="860"></Line>
  <Line number="861">/* If we are compiling with optimizing read this file.  It contains</Line>
  <Line number="862">   several optimizing inline functions and macros.  */</Line>
  <Line number="863">#ifdef __USE_EXTERN_INLINES</Line>
  <Line number="864"># include &lt;bits/stdio.h&gt;</Line>
  <Line number="865">#endif</Line>
  <Line number="866">#if __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __fortify_function</Line>
  <Line number="867"># include &lt;bits/stdio2.h&gt;</Line>
  <Line number="868">#endif</Line>
  <Line number="869">#ifdef __LDBL_COMPAT</Line>
  <Line number="870"># include &lt;bits/stdio-ldbl.h&gt;</Line>
  <Line number="871">#endif</Line>
  <Line number="872"></Line>
  <Line number="873">__END_DECLS</Line>
  <Line number="874"></Line>
  <Line number="875">#endif /* &lt;stdio.h&gt; included.  */</Line>
</SourceFile>
