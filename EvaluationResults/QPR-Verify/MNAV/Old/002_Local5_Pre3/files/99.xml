<SourceFile>
  <Line number="1">/* Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">/*</Line>
  <Line number="19"> *	POSIX Standard: 6.5 File Control Operations	&lt;fcntl.h&gt;</Line>
  <Line number="20"> */</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef	_FCNTL_H</Line>
  <Line number="23">#define	_FCNTL_H	1</Line>
  <Line number="24"></Line>
  <Line number="25">#include &lt;features.h&gt;</Line>
  <Line number="26"></Line>
  <Line number="27">/* This must be early so &lt;bits/fcntl.h&gt; can define types winningly.  */</Line>
  <Line number="28">__BEGIN_DECLS</Line>
  <Line number="29"></Line>
  <Line number="30">/* Get __mode_t, __dev_t and __off_t  .*/</Line>
  <Line number="31">#include &lt;bits/types.h&gt;</Line>
  <Line number="32"></Line>
  <Line number="33">/* Get the definitions of O_*, F_*, FD_*: all the</Line>
  <Line number="34">   numbers and flag bits for `open&apos;, `fcntl&apos;, et al.  */</Line>
  <Line number="35">#include &lt;bits/fcntl.h&gt;</Line>
  <Line number="36"></Line>
  <Line number="37">/* Detect if open needs mode as a third argument (or for openat as a fourth</Line>
  <Line number="38">   argument).  */</Line>
  <Line number="39">#ifdef __O_TMPFILE</Line>
  <Line number="40"># define __OPEN_NEEDS_MODE(oflag) \</Line>
  <Line number="41">  (((oflag) &amp; O_CREAT) != 0 || ((oflag) &amp; __O_TMPFILE) == __O_TMPFILE)</Line>
  <Line number="42">#else</Line>
  <Line number="43"># define __OPEN_NEEDS_MODE(oflag) (((oflag) &amp; O_CREAT) != 0)</Line>
  <Line number="44">#endif</Line>
  <Line number="45"></Line>
  <Line number="46">/* POSIX.1-2001 specifies that these types are defined by &lt;fcntl.h&gt;.</Line>
  <Line number="47">   Earlier POSIX standards permitted any type ending in `_t&apos; to be defined</Line>
  <Line number="48">   by any POSIX header, so we don&apos;t conditionalize the definitions here.  */</Line>
  <Line number="49">#ifndef __mode_t_defined</Line>
  <Line number="50">typedef __mode_t mode_t;</Line>
  <Line number="51"># define __mode_t_defined</Line>
  <Line number="52">#endif</Line>
  <Line number="53"></Line>
  <Line number="54">#ifndef __off_t_defined</Line>
  <Line number="55"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="56">typedef __off_t off_t;</Line>
  <Line number="57"># else</Line>
  <Line number="58">typedef __off64_t off_t;</Line>
  <Line number="59"># endif</Line>
  <Line number="60"># define __off_t_defined</Line>
  <Line number="61">#endif</Line>
  <Line number="62"></Line>
  <Line number="63">#if defined __USE_LARGEFILE64 &amp;&amp; !defined __off64_t_defined</Line>
  <Line number="64">typedef __off64_t off64_t;</Line>
  <Line number="65"># define __off64_t_defined</Line>
  <Line number="66">#endif</Line>
  <Line number="67"></Line>
  <Line number="68">#ifndef __pid_t_defined</Line>
  <Line number="69">typedef __pid_t pid_t;</Line>
  <Line number="70"># define __pid_t_defined</Line>
  <Line number="71">#endif</Line>
  <Line number="72"></Line>
  <Line number="73">/* For XPG all symbols from &lt;sys/stat.h&gt; should also be available.  */</Line>
  <Line number="74">#ifdef __USE_XOPEN2K8</Line>
  <Line number="75"># include &lt;bits/types/struct_timespec.h&gt;</Line>
  <Line number="76">#endif</Line>
  <Line number="77">#if defined __USE_XOPEN || defined __USE_XOPEN2K8</Line>
  <Line number="78"># include &lt;bits/stat.h&gt;</Line>
  <Line number="79"></Line>
  <Line number="80"># define S_IFMT		__S_IFMT</Line>
  <Line number="81"># define S_IFDIR	__S_IFDIR</Line>
  <Line number="82"># define S_IFCHR	__S_IFCHR</Line>
  <Line number="83"># define S_IFBLK	__S_IFBLK</Line>
  <Line number="84"># define S_IFREG	__S_IFREG</Line>
  <Line number="85"># ifdef __S_IFIFO</Line>
  <Line number="86">#  define S_IFIFO	__S_IFIFO</Line>
  <Line number="87"># endif</Line>
  <Line number="88"># ifdef __S_IFLNK</Line>
  <Line number="89">#  define S_IFLNK	__S_IFLNK</Line>
  <Line number="90"># endif</Line>
  <Line number="91"># if (defined __USE_UNIX98 || defined __USE_XOPEN2K8) &amp;&amp; defined __S_IFSOCK</Line>
  <Line number="92">#  define S_IFSOCK	__S_IFSOCK</Line>
  <Line number="93"># endif</Line>
  <Line number="94"></Line>
  <Line number="95">/* Protection bits.  */</Line>
  <Line number="96"></Line>
  <Line number="97"># define S_ISUID	__S_ISUID       /* Set user ID on execution.  */</Line>
  <Line number="98"># define S_ISGID	__S_ISGID       /* Set group ID on execution.  */</Line>
  <Line number="99"></Line>
  <Line number="100"># if defined __USE_MISC || defined __USE_XOPEN</Line>
  <Line number="101">/* Save swapped text after use (sticky bit).  This is pretty well obsolete.  */</Line>
  <Line number="102">#  define S_ISVTX	__S_ISVTX</Line>
  <Line number="103"># endif</Line>
  <Line number="104"></Line>
  <Line number="105"># define S_IRUSR	__S_IREAD       /* Read by owner.  */</Line>
  <Line number="106"># define S_IWUSR	__S_IWRITE      /* Write by owner.  */</Line>
  <Line number="107"># define S_IXUSR	__S_IEXEC       /* Execute by owner.  */</Line>
  <Line number="108">/* Read, write, and execute by owner.  */</Line>
  <Line number="109"># define S_IRWXU	(__S_IREAD|__S_IWRITE|__S_IEXEC)</Line>
  <Line number="110"></Line>
  <Line number="111"># define S_IRGRP	(S_IRUSR &gt;&gt; 3)  /* Read by group.  */</Line>
  <Line number="112"># define S_IWGRP	(S_IWUSR &gt;&gt; 3)  /* Write by group.  */</Line>
  <Line number="113"># define S_IXGRP	(S_IXUSR &gt;&gt; 3)  /* Execute by group.  */</Line>
  <Line number="114">/* Read, write, and execute by group.  */</Line>
  <Line number="115"># define S_IRWXG	(S_IRWXU &gt;&gt; 3)</Line>
  <Line number="116"></Line>
  <Line number="117"># define S_IROTH	(S_IRGRP &gt;&gt; 3)  /* Read by others.  */</Line>
  <Line number="118"># define S_IWOTH	(S_IWGRP &gt;&gt; 3)  /* Write by others.  */</Line>
  <Line number="119"># define S_IXOTH	(S_IXGRP &gt;&gt; 3)  /* Execute by others.  */</Line>
  <Line number="120">/* Read, write, and execute by others.  */</Line>
  <Line number="121"># define S_IRWXO	(S_IRWXG &gt;&gt; 3)</Line>
  <Line number="122">#endif</Line>
  <Line number="123"></Line>
  <Line number="124">#ifdef	__USE_MISC</Line>
  <Line number="125"># ifndef R_OK			/* Verbatim from &lt;unistd.h&gt;.  Ugh.  */</Line>
  <Line number="126">/* Values for the second argument to access.</Line>
  <Line number="127">   These may be OR&apos;d together.  */</Line>
  <Line number="128">#  define R_OK	4		/* Test for read permission.  */</Line>
  <Line number="129">#  define W_OK	2		/* Test for write permission.  */</Line>
  <Line number="130">#  define X_OK	1		/* Test for execute permission.  */</Line>
  <Line number="131">#  define F_OK	0		/* Test for existence.  */</Line>
  <Line number="132"># endif</Line>
  <Line number="133">#endif /* Use misc.  */</Line>
  <Line number="134"></Line>
  <Line number="135">/* XPG wants the following symbols.   &lt;stdio.h&gt; has the same definitions.  */</Line>
  <Line number="136">#if defined __USE_XOPEN || defined __USE_XOPEN2K8</Line>
  <Line number="137"># define SEEK_SET	0	/* Seek from beginning of file.  */</Line>
  <Line number="138"># define SEEK_CUR	1	/* Seek from current position.  */</Line>
  <Line number="139"># define SEEK_END	2	/* Seek from end of file.  */</Line>
  <Line number="140">#endif	/* XPG */</Line>
  <Line number="141"></Line>
  <Line number="142">/* Do the file control operation described by CMD on FD.</Line>
  <Line number="143">   The remaining arguments are interpreted depending on CMD.</Line>
  <Line number="144"></Line>
  <Line number="145">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="146">   __THROW.  */</Line>
  <Line number="147">#ifndef __USE_FILE_OFFSET64</Line>
  <Line number="148">extern int fcntl (int __fd, int __cmd, ...);</Line>
  <Line number="149">#else</Line>
  <Line number="150"># ifdef __REDIRECT</Line>
  <Line number="151">extern int __REDIRECT (fcntl, (int __fd, int __cmd, ...), fcntl64);</Line>
  <Line number="152"># else</Line>
  <Line number="153">#  define fcntl fcntl64</Line>
  <Line number="154"># endif</Line>
  <Line number="155">#endif</Line>
  <Line number="156">#ifdef __USE_LARGEFILE64</Line>
  <Line number="157">extern int fcntl64 (int __fd, int __cmd, ...);</Line>
  <Line number="158">#endif</Line>
  <Line number="159"></Line>
  <Line number="160">/* Open FILE and return a new file descriptor for it, or -1 on error.</Line>
  <Line number="161">   OFLAG determines the type of access used.  If O_CREAT or O_TMPFILE is set</Line>
  <Line number="162">   in OFLAG, the third argument is taken as a `mode_t&apos;, the mode of the</Line>
  <Line number="163">   created file.</Line>
  <Line number="164"></Line>
  <Line number="165">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="166">   __THROW.  */</Line>
  <Line number="167">#ifndef __USE_FILE_OFFSET64</Line>
  <Line number="168">extern int open (const char *__file, int __oflag, ...) __nonnull ((1));</Line>
  <Line number="169">#else</Line>
  <Line number="170"># ifdef __REDIRECT</Line>
  <Line number="171">extern int __REDIRECT (open, (const char *__file, int __oflag, ...), open64)</Line>
  <Line number="172">     __nonnull ((1));</Line>
  <Line number="173"># else</Line>
  <Line number="174">#  define open open64</Line>
  <Line number="175"># endif</Line>
  <Line number="176">#endif</Line>
  <Line number="177">#ifdef __USE_LARGEFILE64</Line>
  <Line number="178">extern int open64 (const char *__file, int __oflag, ...) __nonnull ((1));</Line>
  <Line number="179">#endif</Line>
  <Line number="180"></Line>
  <Line number="181">#ifdef __USE_ATFILE</Line>
  <Line number="182">/* Similar to `open&apos; but a relative path name is interpreted relative to</Line>
  <Line number="183">   the directory for which FD is a descriptor.</Line>
  <Line number="184"></Line>
  <Line number="185">   NOTE: some other `openat&apos; implementation support additional functionality</Line>
  <Line number="186">   through this interface, especially using the O_XATTR flag.  This is not</Line>
  <Line number="187">   yet supported here.</Line>
  <Line number="188"></Line>
  <Line number="189">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="190">   __THROW.  */</Line>
  <Line number="191"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="192">extern int openat (int __fd, const char *__file, int __oflag, ...)</Line>
  <Line number="193">     __nonnull ((2));</Line>
  <Line number="194"># else</Line>
  <Line number="195">#  ifdef __REDIRECT</Line>
  <Line number="196">extern int __REDIRECT (openat, (int __fd, const char *__file, int __oflag,</Line>
  <Line number="197">				...), openat64) __nonnull ((2));</Line>
  <Line number="198">#  else</Line>
  <Line number="199">#   define openat openat64</Line>
  <Line number="200">#  endif</Line>
  <Line number="201"># endif</Line>
  <Line number="202"># ifdef __USE_LARGEFILE64</Line>
  <Line number="203">extern int openat64 (int __fd, const char *__file, int __oflag, ...)</Line>
  <Line number="204">     __nonnull ((2));</Line>
  <Line number="205"># endif</Line>
  <Line number="206">#endif</Line>
  <Line number="207"></Line>
  <Line number="208">/* Create and open FILE, with mode MODE.  This takes an `int&apos; MODE</Line>
  <Line number="209">   argument because that is what `mode_t&apos; will be widened to.</Line>
  <Line number="210"></Line>
  <Line number="211">   This function is a cancellation point and therefore not marked with</Line>
  <Line number="212">   __THROW.  */</Line>
  <Line number="213">#ifndef __USE_FILE_OFFSET64</Line>
  <Line number="214">extern int creat (const char *__file, mode_t __mode) __nonnull ((1));</Line>
  <Line number="215">#else</Line>
  <Line number="216"># ifdef __REDIRECT</Line>
  <Line number="217">extern int __REDIRECT (creat, (const char *__file, mode_t __mode),</Line>
  <Line number="218">		       creat64) __nonnull ((1));</Line>
  <Line number="219"># else</Line>
  <Line number="220">#  define creat creat64</Line>
  <Line number="221"># endif</Line>
  <Line number="222">#endif</Line>
  <Line number="223">#ifdef __USE_LARGEFILE64</Line>
  <Line number="224">extern int creat64 (const char *__file, mode_t __mode) __nonnull ((1));</Line>
  <Line number="225">#endif</Line>
  <Line number="226"></Line>
  <Line number="227">#if !defined F_LOCK &amp;&amp; (defined __USE_MISC || (defined __USE_XOPEN_EXTENDED \</Line>
  <Line number="228">					       &amp;&amp; !defined __USE_POSIX))</Line>
  <Line number="229">/* NOTE: These declarations also appear in &lt;unistd.h&gt;; be sure to keep both</Line>
  <Line number="230">   files consistent.  Some systems have them there and some here, and some</Line>
  <Line number="231">   software depends on the macros being defined without including both.  */</Line>
  <Line number="232"></Line>
  <Line number="233">/* `lockf&apos; is a simpler interface to the locking facilities of `fcntl&apos;.</Line>
  <Line number="234">   LEN is always relative to the current file position.</Line>
  <Line number="235">   The CMD argument is one of the following.  */</Line>
  <Line number="236"></Line>
  <Line number="237"># define F_ULOCK 0	/* Unlock a previously locked region.  */</Line>
  <Line number="238"># define F_LOCK  1	/* Lock a region for exclusive use.  */</Line>
  <Line number="239"># define F_TLOCK 2	/* Test and lock a region for exclusive use.  */</Line>
  <Line number="240"># define F_TEST  3	/* Test a region for other processes locks.  */</Line>
  <Line number="241"></Line>
  <Line number="242"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="243">extern int lockf (int __fd, int __cmd, off_t __len);</Line>
  <Line number="244"># else</Line>
  <Line number="245">#  ifdef __REDIRECT</Line>
  <Line number="246">extern int __REDIRECT (lockf, (int __fd, int __cmd, __off64_t __len), lockf64);</Line>
  <Line number="247">#  else</Line>
  <Line number="248">#   define lockf lockf64</Line>
  <Line number="249">#  endif</Line>
  <Line number="250"># endif</Line>
  <Line number="251"># ifdef __USE_LARGEFILE64</Line>
  <Line number="252">extern int lockf64 (int __fd, int __cmd, off64_t __len);</Line>
  <Line number="253"># endif</Line>
  <Line number="254">#endif</Line>
  <Line number="255"></Line>
  <Line number="256">#ifdef __USE_XOPEN2K</Line>
  <Line number="257">/* Advice the system about the expected behaviour of the application with</Line>
  <Line number="258">   respect to the file associated with FD.  */</Line>
  <Line number="259"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="260">extern int posix_fadvise (int __fd, off_t __offset, off_t __len,</Line>
  <Line number="261">			  int __advise) __THROW;</Line>
  <Line number="262"># else</Line>
  <Line number="263"> # ifdef __REDIRECT_NTH</Line>
  <Line number="264">extern int __REDIRECT_NTH (posix_fadvise, (int __fd, __off64_t __offset,</Line>
  <Line number="265">					   __off64_t __len, int __advise),</Line>
  <Line number="266">			   posix_fadvise64);</Line>
  <Line number="267">#  else</Line>
  <Line number="268">#   define posix_fadvise posix_fadvise64</Line>
  <Line number="269">#  endif</Line>
  <Line number="270"># endif</Line>
  <Line number="271"># ifdef __USE_LARGEFILE64</Line>
  <Line number="272">extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,</Line>
  <Line number="273">			    int __advise) __THROW;</Line>
  <Line number="274"># endif</Line>
  <Line number="275"></Line>
  <Line number="276"></Line>
  <Line number="277">/* Reserve storage for the data of the file associated with FD.</Line>
  <Line number="278"></Line>
  <Line number="279">   This function is a possible cancellation point and therefore not</Line>
  <Line number="280">   marked with __THROW.  */</Line>
  <Line number="281"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="282">extern int posix_fallocate (int __fd, off_t __offset, off_t __len);</Line>
  <Line number="283"># else</Line>
  <Line number="284"> # ifdef __REDIRECT</Line>
  <Line number="285">extern int __REDIRECT (posix_fallocate, (int __fd, __off64_t __offset,</Line>
  <Line number="286">					 __off64_t __len),</Line>
  <Line number="287">		       posix_fallocate64);</Line>
  <Line number="288">#  else</Line>
  <Line number="289">#   define posix_fallocate posix_fallocate64</Line>
  <Line number="290">#  endif</Line>
  <Line number="291"># endif</Line>
  <Line number="292"># ifdef __USE_LARGEFILE64</Line>
  <Line number="293">extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);</Line>
  <Line number="294"># endif</Line>
  <Line number="295">#endif</Line>
  <Line number="296"></Line>
  <Line number="297"></Line>
  <Line number="298">/* Define some inlines helping to catch common problems.  */</Line>
  <Line number="299">#if __USE_FORTIFY_LEVEL &gt; 0 &amp;&amp; defined __fortify_function \</Line>
  <Line number="300">    &amp;&amp; defined __va_arg_pack_len</Line>
  <Line number="301"># include &lt;bits/fcntl2.h&gt;</Line>
  <Line number="302">#endif</Line>
  <Line number="303"></Line>
  <Line number="304">__END_DECLS</Line>
  <Line number="305"></Line>
  <Line number="306">#endif /* fcntl.h  */</Line>
</SourceFile>
