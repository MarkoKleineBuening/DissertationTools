<SourceFile>
  <Line number="1">/* Definitions for POSIX 1003.1b-1993 (aka POSIX.4) scheduling interface.</Line>
  <Line number="2">   Copyright (C) 1996-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef	_SCHED_H</Line>
  <Line number="20">#define	_SCHED_H	1</Line>
  <Line number="21"></Line>
  <Line number="22">#include &lt;features.h&gt;</Line>
  <Line number="23"></Line>
  <Line number="24">/* Get type definitions.  */</Line>
  <Line number="25">#include &lt;bits/types.h&gt;</Line>
  <Line number="26"></Line>
  <Line number="27">#define __need_size_t</Line>
  <Line number="28">#define __need_NULL</Line>
  <Line number="29">#include &lt;stddef.h&gt;</Line>
  <Line number="30"></Line>
  <Line number="31">#include &lt;bits/types/time_t.h&gt;</Line>
  <Line number="32">#include &lt;bits/types/struct_timespec.h&gt;</Line>
  <Line number="33">#ifndef __USE_XOPEN2K</Line>
  <Line number="34"># include &lt;time.h&gt;</Line>
  <Line number="35">#endif</Line>
  <Line number="36"></Line>
  <Line number="37">#ifndef __pid_t_defined</Line>
  <Line number="38">typedef __pid_t pid_t;</Line>
  <Line number="39"># define __pid_t_defined</Line>
  <Line number="40">#endif</Line>
  <Line number="41"></Line>
  <Line number="42">/* Get system specific constant and data structure definitions.  */</Line>
  <Line number="43">#include &lt;bits/sched.h&gt;</Line>
  <Line number="44">#include &lt;bits/cpu-set.h&gt;</Line>
  <Line number="45"></Line>
  <Line number="46">/* Backward compatibility.  */</Line>
  <Line number="47">#define sched_priority    sched_priority</Line>
  <Line number="48">#define __sched_priority  sched_priority</Line>
  <Line number="49"></Line>
  <Line number="50"></Line>
  <Line number="51">__BEGIN_DECLS</Line>
  <Line number="52"></Line>
  <Line number="53">/* Set scheduling parameters for a process.  */</Line>
  <Line number="54">extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)</Line>
  <Line number="55">     __THROW;</Line>
  <Line number="56"></Line>
  <Line number="57">/* Retrieve scheduling parameters for a particular process.  */</Line>
  <Line number="58">extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __THROW;</Line>
  <Line number="59"></Line>
  <Line number="60">/* Set scheduling algorithm and/or parameters for a process.  */</Line>
  <Line number="61">extern int sched_setscheduler (__pid_t __pid, int __policy,</Line>
  <Line number="62">			       const struct sched_param *__param) __THROW;</Line>
  <Line number="63"></Line>
  <Line number="64">/* Retrieve scheduling algorithm for a particular purpose.  */</Line>
  <Line number="65">extern int sched_getscheduler (__pid_t __pid) __THROW;</Line>
  <Line number="66"></Line>
  <Line number="67">/* Yield the processor.  */</Line>
  <Line number="68">extern int sched_yield (void) __THROW;</Line>
  <Line number="69"></Line>
  <Line number="70">/* Get maximum priority value for a scheduler.  */</Line>
  <Line number="71">extern int sched_get_priority_max (int __algorithm) __THROW;</Line>
  <Line number="72"></Line>
  <Line number="73">/* Get minimum priority value for a scheduler.  */</Line>
  <Line number="74">extern int sched_get_priority_min (int __algorithm) __THROW;</Line>
  <Line number="75"></Line>
  <Line number="76">/* Get the SCHED_RR interval for the named process.  */</Line>
  <Line number="77">extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __THROW;</Line>
  <Line number="78"></Line>
  <Line number="79"></Line>
  <Line number="80">#ifdef __USE_GNU</Line>
  <Line number="81">/* Access macros for `cpu_set&apos;.  */</Line>
  <Line number="82"># define CPU_SETSIZE __CPU_SETSIZE</Line>
  <Line number="83"># define CPU_SET(cpu, cpusetp)	 __CPU_SET_S (cpu, sizeof (cpu_set_t), cpusetp)</Line>
  <Line number="84"># define CPU_CLR(cpu, cpusetp)	 __CPU_CLR_S (cpu, sizeof (cpu_set_t), cpusetp)</Line>
  <Line number="85"># define CPU_ISSET(cpu, cpusetp) __CPU_ISSET_S (cpu, sizeof (cpu_set_t), \</Line>
  <Line number="86">						cpusetp)</Line>
  <Line number="87"># define CPU_ZERO(cpusetp)	 __CPU_ZERO_S (sizeof (cpu_set_t), cpusetp)</Line>
  <Line number="88"># define CPU_COUNT(cpusetp)	 __CPU_COUNT_S (sizeof (cpu_set_t), cpusetp)</Line>
  <Line number="89"></Line>
  <Line number="90"># define CPU_SET_S(cpu, setsize, cpusetp)   __CPU_SET_S (cpu, setsize, cpusetp)</Line>
  <Line number="91"># define CPU_CLR_S(cpu, setsize, cpusetp)   __CPU_CLR_S (cpu, setsize, cpusetp)</Line>
  <Line number="92"># define CPU_ISSET_S(cpu, setsize, cpusetp) __CPU_ISSET_S (cpu, setsize, \</Line>
  <Line number="93">							   cpusetp)</Line>
  <Line number="94"># define CPU_ZERO_S(setsize, cpusetp)	    __CPU_ZERO_S (setsize, cpusetp)</Line>
  <Line number="95"># define CPU_COUNT_S(setsize, cpusetp)	    __CPU_COUNT_S (setsize, cpusetp)</Line>
  <Line number="96"></Line>
  <Line number="97"># define CPU_EQUAL(cpusetp1, cpusetp2) \</Line>
  <Line number="98">  __CPU_EQUAL_S (sizeof (cpu_set_t), cpusetp1, cpusetp2)</Line>
  <Line number="99"># define CPU_EQUAL_S(setsize, cpusetp1, cpusetp2) \</Line>
  <Line number="100">  __CPU_EQUAL_S (setsize, cpusetp1, cpusetp2)</Line>
  <Line number="101"></Line>
  <Line number="102"># define CPU_AND(destset, srcset1, srcset2) \</Line>
  <Line number="103">  __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, &amp;)</Line>
  <Line number="104"># define CPU_OR(destset, srcset1, srcset2) \</Line>
  <Line number="105">  __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, |)</Line>
  <Line number="106"># define CPU_XOR(destset, srcset1, srcset2) \</Line>
  <Line number="107">  __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, ^)</Line>
  <Line number="108"># define CPU_AND_S(setsize, destset, srcset1, srcset2) \</Line>
  <Line number="109">  __CPU_OP_S (setsize, destset, srcset1, srcset2, &amp;)</Line>
  <Line number="110"># define CPU_OR_S(setsize, destset, srcset1, srcset2) \</Line>
  <Line number="111">  __CPU_OP_S (setsize, destset, srcset1, srcset2, |)</Line>
  <Line number="112"># define CPU_XOR_S(setsize, destset, srcset1, srcset2) \</Line>
  <Line number="113">  __CPU_OP_S (setsize, destset, srcset1, srcset2, ^)</Line>
  <Line number="114"></Line>
  <Line number="115"># define CPU_ALLOC_SIZE(count) __CPU_ALLOC_SIZE (count)</Line>
  <Line number="116"># define CPU_ALLOC(count) __CPU_ALLOC (count)</Line>
  <Line number="117"># define CPU_FREE(cpuset) __CPU_FREE (cpuset)</Line>
  <Line number="118"></Line>
  <Line number="119"></Line>
  <Line number="120">/* Set the CPU affinity for a task */</Line>
  <Line number="121">extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,</Line>
  <Line number="122">			      const cpu_set_t *__cpuset) __THROW;</Line>
  <Line number="123"></Line>
  <Line number="124">/* Get the CPU affinity for a task */</Line>
  <Line number="125">extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,</Line>
  <Line number="126">			      cpu_set_t *__cpuset) __THROW;</Line>
  <Line number="127">#endif</Line>
  <Line number="128"></Line>
  <Line number="129">__END_DECLS</Line>
  <Line number="130"></Line>
  <Line number="131">#endif /* sched.h */</Line>
</SourceFile>
