<SourceFile>
  <Line number="1">/* Macros and inline functions to swap the order of bytes in integer values.</Line>
  <Line number="2">   Copyright (C) 1997-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#if !defined _BYTESWAP_H &amp;&amp; !defined _NETINET_IN_H &amp;&amp; !defined _ENDIAN_H</Line>
  <Line number="20"># error &quot;Never use &lt;bits/byteswap.h&gt; directly; include &lt;byteswap.h&gt; instead.&quot;</Line>
  <Line number="21">#endif</Line>
  <Line number="22"></Line>
  <Line number="23">#ifndef _BITS_BYTESWAP_H</Line>
  <Line number="24">#define _BITS_BYTESWAP_H 1</Line>
  <Line number="25"></Line>
  <Line number="26">#include &lt;features.h&gt;</Line>
  <Line number="27">#include &lt;bits/types.h&gt;</Line>
  <Line number="28"></Line>
  <Line number="29">/* Swap bytes in 16-bit value.  */</Line>
  <Line number="30">#define __bswap_constant_16(x)					\</Line>
  <Line number="31">  ((__uint16_t) ((((x) &gt;&gt; 8) &amp; 0xff) | (((x) &amp; 0xff) &lt;&lt; 8)))</Line>
  <Line number="32"></Line>
  <Line number="33">static __inline __uint16_t</Line>
  <Line number="34">__bswap_16 (__uint16_t __bsx)</Line>
  <Line number="35">{</Line>
  <Line number="36">#if __GNUC_PREREQ (4, 8)</Line>
  <Line number="37">  return __builtin_bswap16 (__bsx);</Line>
  <Line number="38">#else</Line>
  <Line number="39">  return <CheckRefs ids="8,9,11,12,13,15,10,14,7">__bswap_constant_16</CheckRefs> (__bsx);</Line>
  <Line number="40">#endif</Line>
  <Line number="41">}</Line>
  <Line number="42"></Line>
  <Line number="43">/* Swap bytes in 32-bit value.  */</Line>
  <Line number="44">#define __bswap_constant_32(x)					\</Line>
  <Line number="45">  ((((x) &amp; 0xff000000u) &gt;&gt; 24) | (((x) &amp; 0x00ff0000u) &gt;&gt; 8)	\</Line>
  <Line number="46">   | (((x) &amp; 0x0000ff00u) &lt;&lt; 8) | (((x) &amp; 0x000000ffu) &lt;&lt; 24))</Line>
  <Line number="47"></Line>
  <Line number="48">static __inline __uint32_t</Line>
  <Line number="49">__bswap_32 (__uint32_t __bsx)</Line>
  <Line number="50">{</Line>
  <Line number="51">#if __GNUC_PREREQ (4, 3)</Line>
  <Line number="52">  return __builtin_bswap32 (__bsx);</Line>
  <Line number="53">#else</Line>
  <Line number="54">  return <CheckRefs ids="17,19,18,16">__bswap_constant_32</CheckRefs> (__bsx);</Line>
  <Line number="55">#endif</Line>
  <Line number="56">}</Line>
  <Line number="57"></Line>
  <Line number="58">/* Swap bytes in 64-bit value.  */</Line>
  <Line number="59">#define __bswap_constant_64(x)			\</Line>
  <Line number="60">  ((((x) &amp; 0xff00000000000000ull) &gt;&gt; 56)	\</Line>
  <Line number="61">   | (((x) &amp; 0x00ff000000000000ull) &gt;&gt; 40)	\</Line>
  <Line number="62">   | (((x) &amp; 0x0000ff0000000000ull) &gt;&gt; 24)	\</Line>
  <Line number="63">   | (((x) &amp; 0x000000ff00000000ull) &gt;&gt; 8)	\</Line>
  <Line number="64">   | (((x) &amp; 0x00000000ff000000ull) &lt;&lt; 8)	\</Line>
  <Line number="65">   | (((x) &amp; 0x0000000000ff0000ull) &lt;&lt; 24)	\</Line>
  <Line number="66">   | (((x) &amp; 0x000000000000ff00ull) &lt;&lt; 40)	\</Line>
  <Line number="67">   | (((x) &amp; 0x00000000000000ffull) &lt;&lt; 56))</Line>
  <Line number="68"></Line>
  <Line number="69">__extension__ static __inline __uint64_t</Line>
  <Line number="70">__bswap_64 (__uint64_t __bsx)</Line>
  <Line number="71">{</Line>
  <Line number="72">#if __GNUC_PREREQ (4, 3)</Line>
  <Line number="73">  return __builtin_bswap64 (__bsx);</Line>
  <Line number="74">#else</Line>
  <Line number="75">  return <CheckRefs ids="36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20">__bswap_constant_64</CheckRefs> (__bsx);</Line>
  <Line number="76">#endif</Line>
  <Line number="77">}</Line>
  <Line number="78"></Line>
  <Line number="79">#endif /* _BITS_BYTESWAP_H */</Line>
</SourceFile>
