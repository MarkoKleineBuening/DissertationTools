runJobCommand
precondition analysis with entry:mat_creat
arguents: child
arguents: job
arguents: mode
arguents: precondition
handleJobInSeparateProcess0

Checking job 93 ...about to run job:
preconNumber: 5, 1

  Running Model Checker with 1 checks ...entry: mat_creat, functionName: _mat_creat
  <badref> = call double** @qpr.precondition._mat_creat(i32 %0, i32 %1)
entry: mat_creat, functionName: _mat_creat
entry: mat_creat, functionName: mat_creat
try
try ready

    SMTSolver : stp
    CallStackBound : 0
    StopEncodingAfterCheckLoop : 0
    LoopUnrollBound : 12
    HavocLimit : 0
    PreconditionNumber : 5
    PreconditionLocation : jobs/93
    TimeOut : 300
    InitializedGlobals : false
    IgnoreMissingFunctions : false
    StopEncodingAfterCheck : false
    OverApproxVaArgs : false
    PreconditionCheckMemory : false
    PreconditionOnlyArguments : trueI [0] lib/ModelChecker/Verifier.cpp:247 | EntryPoint : mat_creat
m_checker->run()

    Performing bounded model checking ...
      Performing pre-transformations on LLVM IR ...        0 sec [DONE]
        
      Performing logical encoding ...TODO MKB implement precondition handling: IE
Reading in precondition at: jobs/93/precondition__mat_creat.txt
preconFile: jobs/93/precondition__mat_creat.txt
ref: [underoverapprox]name of function arguments, argValue:  
ref: [underoverapprox]name of function arguments, argValue:  
name of function arguments line
param: i32 %arg0:-1812662913
---name: i32 %arg0, value: -1812662913.
integer, char or other simple types
name: i32 %arg0
assuming that there are not more then 10 arguments
nameIndex: 0
nameID: 0
argument name: arg0
value: -1812662913
###new bool cond: bool % = compare(%arg0, %i32__2482304383)
param:  i32 %arg1:-2147463040
---name:  i32 %arg1, value: -2147463040.
integer, char or other simple types
name:  i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: -2147463040
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg0:-2088894952
---name: i32 %arg0, value: -2088894952.
integer, char or other simple types
name: i32 %arg0
assuming that there are not more then 10 arguments
nameIndex: 0
nameID: 0
argument name: arg0
value: -2088894952
###new bool cond: bool % = compare(%arg0, %i32__2206072344)
param:  i32 %arg1:536870949
---name:  i32 %arg1, value: 536870949.
integer, char or other simple types
name:  i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 536870949
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg0:-300465623
---name: i32 %arg0, value: -300465623.
integer, char or other simple types
name: i32 %arg0
assuming that there are not more then 10 arguments
nameIndex: 0
nameID: 0
argument name: arg0
value: -300465623
###new bool cond: bool % = compare(%arg0, %i32__3994501673)
param:  i32 %arg1:-513360895
---name:  i32 %arg1, value: -513360895.
integer, char or other simple types
name:  i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: -513360895
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg0:-1812594952
---name: i32 %arg0, value: -1812594952.
integer, char or other simple types
name: i32 %arg0
assuming that there are not more then 10 arguments
nameIndex: 0
nameID: 0
argument name: arg0
value: -1812594952
###new bool cond: bool % = compare(%arg0, %i32__2482372344)
param:  i32 %arg1:-2147483647
---name:  i32 %arg1, value: -2147483647.
integer, char or other simple types
name:  i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: -2147483647
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg0:-300464711
---name: i32 %arg0, value: -300464711.
integer, char or other simple types
name: i32 %arg0
assuming that there are not more then 10 arguments
nameIndex: 0
nameID: 0
argument name: arg0
value: -300464711
###new bool cond: bool % = compare(%arg0, %i32__3994502585)
param:  i32 %arg1:-513361631
---name:  i32 %arg1, value: -513361631.
integer, char or other simple types
name:  i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: -513361631
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
Writing precondition type at: jobs/93/precondition_type_mat_creat.txt

Type of Precondition:
[underoverapprox]
precondition found, end encoding
                      0 sec [DONE]
        Number of expressions:                          6086
        after encoding

      5 assertions before transformations (5 custom).

      Performing formula transformations ...
        Simplifier
          Number of rewrites                              94
        Fixed Memory Address Assigner
          Number of moved ops                              5
          Number of rewrites                             364
        Simplifier
          Number of moved ops                              0
          Number of rewrites                            2730
        Memory Model Encoder
          Number of moved ops                              0
          Number of rewrites                               0
        Simplifier
          Number of rewrites                               0
        Simplifier
          Number of rewrites                               0
        ToASC Analyser
          Memcpy/memset found                             no
        Byte-Based Memory Creator
        Instantiation-Based ToASC Simplifier
        Simplifier
        FP Abstraction
          Number of rewrites                               0
        Simplifier
          Number of rewrites                               0
                                                           0 sec [DONE]
        
      5 assertions remain after transformations (5 custom).
after rewriteFormula
after sanityCheckFormula

      Running SMT solver (STP with MiniSat) ...            0 sec [DONE]
        
                                                           0 sec [DONE]
      after performing Check
evaluateCheckerResultsViaRefinementLoop
checker.getResult() is Trace
checkOnlyPrecon: 1, size:1
setCheckToUnsafe for precondition Instruction
checkID: 1435
setCheckToUnsafe
set check to unsafe
getCheckerResultAfterUpdatingMarker
failingInst is nullptr
Preconditions internal: 
i32 %arg0:-300465623; (i32 %arg0:3994501673)i32 %arg1:-513360895; (i32 %arg1:3781606401)i32 %arg2:arbitrary; 
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg0 = nondef() : -300465623
assumePair: i32 %arg1 = nondef() : -513360895
assumePair: i32 %arg2 = nondef() : 0
error: No matching SMT expression for Op %arg2 (nondef) found!
    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst:   %2 = call double** @qpr.precondition._mat_creat(i32 %arg0, i32 %arg1), !dbg !1389
Preconditions internal: 
i32 %arg0:-1812662913; (i32 %arg0:2482304383)i32 %arg1:-2147463040; (i32 %arg1:2147504256)i32 %arg2:arbitrary; 
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg0 = nondef() : -1812662913
assumePair: i32 %arg1 = nondef() : -2147463040
assumePair: i32 %arg2 = nondef() : 0
error: No matching SMT expression for Op %arg2 (nondef) found!
    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst is nullptr
Preconditions internal: 
i32 %arg0:-2088894952; (i32 %arg0:2206072344)i32 %arg1:536870949; (i32 %arg1:536870949)i32 %arg2:arbitrary; 
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg0 = nondef() : -2088894952
assumePair: i32 %arg1 = nondef() : 536870949
assumePair: i32 %arg2 = nondef() : 0
error: No matching SMT expression for Op %arg2 (nondef) found!
    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst is nullptr
Preconditions internal: 
i32 %arg0:-300464711; (i32 %arg0:3994502585)i32 %arg1:-513361631; (i32 %arg1:3781605665)i32 %arg2:arbitrary; 
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg0 = nondef() : -300464711
assumePair: i32 %arg1 = nondef() : -513361631
assumePair: i32 %arg2 = nondef() : 0
error: No matching SMT expression for Op %arg2 (nondef) found!
    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst is nullptr
Preconditions internal: 
i32 %arg0:-1812594952; (i32 %arg0:2482372344)i32 %arg1:-2147483647; (i32 %arg1:2147483649)i32 %arg2:arbitrary; 
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg0 = nondef() : -1812594952
assumePair: i32 %arg1 = nondef() : -2147483647
assumePair: i32 %arg2 = nondef() : 0
error: No matching SMT expression for Op %arg2 (nondef) found!
    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      name of function arguments: Writing precondition at: jobs/93/precondition_mat_creat.txt

Generated Preconditions:
[underoverapprox]name of function arguments: 
i32 %arg0:-300465623; i32 %arg1:-513360895; i32 %arg2:arbitrary; 
i32 %arg0:-1812662913; i32 %arg1:-2147463040; i32 %arg2:arbitrary; 
i32 %arg0:-2088894952; i32 %arg1:536870949; i32 %arg2:arbitrary; 
i32 %arg0:-300464711; i32 %arg1:-513361631; i32 %arg2:arbitrary; 
i32 %arg0:-1812594952; i32 %arg1:-2147483647; i32 %arg2:arbitrary; 

                                                           0 sec [DONE]
    allunsafe
    
                                                           0 sec [DONE]
  