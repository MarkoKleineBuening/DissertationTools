<SourceFile>
  <Line number="1">/******************************************************************************</Line>
  <Line number="2">* FILE: control.c</Line>
  <Line number="3">* DESCRIPTION:</Line>
  <Line number="4">*   </Line>
  <Line number="5">*   </Line>
  <Line number="6">*</Line>
  <Line number="7">* SOURCE: </Line>
  <Line number="8">* LAST REVISED: 10/11/05 Jung Soon Jang</Line>
  <Line number="9">******************************************************************************/</Line>
  <Line number="10">#include &lt;stdio.h&gt;</Line>
  <Line number="11">#include &lt;sys/time.h&gt;</Line>
  <Line number="12">#include &lt;stdlib.h&gt;</Line>
  <Line number="13">#include &lt;math.h&gt;</Line>
  <Line number="14">#include &quot;globaldefs.h&quot;</Line>
  <Line number="15"></Line>
  <Line number="16">void send_servo_cmd(word cnt_cmd[3]);</Line>
  <Line number="17">double satfun(double dta);</Line>
  <Line number="18">extern double wraparound(double dta);</Line>
  <Line number="19"></Line>
  <Line number="20">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="21">//pre-defined constant</Line>
  <Line number="22">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="23">#define	cdT	      0.04   	     // 25 Hz </Line>
  <Line number="24">#define deg2servo     819    	     // 65536/80deg.</Line>
  <Line number="25">#define servo_mid_pos 32768          // middle position of the servos</Line>
  <Line number="26">#define sign(arg)    (arg&gt;=0 ? 1:-1)</Line>
  <Line number="27"></Line>
  <Line number="28"></Line>
  <Line number="29"></Line>
  <Line number="30">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="31">//global variables</Line>
  <Line number="32">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="33">static double sum[5]={0.,};</Line>
  <Line number="34">static struct servo    servopos;</Line>
  <Line number="35">static struct imu      imuval;</Line>
  <Line number="36">static struct gps      gpsval;</Line>
  <Line number="37">static struct nav      navval;</Line>
  <Line number="38">enum   	      modedefs {pitch_mode,roll_mode,heading_mode,altitude_mode,speed_mode,waypoint_mode};</Line>
  <Line number="39">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="40">//external global variables</Line>
  <Line number="41">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="42">extern int    sPort0;</Line>
  <Line number="43">extern short  screen_on;</Line>
  <Line number="44">extern short  whichmode[6];</Line>
  <Line number="45">extern double pitch_gain[3],roll_gain[3];</Line>
  <Line number="46">extern double heading_gain[3],alt_gain[3],pos_gain[3];</Line>
  <Line number="47">extern int    numofwaypoints;     </Line>
  <Line number="48">extern double waypoints[8][2];</Line>
  <Line number="49"></Line>
  <Line number="50"></Line>
  <Line number="51">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="52">//control code</Line>
  <Line number="53">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="54">void control_uav(short init_done, short flight_mode)</Line>
  <Line number="55">{</Line>
  <Line number="56">   short   i=<CheckRefs ids="1137">0</CheckRefs>;</Line>
  <Line number="57">   word    cnt_cmd[3]={<CheckRefs ids="1138">0</CheckRefs>,};		 	 //elevator,aileron,throttle command</Line>
  <Line number="58">   double  de=<CheckRefs ids="1139">0</CheckRefs>,da=<CheckRefs ids="1140">0</CheckRefs>,dthr=<CheckRefs ids="1141">0</CheckRefs>;                     //temp. variables</Line>
  <Line number="59">   double  dthe,dphi,dpsi,dh;                    //perturbed variables</Line>
  <Line number="60">   double  dthe_ref,dphi_ref,dpsi_ref=<CheckRefs ids="1142">0</CheckRefs>,dh_ref=<CheckRefs ids="1143">0</CheckRefs>;//perturbed reference variable</Line>
  <Line number="61">   double  tmpr=<CheckRefs ids="1144">0</CheckRefs>,tmpr1=<CheckRefs ids="1145">0</CheckRefs>,nav_psi=<CheckRefs ids="1146">0</CheckRefs>;</Line>
  <Line number="62">   double  Ps_f=<CheckRefs ids="1147">0</CheckRefs>;</Line>
  <Line number="63">   static  short anti_windup[4]={<CheckRefs ids="1148">1</CheckRefs>,};</Line>
  <Line number="64">   static short count = <CheckRefs ids="1149">0</CheckRefs>,k=<CheckRefs ids="1150">0</CheckRefs>; </Line>
  <Line number="65">   static double Ps_f_p=<CheckRefs ids="1151">0</CheckRefs>;</Line>
  <Line number="66"></Line>
  <Line number="67">   if (<CheckRefs ids="1152">init_done</CheckRefs> == <CheckRefs ids="1153">FALSE</CheckRefs>) 		         //initialization:</Line>
  <Line number="68">   {</Line>
  <Line number="69">	servopos = servopacket;  	         // save the last servo positions</Line>
  <Line number="70">        imuval   = imupacket;                    // save the last attitude</Line>
  <Line number="71">        gpsval   = gpspacket;                    // save the last gps</Line>
  <Line number="72">        navval   = navpacket;                    // save the last nav</Line>
  <Line number="73">        Ps_f_p   <CheckRefs ids="1154">=</CheckRefs> 0.0;			</Line>
  <Line number="74">        sum[0<CheckRefs ids="1156">]</CheckRefs><CheckRefs ids="1155">=</CheckRefs>sum[1<CheckRefs ids="1158">]</CheckRefs><CheckRefs ids="1157">=</CheckRefs>sum[2<CheckRefs ids="1160">]</CheckRefs><CheckRefs ids="1159">=</CheckRefs>sum[3<CheckRefs ids="1162">]</CheckRefs><CheckRefs ids="1161">=</CheckRefs>sum[4<CheckRefs ids="1164">]</CheckRefs><CheckRefs ids="1163">=</CheckRefs> 0.;  // initialize integral sums</Line>
  <Line number="75">        anti_windup[0<CheckRefs ids="1165">]</CheckRefs>=anti_windup[1<CheckRefs ids="1166">]</CheckRefs>=<CheckRefs ids="1167">0</CheckRefs>;</Line>
  <Line number="76">        anti_windup[2<CheckRefs ids="1168">]</CheckRefs>=anti_windup[3<CheckRefs ids="1169">]</CheckRefs>=<CheckRefs ids="1170">0</CheckRefs>;</Line>
  <Line number="77">        k        = <CheckRefs ids="1171">0</CheckRefs>;</Line>
  <Line number="78">        //printf(&quot;\n[control]::control is initialized..!\n&quot;);</Line>
  <Line number="79">   }</Line>
  <Line number="80">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="81">   //obtain the purturbed states</Line>
  <Line number="82">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="83">   dthe   <CheckRefs ids="1172">=</CheckRefs> imupacket.the; </Line>
  <Line number="84">   dphi   <CheckRefs ids="1173">=</CheckRefs> imupacket.phi;</Line>
  <Line number="85"></Line>
  <Line number="86">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="87">   //pass through the first order low pass filter to remove noise</Line>
  <Line number="88">   //G(s)=1/(tau s + 1), tau =0.4;</Line>
  <Line number="89">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="90">   Ps_f   <CheckRefs ids="1174">=</CheckRefs> 0.9048<CheckRefs ids="1176">*</CheckRefs>Ps_f_p <CheckRefs ids="1175">+</CheckRefs> 0.09516<CheckRefs ids="1177">*</CheckRefs>imupacket.Ps;</Line>
  <Line number="91">   Ps_f_p <CheckRefs ids="1178">=</CheckRefs> Ps_f;</Line>
  <Line number="92">   dh     <CheckRefs ids="1179">=</CheckRefs> Ps_f  <CheckRefs ids="1180">-</CheckRefs> imuval.Ps;</Line>
  <Line number="93"></Line>
  <Line number="94">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="95">   //outer-loop control: position control</Line>
  <Line number="96">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="97">   if(numofwaypoints &gt; 0 &amp;&amp; <CheckRefs ids="1181">whichmode</CheckRefs>[4<CheckRefs ids="1182">]</CheckRefs> == 1)</Line>
  <Line number="98">   {</Line>
  <Line number="99">       dpsi_ref <CheckRefs ids="1183">=</CheckRefs> atan2(waypoints[k<CheckRefs ids="1186">]</CheckRefs>[1<CheckRefs ids="1185">]</CheckRefs><CheckRefs ids="1184">-</CheckRefs>gpspacket.lon, waypoints[k<CheckRefs ids="1189">]</CheckRefs>[0<CheckRefs ids="1188">]</CheckRefs><CheckRefs ids="1187">-</CheckRefs>gpspacket.lat);</Line>
  <Line number="100">       //measure error</Line>
  <Line number="101">       tmpr <CheckRefs ids="1190">=</CheckRefs> sqrt( (waypoints[k<CheckRefs ids="1195">]</CheckRefs>[1<CheckRefs ids="1194">]</CheckRefs><CheckRefs ids="1193">-</CheckRefs>gpspacket.lon)<CheckRefs ids="1192">*</CheckRefs>(waypoints[k<CheckRefs ids="1198">]</CheckRefs>[1<CheckRefs ids="1197">]</CheckRefs><CheckRefs ids="1196">-</CheckRefs>gpspacket.lon)</Line>
  <Line number="102">                   <CheckRefs ids="1191">+</CheckRefs>(waypoints[k<CheckRefs ids="1202">]</CheckRefs>[0<CheckRefs ids="1201">]</CheckRefs><CheckRefs ids="1200">-</CheckRefs>gpspacket.lat)<CheckRefs ids="1199">*</CheckRefs>(waypoints[k<CheckRefs ids="1205">]</CheckRefs>[0<CheckRefs ids="1204">]</CheckRefs><CheckRefs ids="1203">-</CheckRefs>gpspacket.lat) );</Line>
  <Line number="103"></Line>
  <Line number="104">       //if error is in 15 meters</Line>
  <Line number="105">       if(tmpr &lt;= 2.0e-4) {</Line>
  <Line number="106">           if(<CheckRefs ids="1206">k</CheckRefs> == (numofwaypoints<CheckRefs ids="1207">-</CheckRefs>1)) k = <CheckRefs ids="1208">0</CheckRefs>; </Line>
  <Line number="107"> 	   else                        k = <CheckRefs ids="1211">k</CheckRefs> <CheckRefs ids="1210,1209">+</CheckRefs> 1;</Line>
  <Line number="108"></Line>
  <Line number="109">           sum[3<CheckRefs ids="1213">]</CheckRefs> <CheckRefs ids="1212">=</CheckRefs> <CheckRefs ids="1214">0</CheckRefs>;</Line>
  <Line number="110">       } </Line>
  <Line number="111">       whichmode[2<CheckRefs ids="1215">]</CheckRefs> = <CheckRefs ids="1216">1</CheckRefs>; //enable heading control</Line>
  <Line number="112">   }</Line>
  <Line number="113">   else dpsi_ref <CheckRefs ids="1217">=</CheckRefs> <CheckRefs ids="1218">0</CheckRefs>;</Line>
  <Line number="114"></Line>
  <Line number="115">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="116">   //outer-loop control: heading and altitude control</Line>
  <Line number="117">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="118">   //check whether the outer-loop controls are enabled</Line>
  <Line number="119">   //heading</Line>
  <Line number="120">   if (<CheckRefs ids="1219">whichmode</CheckRefs>[2<CheckRefs ids="1220">]</CheckRefs> == 1) {</Line>
  <Line number="121"></Line>
  <Line number="122">      //####################################################################</Line>
  <Line number="123">      // No.1 wraparound(dpsi_ref-nav_psi) needs to be bounded to</Line>
  <Line number="124">      //      keep control manageable.=&gt; sat(wraparound(dpsi_ref-nav_psi))</Line>
  <Line number="125">      // No.2 determine whether we want to use nav_psi or imu_psi</Line>
  <Line number="126">      //####################################################################</Line>
  <Line number="127">      if (pos_gain[1<CheckRefs ids="1221">]</CheckRefs> == <CheckRefs ids="1222">0</CheckRefs>)</Line>
  <Line number="128">         nav_psi  <CheckRefs ids="1223">=</CheckRefs> atan2(navpacket.ve, navpacket.vn);</Line>
  <Line number="129">      else</Line>
  <Line number="130">         nav_psi  <CheckRefs ids="1224">=</CheckRefs> imupacket.psi;</Line>
  <Line number="131"></Line>
  <Line number="132">      //wrap around and saturation</Line>
  <Line number="133">      tmpr     <CheckRefs ids="1225">=</CheckRefs> wraparound(dpsi_ref <CheckRefs ids="1226">-</CheckRefs> nav_psi); //sin(dpsi_ref - nav_psi);</Line>
  <Line number="134">      tmpr1    <CheckRefs ids="1227">=</CheckRefs> satfun(tmpr);</Line>
  <Line number="135">      //####################################################################</Line>
  <Line number="136">      </Line>
  <Line number="137">      sum[3<CheckRefs ids="1229">]</CheckRefs>  <CheckRefs ids="1228">+=</CheckRefs> tmpr1<CheckRefs ids="1231">*</CheckRefs>cdT<CheckRefs ids="1230">*</CheckRefs><CheckRefs ids="1232">anti_windup</CheckRefs>[2<CheckRefs ids="1233">]</CheckRefs>;</Line>
  <Line number="138"></Line>
  <Line number="139">      dphi_ref <CheckRefs ids="1234">=</CheckRefs> heading_gain[0<CheckRefs ids="1238">]</CheckRefs><CheckRefs ids="1237">*</CheckRefs>tmpr1</Line>
  <Line number="140">               <CheckRefs ids="1236">-</CheckRefs> heading_gain[2<CheckRefs ids="1240">]</CheckRefs><CheckRefs ids="1239">*</CheckRefs>imupacket.r</Line>
  <Line number="141">               <CheckRefs ids="1235">+</CheckRefs> heading_gain[1<CheckRefs ids="1242">]</CheckRefs><CheckRefs ids="1241">*</CheckRefs>sum[3<CheckRefs ids="1243">]</CheckRefs>;</Line>
  <Line number="142"></Line>
  <Line number="143">      //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="144">      //bound the command input</Line>
  <Line number="145">      //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="146">      if(fabs(dphi_ref) &gt; 0.61082) // 35 degrees</Line>
  <Line number="147">      {</Line>
  <Line number="148">	  dphi_ref <CheckRefs ids="1244">=</CheckRefs> <CheckRefs ids="1248,1247,1246">sign</CheckRefs>(dphi_ref)<CheckRefs ids="1245">*</CheckRefs>0.61082;</Line>
  <Line number="149">          anti_windup[2<CheckRefs ids="1249">]</CheckRefs> = <CheckRefs ids="1250">0</CheckRefs>;</Line>
  <Line number="150">      }</Line>
  <Line number="151">      else anti_windup[2<CheckRefs ids="1251">]</CheckRefs> = <CheckRefs ids="1252">1</CheckRefs>;</Line>
  <Line number="152">   }</Line>
  <Line number="153">   else dphi_ref <CheckRefs ids="1253">=</CheckRefs> <CheckRefs ids="1254">0</CheckRefs>;</Line>
  <Line number="154"></Line>
  <Line number="155">   //altitude</Line>
  <Line number="156">   if (<CheckRefs ids="1255">whichmode</CheckRefs>[3<CheckRefs ids="1256">]</CheckRefs> == 1) {</Line>
  <Line number="157">       dh_ref   <CheckRefs ids="1257">=</CheckRefs> 0.0;</Line>
  <Line number="158">       sum[2<CheckRefs ids="1259">]</CheckRefs>  <CheckRefs ids="1258">+=</CheckRefs> (dh_ref <CheckRefs ids="1262">-</CheckRefs> dh)<CheckRefs ids="1261">*</CheckRefs>cdT<CheckRefs ids="1260">*</CheckRefs><CheckRefs ids="1263">anti_windup</CheckRefs>[3<CheckRefs ids="1264">]</CheckRefs>;</Line>
  <Line number="159">       dthe_ref <CheckRefs ids="1265">=</CheckRefs> alt_gain[0<CheckRefs ids="1269">]</CheckRefs><CheckRefs ids="1268">*</CheckRefs>(dh_ref <CheckRefs ids="1270">-</CheckRefs> dh) </Line>
  <Line number="160">                <CheckRefs ids="1267">+</CheckRefs> alt_gain[2<CheckRefs ids="1272">]</CheckRefs><CheckRefs ids="1271">*</CheckRefs>gpspacket.vd</Line>
  <Line number="161">                <CheckRefs ids="1266">+</CheckRefs> alt_gain[1<CheckRefs ids="1274">]</CheckRefs><CheckRefs ids="1273">*</CheckRefs>sum[2<CheckRefs ids="1275">]</CheckRefs>;</Line>
  <Line number="162">      //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="163">      //bound the command input</Line>
  <Line number="164">      //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="165">      if(fabs(dthe_ref) &gt; 0.43630) // 25 degrees</Line>
  <Line number="166">      {</Line>
  <Line number="167">	  dthe_ref <CheckRefs ids="1276">=</CheckRefs> <CheckRefs ids="1280,1278,1279">sign</CheckRefs>(dthe_ref)<CheckRefs ids="1277">*</CheckRefs>0.43630;</Line>
  <Line number="168">          anti_windup[3<CheckRefs ids="1281">]</CheckRefs> = <CheckRefs ids="1282">0</CheckRefs>;</Line>
  <Line number="169">      }</Line>
  <Line number="170">      else anti_windup[3<CheckRefs ids="1283">]</CheckRefs> = <CheckRefs ids="1284">1</CheckRefs>;</Line>
  <Line number="171">    }</Line>
  <Line number="172">   else dthe_ref <CheckRefs ids="1285">=</CheckRefs> <CheckRefs ids="1286">0</CheckRefs>;	</Line>
  <Line number="173"></Line>
  <Line number="174">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="175">   //inner-loop control: pitch and roll attitude control</Line>
  <Line number="176">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="177">   sum[0<CheckRefs ids="1288">]</CheckRefs><CheckRefs ids="1287">+=</CheckRefs> (dthe_ref <CheckRefs ids="1291">-</CheckRefs> dthe)<CheckRefs ids="1290">*</CheckRefs>cdT<CheckRefs ids="1289">*</CheckRefs><CheckRefs ids="1292">anti_windup</CheckRefs>[0<CheckRefs ids="1293">]</CheckRefs>; //pitch integral</Line>
  <Line number="178">   sum[1<CheckRefs ids="1295">]</CheckRefs><CheckRefs ids="1294">+=</CheckRefs> (dphi_ref <CheckRefs ids="1298">-</CheckRefs> dphi)<CheckRefs ids="1297">*</CheckRefs>cdT<CheckRefs ids="1296">*</CheckRefs><CheckRefs ids="1299">anti_windup</CheckRefs>[1<CheckRefs ids="1300">]</CheckRefs>; //roll integral</Line>
  <Line number="179"></Line>
  <Line number="180">   </Line>
  <Line number="181">   de  <CheckRefs ids="1301">=</CheckRefs> pitch_gain[0<CheckRefs ids="1306">]</CheckRefs><CheckRefs ids="1305">*</CheckRefs>(dthe_ref <CheckRefs ids="1307">-</CheckRefs> dthe)	 // radian</Line>
  <Line number="182">       <CheckRefs ids="1304">+</CheckRefs> pitch_gain[2<CheckRefs ids="1309">]</CheckRefs><CheckRefs ids="1308">*</CheckRefs>(<CheckRefs ids="1310">-</CheckRefs>imupacket.q)</Line>
  <Line number="183">       <CheckRefs ids="1303">+</CheckRefs> pitch_gain[1<CheckRefs ids="1312">]</CheckRefs><CheckRefs ids="1311">*</CheckRefs>sum[0<CheckRefs ids="1313">]</CheckRefs></Line>
  <Line number="184">       <CheckRefs ids="1302">+</CheckRefs> pos_gain[0<CheckRefs ids="1315">]</CheckRefs><CheckRefs ids="1314">*</CheckRefs>fabs(dphi);		 // compensate for the altitude loss</Line>
  <Line number="185">   da  <CheckRefs ids="1316">=</CheckRefs> roll_gain[0<CheckRefs ids="1320">]</CheckRefs><CheckRefs ids="1319">*</CheckRefs>(dphi_ref <CheckRefs ids="1321">-</CheckRefs> dphi)          // radian</Line>
  <Line number="186">       <CheckRefs ids="1318">+</CheckRefs> roll_gain[2<CheckRefs ids="1323">]</CheckRefs><CheckRefs ids="1322">*</CheckRefs>(<CheckRefs ids="1324">-</CheckRefs>imupacket.p)</Line>
  <Line number="187">       <CheckRefs ids="1317">+</CheckRefs> roll_gain[1<CheckRefs ids="1326">]</CheckRefs><CheckRefs ids="1325">*</CheckRefs>sum[1<CheckRefs ids="1327">]</CheckRefs>;</Line>
  <Line number="188"></Line>
  <Line number="189">   //maximum deflection of control servos limited to 20 degrees</Line>
  <Line number="190">   if (fabs(de) &gt; 0.34904) { de <CheckRefs ids="1328">=</CheckRefs> <CheckRefs ids="1332,1330,1331">sign</CheckRefs>(de)<CheckRefs ids="1329">*</CheckRefs>0.34904; anti_windup[0<CheckRefs ids="1333">]</CheckRefs> = <CheckRefs ids="1334">0</CheckRefs>; }</Line>
  <Line number="191">   else anti_windup[0<CheckRefs ids="1335">]</CheckRefs> = <CheckRefs ids="1336">1</CheckRefs>;</Line>
  <Line number="192">   //maximum deflection of control servos limited to 15 degrees</Line>
  <Line number="193">   if (fabs(da) &gt; 0.26178) { da <CheckRefs ids="1337">=</CheckRefs> <CheckRefs ids="1341,1340,1339">sign</CheckRefs>(da)<CheckRefs ids="1338">*</CheckRefs>0.26178; anti_windup[1<CheckRefs ids="1342">]</CheckRefs> = <CheckRefs ids="1343">0</CheckRefs>; }</Line>
  <Line number="194">   else anti_windup[1<CheckRefs ids="1344">]</CheckRefs> = <CheckRefs ids="1345">1</CheckRefs>;</Line>
  <Line number="195"></Line>
  <Line number="196"></Line>
  <Line number="197">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="198">   //elervons:elevator and aileron mixing</Line>
  <Line number="199">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="200">   //elevator</Line>
  <Line number="201">   cnt_cmd[1<CheckRefs ids="1346">]</CheckRefs> = <CheckRefs ids="1349">servopos</CheckRefs>.chn[1<CheckRefs ids="1350">]</CheckRefs> <CheckRefs ids="1348,1347">+</CheckRefs> <CheckRefs ids="1351,1352">(</CheckRefs>word)(<CheckRefs ids="1355">deg2servo</CheckRefs><CheckRefs ids="1354">*</CheckRefs>(de<CheckRefs ids="1356">+</CheckRefs>da)<CheckRefs ids="1353">*</CheckRefs>57.3);</Line>
  <Line number="202">   //aileron</Line>
  <Line number="203">   cnt_cmd[0<CheckRefs ids="1357">]</CheckRefs> = <CheckRefs ids="1360">servopos</CheckRefs>.chn[0<CheckRefs ids="1361">]</CheckRefs> <CheckRefs ids="1359,1358">+</CheckRefs> <CheckRefs ids="1362,1363">(</CheckRefs>word)(<CheckRefs ids="1366">deg2servo</CheckRefs><CheckRefs ids="1365">*</CheckRefs>(da<CheckRefs ids="1367">-</CheckRefs>de)<CheckRefs ids="1364">*</CheckRefs>57.3);</Line>
  <Line number="204">   //throttle</Line>
  <Line number="205">   cnt_cmd[2<CheckRefs ids="1368">]</CheckRefs> = servopos.chn[2<CheckRefs ids="1369">]</CheckRefs>;</Line>
  <Line number="206"></Line>
  <Line number="207"></Line>
  <Line number="208">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="209">   //send commands</Line>
  <Line number="210">   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="211">   send_servo_cmd(cnt_cmd);</Line>
  <Line number="212"></Line>
  <Line number="213">   </Line>
  <Line number="214">}</Line>
  <Line number="215"></Line>
  <Line number="216">void send_servo_cmd(word cnt_cmd[3])</Line>
  <Line number="217">{</Line>
  <Line number="218">   //cnt_cmd[1] = ch1:elevator, cnt_cmd[0] = ch0:aileron, cnt_cmd[2] = ch2:throttle</Line>
  <Line number="219">   byte  data[24]={<CheckRefs ids="1370">0</CheckRefs>,};</Line>
  <Line number="220">   short i = <CheckRefs ids="1371">0</CheckRefs>, nbytes = <CheckRefs ids="1372">0</CheckRefs>;</Line>
  <Line number="221">   word  sum=<CheckRefs ids="1373">0</CheckRefs>;</Line>
  <Line number="222"></Line>
  <Line number="223">   data[0<CheckRefs ids="1374">]</CheckRefs> = <CheckRefs ids="1375">0x55</CheckRefs>; </Line>
  <Line number="224">   data[1<CheckRefs ids="1376">]</CheckRefs> = <CheckRefs ids="1377">0x55</CheckRefs>;</Line>
  <Line number="225">   data[2<CheckRefs ids="1378">]</CheckRefs> = <CheckRefs ids="1379">0x53</CheckRefs>;</Line>
  <Line number="226">   data[3<CheckRefs ids="1380">]</CheckRefs> = <CheckRefs ids="1381">0x53</CheckRefs>;</Line>
  <Line number="227"></Line>
  <Line number="228">   //aileron ch#0,elevator ch#1,throttle ch#2</Line>
  <Line number="229">   //aileron</Line>
  <Line number="230">   data[4<CheckRefs ids="1382">]</CheckRefs> = <CheckRefs ids="1383">(</CheckRefs>byte)(<CheckRefs ids="1387">cnt_cmd</CheckRefs>[0] <CheckRefs ids="1385,1384,1386">&gt;&gt;</CheckRefs> 8); </Line>
  <Line number="231">   data[5<CheckRefs ids="1388">]</CheckRefs> = <CheckRefs ids="1389">(</CheckRefs>byte)cnt_cmd[0];</Line>
  <Line number="232">   //elevator</Line>
  <Line number="233">   data[6<CheckRefs ids="1390">]</CheckRefs> = <CheckRefs ids="1391">(</CheckRefs>byte)(<CheckRefs ids="1395">cnt_cmd</CheckRefs>[1] <CheckRefs ids="1392,1393,1394">&gt;&gt;</CheckRefs> 8);</Line>
  <Line number="234">   data[7<CheckRefs ids="1396">]</CheckRefs> = <CheckRefs ids="1397">(</CheckRefs>byte)cnt_cmd[1];</Line>
  <Line number="235">   //throttle</Line>
  <Line number="236">   data[8<CheckRefs ids="1398">]</CheckRefs> = <CheckRefs ids="1399">(</CheckRefs>byte)(<CheckRefs ids="1403">cnt_cmd</CheckRefs>[2] <CheckRefs ids="1400,1401,1402">&gt;&gt;</CheckRefs> 8);</Line>
  <Line number="237">   data[9<CheckRefs ids="1404">]</CheckRefs> = <CheckRefs ids="1405">(</CheckRefs>byte)cnt_cmd[2];</Line>
  <Line number="238"></Line>
  <Line number="239">   //checksum</Line>
  <Line number="240">   sum = <CheckRefs ids="1406">0xa6</CheckRefs>; //0x53+0x53</Line>
  <Line number="241">   for(i=<CheckRefs ids="1407">4</CheckRefs>;<CheckRefs ids="1408">i</CheckRefs>&lt;22;i<CheckRefs ids="1409">++</CheckRefs>) sum <CheckRefs ids="1410">+=</CheckRefs> <CheckRefs ids="1411">data</CheckRefs>[i<CheckRefs ids="1412">]</CheckRefs>;</Line>
  <Line number="242">  </Line>
  <Line number="243">   data[22<CheckRefs ids="1413">]</CheckRefs> = <CheckRefs ids="1414">(</CheckRefs>byte)(<CheckRefs ids="1418">sum</CheckRefs> <CheckRefs ids="1415,1416,1417">&gt;&gt;</CheckRefs> 8);</Line>
  <Line number="244">   data[23<CheckRefs ids="1419">]</CheckRefs> = <CheckRefs ids="1420">(</CheckRefs>byte)sum;</Line>
  <Line number="245">   </Line>
  <Line number="246">   //sendout the command packet</Line>
  <Line number="247">   while (<CheckRefs ids="1421">nbytes</CheckRefs> != 24) nbytes = <CheckRefs ids="1422">write</CheckRefs>(sPort0,(char*)data, 24); </Line>
  <Line number="248"> </Line>
  <Line number="249">}</Line>
  <Line number="250">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="251">// saturation function : sets to 60 degrees</Line>
  <Line number="252">//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="253">double satfun(double dta)</Line>
  <Line number="254">{</Line>
  <Line number="255">   double temp=<CheckRefs ids="1423">0</CheckRefs>;</Line>
  <Line number="256">   </Line>
  <Line number="257">   if (fabs(dta) &gt; 1.04712)</Line>
  <Line number="258">   	temp <CheckRefs ids="1424">=</CheckRefs> <CheckRefs ids="1428,1426,1427">sign</CheckRefs>(dta)<CheckRefs ids="1425">*</CheckRefs>1.04712;</Line>
  <Line number="259">   else</Line>
  <Line number="260">   	temp <CheckRefs ids="1429">=</CheckRefs> dta;	</Line>
  <Line number="261">   		</Line>
  <Line number="262">   return temp;	</Line>
  <Line number="263">}	</Line>
</SourceFile>
