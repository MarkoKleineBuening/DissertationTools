<SourceFile>
  <Line number="1">#ifndef __siginfo_t_defined</Line>
  <Line number="2">#define __siginfo_t_defined 1</Line>
  <Line number="3"></Line>
  <Line number="4">#include &lt;bits/wordsize.h&gt;</Line>
  <Line number="5">#include &lt;bits/types.h&gt;</Line>
  <Line number="6">#include &lt;bits/types/__sigval_t.h&gt;</Line>
  <Line number="7"></Line>
  <Line number="8">#define __SI_MAX_SIZE	128</Line>
  <Line number="9">#if __WORDSIZE == 64</Line>
  <Line number="10"># define __SI_PAD_SIZE	((__SI_MAX_SIZE / sizeof (int)) - 4)</Line>
  <Line number="11">#else</Line>
  <Line number="12"># define __SI_PAD_SIZE	((__SI_MAX_SIZE / sizeof (int)) - 3)</Line>
  <Line number="13">#endif</Line>
  <Line number="14"></Line>
  <Line number="15">/* Some fields of siginfo_t have architecture-specific variations.  */</Line>
  <Line number="16">#include &lt;bits/siginfo-arch.h&gt;</Line>
  <Line number="17">#ifndef __SI_ALIGNMENT</Line>
  <Line number="18"># define __SI_ALIGNMENT		/* nothing */</Line>
  <Line number="19">#endif</Line>
  <Line number="20">#ifndef __SI_BAND_TYPE</Line>
  <Line number="21"># define __SI_BAND_TYPE		long int</Line>
  <Line number="22">#endif</Line>
  <Line number="23">#ifndef __SI_CLOCK_T</Line>
  <Line number="24"># define __SI_CLOCK_T		__clock_t</Line>
  <Line number="25">#endif</Line>
  <Line number="26">#ifndef __SI_ERRNO_THEN_CODE</Line>
  <Line number="27"># define __SI_ERRNO_THEN_CODE	1</Line>
  <Line number="28">#endif</Line>
  <Line number="29">#ifndef __SI_HAVE_SIGSYS</Line>
  <Line number="30"># define __SI_HAVE_SIGSYS	1</Line>
  <Line number="31">#endif</Line>
  <Line number="32">#ifndef __SI_SIGFAULT_ADDL</Line>
  <Line number="33"># define __SI_SIGFAULT_ADDL	/* nothing */</Line>
  <Line number="34">#endif</Line>
  <Line number="35"></Line>
  <Line number="36">typedef struct</Line>
  <Line number="37">  {</Line>
  <Line number="38">    int si_signo;		/* Signal number.  */</Line>
  <Line number="39">#if __SI_ERRNO_THEN_CODE</Line>
  <Line number="40">    int si_errno;		/* If non-zero, an errno value associated with</Line>
  <Line number="41">				   this signal, as defined in &lt;errno.h&gt;.  */</Line>
  <Line number="42">    int si_code;		/* Signal code.  */</Line>
  <Line number="43">#else</Line>
  <Line number="44">    int si_code;</Line>
  <Line number="45">    int si_errno;</Line>
  <Line number="46">#endif</Line>
  <Line number="47">#if __WORDSIZE == 64</Line>
  <Line number="48">    int __pad0;			/* Explicit padding.  */</Line>
  <Line number="49">#endif</Line>
  <Line number="50"></Line>
  <Line number="51">    union</Line>
  <Line number="52">      {</Line>
  <Line number="53">	int _pad[<CheckRefs ids="643,644,645,646">__SI_PAD_SIZE</CheckRefs>];</Line>
  <Line number="54"></Line>
  <Line number="55">	 /* kill().  */</Line>
  <Line number="56">	struct</Line>
  <Line number="57">	  {</Line>
  <Line number="58">	    __pid_t si_pid;	/* Sending process ID.  */</Line>
  <Line number="59">	    __uid_t si_uid;	/* Real user ID of sending process.  */</Line>
  <Line number="60">	  } _kill;</Line>
  <Line number="61"></Line>
  <Line number="62">	/* POSIX.1b timers.  */</Line>
  <Line number="63">	struct</Line>
  <Line number="64">	  {</Line>
  <Line number="65">	    int si_tid;		/* Timer ID.  */</Line>
  <Line number="66">	    int si_overrun;	/* Overrun count.  */</Line>
  <Line number="67">	    __sigval_t si_sigval;	/* Signal value.  */</Line>
  <Line number="68">	  } _timer;</Line>
  <Line number="69"></Line>
  <Line number="70">	/* POSIX.1b signals.  */</Line>
  <Line number="71">	struct</Line>
  <Line number="72">	  {</Line>
  <Line number="73">	    __pid_t si_pid;	/* Sending process ID.  */</Line>
  <Line number="74">	    __uid_t si_uid;	/* Real user ID of sending process.  */</Line>
  <Line number="75">	    __sigval_t si_sigval;	/* Signal value.  */</Line>
  <Line number="76">	  } _rt;</Line>
  <Line number="77"></Line>
  <Line number="78">	/* SIGCHLD.  */</Line>
  <Line number="79">	struct</Line>
  <Line number="80">	  {</Line>
  <Line number="81">	    __pid_t si_pid;	/* Which child.	 */</Line>
  <Line number="82">	    __uid_t si_uid;	/* Real user ID of sending process.  */</Line>
  <Line number="83">	    int si_status;	/* Exit value or signal.  */</Line>
  <Line number="84">	    __SI_CLOCK_T si_utime;</Line>
  <Line number="85">	    __SI_CLOCK_T si_stime;</Line>
  <Line number="86">	  } _sigchld;</Line>
  <Line number="87"></Line>
  <Line number="88">	/* SIGILL, SIGFPE, SIGSEGV, SIGBUS.  */</Line>
  <Line number="89">	struct</Line>
  <Line number="90">	  {</Line>
  <Line number="91">	    void *si_addr;	    /* Faulting insn/memory ref.  */</Line>
  <Line number="92">	    __SI_SIGFAULT_ADDL</Line>
  <Line number="93">	    short int si_addr_lsb;  /* Valid LSB of the reported address.  */</Line>
  <Line number="94">	    union</Line>
  <Line number="95">	      {</Line>
  <Line number="96">		/* used when si_code=SEGV_BNDERR */</Line>
  <Line number="97">		struct</Line>
  <Line number="98">		  {</Line>
  <Line number="99">		    void *_lower;</Line>
  <Line number="100">		    void *_upper;</Line>
  <Line number="101">		  } _addr_bnd;</Line>
  <Line number="102">		/* used when si_code=SEGV_PKUERR */</Line>
  <Line number="103">		__uint32_t _pkey;</Line>
  <Line number="104">	      } _bounds;</Line>
  <Line number="105">	  } _sigfault;</Line>
  <Line number="106"></Line>
  <Line number="107">	/* SIGPOLL.  */</Line>
  <Line number="108">	struct</Line>
  <Line number="109">	  {</Line>
  <Line number="110">	    __SI_BAND_TYPE si_band;	/* Band event for SIGPOLL.  */</Line>
  <Line number="111">	    int si_fd;</Line>
  <Line number="112">	  } _sigpoll;</Line>
  <Line number="113"></Line>
  <Line number="114">	/* SIGSYS.  */</Line>
  <Line number="115">#if __SI_HAVE_SIGSYS</Line>
  <Line number="116">	struct</Line>
  <Line number="117">	  {</Line>
  <Line number="118">	    void *_call_addr;	/* Calling user insn.  */</Line>
  <Line number="119">	    int _syscall;	/* Triggering system call number.  */</Line>
  <Line number="120">	    unsigned int _arch; /* AUDIT_ARCH_* of syscall.  */</Line>
  <Line number="121">	  } _sigsys;</Line>
  <Line number="122">#endif</Line>
  <Line number="123">      } _sifields;</Line>
  <Line number="124">  } siginfo_t __SI_ALIGNMENT;</Line>
  <Line number="125"></Line>
  <Line number="126"></Line>
  <Line number="127">/* X/Open requires some more fields with fixed names.  */</Line>
  <Line number="128">#define si_pid		_sifields._kill.si_pid</Line>
  <Line number="129">#define si_uid		_sifields._kill.si_uid</Line>
  <Line number="130">#define si_timerid	_sifields._timer.si_tid</Line>
  <Line number="131">#define si_overrun	_sifields._timer.si_overrun</Line>
  <Line number="132">#define si_status	_sifields._sigchld.si_status</Line>
  <Line number="133">#define si_utime	_sifields._sigchld.si_utime</Line>
  <Line number="134">#define si_stime	_sifields._sigchld.si_stime</Line>
  <Line number="135">#define si_value	_sifields._rt.si_sigval</Line>
  <Line number="136">#define si_int		_sifields._rt.si_sigval.sival_int</Line>
  <Line number="137">#define si_ptr		_sifields._rt.si_sigval.sival_ptr</Line>
  <Line number="138">#define si_addr		_sifields._sigfault.si_addr</Line>
  <Line number="139">#define si_addr_lsb	_sifields._sigfault.si_addr_lsb</Line>
  <Line number="140">#define si_lower	_sifields._sigfault._bounds._addr_bnd._lower</Line>
  <Line number="141">#define si_upper	_sifields._sigfault._bounds._addr_bnd._upper</Line>
  <Line number="142">#define si_pkey		_sifields._sigfault._bounds._pkey</Line>
  <Line number="143">#define si_band		_sifields._sigpoll.si_band</Line>
  <Line number="144">#define si_fd		_sifields._sigpoll.si_fd</Line>
  <Line number="145">#if __SI_HAVE_SIGSYS</Line>
  <Line number="146"># define si_call_addr	_sifields._sigsys._call_addr</Line>
  <Line number="147"># define si_syscall	_sifields._sigsys._syscall</Line>
  <Line number="148"># define si_arch	_sifields._sigsys._arch</Line>
  <Line number="149">#endif</Line>
  <Line number="150"></Line>
  <Line number="151">#endif</Line>
</SourceFile>
