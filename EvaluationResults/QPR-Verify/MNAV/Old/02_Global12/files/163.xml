<SourceFile>
  <Line number="1">/******************************************************************************</Line>
  <Line number="2">* FILE: imugps.c</Line>
  <Line number="3">* DESCRIPTION:</Line>
  <Line number="4">*   </Line>
  <Line number="5">*   </Line>
  <Line number="6">*</Line>
  <Line number="7">* SOURCE: </Line>
  <Line number="8">* LAST REVISED: 4/05/06 Jung Soon Jang</Line>
  <Line number="9">******************************************************************************/</Line>
  <Line number="10">#include &lt;stdio.h&gt;</Line>
  <Line number="11">#include &lt;string.h&gt;</Line>
  <Line number="12">#include &lt;unistd.h&gt;</Line>
  <Line number="13">#include &lt;fcntl.h&gt;</Line>
  <Line number="14">#include &lt;errno.h&gt;</Line>
  <Line number="15">#include &lt;termios.h&gt;</Line>
  <Line number="16">#include &lt;math.h&gt;</Line>
  <Line number="17">#include &lt;pthread.h&gt;</Line>
  <Line number="18"></Line>
  <Line number="19"></Line>
  <Line number="20">#include &quot;serial.h&quot;</Line>
  <Line number="21">#include &quot;globaldefs.h&quot;</Line>
  <Line number="22"></Line>
  <Line number="23">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="24">//uNAV packet length definition</Line>
  <Line number="25">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="26">#define FULL_PACKET_LENGTH	38</Line>
  <Line number="27">#define SENSOR_PACKET_LENGTH    51   </Line>
  <Line number="28">#define GPS_PACKET_LENGTH	35</Line>
  <Line number="29">#define FULL_PACKET_SIZE        86   // scaled mode with sampling less than 100Hz</Line>
  <Line number="30">#define fullspeed		0</Line>
  <Line number="31"></Line>
  <Line number="32">#define D2R			0.017453292519940</Line>
  <Line number="33">#define R2D			57.29577951308232</Line>
  <Line number="34">#define g			9.81</Line>
  <Line number="35"></Line>
  <Line number="36">//temperature compensation for accel.</Line>
  <Line number="37">//temperature compensation for mag.</Line>
  <Line number="38"></Line>
  <Line number="39">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="40">//prototype definition</Line>
  <Line number="41">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="42">int  checksum(byte* buffer, int packet_len);</Line>
  <Line number="43">void decode_imupacket(struct imu *data, byte* buffer);</Line>
  <Line number="44">void decode_gpspacket(struct gps *data, byte* buffer);</Line>
  <Line number="45">extern void snap_time_interval(char *threadname,int displaytime,short id);</Line>
  <Line number="46">extern double get_Time();</Line>
  <Line number="47"></Line>
  <Line number="48">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="49">//global variables</Line>
  <Line number="50">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</Line>
  <Line number="51">extern short screen_on;</Line>
  <Line number="52">extern char  buf_err[50];</Line>
  <Line number="53">int   	     sPort0;</Line>
  <Line number="54"></Line>
  <Line number="55"></Line>
  <Line number="56">void *imugps_acq(void *thread_id)</Line>
  <Line number="57">{</Line>
  <Line number="58">  int		count=0,nbytes=0,headerOK=0;</Line>
  <Line number="59">  short		i=<CheckRefs ids="1853">0</CheckRefs>;</Line>
  <Line number="60">  static int    GPS_INIT=<CheckRefs ids="1854">FALSE</CheckRefs>,GPS_FULL=0,err_cnt=0;</Line>
  <Line number="61">  byte  	input_buffer[FULL_PACKET_SIZE]={<CheckRefs ids="1855">0</CheckRefs>,};</Line>
  <Line number="62">  byte  	SCALED_MODE[11] ={<CheckRefs ids="1856">0x55</CheckRefs>,<CheckRefs ids="1857">0x55</CheckRefs>,<CheckRefs ids="1858">0x53</CheckRefs>,<CheckRefs ids="1859">0x46</CheckRefs>,<CheckRefs ids="1860">0x01</CheckRefs>,<CheckRefs ids="1861">0x00</CheckRefs>,<CheckRefs ids="1862">0x03</CheckRefs>,<CheckRefs ids="1863">0x00</CheckRefs>, <CheckRefs ids="1864">&apos;S&apos;</CheckRefs>,<CheckRefs ids="1865">0x00</CheckRefs>,<CheckRefs ids="1866">0xF0</CheckRefs>};</Line>
  <Line number="63">  byte          CH_BAUD[11]     ={<CheckRefs ids="1867">0x55</CheckRefs>,<CheckRefs ids="1868">0x55</CheckRefs>,<CheckRefs ids="1869">0x57</CheckRefs>,<CheckRefs ids="1870">0x46</CheckRefs>,<CheckRefs ids="1871">0x01</CheckRefs>,<CheckRefs ids="1872">0x00</CheckRefs>,<CheckRefs ids="1873">0x02</CheckRefs>,<CheckRefs ids="1874">0x00</CheckRefs>,<CheckRefs ids="1875">0x03</CheckRefs>,<CheckRefs ids="1876">0x00</CheckRefs>,<CheckRefs ids="1877">0xA3</CheckRefs>};</Line>
  <Line number="64">  byte		CH_SAMP[11]     ={<CheckRefs ids="1878">0x55</CheckRefs>,<CheckRefs ids="1879">0x55</CheckRefs>,<CheckRefs ids="1880">0x53</CheckRefs>,<CheckRefs ids="1881">0x46</CheckRefs>,<CheckRefs ids="1882">0x01</CheckRefs>,<CheckRefs ids="1883">0x00</CheckRefs>,<CheckRefs ids="1884">0x01</CheckRefs>,<CheckRefs ids="1885">0x00</CheckRefs>,<CheckRefs ids="1886">0x02</CheckRefs>,<CheckRefs ids="1887">0x00</CheckRefs>,<CheckRefs ids="1888">0x9D</CheckRefs>};</Line>
  <Line number="65">  byte          CH_SERVO[7]     ={<CheckRefs ids="1889">0x55</CheckRefs>,<CheckRefs ids="1890">0x55</CheckRefs>,<CheckRefs ids="1891">0x53</CheckRefs>,<CheckRefs ids="1892">0x50</CheckRefs>,<CheckRefs ids="1893">0x08</CheckRefs>,<CheckRefs ids="1894">0x00</CheckRefs>,<CheckRefs ids="1895">0xAB</CheckRefs>};</Line>
  <Line number="66">  byte		temp;</Line>
  <Line number="67">  FILE   	*fimu,*fgps;</Line>
  <Line number="68">  </Line>
  <Line number="69">  /*********************************************************************</Line>
  <Line number="70">   *Open Files</Line>
  <Line number="71">   *********************************************************************/</Line>
  <Line number="72">  if (screen_on) {</Line>
  <Line number="73">         if((fimu = fopen(&quot;/mnt/cf1/imu.dat&quot;,&quot;w+b&quot;))==NULL) {</Line>
  <Line number="74">            printf(&quot;imu.dat cannot be created in /mnt/cf1 directory...error!\n&quot;);</Line>
  <Line number="75">            _exit(<CheckRefs ids="1896">-</CheckRefs>1);</Line>
  <Line number="76">         }</Line>
  <Line number="77">	 if((fgps = fopen(&quot;/mnt/cf1/gps.dat&quot;,&quot;w+b&quot;))==NULL) {</Line>
  <Line number="78">            printf(&quot;gps.dat cannot be created in /mnt/cf1 directory...error!\n&quot;);</Line>
  <Line number="79">            _exit(<CheckRefs ids="1897">-</CheckRefs>1);</Line>
  <Line number="80">         }</Line>
  <Line number="81">  }</Line>
  <Line number="82"></Line>
  <Line number="83">#ifndef NCURSE_DISPLAY_OPTION</Line>
  <Line number="84">  printf(&quot;[imugps_acq]::thread[%d] initiated...\n&quot;,thread_id);</Line>
  <Line number="85">#endif</Line>
  <Line number="86">  </Line>
  <Line number="87">  /*********************************************************************</Line>
  <Line number="88">   *Open and configure Serial Port2 (com2)</Line>
  <Line number="89">   *********************************************************************/</Line>
  <Line number="90">  sPort0 = open_serial(SERIAL_PORT2,BAUDRATE_38400); </Line>
  <Line number="91">      </Line>
  <Line number="92">  while (nbytes != 11) nbytes = <CheckRefs ids="1898">write</CheckRefs>(sPort0,(char*)CH_BAUD, <CheckRefs ids="1899">11</CheckRefs>);     nbytes = 0;  </Line>
  <Line number="93">  close(sPort0);</Line>
  <Line number="94">  sPort0 = open_serial(SERIAL_PORT2,BAUDRATE_57600); </Line>
  <Line number="95">  </Line>
  <Line number="96">    </Line>
  <Line number="97">  while (nbytes != 11) nbytes = <CheckRefs ids="1900">write</CheckRefs>(sPort0,(char*)CH_SAMP, <CheckRefs ids="1901">11</CheckRefs>);     nbytes = 0;  </Line>
  <Line number="98">  while (nbytes != 11) nbytes = <CheckRefs ids="1902">write</CheckRefs>(sPort0,(char*)SCALED_MODE, <CheckRefs ids="1903">11</CheckRefs>); nbytes = 0;</Line>
  <Line number="99">  while (nbytes !=  7) nbytes = <CheckRefs ids="1904">write</CheckRefs>(sPort0,(char*)CH_SERVO, <CheckRefs ids="1905">7</CheckRefs>);     nbytes = 0;  </Line>
  <Line number="100">  </Line>
  <Line number="101">  while (1) {</Line>
  <Line number="102">  /*********************************************************************</Line>
  <Line number="103">   *Find start of packet: the heade r (2 bytes) starts with 0x5555</Line>
  <Line number="104">   *********************************************************************/</Line>
  <Line number="105">  </Line>
  <Line number="106">  while (headerOK !=2)</Line>
  <Line number="107">  {</Line>
  <Line number="108">     while(<CheckRefs ids="1906">1</CheckRefs>!=read(sPort0,input_buffer,<CheckRefs ids="1907">1</CheckRefs>));</Line>
  <Line number="109">     if (<CheckRefs ids="1908">input_buffer</CheckRefs>[0<CheckRefs ids="1909">]</CheckRefs> == 0x55) headerOK<CheckRefs ids="1910">++</CheckRefs>;</Line>
  <Line number="110">     else		 	  headerOK = 0;</Line>
  <Line number="111">  }</Line>
  <Line number="112">     	</Line>
  <Line number="113">  headerOK = 0; while(<CheckRefs ids="1911">1</CheckRefs>!=read(sPort0,&amp;input_buffer[2<CheckRefs ids="1912">]</CheckRefs>,<CheckRefs ids="1913">1</CheckRefs>));</Line>
  <Line number="114">  nbytes = 3; </Line>
  <Line number="115">  </Line>
  <Line number="116">  </Line>
  <Line number="117">  /*********************************************************************</Line>
  <Line number="118">   *Read packet contents</Line>
  <Line number="119">   *********************************************************************/</Line>
  <Line number="120">  switch (<CheckRefs ids="1914">input_buffer</CheckRefs>[2<CheckRefs ids="1915">]</CheckRefs>)</Line>
  <Line number="121">  {</Line>
  <Line number="122">	case &apos;S&apos;: /* IMU packet without GPS */</Line>
  <Line number="123">		  while(nbytes &lt; SENSOR_PACKET_LENGTH)</Line>
  <Line number="124">		  {</Line>
  <Line number="125">		    nbytes <CheckRefs ids="1916">+=</CheckRefs> read(sPort0, input_buffer+nbytes, SENSOR_PACKET_LENGTH<CheckRefs ids="1917,1918">-</CheckRefs>nbytes); </Line>
  <Line number="126">		  }</Line>
  <Line number="127"></Line>
  <Line number="128">		  /*************************</Line>
  <Line number="129">                   *check checksum</Line>
  <Line number="130">                   *************************/</Line>
  <Line number="131">                  if(checksum(input_buffer,SENSOR_PACKET_LENGTH)==TRUE)</Line>
  <Line number="132">		  {</Line>
  <Line number="133"></Line>
  <Line number="134">		     pthread_mutex_lock(&amp;mutex_imu);</Line>
  <Line number="135">		       decode_imupacket(&amp;imupacket, input_buffer);</Line>
  <Line number="136">		       pthread_cond_signal(&amp;trigger_ahrs);</Line>
  <Line number="137">		       if(screen_on) fwrite(&amp;imupacket, sizeof(struct imu),<CheckRefs ids="1919">1</CheckRefs>,fimu);</Line>
  <Line number="138">		     pthread_mutex_unlock(&amp;mutex_imu);  </Line>
  <Line number="139">			     </Line>
  <Line number="140">		     </Line>
  <Line number="141"></Line>
  <Line number="142">		  }</Line>
  <Line number="143">                  else {</Line>
  <Line number="144">#ifndef NCURSE_DISPLAY_OPTION </Line>
  <Line number="145">                  	printf(&quot;[imu]:checksum error...!\n&quot;); </Line>
  <Line number="146">#endif                  	</Line>
  <Line number="147">                  	imupacket.err_type = <CheckRefs ids="1920">checksum_err</CheckRefs>; </Line>
  <Line number="148">                  };</Line>
  <Line number="149">       		  </Line>
  <Line number="150">		  </Line>
  <Line number="151">		  break;</Line>
  <Line number="152">        case &apos;N&apos;: /* IMU packet with    GPS */</Line>
  <Line number="153">                  while(nbytes &lt; FULL_PACKET_SIZE)</Line>
  <Line number="154">		  {</Line>
  <Line number="155">		    nbytes <CheckRefs ids="1921">+=</CheckRefs> read(sPort0, input_buffer+nbytes, FULL_PACKET_SIZE<CheckRefs ids="1922,1923">-</CheckRefs>nbytes); </Line>
  <Line number="156">		  }</Line>
  <Line number="157"></Line>
  <Line number="158">  		  /*************************</Line>
  <Line number="159">                   *check checksum</Line>
  <Line number="160">                   *************************/</Line>
  <Line number="161">                  if(checksum(input_buffer,FULL_PACKET_SIZE)==TRUE)</Line>
  <Line number="162">		  {</Line>
  <Line number="163">	             pthread_mutex_lock(&amp;mutex_imu);</Line>
  <Line number="164">		       decode_imupacket(&amp;imupacket, input_buffer);</Line>
  <Line number="165">		       pthread_cond_signal(&amp;trigger_ahrs);</Line>
  <Line number="166">		       if(screen_on) fwrite(&amp;imupacket, sizeof(struct imu),<CheckRefs ids="1924">1</CheckRefs>,fimu);</Line>
  <Line number="167">		     pthread_mutex_unlock(&amp;mutex_imu);  </Line>
  <Line number="168">		     </Line>
  <Line number="169">		     /******************************************</Line>
  <Line number="170">                      *check GPS data packet</Line>
  <Line number="171">                      ******************************************/</Line>
  <Line number="172">		     //if(input_buffer[31]==(byte)0x55 &amp;&amp; input_buffer[32]==(byte)0x55 &amp;&amp; input_buffer[33]==&apos;G&apos;) </Line>
  <Line number="173">		     if(<CheckRefs ids="1925">input_buffer</CheckRefs>[33<CheckRefs ids="1926">]</CheckRefs>==&apos;G&apos;) </Line>
  <Line number="174">		     {</Line>
  <Line number="175">	  	        pthread_mutex_lock(&amp;mutex_gps);</Line>
  <Line number="176"> 			  decode_gpspacket(&amp;gpspacket, input_buffer);</Line>
  <Line number="177">			  if(screen_on) fwrite(&amp;gpspacket, sizeof(struct gps),<CheckRefs ids="1927">1</CheckRefs>,fgps);</Line>
  <Line number="178">		        pthread_mutex_unlock(&amp;mutex_gps);</Line>
  <Line number="179">		     }	</Line>
  <Line number="180">                     else</Line>
  <Line number="181">		     {</Line>
  <Line number="182">#ifndef NCURSE_DISPLAY_OPTION		     	</Line>
  <Line number="183">		         printf(&quot;[gps]:data error...!\n&quot;);</Line>
  <Line number="184">#endif		         </Line>
  <Line number="185">			 gpspacket.err_type = <CheckRefs ids="1928">got_invalid</CheckRefs>;</Line>
  <Line number="186">		     }	</Line>
  <Line number="187">		  } /* end if(checksum(input_buffer... */</Line>
  <Line number="188">		  else</Line>
  <Line number="189">		  { </Line>
  <Line number="190">#ifndef NCURSE_DISPLAY_OPTION		  	</Line>
  <Line number="191">		     printf(&quot;[imu]:checksum error(gps)...!\n&quot;);</Line>
  <Line number="192">#endif		     </Line>
  <Line number="193">                     gpspacket.err_type = <CheckRefs ids="1929">checksum_err</CheckRefs>;</Line>
  <Line number="194">		     imupacket.err_type = <CheckRefs ids="1930">checksum_err</CheckRefs>; </Line>
  <Line number="195">		  }</Line>
  <Line number="196">		  </Line>
  <Line number="197">                  </Line>
  <Line number="198">		  break;</Line>
  <Line number="199">        default : </Line>
  <Line number="200">#ifdef NCURSE_DISPLAY_OPTION        </Line>
  <Line number="201">		     sprintf(buf_err,&quot;Invalid [imu] data packet (%d)&quot;,++err_cnt);</Line>
  <Line number="202">#else</Line>
  <Line number="203">		     printf(&quot;[imu]:invalid data packet...!\n&quot;);</Line>
  <Line number="204">#endif		  </Line>
  <Line number="205">		  </Line>
  <Line number="206">		  </Line>
  <Line number="207">  } /* end case  */</Line>
  <Line number="208"></Line>
  <Line number="209">  } /* end while */</Line>
  <Line number="210"></Line>
  <Line number="211">  //close the serial port</Line>
  <Line number="212">  close(sPort0);</Line>
  <Line number="213">  //close files</Line>
  <Line number="214">  fclose(fimu);</Line>
  <Line number="215">  fclose(fgps);</Line>
  <Line number="216">  //exit the thread</Line>
  <Line number="217">  pthread_exit(NULL);</Line>
  <Line number="218"></Line>
  <Line number="219">} /* end void *imugps_acq() */</Line>
  <Line number="220"></Line>
  <Line number="221">/***************************************************************************************</Line>
  <Line number="222"> *check the checksum of the data packet</Line>
  <Line number="223"> ***************************************************************************************/</Line>
  <Line number="224">int checksum(byte* buffer, int packet_len)</Line>
  <Line number="225">{</Line>
  <Line number="226">   word     	 i=<CheckRefs ids="1931">0</CheckRefs>,rcvchecksum=<CheckRefs ids="1932">0</CheckRefs>;</Line>
  <Line number="227">   //unsigned long sum=0;</Line>
  <Line number="228">   word          sum=<CheckRefs ids="1933">0</CheckRefs>;</Line>
  <Line number="229"></Line>
  <Line number="230">   for(i=<CheckRefs ids="1934">2</CheckRefs>;<CheckRefs ids="1935">i</CheckRefs>&lt;packet_len<CheckRefs ids="1936">-</CheckRefs>2;i<CheckRefs ids="1937">++</CheckRefs>) sum = <CheckRefs ids="1940">sum</CheckRefs> <CheckRefs ids="1939,1938">+</CheckRefs> <CheckRefs ids="1941">buffer</CheckRefs>[i];</Line>
  <Line number="231">   rcvchecksum = (<CheckRefs ids="1946">(</CheckRefs>rcvchecksum = <CheckRefs ids="1947">buffer</CheckRefs>[packet_len<CheckRefs ids="1948">-</CheckRefs>2]) <CheckRefs ids="1943,1944,1945">&lt;&lt;</CheckRefs> 8) <CheckRefs ids="1942">|</CheckRefs> <CheckRefs ids="1949">buffer</CheckRefs>[packet_len<CheckRefs ids="1950">-</CheckRefs>1];</Line>
  <Line number="232"></Line>
  <Line number="233">// if (rcvchecksum == sum%0x10000)</Line>
  <Line number="234">   if (<CheckRefs ids="1951">rcvchecksum</CheckRefs> == <CheckRefs ids="1952">sum</CheckRefs>) //&amp;0xFFFF)</Line>
  <Line number="235">	return    TRUE;</Line>
  <Line number="236">   else</Line>
  <Line number="237"> 	return    <CheckRefs ids="1953">FALSE</CheckRefs>;</Line>
  <Line number="238"></Line>
  <Line number="239"></Line>
  <Line number="240"></Line>
  <Line number="241">}</Line>
  <Line number="242"></Line>
  <Line number="243"></Line>
  <Line number="244">/***************************************************************************************</Line>
  <Line number="245"> *decode the gps data packet</Line>
  <Line number="246"> ***************************************************************************************/</Line>
  <Line number="247">void decode_gpspacket(struct gps *data, byte* buffer)</Line>
  <Line number="248">{</Line>
  <Line number="249">   signed long tmp=<CheckRefs ids="1954">0</CheckRefs>;</Line>
  <Line number="250"></Line>
  <Line number="251">   /* gps velocity in m/s */ </Line>
  <Line number="252">   data-&gt;vn <CheckRefs ids="1955">=</CheckRefs><CheckRefs ids="1957">(</CheckRefs>double)((((((tmp = <CheckRefs ids="1968,1969">(</CheckRefs>signed char)buffer[37]<CheckRefs ids="1964,1965,1966,1967">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="1970">buffer</CheckRefs>[36])<CheckRefs ids="1961,1962,1963">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="1971">buffer</CheckRefs>[35])<CheckRefs ids="1959,1958,1960">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="1972">buffer</CheckRefs>[34])<CheckRefs ids="1956">*</CheckRefs>1.0e-2; tmp=<CheckRefs ids="1973">0</CheckRefs>;</Line>
  <Line number="253">   data-&gt;ve <CheckRefs ids="1974">=</CheckRefs><CheckRefs ids="1976">(</CheckRefs>double)((((((tmp = <CheckRefs ids="1987,1988">(</CheckRefs>signed char)buffer[41]<CheckRefs ids="1984,1985,1983,1986">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="1989">buffer</CheckRefs>[40])<CheckRefs ids="1981,1980,1982">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="1990">buffer</CheckRefs>[39])<CheckRefs ids="1978,1977,1979">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="1991">buffer</CheckRefs>[38])<CheckRefs ids="1975">*</CheckRefs>1.0e-2; tmp=<CheckRefs ids="1992">0</CheckRefs>;</Line>
  <Line number="254">   data-&gt;vd <CheckRefs ids="1993">=</CheckRefs><CheckRefs ids="1995">(</CheckRefs>double)((((((tmp = <CheckRefs ids="2006,2007">(</CheckRefs>signed char)buffer[45]<CheckRefs ids="2002,2003,2004,2005">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2008">buffer</CheckRefs>[44])<CheckRefs ids="1999,2000,2001">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2009">buffer</CheckRefs>[43])<CheckRefs ids="1997,1996,1998">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2010">buffer</CheckRefs>[42])<CheckRefs ids="1994">*</CheckRefs>1.0e-2; tmp=<CheckRefs ids="2011">0</CheckRefs>;</Line>
  <Line number="255"></Line>
  <Line number="256">   /* gps position */</Line>
  <Line number="257">   data-&gt;lon<CheckRefs ids="2012">=</CheckRefs><CheckRefs ids="2014">(</CheckRefs>double)((((((tmp = <CheckRefs ids="2025,2026">(</CheckRefs>signed char)buffer[49]<CheckRefs ids="2023,2022,2021,2024">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2027">buffer</CheckRefs>[48])<CheckRefs ids="2019,2018,2020">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2028">buffer</CheckRefs>[47])<CheckRefs ids="2016,2015,2017">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2029">buffer</CheckRefs>[46])<CheckRefs ids="2013">*</CheckRefs>1.0e-7; tmp=<CheckRefs ids="2030">0</CheckRefs>;</Line>
  <Line number="258">   data-&gt;lat<CheckRefs ids="2031">=</CheckRefs><CheckRefs ids="2033">(</CheckRefs>double)((((((tmp = <CheckRefs ids="2044,2045">(</CheckRefs>signed char)buffer[53]<CheckRefs ids="2040,2041,2042,2043">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2046">buffer</CheckRefs>[52])<CheckRefs ids="2037,2038,2039">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2047">buffer</CheckRefs>[51])<CheckRefs ids="2035,2034,2036">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2048">buffer</CheckRefs>[50])<CheckRefs ids="2032">*</CheckRefs>1.0e-7; tmp=<CheckRefs ids="2049">0</CheckRefs>;</Line>
  <Line number="259">   data-&gt;alt<CheckRefs ids="2050">=</CheckRefs><CheckRefs ids="2052">(</CheckRefs>double)((((((tmp = <CheckRefs ids="2063,2064">(</CheckRefs>signed char)buffer[57]<CheckRefs ids="2061,2060,2059,2062">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2065">buffer</CheckRefs>[56])<CheckRefs ids="2057,2056,2058">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2066">buffer</CheckRefs>[55])<CheckRefs ids="2054,2053,2055">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2067">buffer</CheckRefs>[54])<CheckRefs ids="2051">*</CheckRefs>1.0e-3; tmp=<CheckRefs ids="2068">0</CheckRefs>;</Line>
  <Line number="260">   </Line>
  <Line number="261">   </Line>
  <Line number="262">   /* gps time */</Line>
  <Line number="263">   data-&gt;ITOW = (<CheckRefs ids="2073">(</CheckRefs>data-&gt;ITOW = <CheckRefs ids="2074">buffer</CheckRefs>[59]) <CheckRefs ids="2070,2071,2072">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2069">|</CheckRefs><CheckRefs ids="2075">buffer</CheckRefs>[58];</Line>
  <Line number="264">   data-&gt;err_type = <CheckRefs ids="2076">TRUE</CheckRefs>;</Line>
  <Line number="265">   data-&gt;time <CheckRefs ids="2077">=</CheckRefs> get_Time();</Line>
  <Line number="266"></Line>
  <Line number="267">}</Line>
  <Line number="268"></Line>
  <Line number="269">/***************************************************************************************</Line>
  <Line number="270"> *decode the imu data packet</Line>
  <Line number="271"> ***************************************************************************************/</Line>
  <Line number="272">void decode_imupacket(struct imu *data, byte* buffer)</Line>
  <Line number="273">{</Line>
  <Line number="274">   signed short tmp=<CheckRefs ids="2078">0</CheckRefs>;</Line>
  <Line number="275">   unsigned short tmpr=<CheckRefs ids="2079">0</CheckRefs>;</Line>
  <Line number="276">  </Line>
  <Line number="277"></Line>
  <Line number="278">   /* acceleration in m/s^2 */</Line>
  <Line number="279">   data-&gt;ax <CheckRefs ids="2080">=</CheckRefs> <CheckRefs ids="2082">(</CheckRefs>double)((<CheckRefs ids="2086">(</CheckRefs>tmp = <CheckRefs ids="2087,2088">(</CheckRefs>signed char)buffer[ 3])<CheckRefs ids="2084,2083,2085">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2089">buffer</CheckRefs>[ 4])<CheckRefs ids="2081">*</CheckRefs>5.98755e-04; tmp=<CheckRefs ids="2090">0</CheckRefs>;</Line>
  <Line number="280">   data-&gt;ay <CheckRefs ids="2091">=</CheckRefs> <CheckRefs ids="2093">(</CheckRefs>double)((<CheckRefs ids="2097">(</CheckRefs>tmp = <CheckRefs ids="2098,2099">(</CheckRefs>signed char)buffer[ 5])<CheckRefs ids="2095,2094,2096">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2100">buffer</CheckRefs>[ 6])<CheckRefs ids="2092">*</CheckRefs>5.98755e-04; tmp=<CheckRefs ids="2101">0</CheckRefs>;</Line>
  <Line number="281">   data-&gt;az <CheckRefs ids="2102">=</CheckRefs> <CheckRefs ids="2104">(</CheckRefs>double)((<CheckRefs ids="2108">(</CheckRefs>tmp = <CheckRefs ids="2109,2110">(</CheckRefs>signed char)buffer[ 7])<CheckRefs ids="2105,2106,2107">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2111">buffer</CheckRefs>[ 8])<CheckRefs ids="2103">*</CheckRefs>5.98755e-04; tmp=<CheckRefs ids="2112">0</CheckRefs>;</Line>
  <Line number="282">   </Line>
  <Line number="283">  </Line>
  <Line number="284">   /* angular rate in rad/s */</Line>
  <Line number="285">   data-&gt;p  <CheckRefs ids="2113">=</CheckRefs> <CheckRefs ids="2115">(</CheckRefs>double)((<CheckRefs ids="2119">(</CheckRefs>tmp = <CheckRefs ids="2120,2121">(</CheckRefs>signed char)buffer[ 9])<CheckRefs ids="2116,2117,2118">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2122">buffer</CheckRefs>[10])<CheckRefs ids="2114">*</CheckRefs>1.06526e-04; tmp=<CheckRefs ids="2123">0</CheckRefs>;</Line>
  <Line number="286">   data-&gt;q  <CheckRefs ids="2124">=</CheckRefs> <CheckRefs ids="2126">(</CheckRefs>double)((<CheckRefs ids="2130">(</CheckRefs>tmp = <CheckRefs ids="2131,2132">(</CheckRefs>signed char)buffer[11])<CheckRefs ids="2127,2128,2129">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2133">buffer</CheckRefs>[12])<CheckRefs ids="2125">*</CheckRefs>1.06526e-04; tmp=<CheckRefs ids="2134">0</CheckRefs>;</Line>
  <Line number="287">   data-&gt;r  <CheckRefs ids="2135">=</CheckRefs> <CheckRefs ids="2137">(</CheckRefs>double)((<CheckRefs ids="2141">(</CheckRefs>tmp = <CheckRefs ids="2142,2143">(</CheckRefs>signed char)buffer[13])<CheckRefs ids="2138,2139,2140">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2144">buffer</CheckRefs>[14])<CheckRefs ids="2136">*</CheckRefs>1.06526e-04; tmp=<CheckRefs ids="2145">0</CheckRefs>;</Line>
  <Line number="288">   </Line>
  <Line number="289">   /* magnetic field in Gauss */</Line>
  <Line number="290">   data-&gt;hx <CheckRefs ids="2146">=</CheckRefs> <CheckRefs ids="2148">(</CheckRefs>double)((<CheckRefs ids="2152">(</CheckRefs>tmp = <CheckRefs ids="2153,2154">(</CheckRefs>signed char)buffer[15])<CheckRefs ids="2149,2150,2151">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2155">buffer</CheckRefs>[16])<CheckRefs ids="2147">*</CheckRefs>6.10352e-05; tmp=<CheckRefs ids="2156">0</CheckRefs>;</Line>
  <Line number="291">   data-&gt;hy <CheckRefs ids="2157">=</CheckRefs> <CheckRefs ids="2159">(</CheckRefs>double)((<CheckRefs ids="2163">(</CheckRefs>tmp = <CheckRefs ids="2164,2165">(</CheckRefs>signed char)buffer[17])<CheckRefs ids="2161,2160,2162">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2166">buffer</CheckRefs>[18])<CheckRefs ids="2158">*</CheckRefs>6.10352e-05; tmp=<CheckRefs ids="2167">0</CheckRefs>;</Line>
  <Line number="292">   data-&gt;hz <CheckRefs ids="2168">=</CheckRefs> <CheckRefs ids="2170">(</CheckRefs>double)((<CheckRefs ids="2174">(</CheckRefs>tmp = <CheckRefs ids="2175,2176">(</CheckRefs>signed char)buffer[19])<CheckRefs ids="2171,2172,2173">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2177">buffer</CheckRefs>[20])<CheckRefs ids="2169">*</CheckRefs>6.10352e-05; tmp=<CheckRefs ids="2178">0</CheckRefs>;</Line>
  <Line number="293"></Line>
  <Line number="294">   /* temperature in Celcius */</Line>
  <Line number="295">   /*</Line>
  <Line number="296">   data-&gt;Tx = (double)(((tmp = (signed char)buffer[21])&lt;&lt;8)|buffer[22])*6.10352e-03; tmp=0;</Line>
  <Line number="297">   data-&gt;Ty = (double)(((tmp = (signed char)buffer[23])&lt;&lt;8)|buffer[24])*6.10352e-03; tmp=0;</Line>
  <Line number="298">   data-&gt;Tz = (double)(((tmp = (signed char)buffer[25])&lt;&lt;8)|buffer[26])*6.10352e-03; tmp=0;</Line>
  <Line number="299">   */</Line>
  <Line number="300">   </Line>
  <Line number="301">   /* pressure in m and m/s */</Line>
  <Line number="302">   data-&gt;Ps <CheckRefs ids="2179">=</CheckRefs> <CheckRefs ids="2181">(</CheckRefs>double)((<CheckRefs ids="2185">(</CheckRefs>tmp = <CheckRefs ids="2186,2187">(</CheckRefs>signed char)buffer[27])<CheckRefs ids="2182,2183,2184">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2188">buffer</CheckRefs>[28])<CheckRefs ids="2180">*</CheckRefs>3.05176e-01; tmp=<CheckRefs ids="2189">0</CheckRefs>;</Line>
  <Line number="303">   data-&gt;Pt <CheckRefs ids="2190">=</CheckRefs> <CheckRefs ids="2192">(</CheckRefs>double)((<CheckRefs ids="2196">(</CheckRefs>tmp = <CheckRefs ids="2197,2198">(</CheckRefs>signed char)buffer[29])<CheckRefs ids="2193,2194,2195">&lt;&lt;</CheckRefs>8)|<CheckRefs ids="2199">buffer</CheckRefs>[30])<CheckRefs ids="2191">*</CheckRefs>2.44141e-03; tmp=<CheckRefs ids="2200">0</CheckRefs>;</Line>
  <Line number="304"></Line>
  <Line number="305">   </Line>
  <Line number="306">   </Line>
  <Line number="307">   /* servo packet */</Line>
  <Line number="308">   switch (<CheckRefs ids="2201">buffer</CheckRefs>[2]) {</Line>
  <Line number="309">      case &apos;S&apos; :   servopacket.status = buffer[32];</Line>
  <Line number="310">   		   servopacket.chn[0<CheckRefs ids="2202">]</CheckRefs> = (<CheckRefs ids="2207">(</CheckRefs>tmpr = <CheckRefs ids="2208">buffer</CheckRefs>[33]) <CheckRefs ids="2204,2205,2206">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2203">|</CheckRefs><CheckRefs ids="2209">buffer</CheckRefs>[34]; tmpr = <CheckRefs ids="2210">0</CheckRefs>;</Line>
  <Line number="311">	           servopacket.chn[1<CheckRefs ids="2211">]</CheckRefs> = (<CheckRefs ids="2216">(</CheckRefs>tmpr = <CheckRefs ids="2217">buffer</CheckRefs>[35]) <CheckRefs ids="2213,2214,2215">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2212">|</CheckRefs><CheckRefs ids="2218">buffer</CheckRefs>[36]; tmpr = <CheckRefs ids="2219">0</CheckRefs>;</Line>
  <Line number="312">		   servopacket.chn[2<CheckRefs ids="2220">]</CheckRefs> = (<CheckRefs ids="2225">(</CheckRefs>tmpr = <CheckRefs ids="2226">buffer</CheckRefs>[37]) <CheckRefs ids="2223,2222,2224">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2221">|</CheckRefs><CheckRefs ids="2227">buffer</CheckRefs>[38]; tmpr = <CheckRefs ids="2228">0</CheckRefs>;</Line>
  <Line number="313">		   servopacket.chn[3<CheckRefs ids="2229">]</CheckRefs> = (<CheckRefs ids="2234">(</CheckRefs>tmpr = <CheckRefs ids="2235">buffer</CheckRefs>[39]) <CheckRefs ids="2231,2232,2233">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2230">|</CheckRefs><CheckRefs ids="2236">buffer</CheckRefs>[40]; tmpr = <CheckRefs ids="2237">0</CheckRefs>;</Line>
  <Line number="314">		   servopacket.chn[4<CheckRefs ids="2238">]</CheckRefs> = (<CheckRefs ids="2243">(</CheckRefs>tmpr = <CheckRefs ids="2244">buffer</CheckRefs>[41]) <CheckRefs ids="2240,2241,2242">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2239">|</CheckRefs><CheckRefs ids="2245">buffer</CheckRefs>[42]; tmpr = <CheckRefs ids="2246">0</CheckRefs>;</Line>
  <Line number="315">		   servopacket.chn[5<CheckRefs ids="2247">]</CheckRefs> = (<CheckRefs ids="2252">(</CheckRefs>tmpr = <CheckRefs ids="2253">buffer</CheckRefs>[43]) <CheckRefs ids="2249,2250,2251">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2248">|</CheckRefs><CheckRefs ids="2254">buffer</CheckRefs>[44]; tmpr = <CheckRefs ids="2255">0</CheckRefs>;</Line>
  <Line number="316">		   servopacket.chn[6<CheckRefs ids="2256">]</CheckRefs> = (<CheckRefs ids="2261">(</CheckRefs>tmpr = <CheckRefs ids="2262">buffer</CheckRefs>[45]) <CheckRefs ids="2258,2259,2260">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2257">|</CheckRefs><CheckRefs ids="2263">buffer</CheckRefs>[46]; tmpr = <CheckRefs ids="2264">0</CheckRefs>;</Line>
  <Line number="317">		   servopacket.chn[7<CheckRefs ids="2265">]</CheckRefs> = (<CheckRefs ids="2270">(</CheckRefs>tmpr = <CheckRefs ids="2271">buffer</CheckRefs>[47]) <CheckRefs ids="2267,2268,2269">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2266">|</CheckRefs><CheckRefs ids="2272">buffer</CheckRefs>[48]; </Line>
  <Line number="318">		   break;</Line>
  <Line number="319">      case &apos;N&apos; :   servopacket.status = buffer[67];</Line>
  <Line number="320">   		   servopacket.chn[0<CheckRefs ids="2273">]</CheckRefs> = (<CheckRefs ids="2278">(</CheckRefs>tmpr = <CheckRefs ids="2279">buffer</CheckRefs>[68]) <CheckRefs ids="2275,2276,2277">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2274">|</CheckRefs><CheckRefs ids="2280">buffer</CheckRefs>[69]; tmpr = <CheckRefs ids="2281">0</CheckRefs>;</Line>
  <Line number="321">	           servopacket.chn[1<CheckRefs ids="2282">]</CheckRefs> = (<CheckRefs ids="2287">(</CheckRefs>tmpr = <CheckRefs ids="2288">buffer</CheckRefs>[70]) <CheckRefs ids="2284,2285,2286">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2283">|</CheckRefs><CheckRefs ids="2289">buffer</CheckRefs>[71]; tmpr = <CheckRefs ids="2290">0</CheckRefs>;</Line>
  <Line number="322">		   servopacket.chn[2<CheckRefs ids="2291">]</CheckRefs> = (<CheckRefs ids="2296">(</CheckRefs>tmpr = <CheckRefs ids="2297">buffer</CheckRefs>[72]) <CheckRefs ids="2293,2294,2295">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2292">|</CheckRefs><CheckRefs ids="2298">buffer</CheckRefs>[73]; tmpr = <CheckRefs ids="2299">0</CheckRefs>;</Line>
  <Line number="323">		   servopacket.chn[3<CheckRefs ids="2300">]</CheckRefs> = (<CheckRefs ids="2305">(</CheckRefs>tmpr = <CheckRefs ids="2306">buffer</CheckRefs>[74]) <CheckRefs ids="2302,2303,2304">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2301">|</CheckRefs><CheckRefs ids="2307">buffer</CheckRefs>[75]; tmpr = <CheckRefs ids="2308">0</CheckRefs>;</Line>
  <Line number="324">		   servopacket.chn[4<CheckRefs ids="2309">]</CheckRefs> = (<CheckRefs ids="2314">(</CheckRefs>tmpr = <CheckRefs ids="2315">buffer</CheckRefs>[76]) <CheckRefs ids="2311,2312,2313">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2310">|</CheckRefs><CheckRefs ids="2316">buffer</CheckRefs>[77]; tmpr = <CheckRefs ids="2317">0</CheckRefs>;</Line>
  <Line number="325">		   servopacket.chn[5<CheckRefs ids="2318">]</CheckRefs> = (<CheckRefs ids="2323">(</CheckRefs>tmpr = <CheckRefs ids="2324">buffer</CheckRefs>[78]) <CheckRefs ids="2320,2321,2322">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2319">|</CheckRefs><CheckRefs ids="2325">buffer</CheckRefs>[79]; tmpr = <CheckRefs ids="2326">0</CheckRefs>;</Line>
  <Line number="326">		   servopacket.chn[6<CheckRefs ids="2327">]</CheckRefs> = (<CheckRefs ids="2332">(</CheckRefs>tmpr = <CheckRefs ids="2333">buffer</CheckRefs>[80]) <CheckRefs ids="2330,2329,2331">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2328">|</CheckRefs><CheckRefs ids="2334">buffer</CheckRefs>[81]; tmpr = <CheckRefs ids="2335">0</CheckRefs>;</Line>
  <Line number="327">		   servopacket.chn[7<CheckRefs ids="2336">]</CheckRefs> = (<CheckRefs ids="2341">(</CheckRefs>tmpr = <CheckRefs ids="2342">buffer</CheckRefs>[82]) <CheckRefs ids="2338,2339,2340">&lt;&lt;</CheckRefs> 8)<CheckRefs ids="2337">|</CheckRefs><CheckRefs ids="2343">buffer</CheckRefs>[83]; </Line>
  <Line number="328">                   break;</Line>
  <Line number="329">      default  :</Line>
  <Line number="330">                   printf(&quot;[imu]:fail to decode servo packet..!\n&quot;);</Line>
  <Line number="331">   }</Line>
  <Line number="332"></Line>
  <Line number="333">  </Line>
  <Line number="334">   data-&gt;time <CheckRefs ids="2344">=</CheckRefs> get_Time();</Line>
  <Line number="335">   data-&gt;err_type = <CheckRefs ids="2345">no_error</CheckRefs>;</Line>
  <Line number="336">     </Line>
  <Line number="337">}</Line>
</SourceFile>
