<SourceFile>
  <Line number="1">/* Copyright (C) 1999-2020 Free Software Foundation, Inc.</Line>
  <Line number="2">   This file is part of the GNU C Library.</Line>
  <Line number="3"></Line>
  <Line number="4">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="5">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="6">   License as published by the Free Software Foundation; either</Line>
  <Line number="7">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="8"></Line>
  <Line number="9">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="10">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="11">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="12">   Lesser General Public License for more details.</Line>
  <Line number="13"></Line>
  <Line number="14">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="15">   License along with the GNU C Library; if not, see</Line>
  <Line number="16">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="17"></Line>
  <Line number="18">#if !defined _SYS_STAT_H &amp;&amp; !defined _FCNTL_H</Line>
  <Line number="19"># error &quot;Never include &lt;bits/stat.h&gt; directly; use &lt;sys/stat.h&gt; instead.&quot;</Line>
  <Line number="20">#endif</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef _BITS_STAT_H</Line>
  <Line number="23">#define _BITS_STAT_H	1</Line>
  <Line number="24"></Line>
  <Line number="25">/* Versions of the `struct stat&apos; data structure.  */</Line>
  <Line number="26">#ifndef __x86_64__</Line>
  <Line number="27"># define _STAT_VER_LINUX_OLD	1</Line>
  <Line number="28"># define _STAT_VER_KERNEL	1</Line>
  <Line number="29"># define _STAT_VER_SVR4		2</Line>
  <Line number="30"># define _STAT_VER_LINUX	3</Line>
  <Line number="31"></Line>
  <Line number="32">/* i386 versions of the `xmknod&apos; interface.  */</Line>
  <Line number="33"># define _MKNOD_VER_LINUX	1</Line>
  <Line number="34"># define _MKNOD_VER_SVR4	2</Line>
  <Line number="35"># define _MKNOD_VER		_MKNOD_VER_LINUX /* The bits defined below.  */</Line>
  <Line number="36">#else</Line>
  <Line number="37"># define _STAT_VER_KERNEL	0</Line>
  <Line number="38"># define _STAT_VER_LINUX	1</Line>
  <Line number="39"></Line>
  <Line number="40">/* x86-64 versions of the `xmknod&apos; interface.  */</Line>
  <Line number="41"># define _MKNOD_VER_LINUX	0</Line>
  <Line number="42">#endif</Line>
  <Line number="43"></Line>
  <Line number="44">#define _STAT_VER		_STAT_VER_LINUX</Line>
  <Line number="45"></Line>
  <Line number="46">struct stat</Line>
  <Line number="47">  {</Line>
  <Line number="48">    __dev_t st_dev;		/* Device.  */</Line>
  <Line number="49">#ifndef __x86_64__</Line>
  <Line number="50">    unsigned short int __pad1;</Line>
  <Line number="51">#endif</Line>
  <Line number="52">#if defined __x86_64__ || !defined __USE_FILE_OFFSET64</Line>
  <Line number="53">    __ino_t st_ino;		/* File serial number.	*/</Line>
  <Line number="54">#else</Line>
  <Line number="55">    __ino_t __st_ino;			/* 32bit file serial number.	*/</Line>
  <Line number="56">#endif</Line>
  <Line number="57">#ifndef __x86_64__</Line>
  <Line number="58">    __mode_t st_mode;			/* File mode.  */</Line>
  <Line number="59">    __nlink_t st_nlink;			/* Link count.  */</Line>
  <Line number="60">#else</Line>
  <Line number="61">    __nlink_t st_nlink;		/* Link count.  */</Line>
  <Line number="62">    __mode_t st_mode;		/* File mode.  */</Line>
  <Line number="63">#endif</Line>
  <Line number="64">    __uid_t st_uid;		/* User ID of the file&apos;s owner.	*/</Line>
  <Line number="65">    __gid_t st_gid;		/* Group ID of the file&apos;s group.*/</Line>
  <Line number="66">#ifdef __x86_64__</Line>
  <Line number="67">    int __pad0;</Line>
  <Line number="68">#endif</Line>
  <Line number="69">    __dev_t st_rdev;		/* Device number, if device.  */</Line>
  <Line number="70">#ifndef __x86_64__</Line>
  <Line number="71">    unsigned short int __pad2;</Line>
  <Line number="72">#endif</Line>
  <Line number="73">#if defined __x86_64__ || !defined __USE_FILE_OFFSET64</Line>
  <Line number="74">    __off_t st_size;			/* Size of file, in bytes.  */</Line>
  <Line number="75">#else</Line>
  <Line number="76">    __off64_t st_size;			/* Size of file, in bytes.  */</Line>
  <Line number="77">#endif</Line>
  <Line number="78">    __blksize_t st_blksize;	/* Optimal block size for I/O.  */</Line>
  <Line number="79">#if defined __x86_64__  || !defined __USE_FILE_OFFSET64</Line>
  <Line number="80">    __blkcnt_t st_blocks;		/* Number 512-byte blocks allocated. */</Line>
  <Line number="81">#else</Line>
  <Line number="82">    __blkcnt64_t st_blocks;		/* Number 512-byte blocks allocated. */</Line>
  <Line number="83">#endif</Line>
  <Line number="84">#ifdef __USE_XOPEN2K8</Line>
  <Line number="85">    /* Nanosecond resolution timestamps are stored in a format</Line>
  <Line number="86">       equivalent to &apos;struct timespec&apos;.  This is the type used</Line>
  <Line number="87">       whenever possible but the Unix namespace rules do not allow the</Line>
  <Line number="88">       identifier &apos;timespec&apos; to appear in the &lt;sys/stat.h&gt; header.</Line>
  <Line number="89">       Therefore we have to handle the use of this header in strictly</Line>
  <Line number="90">       standard-compliant sources special.  */</Line>
  <Line number="91">    struct timespec st_atim;		/* Time of last access.  */</Line>
  <Line number="92">    struct timespec st_mtim;		/* Time of last modification.  */</Line>
  <Line number="93">    struct timespec st_ctim;		/* Time of last status change.  */</Line>
  <Line number="94"># define st_atime st_atim.tv_sec	/* Backward compatibility.  */</Line>
  <Line number="95"># define st_mtime st_mtim.tv_sec</Line>
  <Line number="96"># define st_ctime st_ctim.tv_sec</Line>
  <Line number="97">#else</Line>
  <Line number="98">    __time_t st_atime;			/* Time of last access.  */</Line>
  <Line number="99">    __syscall_ulong_t st_atimensec;	/* Nscecs of last access.  */</Line>
  <Line number="100">    __time_t st_mtime;			/* Time of last modification.  */</Line>
  <Line number="101">    __syscall_ulong_t st_mtimensec;	/* Nsecs of last modification.  */</Line>
  <Line number="102">    __time_t st_ctime;			/* Time of last status change.  */</Line>
  <Line number="103">    __syscall_ulong_t st_ctimensec;	/* Nsecs of last status change.  */</Line>
  <Line number="104">#endif</Line>
  <Line number="105">#ifdef __x86_64__</Line>
  <Line number="106">    __syscall_slong_t __glibc_reserved[3];</Line>
  <Line number="107">#else</Line>
  <Line number="108"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="109">    unsigned long int __glibc_reserved4;</Line>
  <Line number="110">    unsigned long int __glibc_reserved5;</Line>
  <Line number="111"># else</Line>
  <Line number="112">    __ino64_t st_ino;			/* File serial number.	*/</Line>
  <Line number="113"># endif</Line>
  <Line number="114">#endif</Line>
  <Line number="115">  };</Line>
  <Line number="116"></Line>
  <Line number="117">#ifdef __USE_LARGEFILE64</Line>
  <Line number="118">/* Note stat64 has the same shape as stat for x86-64.  */</Line>
  <Line number="119">struct stat64</Line>
  <Line number="120">  {</Line>
  <Line number="121">    __dev_t st_dev;		/* Device.  */</Line>
  <Line number="122"># ifdef __x86_64__</Line>
  <Line number="123">    __ino64_t st_ino;		/* File serial number.  */</Line>
  <Line number="124">    __nlink_t st_nlink;		/* Link count.  */</Line>
  <Line number="125">    __mode_t st_mode;		/* File mode.  */</Line>
  <Line number="126"># else</Line>
  <Line number="127">    unsigned int __pad1;</Line>
  <Line number="128">    __ino_t __st_ino;			/* 32bit file serial number.	*/</Line>
  <Line number="129">    __mode_t st_mode;			/* File mode.  */</Line>
  <Line number="130">    __nlink_t st_nlink;			/* Link count.  */</Line>
  <Line number="131"># endif</Line>
  <Line number="132">    __uid_t st_uid;		/* User ID of the file&apos;s owner.	*/</Line>
  <Line number="133">    __gid_t st_gid;		/* Group ID of the file&apos;s group.*/</Line>
  <Line number="134"># ifdef __x86_64__</Line>
  <Line number="135">    int __pad0;</Line>
  <Line number="136">    __dev_t st_rdev;		/* Device number, if device.  */</Line>
  <Line number="137">    __off_t st_size;		/* Size of file, in bytes.  */</Line>
  <Line number="138"># else</Line>
  <Line number="139">    __dev_t st_rdev;			/* Device number, if device.  */</Line>
  <Line number="140">    unsigned int __pad2;</Line>
  <Line number="141">    __off64_t st_size;			/* Size of file, in bytes.  */</Line>
  <Line number="142"># endif</Line>
  <Line number="143">    __blksize_t st_blksize;	/* Optimal block size for I/O.  */</Line>
  <Line number="144">    __blkcnt64_t st_blocks;	/* Nr. 512-byte blocks allocated.  */</Line>
  <Line number="145"># ifdef __USE_XOPEN2K8</Line>
  <Line number="146">    /* Nanosecond resolution timestamps are stored in a format</Line>
  <Line number="147">       equivalent to &apos;struct timespec&apos;.  This is the type used</Line>
  <Line number="148">       whenever possible but the Unix namespace rules do not allow the</Line>
  <Line number="149">       identifier &apos;timespec&apos; to appear in the &lt;sys/stat.h&gt; header.</Line>
  <Line number="150">       Therefore we have to handle the use of this header in strictly</Line>
  <Line number="151">       standard-compliant sources special.  */</Line>
  <Line number="152">    struct timespec st_atim;		/* Time of last access.  */</Line>
  <Line number="153">    struct timespec st_mtim;		/* Time of last modification.  */</Line>
  <Line number="154">    struct timespec st_ctim;		/* Time of last status change.  */</Line>
  <Line number="155"># else</Line>
  <Line number="156">    __time_t st_atime;			/* Time of last access.  */</Line>
  <Line number="157">    __syscall_ulong_t st_atimensec;	/* Nscecs of last access.  */</Line>
  <Line number="158">    __time_t st_mtime;			/* Time of last modification.  */</Line>
  <Line number="159">    __syscall_ulong_t st_mtimensec;	/* Nsecs of last modification.  */</Line>
  <Line number="160">    __time_t st_ctime;			/* Time of last status change.  */</Line>
  <Line number="161">    __syscall_ulong_t st_ctimensec;	/* Nsecs of last status change.  */</Line>
  <Line number="162"># endif</Line>
  <Line number="163"># ifdef __x86_64__</Line>
  <Line number="164">    __syscall_slong_t __glibc_reserved[3];</Line>
  <Line number="165"># else</Line>
  <Line number="166">    __ino64_t st_ino;			/* File serial number.		*/</Line>
  <Line number="167"># endif</Line>
  <Line number="168">  };</Line>
  <Line number="169">#endif</Line>
  <Line number="170"></Line>
  <Line number="171">/* Tell code we have these members.  */</Line>
  <Line number="172">#define	_STATBUF_ST_BLKSIZE</Line>
  <Line number="173">#define _STATBUF_ST_RDEV</Line>
  <Line number="174">/* Nanosecond resolution time values are supported.  */</Line>
  <Line number="175">#define _STATBUF_ST_NSEC</Line>
  <Line number="176"></Line>
  <Line number="177">/* Encoding of the file mode.  */</Line>
  <Line number="178"></Line>
  <Line number="179">#define	__S_IFMT	0170000	/* These bits determine file type.  */</Line>
  <Line number="180"></Line>
  <Line number="181">/* File types.  */</Line>
  <Line number="182">#define	__S_IFDIR	0040000	/* Directory.  */</Line>
  <Line number="183">#define	__S_IFCHR	0020000	/* Character device.  */</Line>
  <Line number="184">#define	__S_IFBLK	0060000	/* Block device.  */</Line>
  <Line number="185">#define	__S_IFREG	0100000	/* Regular file.  */</Line>
  <Line number="186">#define	__S_IFIFO	0010000	/* FIFO.  */</Line>
  <Line number="187">#define	__S_IFLNK	0120000	/* Symbolic link.  */</Line>
  <Line number="188">#define	__S_IFSOCK	0140000	/* Socket.  */</Line>
  <Line number="189"></Line>
  <Line number="190">/* POSIX.1b objects.  Note that these macros always evaluate to zero.  But</Line>
  <Line number="191">   they do it by enforcing the correct use of the macros.  */</Line>
  <Line number="192">#define __S_TYPEISMQ(buf)  ((buf)-&gt;st_mode - (buf)-&gt;st_mode)</Line>
  <Line number="193">#define __S_TYPEISSEM(buf) ((buf)-&gt;st_mode - (buf)-&gt;st_mode)</Line>
  <Line number="194">#define __S_TYPEISSHM(buf) ((buf)-&gt;st_mode - (buf)-&gt;st_mode)</Line>
  <Line number="195"></Line>
  <Line number="196">/* Protection bits.  */</Line>
  <Line number="197"></Line>
  <Line number="198">#define	__S_ISUID	04000	/* Set user ID on execution.  */</Line>
  <Line number="199">#define	__S_ISGID	02000	/* Set group ID on execution.  */</Line>
  <Line number="200">#define	__S_ISVTX	01000	/* Save swapped text after use (sticky).  */</Line>
  <Line number="201">#define	__S_IREAD	0400	/* Read by owner.  */</Line>
  <Line number="202">#define	__S_IWRITE	0200	/* Write by owner.  */</Line>
  <Line number="203">#define	__S_IEXEC	0100	/* Execute by owner.  */</Line>
  <Line number="204"></Line>
  <Line number="205">#ifdef __USE_ATFILE</Line>
  <Line number="206"># define UTIME_NOW	((1l &lt;&lt; 30) - 1l)</Line>
  <Line number="207"># define UTIME_OMIT	((1l &lt;&lt; 30) - 2l)</Line>
  <Line number="208">#endif</Line>
  <Line number="209"></Line>
  <Line number="210">#endif	/* bits/stat.h */</Line>
</SourceFile>
