<SourceFile>
  <Line number="1">/* Macros to control TS 18661-3 glibc features where the same</Line>
  <Line number="2">   definitions are appropriate for all platforms.</Line>
  <Line number="3">   Copyright (C) 2017-2020 Free Software Foundation, Inc.</Line>
  <Line number="4">   This file is part of the GNU C Library.</Line>
  <Line number="5"></Line>
  <Line number="6">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="7">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="8">   License as published by the Free Software Foundation; either</Line>
  <Line number="9">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="10"></Line>
  <Line number="11">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="12">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="13">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="14">   Lesser General Public License for more details.</Line>
  <Line number="15"></Line>
  <Line number="16">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="17">   License along with the GNU C Library; if not, see</Line>
  <Line number="18">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="19"></Line>
  <Line number="20">#ifndef _BITS_FLOATN_COMMON_H</Line>
  <Line number="21">#define _BITS_FLOATN_COMMON_H</Line>
  <Line number="22"></Line>
  <Line number="23">#include &lt;features.h&gt;</Line>
  <Line number="24">#include &lt;bits/long-double.h&gt;</Line>
  <Line number="25"></Line>
  <Line number="26">/* This header should be included at the bottom of each bits/floatn.h.</Line>
  <Line number="27">   It defines the following macros for each _FloatN and _FloatNx type,</Line>
  <Line number="28">   where the same definitions, or definitions based only on the macros</Line>
  <Line number="29">   in bits/floatn.h, are appropriate for all glibc configurations.  */</Line>
  <Line number="30"></Line>
  <Line number="31">/* Defined to 1 if the current compiler invocation provides a</Line>
  <Line number="32">   floating-point type with the right format for this type, and this</Line>
  <Line number="33">   glibc includes corresponding *fN or *fNx interfaces for it.  */</Line>
  <Line number="34">#define __HAVE_FLOAT16 0</Line>
  <Line number="35">#define __HAVE_FLOAT32 1</Line>
  <Line number="36">#define __HAVE_FLOAT64 1</Line>
  <Line number="37">#define __HAVE_FLOAT32X 1</Line>
  <Line number="38">#define __HAVE_FLOAT128X 0</Line>
  <Line number="39"></Line>
  <Line number="40">/* Defined to 1 if the corresponding __HAVE_&lt;type&gt; macro is 1 and the</Line>
  <Line number="41">   type is the first with its format in the sequence of (the default</Line>
  <Line number="42">   choices for) float, double, long double, _Float16, _Float32,</Line>
  <Line number="43">   _Float64, _Float128, _Float32x, _Float64x, _Float128x for this</Line>
  <Line number="44">   glibc; that is, if functions present once per floating-point format</Line>
  <Line number="45">   rather than once per type are present for this type.</Line>
  <Line number="46"></Line>
  <Line number="47">   All configurations supported by glibc have _Float32 the same format</Line>
  <Line number="48">   as float, _Float64 and _Float32x the same format as double, the</Line>
  <Line number="49">   _Float64x the same format as either long double or _Float128.  No</Line>
  <Line number="50">   configurations support _Float128x or, as of GCC 7, have compiler</Line>
  <Line number="51">   support for a type meeting the requirements for _Float128x.  */</Line>
  <Line number="52">#define __HAVE_DISTINCT_FLOAT16 __HAVE_FLOAT16</Line>
  <Line number="53">#define __HAVE_DISTINCT_FLOAT32 0</Line>
  <Line number="54">#define __HAVE_DISTINCT_FLOAT64 0</Line>
  <Line number="55">#define __HAVE_DISTINCT_FLOAT32X 0</Line>
  <Line number="56">#define __HAVE_DISTINCT_FLOAT64X 0</Line>
  <Line number="57">#define __HAVE_DISTINCT_FLOAT128X __HAVE_FLOAT128X</Line>
  <Line number="58"></Line>
  <Line number="59">/* Defined to 1 if the corresponding _FloatN type is not binary compatible</Line>
  <Line number="60">   with the corresponding ISO C type in the current compilation unit as</Line>
  <Line number="61">   opposed to __HAVE_DISTINCT_FLOATN, which indicates the default types built</Line>
  <Line number="62">   in glibc.  */</Line>
  <Line number="63">#define __HAVE_FLOAT128_UNLIKE_LDBL (__HAVE_DISTINCT_FLOAT128	\</Line>
  <Line number="64">				     &amp;&amp; __LDBL_MANT_DIG__ != 113)</Line>
  <Line number="65"></Line>
  <Line number="66">/* Defined to 1 if any _FloatN or _FloatNx types that are not</Line>
  <Line number="67">   ABI-distinct are however distinct types at the C language level (so</Line>
  <Line number="68">   for the purposes of __builtin_types_compatible_p and _Generic).  */</Line>
  <Line number="69">#if __GNUC_PREREQ (7, 0) &amp;&amp; !defined __cplusplus</Line>
  <Line number="70"># define __HAVE_FLOATN_NOT_TYPEDEF 1</Line>
  <Line number="71">#else</Line>
  <Line number="72"># define __HAVE_FLOATN_NOT_TYPEDEF 0</Line>
  <Line number="73">#endif</Line>
  <Line number="74"></Line>
  <Line number="75">#ifndef __ASSEMBLER__</Line>
  <Line number="76"></Line>
  <Line number="77">/* Defined to concatenate the literal suffix to be used with _FloatN</Line>
  <Line number="78">   or _FloatNx types, if __HAVE_&lt;type&gt; is 1.  The corresponding</Line>
  <Line number="79">   literal suffixes exist since GCC 7, for C only.  */</Line>
  <Line number="80"># if __HAVE_FLOAT16</Line>
  <Line number="81">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="82">/* No corresponding suffix available for this type.  */</Line>
  <Line number="83">#   define __f16(x) ((_Float16) x##f)</Line>
  <Line number="84">#  else</Line>
  <Line number="85">#   define __f16(x) x##f16</Line>
  <Line number="86">#  endif</Line>
  <Line number="87"># endif</Line>
  <Line number="88"></Line>
  <Line number="89"># if __HAVE_FLOAT32</Line>
  <Line number="90">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="91">#   define __f32(x) x##f</Line>
  <Line number="92">#  else</Line>
  <Line number="93">#   define __f32(x) x##f32</Line>
  <Line number="94">#  endif</Line>
  <Line number="95"># endif</Line>
  <Line number="96"></Line>
  <Line number="97"># if __HAVE_FLOAT64</Line>
  <Line number="98">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="99">#   ifdef __NO_LONG_DOUBLE_MATH</Line>
  <Line number="100">#    define __f64(x) x##l</Line>
  <Line number="101">#   else</Line>
  <Line number="102">#    define __f64(x) x</Line>
  <Line number="103">#   endif</Line>
  <Line number="104">#  else</Line>
  <Line number="105">#   define __f64(x) x##f64</Line>
  <Line number="106">#  endif</Line>
  <Line number="107"># endif</Line>
  <Line number="108"></Line>
  <Line number="109"># if __HAVE_FLOAT32X</Line>
  <Line number="110">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="111">#   define __f32x(x) x</Line>
  <Line number="112">#  else</Line>
  <Line number="113">#   define __f32x(x) x##f32x</Line>
  <Line number="114">#  endif</Line>
  <Line number="115"># endif</Line>
  <Line number="116"></Line>
  <Line number="117"># if __HAVE_FLOAT64X</Line>
  <Line number="118">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="119">#   if __HAVE_FLOAT64X_LONG_DOUBLE</Line>
  <Line number="120">#    define __f64x(x) x##l</Line>
  <Line number="121">#   else</Line>
  <Line number="122">#    define __f64x(x) __f128 (x)</Line>
  <Line number="123">#   endif</Line>
  <Line number="124">#  else</Line>
  <Line number="125">#   define __f64x(x) x##f64x</Line>
  <Line number="126">#  endif</Line>
  <Line number="127"># endif</Line>
  <Line number="128"></Line>
  <Line number="129"># if __HAVE_FLOAT128X</Line>
  <Line number="130">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="131">#   error &quot;_Float128X supported but no constant suffix&quot;</Line>
  <Line number="132">#  else</Line>
  <Line number="133">#   define __f128x(x) x##f128x</Line>
  <Line number="134">#  endif</Line>
  <Line number="135"># endif</Line>
  <Line number="136"></Line>
  <Line number="137">/* Defined to a complex type if __HAVE_&lt;type&gt; is 1.  */</Line>
  <Line number="138"># if __HAVE_FLOAT16</Line>
  <Line number="139">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="140">typedef _Complex float __cfloat16 __attribute__ ((__mode__ (__HC__)));</Line>
  <Line number="141">#   define __CFLOAT16 __cfloat16</Line>
  <Line number="142">#  else</Line>
  <Line number="143">#   define __CFLOAT16 _Complex _Float16</Line>
  <Line number="144">#  endif</Line>
  <Line number="145"># endif</Line>
  <Line number="146"></Line>
  <Line number="147"># if __HAVE_FLOAT32</Line>
  <Line number="148">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="149">#   define __CFLOAT32 _Complex float</Line>
  <Line number="150">#  else</Line>
  <Line number="151">#   define __CFLOAT32 _Complex _Float32</Line>
  <Line number="152">#  endif</Line>
  <Line number="153"># endif</Line>
  <Line number="154"></Line>
  <Line number="155"># if __HAVE_FLOAT64</Line>
  <Line number="156">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="157">#   ifdef __NO_LONG_DOUBLE_MATH</Line>
  <Line number="158">#    define __CFLOAT64 _Complex long double</Line>
  <Line number="159">#   else</Line>
  <Line number="160">#    define __CFLOAT64 _Complex double</Line>
  <Line number="161">#   endif</Line>
  <Line number="162">#  else</Line>
  <Line number="163">#   define __CFLOAT64 _Complex _Float64</Line>
  <Line number="164">#  endif</Line>
  <Line number="165"># endif</Line>
  <Line number="166"></Line>
  <Line number="167"># if __HAVE_FLOAT32X</Line>
  <Line number="168">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="169">#   define __CFLOAT32X _Complex double</Line>
  <Line number="170">#  else</Line>
  <Line number="171">#   define __CFLOAT32X _Complex _Float32x</Line>
  <Line number="172">#  endif</Line>
  <Line number="173"># endif</Line>
  <Line number="174"></Line>
  <Line number="175"># if __HAVE_FLOAT64X</Line>
  <Line number="176">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="177">#   if __HAVE_FLOAT64X_LONG_DOUBLE</Line>
  <Line number="178">#    define __CFLOAT64X _Complex long double</Line>
  <Line number="179">#   else</Line>
  <Line number="180">#    define __CFLOAT64X __CFLOAT128</Line>
  <Line number="181">#   endif</Line>
  <Line number="182">#  else</Line>
  <Line number="183">#   define __CFLOAT64X _Complex _Float64x</Line>
  <Line number="184">#  endif</Line>
  <Line number="185"># endif</Line>
  <Line number="186"></Line>
  <Line number="187"># if __HAVE_FLOAT128X</Line>
  <Line number="188">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="189">#   error &quot;_Float128X supported but no complex type&quot;</Line>
  <Line number="190">#  else</Line>
  <Line number="191">#   define __CFLOAT128X _Complex _Float128x</Line>
  <Line number="192">#  endif</Line>
  <Line number="193"># endif</Line>
  <Line number="194"></Line>
  <Line number="195">/* The remaining of this file provides support for older compilers.  */</Line>
  <Line number="196"># if __HAVE_FLOAT16</Line>
  <Line number="197"></Line>
  <Line number="198">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="199">typedef float _Float16 __attribute__ ((__mode__ (__HF__)));</Line>
  <Line number="200">#  endif</Line>
  <Line number="201"></Line>
  <Line number="202">#  if !__GNUC_PREREQ (7, 0)</Line>
  <Line number="203">#   define __builtin_huge_valf16() ((_Float16) __builtin_huge_val ())</Line>
  <Line number="204">#   define __builtin_inff16() ((_Float16) __builtin_inf ())</Line>
  <Line number="205">#   define __builtin_nanf16(x) ((_Float16) __builtin_nan (x))</Line>
  <Line number="206">#   define __builtin_nansf16(x) ((_Float16) __builtin_nans (x))</Line>
  <Line number="207">#  endif</Line>
  <Line number="208"></Line>
  <Line number="209"># endif</Line>
  <Line number="210"></Line>
  <Line number="211"># if __HAVE_FLOAT32</Line>
  <Line number="212"></Line>
  <Line number="213">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="214">typedef float _Float32;</Line>
  <Line number="215">#  endif</Line>
  <Line number="216"></Line>
  <Line number="217">#  if !__GNUC_PREREQ (7, 0)</Line>
  <Line number="218">#   define __builtin_huge_valf32() (__builtin_huge_valf ())</Line>
  <Line number="219">#   define __builtin_inff32() (__builtin_inff ())</Line>
  <Line number="220">#   define __builtin_nanf32(x) (__builtin_nanf (x))</Line>
  <Line number="221">#   define __builtin_nansf32(x) (__builtin_nansf (x))</Line>
  <Line number="222">#  endif</Line>
  <Line number="223"></Line>
  <Line number="224"># endif</Line>
  <Line number="225"></Line>
  <Line number="226"># if __HAVE_FLOAT64</Line>
  <Line number="227"></Line>
  <Line number="228">/* If double, long double and _Float64 all have the same set of</Line>
  <Line number="229">   values, TS 18661-3 requires the usual arithmetic conversions on</Line>
  <Line number="230">   long double and _Float64 to produce _Float64.  For this to be the</Line>
  <Line number="231">   case when building with a compiler without a distinct _Float64</Line>
  <Line number="232">   type, _Float64 must be a typedef for long double, not for</Line>
  <Line number="233">   double.  */</Line>
  <Line number="234"></Line>
  <Line number="235">#  ifdef __NO_LONG_DOUBLE_MATH</Line>
  <Line number="236"></Line>
  <Line number="237">#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="238">typedef long double _Float64;</Line>
  <Line number="239">#   endif</Line>
  <Line number="240"></Line>
  <Line number="241">#   if !__GNUC_PREREQ (7, 0)</Line>
  <Line number="242">#    define __builtin_huge_valf64() (__builtin_huge_vall ())</Line>
  <Line number="243">#    define __builtin_inff64() (__builtin_infl ())</Line>
  <Line number="244">#    define __builtin_nanf64(x) (__builtin_nanl (x))</Line>
  <Line number="245">#    define __builtin_nansf64(x) (__builtin_nansl (x))</Line>
  <Line number="246">#   endif</Line>
  <Line number="247"></Line>
  <Line number="248">#  else</Line>
  <Line number="249"></Line>
  <Line number="250">#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="251">typedef double _Float64;</Line>
  <Line number="252">#   endif</Line>
  <Line number="253"></Line>
  <Line number="254">#   if !__GNUC_PREREQ (7, 0)</Line>
  <Line number="255">#    define __builtin_huge_valf64() (__builtin_huge_val ())</Line>
  <Line number="256">#    define __builtin_inff64() (__builtin_inf ())</Line>
  <Line number="257">#    define __builtin_nanf64(x) (__builtin_nan (x))</Line>
  <Line number="258">#    define __builtin_nansf64(x) (__builtin_nans (x))</Line>
  <Line number="259">#   endif</Line>
  <Line number="260"></Line>
  <Line number="261">#  endif</Line>
  <Line number="262"></Line>
  <Line number="263"># endif</Line>
  <Line number="264"></Line>
  <Line number="265"># if __HAVE_FLOAT32X</Line>
  <Line number="266"></Line>
  <Line number="267">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="268">typedef double _Float32x;</Line>
  <Line number="269">#  endif</Line>
  <Line number="270"></Line>
  <Line number="271">#  if !__GNUC_PREREQ (7, 0)</Line>
  <Line number="272">#   define __builtin_huge_valf32x() (__builtin_huge_val ())</Line>
  <Line number="273">#   define __builtin_inff32x() (__builtin_inf ())</Line>
  <Line number="274">#   define __builtin_nanf32x(x) (__builtin_nan (x))</Line>
  <Line number="275">#   define __builtin_nansf32x(x) (__builtin_nans (x))</Line>
  <Line number="276">#  endif</Line>
  <Line number="277"></Line>
  <Line number="278"># endif</Line>
  <Line number="279"></Line>
  <Line number="280"># if __HAVE_FLOAT64X</Line>
  <Line number="281"></Line>
  <Line number="282">#  if __HAVE_FLOAT64X_LONG_DOUBLE</Line>
  <Line number="283"></Line>
  <Line number="284">#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="285">typedef long double _Float64x;</Line>
  <Line number="286">#   endif</Line>
  <Line number="287"></Line>
  <Line number="288">#   if !__GNUC_PREREQ (7, 0)</Line>
  <Line number="289">#    define __builtin_huge_valf64x() (__builtin_huge_vall ())</Line>
  <Line number="290">#    define __builtin_inff64x() (__builtin_infl ())</Line>
  <Line number="291">#    define __builtin_nanf64x(x) (__builtin_nanl (x))</Line>
  <Line number="292">#    define __builtin_nansf64x(x) (__builtin_nansl (x))</Line>
  <Line number="293">#   endif</Line>
  <Line number="294"></Line>
  <Line number="295">#  else</Line>
  <Line number="296"></Line>
  <Line number="297">#   if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="298">typedef _Float128 _Float64x;</Line>
  <Line number="299">#   endif</Line>
  <Line number="300"></Line>
  <Line number="301">#   if !__GNUC_PREREQ (7, 0)</Line>
  <Line number="302">#    define __builtin_huge_valf64x() (__builtin_huge_valf128 ())</Line>
  <Line number="303">#    define __builtin_inff64x() (__builtin_inff128 ())</Line>
  <Line number="304">#    define __builtin_nanf64x(x) (__builtin_nanf128 (x))</Line>
  <Line number="305">#    define __builtin_nansf64x(x) (__builtin_nansf128 (x))</Line>
  <Line number="306">#   endif</Line>
  <Line number="307"></Line>
  <Line number="308">#  endif</Line>
  <Line number="309"></Line>
  <Line number="310"># endif</Line>
  <Line number="311"></Line>
  <Line number="312"># if __HAVE_FLOAT128X</Line>
  <Line number="313"></Line>
  <Line number="314">#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus</Line>
  <Line number="315">#   error &quot;_Float128x supported but no type&quot;</Line>
  <Line number="316">#  endif</Line>
  <Line number="317"></Line>
  <Line number="318">#  if !__GNUC_PREREQ (7, 0)</Line>
  <Line number="319">#   define __builtin_huge_valf128x() ((_Float128x) __builtin_huge_val ())</Line>
  <Line number="320">#   define __builtin_inff128x() ((_Float128x) __builtin_inf ())</Line>
  <Line number="321">#   define __builtin_nanf128x(x) ((_Float128x) __builtin_nan (x))</Line>
  <Line number="322">#   define __builtin_nansf128x(x) ((_Float128x) __builtin_nans (x))</Line>
  <Line number="323">#  endif</Line>
  <Line number="324"></Line>
  <Line number="325"># endif</Line>
  <Line number="326"></Line>
  <Line number="327">#endif /* !__ASSEMBLER__.  */</Line>
  <Line number="328"></Line>
  <Line number="329">#endif /* _BITS_FLOATN_COMMON_H */</Line>
</SourceFile>
