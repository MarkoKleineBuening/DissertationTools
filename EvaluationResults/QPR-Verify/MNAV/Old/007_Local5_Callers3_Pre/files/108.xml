<SourceFile>
  <Line number="1">/* siginfo constants.  Linux version.</Line>
  <Line number="2">   Copyright (C) 1997-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef _BITS_SIGINFO_CONSTS_H</Line>
  <Line number="20">#define _BITS_SIGINFO_CONSTS_H 1</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef _SIGNAL_H</Line>
  <Line number="23">#error &quot;Don&apos;t include &lt;bits/siginfo-consts.h&gt; directly; use &lt;signal.h&gt; instead.&quot;</Line>
  <Line number="24">#endif</Line>
  <Line number="25"></Line>
  <Line number="26">/* Most of these constants are uniform across all architectures, but there</Line>
  <Line number="27">   is one exception.  */</Line>
  <Line number="28">#include &lt;bits/siginfo-arch.h&gt;</Line>
  <Line number="29">#ifndef __SI_ASYNCIO_AFTER_SIGIO</Line>
  <Line number="30"># define __SI_ASYNCIO_AFTER_SIGIO 1</Line>
  <Line number="31">#endif</Line>
  <Line number="32"></Line>
  <Line number="33">/* Values for `si_code&apos;.  Positive values are reserved for kernel-generated</Line>
  <Line number="34">   signals.  */</Line>
  <Line number="35">enum</Line>
  <Line number="36">{</Line>
  <Line number="37">  SI_ASYNCNL = <CheckRefs ids="647">-</CheckRefs>60,		/* Sent by asynch name lookup completion.  */</Line>
  <Line number="38">  SI_DETHREAD = <CheckRefs ids="648">-</CheckRefs>7,		/* Sent by execve killing subsidiary</Line>
  <Line number="39">				   threads.  */</Line>
  <Line number="40">  SI_TKILL,			/* Sent by tkill.  */</Line>
  <Line number="41">  SI_SIGIO,			/* Sent by queued SIGIO. */</Line>
  <Line number="42">#if __SI_ASYNCIO_AFTER_SIGIO</Line>
  <Line number="43">  SI_ASYNCIO,			/* Sent by AIO completion.  */</Line>
  <Line number="44">  SI_MESGQ,			/* Sent by real time mesq state change.  */</Line>
  <Line number="45">  SI_TIMER,			/* Sent by timer expiration.  */</Line>
  <Line number="46">#else</Line>
  <Line number="47">  SI_MESGQ,</Line>
  <Line number="48">  SI_TIMER,</Line>
  <Line number="49">  SI_ASYNCIO,</Line>
  <Line number="50">#endif</Line>
  <Line number="51">  SI_QUEUE,			/* Sent by sigqueue.  */</Line>
  <Line number="52">  SI_USER,			/* Sent by kill, sigsend.  */</Line>
  <Line number="53">  SI_KERNEL = 0x80		/* Send by kernel.  */</Line>
  <Line number="54"></Line>
  <Line number="55">#define SI_ASYNCNL	SI_ASYNCNL</Line>
  <Line number="56">#define SI_DETHREAD	SI_DETHREAD</Line>
  <Line number="57">#define SI_TKILL	SI_TKILL</Line>
  <Line number="58">#define SI_SIGIO	SI_SIGIO</Line>
  <Line number="59">#define SI_ASYNCIO	SI_ASYNCIO</Line>
  <Line number="60">#define SI_MESGQ	SI_MESGQ</Line>
  <Line number="61">#define SI_TIMER	SI_TIMER</Line>
  <Line number="62">#define SI_ASYNCIO	SI_ASYNCIO</Line>
  <Line number="63">#define SI_QUEUE	SI_QUEUE</Line>
  <Line number="64">#define SI_USER		SI_USER</Line>
  <Line number="65">#define SI_KERNEL	SI_KERNEL</Line>
  <Line number="66">};</Line>
  <Line number="67"></Line>
  <Line number="68"></Line>
  <Line number="69"># if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</Line>
  <Line number="70">/* `si_code&apos; values for SIGILL signal.  */</Line>
  <Line number="71">enum</Line>
  <Line number="72">{</Line>
  <Line number="73">  ILL_ILLOPC = 1,		/* Illegal opcode.  */</Line>
  <Line number="74">#  define ILL_ILLOPC	ILL_ILLOPC</Line>
  <Line number="75">  ILL_ILLOPN,			/* Illegal operand.  */</Line>
  <Line number="76">#  define ILL_ILLOPN	ILL_ILLOPN</Line>
  <Line number="77">  ILL_ILLADR,			/* Illegal addressing mode.  */</Line>
  <Line number="78">#  define ILL_ILLADR	ILL_ILLADR</Line>
  <Line number="79">  ILL_ILLTRP,			/* Illegal trap. */</Line>
  <Line number="80">#  define ILL_ILLTRP	ILL_ILLTRP</Line>
  <Line number="81">  ILL_PRVOPC,			/* Privileged opcode.  */</Line>
  <Line number="82">#  define ILL_PRVOPC	ILL_PRVOPC</Line>
  <Line number="83">  ILL_PRVREG,			/* Privileged register.  */</Line>
  <Line number="84">#  define ILL_PRVREG	ILL_PRVREG</Line>
  <Line number="85">  ILL_COPROC,			/* Coprocessor error.  */</Line>
  <Line number="86">#  define ILL_COPROC	ILL_COPROC</Line>
  <Line number="87">  ILL_BADSTK,			/* Internal stack error.  */</Line>
  <Line number="88">#  define ILL_BADSTK	ILL_BADSTK</Line>
  <Line number="89">  ILL_BADIADDR			/* Unimplemented instruction address.  */</Line>
  <Line number="90">#  define ILL_BADIADDR ILL_BADIADDR</Line>
  <Line number="91">};</Line>
  <Line number="92"></Line>
  <Line number="93">/* `si_code&apos; values for SIGFPE signal.  */</Line>
  <Line number="94">enum</Line>
  <Line number="95">{</Line>
  <Line number="96">  FPE_INTDIV = 1,		/* Integer divide by zero.  */</Line>
  <Line number="97">#  define FPE_INTDIV	FPE_INTDIV</Line>
  <Line number="98">  FPE_INTOVF,			/* Integer overflow.  */</Line>
  <Line number="99">#  define FPE_INTOVF	FPE_INTOVF</Line>
  <Line number="100">  FPE_FLTDIV,			/* Floating point divide by zero.  */</Line>
  <Line number="101">#  define FPE_FLTDIV	FPE_FLTDIV</Line>
  <Line number="102">  FPE_FLTOVF,			/* Floating point overflow.  */</Line>
  <Line number="103">#  define FPE_FLTOVF	FPE_FLTOVF</Line>
  <Line number="104">  FPE_FLTUND,			/* Floating point underflow.  */</Line>
  <Line number="105">#  define FPE_FLTUND	FPE_FLTUND</Line>
  <Line number="106">  FPE_FLTRES,			/* Floating point inexact result.  */</Line>
  <Line number="107">#  define FPE_FLTRES	FPE_FLTRES</Line>
  <Line number="108">  FPE_FLTINV,			/* Floating point invalid operation.  */</Line>
  <Line number="109">#  define FPE_FLTINV	FPE_FLTINV</Line>
  <Line number="110">  FPE_FLTSUB,			/* Subscript out of range.  */</Line>
  <Line number="111">#  define FPE_FLTSUB	FPE_FLTSUB</Line>
  <Line number="112">  FPE_FLTUNK = 14,		/* Undiagnosed floating-point exception.  */</Line>
  <Line number="113">#  define FPE_FLTUNK	FPE_FLTUNK</Line>
  <Line number="114">  FPE_CONDTRAP			/* Trap on condition.  */</Line>
  <Line number="115">#  define FPE_CONDTRAP	FPE_CONDTRAP</Line>
  <Line number="116">};</Line>
  <Line number="117"></Line>
  <Line number="118">/* `si_code&apos; values for SIGSEGV signal.  */</Line>
  <Line number="119">enum</Line>
  <Line number="120">{</Line>
  <Line number="121">  SEGV_MAPERR = 1,		/* Address not mapped to object.  */</Line>
  <Line number="122">#  define SEGV_MAPERR	SEGV_MAPERR</Line>
  <Line number="123">  SEGV_ACCERR,			/* Invalid permissions for mapped object.  */</Line>
  <Line number="124">#  define SEGV_ACCERR	SEGV_ACCERR</Line>
  <Line number="125">  SEGV_BNDERR,			/* Bounds checking failure.  */</Line>
  <Line number="126">#  define SEGV_BNDERR	SEGV_BNDERR</Line>
  <Line number="127">  SEGV_PKUERR,			/* Protection key checking failure.  */</Line>
  <Line number="128">#  define SEGV_PKUERR	SEGV_PKUERR</Line>
  <Line number="129">  SEGV_ACCADI,			/* ADI not enabled for mapped object.  */</Line>
  <Line number="130">#  define SEGV_ACCADI	SEGV_ACCADI</Line>
  <Line number="131">  SEGV_ADIDERR,			/* Disrupting MCD error.  */</Line>
  <Line number="132">#  define SEGV_ADIDERR	SEGV_ADIDERR</Line>
  <Line number="133">  SEGV_ADIPERR			/* Precise MCD exception.  */</Line>
  <Line number="134">#  define SEGV_ADIPERR	SEGV_ADIPERR</Line>
  <Line number="135">};</Line>
  <Line number="136"></Line>
  <Line number="137">/* `si_code&apos; values for SIGBUS signal.  */</Line>
  <Line number="138">enum</Line>
  <Line number="139">{</Line>
  <Line number="140">  BUS_ADRALN = 1,		/* Invalid address alignment.  */</Line>
  <Line number="141">#  define BUS_ADRALN	BUS_ADRALN</Line>
  <Line number="142">  BUS_ADRERR,			/* Non-existant physical address.  */</Line>
  <Line number="143">#  define BUS_ADRERR	BUS_ADRERR</Line>
  <Line number="144">  BUS_OBJERR,			/* Object specific hardware error.  */</Line>
  <Line number="145">#  define BUS_OBJERR	BUS_OBJERR</Line>
  <Line number="146">  BUS_MCEERR_AR,		/* Hardware memory error: action required.  */</Line>
  <Line number="147">#  define BUS_MCEERR_AR	BUS_MCEERR_AR</Line>
  <Line number="148">  BUS_MCEERR_AO			/* Hardware memory error: action optional.  */</Line>
  <Line number="149">#  define BUS_MCEERR_AO	BUS_MCEERR_AO</Line>
  <Line number="150">};</Line>
  <Line number="151"># endif</Line>
  <Line number="152"></Line>
  <Line number="153"># ifdef __USE_XOPEN_EXTENDED</Line>
  <Line number="154">/* `si_code&apos; values for SIGTRAP signal.  */</Line>
  <Line number="155">enum</Line>
  <Line number="156">{</Line>
  <Line number="157">  TRAP_BRKPT = 1,		/* Process breakpoint.  */</Line>
  <Line number="158">#  define TRAP_BRKPT	TRAP_BRKPT</Line>
  <Line number="159">  TRAP_TRACE,			/* Process trace trap.  */</Line>
  <Line number="160">#  define TRAP_TRACE	TRAP_TRACE</Line>
  <Line number="161">  TRAP_BRANCH,			/* Process taken branch trap.  */</Line>
  <Line number="162">#  define TRAP_BRANCH	TRAP_BRANCH</Line>
  <Line number="163">  TRAP_HWBKPT,			/* Hardware breakpoint/watchpoint.  */</Line>
  <Line number="164">#  define TRAP_HWBKPT	TRAP_HWBKPT</Line>
  <Line number="165">  TRAP_UNK			/* Undiagnosed trap.  */</Line>
  <Line number="166">#  define TRAP_UNK	TRAP_UNK</Line>
  <Line number="167">};</Line>
  <Line number="168"># endif</Line>
  <Line number="169"></Line>
  <Line number="170"># if defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</Line>
  <Line number="171">/* `si_code&apos; values for SIGCHLD signal.  */</Line>
  <Line number="172">enum</Line>
  <Line number="173">{</Line>
  <Line number="174">  CLD_EXITED = 1,		/* Child has exited.  */</Line>
  <Line number="175">#  define CLD_EXITED	CLD_EXITED</Line>
  <Line number="176">  CLD_KILLED,			/* Child was killed.  */</Line>
  <Line number="177">#  define CLD_KILLED	CLD_KILLED</Line>
  <Line number="178">  CLD_DUMPED,			/* Child terminated abnormally.  */</Line>
  <Line number="179">#  define CLD_DUMPED	CLD_DUMPED</Line>
  <Line number="180">  CLD_TRAPPED,			/* Traced child has trapped.  */</Line>
  <Line number="181">#  define CLD_TRAPPED	CLD_TRAPPED</Line>
  <Line number="182">  CLD_STOPPED,			/* Child has stopped.  */</Line>
  <Line number="183">#  define CLD_STOPPED	CLD_STOPPED</Line>
  <Line number="184">  CLD_CONTINUED			/* Stopped child has continued.  */</Line>
  <Line number="185">#  define CLD_CONTINUED	CLD_CONTINUED</Line>
  <Line number="186">};</Line>
  <Line number="187"></Line>
  <Line number="188">/* `si_code&apos; values for SIGPOLL signal.  */</Line>
  <Line number="189">enum</Line>
  <Line number="190">{</Line>
  <Line number="191">  POLL_IN = 1,			/* Data input available.  */</Line>
  <Line number="192">#  define POLL_IN	POLL_IN</Line>
  <Line number="193">  POLL_OUT,			/* Output buffers available.  */</Line>
  <Line number="194">#  define POLL_OUT	POLL_OUT</Line>
  <Line number="195">  POLL_MSG,			/* Input message available.   */</Line>
  <Line number="196">#  define POLL_MSG	POLL_MSG</Line>
  <Line number="197">  POLL_ERR,			/* I/O error.  */</Line>
  <Line number="198">#  define POLL_ERR	POLL_ERR</Line>
  <Line number="199">  POLL_PRI,			/* High priority input available.  */</Line>
  <Line number="200">#  define POLL_PRI	POLL_PRI</Line>
  <Line number="201">  POLL_HUP			/* Device disconnected.  */</Line>
  <Line number="202">#  define POLL_HUP	POLL_HUP</Line>
  <Line number="203">};</Line>
  <Line number="204"># endif</Line>
  <Line number="205"></Line>
  <Line number="206">/* Architectures might also add architecture-specific constants.</Line>
  <Line number="207">   These are all considered GNU extensions.  */</Line>
  <Line number="208">#ifdef __USE_GNU</Line>
  <Line number="209"># include &lt;bits/siginfo-consts-arch.h&gt;</Line>
  <Line number="210">#endif</Line>
  <Line number="211"></Line>
  <Line number="212">#endif</Line>
</SourceFile>
