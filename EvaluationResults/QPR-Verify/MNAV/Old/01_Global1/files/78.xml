<SourceFile>
  <Line number="1">/* O_*, F_*, FD_* bit values for Linux.</Line>
  <Line number="2">   Copyright (C) 2001-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef	_FCNTL_H</Line>
  <Line number="20"># error &quot;Never use &lt;bits/fcntl-linux.h&gt; directly; include &lt;fcntl.h&gt; instead.&quot;</Line>
  <Line number="21">#endif</Line>
  <Line number="22"></Line>
  <Line number="23">/* This file contains shared definitions between Linux architectures</Line>
  <Line number="24">   and is included by &lt;bits/fcntl.h&gt; to declare them.  The various</Line>
  <Line number="25">   #ifndef cases allow the architecture specific file to define those</Line>
  <Line number="26">   values with different values.</Line>
  <Line number="27"></Line>
  <Line number="28">   A minimal &lt;bits/fcntl.h&gt; contains just:</Line>
  <Line number="29"></Line>
  <Line number="30">   struct flock {...}</Line>
  <Line number="31">   #ifdef __USE_LARGEFILE64</Line>
  <Line number="32">   struct flock64 {...}</Line>
  <Line number="33">   #endif</Line>
  <Line number="34">   #include &lt;bits/fcntl-linux.h&gt;</Line>
  <Line number="35">*/</Line>
  <Line number="36"></Line>
  <Line number="37">#ifdef __USE_GNU</Line>
  <Line number="38"># include &lt;bits/types/struct_iovec.h&gt;</Line>
  <Line number="39">#endif</Line>
  <Line number="40"></Line>
  <Line number="41">/* open/fcntl.  */</Line>
  <Line number="42">#define O_ACCMODE	   0003</Line>
  <Line number="43">#define O_RDONLY	     00</Line>
  <Line number="44">#define O_WRONLY	     01</Line>
  <Line number="45">#define O_RDWR		     02</Line>
  <Line number="46">#ifndef O_CREAT</Line>
  <Line number="47"># define O_CREAT	   0100	/* Not fcntl.  */</Line>
  <Line number="48">#endif</Line>
  <Line number="49">#ifndef O_EXCL</Line>
  <Line number="50"># define O_EXCL		   0200	/* Not fcntl.  */</Line>
  <Line number="51">#endif</Line>
  <Line number="52">#ifndef O_NOCTTY</Line>
  <Line number="53"># define O_NOCTTY	   0400	/* Not fcntl.  */</Line>
  <Line number="54">#endif</Line>
  <Line number="55">#ifndef O_TRUNC</Line>
  <Line number="56"># define O_TRUNC	  01000	/* Not fcntl.  */</Line>
  <Line number="57">#endif</Line>
  <Line number="58">#ifndef O_APPEND</Line>
  <Line number="59"># define O_APPEND	  02000</Line>
  <Line number="60">#endif</Line>
  <Line number="61">#ifndef O_NONBLOCK</Line>
  <Line number="62"># define O_NONBLOCK	  04000</Line>
  <Line number="63">#endif</Line>
  <Line number="64">#ifndef O_NDELAY</Line>
  <Line number="65"># define O_NDELAY	O_NONBLOCK</Line>
  <Line number="66">#endif</Line>
  <Line number="67">#ifndef O_SYNC</Line>
  <Line number="68"># define O_SYNC	       04010000</Line>
  <Line number="69">#endif</Line>
  <Line number="70">#define O_FSYNC		O_SYNC</Line>
  <Line number="71">#ifndef O_ASYNC</Line>
  <Line number="72"># define O_ASYNC	 020000</Line>
  <Line number="73">#endif</Line>
  <Line number="74">#ifndef __O_LARGEFILE</Line>
  <Line number="75"># define __O_LARGEFILE	0100000</Line>
  <Line number="76">#endif</Line>
  <Line number="77"></Line>
  <Line number="78">#ifndef __O_DIRECTORY</Line>
  <Line number="79"># define __O_DIRECTORY	0200000</Line>
  <Line number="80">#endif</Line>
  <Line number="81">#ifndef __O_NOFOLLOW</Line>
  <Line number="82"># define __O_NOFOLLOW	0400000</Line>
  <Line number="83">#endif</Line>
  <Line number="84">#ifndef __O_CLOEXEC</Line>
  <Line number="85"># define __O_CLOEXEC   02000000</Line>
  <Line number="86">#endif</Line>
  <Line number="87">#ifndef __O_DIRECT</Line>
  <Line number="88"># define __O_DIRECT	 040000</Line>
  <Line number="89">#endif</Line>
  <Line number="90">#ifndef __O_NOATIME</Line>
  <Line number="91"># define __O_NOATIME   01000000</Line>
  <Line number="92">#endif</Line>
  <Line number="93">#ifndef __O_PATH</Line>
  <Line number="94"># define __O_PATH     010000000</Line>
  <Line number="95">#endif</Line>
  <Line number="96">#ifndef __O_DSYNC</Line>
  <Line number="97"># define __O_DSYNC	 010000</Line>
  <Line number="98">#endif</Line>
  <Line number="99">#ifndef __O_TMPFILE</Line>
  <Line number="100"># define __O_TMPFILE   (020000000 | __O_DIRECTORY)</Line>
  <Line number="101">#endif</Line>
  <Line number="102"></Line>
  <Line number="103">#ifndef F_GETLK</Line>
  <Line number="104"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="105">#  define F_GETLK	5	/* Get record locking info.  */</Line>
  <Line number="106">#  define F_SETLK	6	/* Set record locking info (non-blocking).  */</Line>
  <Line number="107">#  define F_SETLKW	7	/* Set record locking info (blocking).  */</Line>
  <Line number="108"># else</Line>
  <Line number="109">#  define F_GETLK	F_GETLK64  /* Get record locking info.  */</Line>
  <Line number="110">#  define F_SETLK	F_SETLK64  /* Set record locking info (non-blocking).*/</Line>
  <Line number="111">#  define F_SETLKW	F_SETLKW64 /* Set record locking info (blocking).  */</Line>
  <Line number="112"># endif</Line>
  <Line number="113">#endif</Line>
  <Line number="114">#ifndef F_GETLK64</Line>
  <Line number="115"># define F_GETLK64	12	/* Get record locking info.  */</Line>
  <Line number="116"># define F_SETLK64	13	/* Set record locking info (non-blocking).  */</Line>
  <Line number="117"># define F_SETLKW64	14	/* Set record locking info (blocking).  */</Line>
  <Line number="118">#endif</Line>
  <Line number="119"></Line>
  <Line number="120">/* open file description locks.</Line>
  <Line number="121"></Line>
  <Line number="122">   Usually record locks held by a process are released on *any* close and are</Line>
  <Line number="123">   not inherited across a fork.</Line>
  <Line number="124"></Line>
  <Line number="125">   These cmd values will set locks that conflict with process-associated record</Line>
  <Line number="126">   locks, but are &quot;owned&quot; by the opened file description, not the process.</Line>
  <Line number="127">   This means that they are inherited across fork or clone with CLONE_FILES</Line>
  <Line number="128">   like BSD (flock) locks, and they are only released automatically when the</Line>
  <Line number="129">   last reference to the the file description against which they were acquired</Line>
  <Line number="130">   is put. */</Line>
  <Line number="131">#ifdef __USE_GNU</Line>
  <Line number="132"># define F_OFD_GETLK	36</Line>
  <Line number="133"># define F_OFD_SETLK	37</Line>
  <Line number="134"># define F_OFD_SETLKW	38</Line>
  <Line number="135">#endif</Line>
  <Line number="136"></Line>
  <Line number="137">#ifdef __USE_LARGEFILE64</Line>
  <Line number="138"># define O_LARGEFILE __O_LARGEFILE</Line>
  <Line number="139">#endif</Line>
  <Line number="140"></Line>
  <Line number="141">#ifdef __USE_XOPEN2K8</Line>
  <Line number="142"># define O_DIRECTORY	__O_DIRECTORY	/* Must be a directory.  */</Line>
  <Line number="143"># define O_NOFOLLOW	__O_NOFOLLOW	/* Do not follow links.  */</Line>
  <Line number="144"># define O_CLOEXEC	__O_CLOEXEC	/* Set close_on_exec.  */</Line>
  <Line number="145">#endif</Line>
  <Line number="146"></Line>
  <Line number="147">#ifdef __USE_GNU</Line>
  <Line number="148"># define O_DIRECT	__O_DIRECT	/* Direct disk access.  */</Line>
  <Line number="149"># define O_NOATIME	__O_NOATIME	/* Do not set atime.  */</Line>
  <Line number="150"># define O_PATH		__O_PATH	/* Resolve pathname but do not open file.  */</Line>
  <Line number="151"># define O_TMPFILE	__O_TMPFILE	/* Atomically create nameless file.  */</Line>
  <Line number="152">#endif</Line>
  <Line number="153"></Line>
  <Line number="154">/* For now, Linux has no separate synchronicity options for read</Line>
  <Line number="155">   operations.  We define O_RSYNC therefore as the same as O_SYNC</Line>
  <Line number="156">   since this is a superset.  */</Line>
  <Line number="157">#if defined __USE_POSIX199309 || defined __USE_UNIX98</Line>
  <Line number="158"># define O_DSYNC	__O_DSYNC	/* Synchronize data.  */</Line>
  <Line number="159"># if defined __O_RSYNC</Line>
  <Line number="160">#  define O_RSYNC	__O_RSYNC	/* Synchronize read operations.  */</Line>
  <Line number="161"># else</Line>
  <Line number="162">#  define O_RSYNC	O_SYNC		/* Synchronize read operations.  */</Line>
  <Line number="163"># endif</Line>
  <Line number="164">#endif</Line>
  <Line number="165"></Line>
  <Line number="166">/* Values for the second argument to `fcntl&apos;.  */</Line>
  <Line number="167">#define F_DUPFD		0	/* Duplicate file descriptor.  */</Line>
  <Line number="168">#define F_GETFD		1	/* Get file descriptor flags.  */</Line>
  <Line number="169">#define F_SETFD		2	/* Set file descriptor flags.  */</Line>
  <Line number="170">#define F_GETFL		3	/* Get file status flags.  */</Line>
  <Line number="171">#define F_SETFL		4	/* Set file status flags.  */</Line>
  <Line number="172"></Line>
  <Line number="173">#ifndef __F_SETOWN</Line>
  <Line number="174"># define __F_SETOWN	8</Line>
  <Line number="175"># define __F_GETOWN	9</Line>
  <Line number="176">#endif</Line>
  <Line number="177"></Line>
  <Line number="178">#if defined __USE_UNIX98 || defined __USE_XOPEN2K8</Line>
  <Line number="179"># define F_SETOWN	__F_SETOWN /* Get owner (process receiving SIGIO).  */</Line>
  <Line number="180"># define F_GETOWN	__F_GETOWN /* Set owner (process receiving SIGIO).  */</Line>
  <Line number="181">#endif</Line>
  <Line number="182"></Line>
  <Line number="183">#ifndef __F_SETSIG</Line>
  <Line number="184"># define __F_SETSIG	10	/* Set number of signal to be sent.  */</Line>
  <Line number="185"># define __F_GETSIG	11	/* Get number of signal to be sent.  */</Line>
  <Line number="186">#endif</Line>
  <Line number="187">#ifndef __F_SETOWN_EX</Line>
  <Line number="188"># define __F_SETOWN_EX	15	/* Get owner (thread receiving SIGIO).  */</Line>
  <Line number="189"># define __F_GETOWN_EX	16	/* Set owner (thread receiving SIGIO).  */</Line>
  <Line number="190">#endif</Line>
  <Line number="191"></Line>
  <Line number="192">#ifdef __USE_GNU</Line>
  <Line number="193"># define F_SETSIG	__F_SETSIG	/* Set number of signal to be sent.  */</Line>
  <Line number="194"># define F_GETSIG	__F_GETSIG	/* Get number of signal to be sent.  */</Line>
  <Line number="195"># define F_SETOWN_EX	__F_SETOWN_EX	/* Get owner (thread receiving SIGIO).  */</Line>
  <Line number="196"># define F_GETOWN_EX	__F_GETOWN_EX	/* Set owner (thread receiving SIGIO).  */</Line>
  <Line number="197">#endif</Line>
  <Line number="198"></Line>
  <Line number="199">#ifdef __USE_GNU</Line>
  <Line number="200"># define F_SETLEASE	1024	/* Set a lease.  */</Line>
  <Line number="201"># define F_GETLEASE	1025	/* Enquire what lease is active.  */</Line>
  <Line number="202"># define F_NOTIFY	1026	/* Request notifications on a directory.  */</Line>
  <Line number="203"># define F_SETPIPE_SZ	1031	/* Set pipe page size array.  */</Line>
  <Line number="204"># define F_GETPIPE_SZ	1032	/* Set pipe page size array.  */</Line>
  <Line number="205"># define F_ADD_SEALS	1033	/* Add seals to file.  */</Line>
  <Line number="206"># define F_GET_SEALS	1034	/* Get seals for file.  */</Line>
  <Line number="207">/* Set / get write life time hints.  */</Line>
  <Line number="208"># define F_GET_RW_HINT	1035</Line>
  <Line number="209"># define F_SET_RW_HINT	1036</Line>
  <Line number="210"># define F_GET_FILE_RW_HINT	1037</Line>
  <Line number="211"># define F_SET_FILE_RW_HINT	1038</Line>
  <Line number="212">#endif</Line>
  <Line number="213">#ifdef __USE_XOPEN2K8</Line>
  <Line number="214"># define F_DUPFD_CLOEXEC 1030	/* Duplicate file descriptor with</Line>
  <Line number="215">				   close-on-exit set.  */</Line>
  <Line number="216">#endif</Line>
  <Line number="217"></Line>
  <Line number="218">/* For F_[GET|SET]FD.  */</Line>
  <Line number="219">#define FD_CLOEXEC	1	/* Actually anything with low bit set goes */</Line>
  <Line number="220"></Line>
  <Line number="221">#ifndef F_RDLCK</Line>
  <Line number="222">/* For posix fcntl() and `l_type&apos; field of a `struct flock&apos; for lockf().  */</Line>
  <Line number="223"># define F_RDLCK		0	/* Read lock.  */</Line>
  <Line number="224"># define F_WRLCK		1	/* Write lock.  */</Line>
  <Line number="225"># define F_UNLCK		2	/* Remove lock.  */</Line>
  <Line number="226">#endif</Line>
  <Line number="227"></Line>
  <Line number="228"></Line>
  <Line number="229">/* For old implementation of BSD flock.  */</Line>
  <Line number="230">#ifndef F_EXLCK</Line>
  <Line number="231"># define F_EXLCK		4	/* or 3 */</Line>
  <Line number="232"># define F_SHLCK		8	/* or 4 */</Line>
  <Line number="233">#endif</Line>
  <Line number="234"></Line>
  <Line number="235">#ifdef __USE_MISC</Line>
  <Line number="236">/* Operations for BSD flock, also used by the kernel implementation.  */</Line>
  <Line number="237"># define LOCK_SH	1	/* Shared lock.  */</Line>
  <Line number="238"># define LOCK_EX	2	/* Exclusive lock.  */</Line>
  <Line number="239"># define LOCK_NB	4	/* Or&apos;d with one of the above to prevent</Line>
  <Line number="240">				   blocking.  */</Line>
  <Line number="241"># define LOCK_UN	8	/* Remove lock.  */</Line>
  <Line number="242">#endif</Line>
  <Line number="243"></Line>
  <Line number="244">#ifdef __USE_GNU</Line>
  <Line number="245"># define LOCK_MAND	32	/* This is a mandatory flock:  */</Line>
  <Line number="246"># define LOCK_READ	64	/* ... which allows concurrent read operations.  */</Line>
  <Line number="247"># define LOCK_WRITE	128	/* ... which allows concurrent write operations.  */</Line>
  <Line number="248"># define LOCK_RW	192	/* ... Which allows concurrent read &amp; write operations.  */</Line>
  <Line number="249">#endif</Line>
  <Line number="250"></Line>
  <Line number="251">#ifdef __USE_GNU</Line>
  <Line number="252">/* Types of directory notifications that may be requested with F_NOTIFY.  */</Line>
  <Line number="253"># define DN_ACCESS	0x00000001	/* File accessed.  */</Line>
  <Line number="254"># define DN_MODIFY	0x00000002	/* File modified.  */</Line>
  <Line number="255"># define DN_CREATE	0x00000004	/* File created.  */</Line>
  <Line number="256"># define DN_DELETE	0x00000008	/* File removed.  */</Line>
  <Line number="257"># define DN_RENAME	0x00000010	/* File renamed.  */</Line>
  <Line number="258"># define DN_ATTRIB	0x00000020	/* File changed attributes.  */</Line>
  <Line number="259"># define DN_MULTISHOT	0x80000000	/* Don&apos;t remove notifier.  */</Line>
  <Line number="260">#endif</Line>
  <Line number="261"></Line>
  <Line number="262"></Line>
  <Line number="263">#ifdef __USE_GNU</Line>
  <Line number="264">/* Owner types.  */</Line>
  <Line number="265">enum __pid_type</Line>
  <Line number="266">  {</Line>
  <Line number="267">    F_OWNER_TID = 0,		/* Kernel thread.  */</Line>
  <Line number="268">    F_OWNER_PID,		/* Process.  */</Line>
  <Line number="269">    F_OWNER_PGRP,		/* Process group.  */</Line>
  <Line number="270">    F_OWNER_GID = F_OWNER_PGRP	/* Alternative, obsolete name.  */</Line>
  <Line number="271">  };</Line>
  <Line number="272"></Line>
  <Line number="273">/* Structure to use with F_GETOWN_EX and F_SETOWN_EX.  */</Line>
  <Line number="274">struct f_owner_ex</Line>
  <Line number="275">  {</Line>
  <Line number="276">    enum __pid_type type;	/* Owner type of ID.  */</Line>
  <Line number="277">    __pid_t pid;		/* ID of owner.  */</Line>
  <Line number="278">  };</Line>
  <Line number="279">#endif</Line>
  <Line number="280"></Line>
  <Line number="281">#ifdef __USE_GNU</Line>
  <Line number="282">/* Types of seals.  */</Line>
  <Line number="283"># define F_SEAL_SEAL	0x0001	/* Prevent further seals from being set.  */</Line>
  <Line number="284"># define F_SEAL_SHRINK	0x0002	/* Prevent file from shrinking.  */</Line>
  <Line number="285"># define F_SEAL_GROW	0x0004	/* Prevent file from growing.  */</Line>
  <Line number="286"># define F_SEAL_WRITE	0x0008	/* Prevent writes.  */</Line>
  <Line number="287"># define F_SEAL_FUTURE_WRITE	0x0010	/* Prevent future writes while</Line>
  <Line number="288">					   mapped.  */</Line>
  <Line number="289">#endif</Line>
  <Line number="290"></Line>
  <Line number="291">#ifdef __USE_GNU</Line>
  <Line number="292">/* Hint values for F_{GET,SET}_RW_HINT.  */</Line>
  <Line number="293"># define RWF_WRITE_LIFE_NOT_SET	0</Line>
  <Line number="294"># define RWH_WRITE_LIFE_NONE	1</Line>
  <Line number="295"># define RWH_WRITE_LIFE_SHORT	2</Line>
  <Line number="296"># define RWH_WRITE_LIFE_MEDIUM	3</Line>
  <Line number="297"># define RWH_WRITE_LIFE_LONG	4</Line>
  <Line number="298"># define RWH_WRITE_LIFE_EXTREME	5</Line>
  <Line number="299">#endif</Line>
  <Line number="300"></Line>
  <Line number="301">/* Define some more compatibility macros to be backward compatible with</Line>
  <Line number="302">   BSD systems which did not managed to hide these kernel macros.  */</Line>
  <Line number="303">#ifdef	__USE_MISC</Line>
  <Line number="304"># define FAPPEND	O_APPEND</Line>
  <Line number="305"># define FFSYNC		O_FSYNC</Line>
  <Line number="306"># define FASYNC		O_ASYNC</Line>
  <Line number="307"># define FNONBLOCK	O_NONBLOCK</Line>
  <Line number="308"># define FNDELAY	O_NDELAY</Line>
  <Line number="309">#endif /* Use misc.  */</Line>
  <Line number="310"></Line>
  <Line number="311">#ifndef __POSIX_FADV_DONTNEED</Line>
  <Line number="312">#  define __POSIX_FADV_DONTNEED	4</Line>
  <Line number="313">#  define __POSIX_FADV_NOREUSE	5</Line>
  <Line number="314">#endif</Line>
  <Line number="315">/* Advise to `posix_fadvise&apos;.  */</Line>
  <Line number="316">#ifdef __USE_XOPEN2K</Line>
  <Line number="317"># define POSIX_FADV_NORMAL	0 /* No further special treatment.  */</Line>
  <Line number="318"># define POSIX_FADV_RANDOM	1 /* Expect random page references.  */</Line>
  <Line number="319"># define POSIX_FADV_SEQUENTIAL	2 /* Expect sequential page references.  */</Line>
  <Line number="320"># define POSIX_FADV_WILLNEED	3 /* Will need these pages.  */</Line>
  <Line number="321"># define POSIX_FADV_DONTNEED	__POSIX_FADV_DONTNEED /* Don&apos;t need these pages.  */</Line>
  <Line number="322"># define POSIX_FADV_NOREUSE	__POSIX_FADV_NOREUSE /* Data will be accessed once.  */</Line>
  <Line number="323">#endif</Line>
  <Line number="324"></Line>
  <Line number="325"></Line>
  <Line number="326">#ifdef __USE_GNU</Line>
  <Line number="327">/* Flags for SYNC_FILE_RANGE.  */</Line>
  <Line number="328"># define SYNC_FILE_RANGE_WAIT_BEFORE	1 /* Wait upon writeout of all pages</Line>
  <Line number="329">					     in the range before performing the</Line>
  <Line number="330">					     write.  */</Line>
  <Line number="331"># define SYNC_FILE_RANGE_WRITE		2 /* Initiate writeout of all those</Line>
  <Line number="332">					     dirty pages in the range which are</Line>
  <Line number="333">					     not presently under writeback.  */</Line>
  <Line number="334"># define SYNC_FILE_RANGE_WAIT_AFTER	4 /* Wait upon writeout of all pages in</Line>
  <Line number="335">					     the range after performing the</Line>
  <Line number="336">					     write.  */</Line>
  <Line number="337">/* SYNC_FILE_RANGE_WRITE_AND_WAIT ensures all pages in the range are</Line>
  <Line number="338">   written to disk before returning.  */</Line>
  <Line number="339"># define SYNC_FILE_RANGE_WRITE_AND_WAIT	(SYNC_FILE_RANGE_WRITE		\</Line>
  <Line number="340">					 | SYNC_FILE_RANGE_WAIT_BEFORE	\</Line>
  <Line number="341">					 | SYNC_FILE_RANGE_WAIT_AFTER)</Line>
  <Line number="342"></Line>
  <Line number="343">/* Flags for SPLICE and VMSPLICE.  */</Line>
  <Line number="344"># define SPLICE_F_MOVE		1	/* Move pages instead of copying.  */</Line>
  <Line number="345"># define SPLICE_F_NONBLOCK	2	/* Don&apos;t block on the pipe splicing</Line>
  <Line number="346">					   (but we may still block on the fd</Line>
  <Line number="347">					   we splice from/to).  */</Line>
  <Line number="348"># define SPLICE_F_MORE		4	/* Expect more data.  */</Line>
  <Line number="349"># define SPLICE_F_GIFT		8	/* Pages passed in are a gift.  */</Line>
  <Line number="350"></Line>
  <Line number="351"></Line>
  <Line number="352">/* Flags for fallocate.  */</Line>
  <Line number="353"># include &lt;linux/falloc.h&gt;</Line>
  <Line number="354"></Line>
  <Line number="355"></Line>
  <Line number="356">/* File handle structure.  */</Line>
  <Line number="357">struct file_handle</Line>
  <Line number="358">{</Line>
  <Line number="359">  unsigned int handle_bytes;</Line>
  <Line number="360">  int handle_type;</Line>
  <Line number="361">  /* File identifier.  */</Line>
  <Line number="362">  unsigned char f_handle[0];</Line>
  <Line number="363">};</Line>
  <Line number="364"></Line>
  <Line number="365">/* Maximum handle size (for now).  */</Line>
  <Line number="366"># define MAX_HANDLE_SZ	128</Line>
  <Line number="367">#endif</Line>
  <Line number="368"></Line>
  <Line number="369">/* Values for `*at&apos; functions.  */</Line>
  <Line number="370">#ifdef __USE_ATFILE</Line>
  <Line number="371"># define AT_FDCWD		-100	/* Special value used to indicate</Line>
  <Line number="372">					   the *at functions should use the</Line>
  <Line number="373">					   current working directory. */</Line>
  <Line number="374"># define AT_SYMLINK_NOFOLLOW	0x100	/* Do not follow symbolic links.  */</Line>
  <Line number="375"># define AT_REMOVEDIR		0x200	/* Remove directory instead of</Line>
  <Line number="376">					   unlinking file.  */</Line>
  <Line number="377"># define AT_SYMLINK_FOLLOW	0x400	/* Follow symbolic links.  */</Line>
  <Line number="378"># ifdef __USE_GNU</Line>
  <Line number="379">#  define AT_NO_AUTOMOUNT	0x800	/* Suppress terminal automount</Line>
  <Line number="380">					   traversal.  */</Line>
  <Line number="381">#  define AT_EMPTY_PATH		0x1000	/* Allow empty relative pathname.  */</Line>
  <Line number="382">#  define AT_STATX_SYNC_TYPE	0x6000</Line>
  <Line number="383">#  define AT_STATX_SYNC_AS_STAT	0x0000</Line>
  <Line number="384">#  define AT_STATX_FORCE_SYNC	0x2000</Line>
  <Line number="385">#  define AT_STATX_DONT_SYNC	0x4000</Line>
  <Line number="386">#  define AT_RECURSIVE		0x8000	/* Apply to the entire subtree.  */</Line>
  <Line number="387"># endif</Line>
  <Line number="388"># define AT_EACCESS		0x200	/* Test access permitted for</Line>
  <Line number="389">					   effective IDs, not real IDs.  */</Line>
  <Line number="390">#endif</Line>
  <Line number="391"></Line>
  <Line number="392">__BEGIN_DECLS</Line>
  <Line number="393"></Line>
  <Line number="394">#ifdef __USE_GNU</Line>
  <Line number="395"></Line>
  <Line number="396">/* Provide kernel hint to read ahead.  */</Line>
  <Line number="397">extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)</Line>
  <Line number="398">    __THROW;</Line>
  <Line number="399"></Line>
  <Line number="400"></Line>
  <Line number="401">/* Selective file content synch&apos;ing.</Line>
  <Line number="402"></Line>
  <Line number="403">   This function is a possible cancellation point and therefore not</Line>
  <Line number="404">   marked with __THROW.  */</Line>
  <Line number="405">extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,</Line>
  <Line number="406">			    unsigned int __flags);</Line>
  <Line number="407"></Line>
  <Line number="408"></Line>
  <Line number="409">/* Splice address range into a pipe.</Line>
  <Line number="410"></Line>
  <Line number="411">   This function is a possible cancellation point and therefore not</Line>
  <Line number="412">   marked with __THROW.  */</Line>
  <Line number="413">extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,</Line>
  <Line number="414">			   size_t __count, unsigned int __flags);</Line>
  <Line number="415"></Line>
  <Line number="416">/* Splice two files together.</Line>
  <Line number="417"></Line>
  <Line number="418">   This function is a possible cancellation point and therefore not</Line>
  <Line number="419">   marked with __THROW.  */</Line>
  <Line number="420">extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,</Line>
  <Line number="421">			 __off64_t *__offout, size_t __len,</Line>
  <Line number="422">			 unsigned int __flags);</Line>
  <Line number="423"></Line>
  <Line number="424">/* In-kernel implementation of tee for pipe buffers.</Line>
  <Line number="425"></Line>
  <Line number="426">   This function is a possible cancellation point and therefore not</Line>
  <Line number="427">   marked with __THROW.  */</Line>
  <Line number="428">extern __ssize_t tee (int __fdin, int __fdout, size_t __len,</Line>
  <Line number="429">		      unsigned int __flags);</Line>
  <Line number="430"></Line>
  <Line number="431">/* Reserve storage for the data of the file associated with FD.</Line>
  <Line number="432"></Line>
  <Line number="433">   This function is a possible cancellation point and therefore not</Line>
  <Line number="434">   marked with __THROW.  */</Line>
  <Line number="435"># ifndef __USE_FILE_OFFSET64</Line>
  <Line number="436">extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);</Line>
  <Line number="437"># else</Line>
  <Line number="438">#  ifdef __REDIRECT</Line>
  <Line number="439">extern int __REDIRECT (fallocate, (int __fd, int __mode, __off64_t __offset,</Line>
  <Line number="440">				   __off64_t __len),</Line>
  <Line number="441">		       fallocate64);</Line>
  <Line number="442">#  else</Line>
  <Line number="443">#   define fallocate fallocate64</Line>
  <Line number="444">#  endif</Line>
  <Line number="445"># endif</Line>
  <Line number="446"># ifdef __USE_LARGEFILE64</Line>
  <Line number="447">extern int fallocate64 (int __fd, int __mode, __off64_t __offset,</Line>
  <Line number="448">			__off64_t __len);</Line>
  <Line number="449"># endif</Line>
  <Line number="450"></Line>
  <Line number="451"></Line>
  <Line number="452">/* Map file name to file handle.  */</Line>
  <Line number="453">extern int name_to_handle_at (int __dfd, const char *__name,</Line>
  <Line number="454">			      struct file_handle *__handle, int *__mnt_id,</Line>
  <Line number="455">			      int __flags) __THROW;</Line>
  <Line number="456"></Line>
  <Line number="457">/* Open file using the file handle.</Line>
  <Line number="458"></Line>
  <Line number="459">   This function is a possible cancellation point and therefore not</Line>
  <Line number="460">   marked with __THROW.  */</Line>
  <Line number="461">extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,</Line>
  <Line number="462">			      int __flags);</Line>
  <Line number="463"></Line>
  <Line number="464">#endif	/* use GNU */</Line>
  <Line number="465"></Line>
  <Line number="466">__END_DECLS</Line>
</SourceFile>
