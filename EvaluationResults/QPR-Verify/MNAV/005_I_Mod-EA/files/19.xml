<SourceFile>
  <Line number="1">/* Common threading primitives definitions for both POSIX and C11.</Line>
  <Line number="2">   Copyright (C) 2017-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef _THREAD_SHARED_TYPES_H</Line>
  <Line number="20">#define _THREAD_SHARED_TYPES_H 1</Line>
  <Line number="21"></Line>
  <Line number="22">/* Arch-specific definitions.  Each architecture must define the following</Line>
  <Line number="23">   macros to define the expected sizes of pthread data types:</Line>
  <Line number="24"></Line>
  <Line number="25">   __SIZEOF_PTHREAD_ATTR_T        - size of pthread_attr_t.</Line>
  <Line number="26">   __SIZEOF_PTHREAD_MUTEX_T       - size of pthread_mutex_t.</Line>
  <Line number="27">   __SIZEOF_PTHREAD_MUTEXATTR_T   - size of pthread_mutexattr_t.</Line>
  <Line number="28">   __SIZEOF_PTHREAD_COND_T        - size of pthread_cond_t.</Line>
  <Line number="29">   __SIZEOF_PTHREAD_CONDATTR_T    - size of pthread_condattr_t.</Line>
  <Line number="30">   __SIZEOF_PTHREAD_RWLOCK_T      - size of pthread_rwlock_t.</Line>
  <Line number="31">   __SIZEOF_PTHREAD_RWLOCKATTR_T  - size of pthread_rwlockattr_t.</Line>
  <Line number="32">   __SIZEOF_PTHREAD_BARRIER_T     - size of pthread_barrier_t.</Line>
  <Line number="33">   __SIZEOF_PTHREAD_BARRIERATTR_T - size of pthread_barrierattr_t.</Line>
  <Line number="34"></Line>
  <Line number="35">   The additional macro defines any constraint for the lock alignment</Line>
  <Line number="36">   inside the thread structures:</Line>
  <Line number="37"></Line>
  <Line number="38">   __LOCK_ALIGNMENT - for internal lock/futex usage.</Line>
  <Line number="39"></Line>
  <Line number="40">   Same idea but for the once locking primitive:</Line>
  <Line number="41"></Line>
  <Line number="42">   __ONCE_ALIGNMENT - for pthread_once_t/once_flag definition.  */</Line>
  <Line number="43"></Line>
  <Line number="44">#include &lt;bits/pthreadtypes-arch.h&gt;</Line>
  <Line number="45"></Line>
  <Line number="46"></Line>
  <Line number="47">/* Common definition of pthread_mutex_t. */</Line>
  <Line number="48"></Line>
  <Line number="49">typedef struct __pthread_internal_list</Line>
  <Line number="50">{</Line>
  <Line number="51">  struct __pthread_internal_list *__prev;</Line>
  <Line number="52">  struct __pthread_internal_list *__next;</Line>
  <Line number="53">} __pthread_list_t;</Line>
  <Line number="54"></Line>
  <Line number="55">typedef struct __pthread_internal_slist</Line>
  <Line number="56">{</Line>
  <Line number="57">  struct __pthread_internal_slist *__next;</Line>
  <Line number="58">} __pthread_slist_t;</Line>
  <Line number="59"></Line>
  <Line number="60">/* Arch-specific mutex definitions.  A generic implementation is provided</Line>
  <Line number="61">   by sysdeps/nptl/bits/struct_mutex.h.  If required, an architecture</Line>
  <Line number="62">   can override it by defining:</Line>
  <Line number="63"></Line>
  <Line number="64">   1. struct __pthread_mutex_s (used on both pthread_mutex_t and mtx_t</Line>
  <Line number="65">      definition).  It should contains at least the internal members</Line>
  <Line number="66">      defined in the generic version.</Line>
  <Line number="67"></Line>
  <Line number="68">   2. __LOCK_ALIGNMENT for any extra attribute for internal lock used with</Line>
  <Line number="69">      atomic operations.</Line>
  <Line number="70"></Line>
  <Line number="71">   3. The macro __PTHREAD_MUTEX_INITIALIZER used for static initialization.</Line>
  <Line number="72">      It should initialize the mutex internal flag.  */</Line>
  <Line number="73"></Line>
  <Line number="74">#include &lt;bits/struct_mutex.h&gt;</Line>
  <Line number="75"></Line>
  <Line number="76">/* Arch-sepecific read-write lock definitions.  A generic implementation is</Line>
  <Line number="77">   provided by struct_rwlock.h.  If required, an architecture can override it</Line>
  <Line number="78">   by defining:</Line>
  <Line number="79"></Line>
  <Line number="80">   1. struct __pthread_rwlock_arch_t (used on pthread_rwlock_t definition).</Line>
  <Line number="81">      It should contain at least the internal members defined in the</Line>
  <Line number="82">      generic version.</Line>
  <Line number="83"></Line>
  <Line number="84">   2. The macro __PTHREAD_RWLOCK_INITIALIZER used for static initialization.</Line>
  <Line number="85">      It should initialize the rwlock internal type.  */</Line>
  <Line number="86"></Line>
  <Line number="87">#include &lt;bits/struct_rwlock.h&gt;</Line>
  <Line number="88"></Line>
  <Line number="89"></Line>
  <Line number="90">/* Common definition of pthread_cond_t. */</Line>
  <Line number="91"></Line>
  <Line number="92">struct __pthread_cond_s</Line>
  <Line number="93">{</Line>
  <Line number="94">  __extension__ union</Line>
  <Line number="95">  {</Line>
  <Line number="96">    __extension__ unsigned long long int __wseq;</Line>
  <Line number="97">    struct</Line>
  <Line number="98">    {</Line>
  <Line number="99">      unsigned int __low;</Line>
  <Line number="100">      unsigned int __high;</Line>
  <Line number="101">    } __wseq32;</Line>
  <Line number="102">  };</Line>
  <Line number="103">  __extension__ union</Line>
  <Line number="104">  {</Line>
  <Line number="105">    __extension__ unsigned long long int __g1_start;</Line>
  <Line number="106">    struct</Line>
  <Line number="107">    {</Line>
  <Line number="108">      unsigned int __low;</Line>
  <Line number="109">      unsigned int __high;</Line>
  <Line number="110">    } __g1_start32;</Line>
  <Line number="111">  };</Line>
  <Line number="112">  unsigned int __g_refs[2] __LOCK_ALIGNMENT;</Line>
  <Line number="113">  unsigned int __g_size[2];</Line>
  <Line number="114">  unsigned int __g1_orig_size;</Line>
  <Line number="115">  unsigned int __wrefs;</Line>
  <Line number="116">  unsigned int __g_signals[2];</Line>
  <Line number="117">};</Line>
  <Line number="118"></Line>
  <Line number="119">#endif /* _THREAD_SHARED_TYPES_H  */</Line>
</SourceFile>
