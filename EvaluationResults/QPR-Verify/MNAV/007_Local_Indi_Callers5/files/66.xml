<SourceFile>
  <Line number="1">/* System-specific socket constants and types.  Linux version.</Line>
  <Line number="2">   Copyright (C) 1991-2020 Free Software Foundation, Inc.</Line>
  <Line number="3">   This file is part of the GNU C Library.</Line>
  <Line number="4"></Line>
  <Line number="5">   The GNU C Library is free software; you can redistribute it and/or</Line>
  <Line number="6">   modify it under the terms of the GNU Lesser General Public</Line>
  <Line number="7">   License as published by the Free Software Foundation; either</Line>
  <Line number="8">   version 2.1 of the License, or (at your option) any later version.</Line>
  <Line number="9"></Line>
  <Line number="10">   The GNU C Library is distributed in the hope that it will be useful,</Line>
  <Line number="11">   but WITHOUT ANY WARRANTY; without even the implied warranty of</Line>
  <Line number="12">   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</Line>
  <Line number="13">   Lesser General Public License for more details.</Line>
  <Line number="14"></Line>
  <Line number="15">   You should have received a copy of the GNU Lesser General Public</Line>
  <Line number="16">   License along with the GNU C Library; if not, see</Line>
  <Line number="17">   &lt;https://www.gnu.org/licenses/&gt;.  */</Line>
  <Line number="18"></Line>
  <Line number="19">#ifndef __BITS_SOCKET_H</Line>
  <Line number="20">#define __BITS_SOCKET_H</Line>
  <Line number="21"></Line>
  <Line number="22">#ifndef _SYS_SOCKET_H</Line>
  <Line number="23"># error &quot;Never include &lt;bits/socket.h&gt; directly; use &lt;sys/socket.h&gt; instead.&quot;</Line>
  <Line number="24">#endif</Line>
  <Line number="25"></Line>
  <Line number="26">#define __need_size_t</Line>
  <Line number="27">#include &lt;stddef.h&gt;</Line>
  <Line number="28"></Line>
  <Line number="29">#include &lt;sys/types.h&gt;</Line>
  <Line number="30"></Line>
  <Line number="31">/* Type for length arguments in socket calls.  */</Line>
  <Line number="32">#ifndef __socklen_t_defined</Line>
  <Line number="33">typedef __socklen_t socklen_t;</Line>
  <Line number="34"># define __socklen_t_defined</Line>
  <Line number="35">#endif</Line>
  <Line number="36"></Line>
  <Line number="37">/* Get the architecture-dependent definition of enum __socket_type.  */</Line>
  <Line number="38">#include &lt;bits/socket_type.h&gt;</Line>
  <Line number="39"></Line>
  <Line number="40">/* Protocol families.  */</Line>
  <Line number="41">#define PF_UNSPEC	0	/* Unspecified.  */</Line>
  <Line number="42">#define PF_LOCAL	1	/* Local to host (pipes and file-domain).  */</Line>
  <Line number="43">#define PF_UNIX		PF_LOCAL /* POSIX name for PF_LOCAL.  */</Line>
  <Line number="44">#define PF_FILE		PF_LOCAL /* Another non-standard name for PF_LOCAL.  */</Line>
  <Line number="45">#define PF_INET		2	/* IP protocol family.  */</Line>
  <Line number="46">#define PF_AX25		3	/* Amateur Radio AX.25.  */</Line>
  <Line number="47">#define PF_IPX		4	/* Novell Internet Protocol.  */</Line>
  <Line number="48">#define PF_APPLETALK	5	/* Appletalk DDP.  */</Line>
  <Line number="49">#define PF_NETROM	6	/* Amateur radio NetROM.  */</Line>
  <Line number="50">#define PF_BRIDGE	7	/* Multiprotocol bridge.  */</Line>
  <Line number="51">#define PF_ATMPVC	8	/* ATM PVCs.  */</Line>
  <Line number="52">#define PF_X25		9	/* Reserved for X.25 project.  */</Line>
  <Line number="53">#define PF_INET6	10	/* IP version 6.  */</Line>
  <Line number="54">#define PF_ROSE		11	/* Amateur Radio X.25 PLP.  */</Line>
  <Line number="55">#define PF_DECnet	12	/* Reserved for DECnet project.  */</Line>
  <Line number="56">#define PF_NETBEUI	13	/* Reserved for 802.2LLC project.  */</Line>
  <Line number="57">#define PF_SECURITY	14	/* Security callback pseudo AF.  */</Line>
  <Line number="58">#define PF_KEY		15	/* PF_KEY key management API.  */</Line>
  <Line number="59">#define PF_NETLINK	16</Line>
  <Line number="60">#define PF_ROUTE	PF_NETLINK /* Alias to emulate 4.4BSD.  */</Line>
  <Line number="61">#define PF_PACKET	17	/* Packet family.  */</Line>
  <Line number="62">#define PF_ASH		18	/* Ash.  */</Line>
  <Line number="63">#define PF_ECONET	19	/* Acorn Econet.  */</Line>
  <Line number="64">#define PF_ATMSVC	20	/* ATM SVCs.  */</Line>
  <Line number="65">#define PF_RDS		21	/* RDS sockets.  */</Line>
  <Line number="66">#define PF_SNA		22	/* Linux SNA Project */</Line>
  <Line number="67">#define PF_IRDA		23	/* IRDA sockets.  */</Line>
  <Line number="68">#define PF_PPPOX	24	/* PPPoX sockets.  */</Line>
  <Line number="69">#define PF_WANPIPE	25	/* Wanpipe API sockets.  */</Line>
  <Line number="70">#define PF_LLC		26	/* Linux LLC.  */</Line>
  <Line number="71">#define PF_IB		27	/* Native InfiniBand address.  */</Line>
  <Line number="72">#define PF_MPLS		28	/* MPLS.  */</Line>
  <Line number="73">#define PF_CAN		29	/* Controller Area Network.  */</Line>
  <Line number="74">#define PF_TIPC		30	/* TIPC sockets.  */</Line>
  <Line number="75">#define PF_BLUETOOTH	31	/* Bluetooth sockets.  */</Line>
  <Line number="76">#define PF_IUCV		32	/* IUCV sockets.  */</Line>
  <Line number="77">#define PF_RXRPC	33	/* RxRPC sockets.  */</Line>
  <Line number="78">#define PF_ISDN		34	/* mISDN sockets.  */</Line>
  <Line number="79">#define PF_PHONET	35	/* Phonet sockets.  */</Line>
  <Line number="80">#define PF_IEEE802154	36	/* IEEE 802.15.4 sockets.  */</Line>
  <Line number="81">#define PF_CAIF		37	/* CAIF sockets.  */</Line>
  <Line number="82">#define PF_ALG		38	/* Algorithm sockets.  */</Line>
  <Line number="83">#define PF_NFC		39	/* NFC sockets.  */</Line>
  <Line number="84">#define PF_VSOCK	40	/* vSockets.  */</Line>
  <Line number="85">#define PF_KCM		41	/* Kernel Connection Multiplexor.  */</Line>
  <Line number="86">#define PF_QIPCRTR	42	/* Qualcomm IPC Router.  */</Line>
  <Line number="87">#define PF_SMC		43	/* SMC sockets.  */</Line>
  <Line number="88">#define PF_XDP		44	/* XDP sockets.  */</Line>
  <Line number="89">#define PF_MAX		45	/* For now..  */</Line>
  <Line number="90"></Line>
  <Line number="91">/* Address families.  */</Line>
  <Line number="92">#define AF_UNSPEC	PF_UNSPEC</Line>
  <Line number="93">#define AF_LOCAL	PF_LOCAL</Line>
  <Line number="94">#define AF_UNIX		PF_UNIX</Line>
  <Line number="95">#define AF_FILE		PF_FILE</Line>
  <Line number="96">#define AF_INET		PF_INET</Line>
  <Line number="97">#define AF_AX25		PF_AX25</Line>
  <Line number="98">#define AF_IPX		PF_IPX</Line>
  <Line number="99">#define AF_APPLETALK	PF_APPLETALK</Line>
  <Line number="100">#define AF_NETROM	PF_NETROM</Line>
  <Line number="101">#define AF_BRIDGE	PF_BRIDGE</Line>
  <Line number="102">#define AF_ATMPVC	PF_ATMPVC</Line>
  <Line number="103">#define AF_X25		PF_X25</Line>
  <Line number="104">#define AF_INET6	PF_INET6</Line>
  <Line number="105">#define AF_ROSE		PF_ROSE</Line>
  <Line number="106">#define AF_DECnet	PF_DECnet</Line>
  <Line number="107">#define AF_NETBEUI	PF_NETBEUI</Line>
  <Line number="108">#define AF_SECURITY	PF_SECURITY</Line>
  <Line number="109">#define AF_KEY		PF_KEY</Line>
  <Line number="110">#define AF_NETLINK	PF_NETLINK</Line>
  <Line number="111">#define AF_ROUTE	PF_ROUTE</Line>
  <Line number="112">#define AF_PACKET	PF_PACKET</Line>
  <Line number="113">#define AF_ASH		PF_ASH</Line>
  <Line number="114">#define AF_ECONET	PF_ECONET</Line>
  <Line number="115">#define AF_ATMSVC	PF_ATMSVC</Line>
  <Line number="116">#define AF_RDS		PF_RDS</Line>
  <Line number="117">#define AF_SNA		PF_SNA</Line>
  <Line number="118">#define AF_IRDA		PF_IRDA</Line>
  <Line number="119">#define AF_PPPOX	PF_PPPOX</Line>
  <Line number="120">#define AF_WANPIPE	PF_WANPIPE</Line>
  <Line number="121">#define AF_LLC		PF_LLC</Line>
  <Line number="122">#define AF_IB		PF_IB</Line>
  <Line number="123">#define AF_MPLS		PF_MPLS</Line>
  <Line number="124">#define AF_CAN		PF_CAN</Line>
  <Line number="125">#define AF_TIPC		PF_TIPC</Line>
  <Line number="126">#define AF_BLUETOOTH	PF_BLUETOOTH</Line>
  <Line number="127">#define AF_IUCV		PF_IUCV</Line>
  <Line number="128">#define AF_RXRPC	PF_RXRPC</Line>
  <Line number="129">#define AF_ISDN		PF_ISDN</Line>
  <Line number="130">#define AF_PHONET	PF_PHONET</Line>
  <Line number="131">#define AF_IEEE802154	PF_IEEE802154</Line>
  <Line number="132">#define AF_CAIF		PF_CAIF</Line>
  <Line number="133">#define AF_ALG		PF_ALG</Line>
  <Line number="134">#define AF_NFC		PF_NFC</Line>
  <Line number="135">#define AF_VSOCK	PF_VSOCK</Line>
  <Line number="136">#define AF_KCM		PF_KCM</Line>
  <Line number="137">#define AF_QIPCRTR	PF_QIPCRTR</Line>
  <Line number="138">#define AF_SMC		PF_SMC</Line>
  <Line number="139">#define AF_XDP		PF_XDP</Line>
  <Line number="140">#define AF_MAX		PF_MAX</Line>
  <Line number="141"></Line>
  <Line number="142">/* Socket level values.  Others are defined in the appropriate headers.</Line>
  <Line number="143"></Line>
  <Line number="144">   XXX These definitions also should go into the appropriate headers as</Line>
  <Line number="145">   far as they are available.  */</Line>
  <Line number="146">#define SOL_RAW		255</Line>
  <Line number="147">#define SOL_DECNET      261</Line>
  <Line number="148">#define SOL_X25         262</Line>
  <Line number="149">#define SOL_PACKET	263</Line>
  <Line number="150">#define SOL_ATM		264	/* ATM layer (cell level).  */</Line>
  <Line number="151">#define SOL_AAL		265	/* ATM Adaption Layer (packet level).  */</Line>
  <Line number="152">#define SOL_IRDA	266</Line>
  <Line number="153">#define SOL_NETBEUI	267</Line>
  <Line number="154">#define SOL_LLC		268</Line>
  <Line number="155">#define SOL_DCCP	269</Line>
  <Line number="156">#define SOL_NETLINK	270</Line>
  <Line number="157">#define SOL_TIPC	271</Line>
  <Line number="158">#define SOL_RXRPC	272</Line>
  <Line number="159">#define SOL_PPPOL2TP	273</Line>
  <Line number="160">#define SOL_BLUETOOTH	274</Line>
  <Line number="161">#define SOL_PNPIPE	275</Line>
  <Line number="162">#define SOL_RDS		276</Line>
  <Line number="163">#define SOL_IUCV	277</Line>
  <Line number="164">#define SOL_CAIF	278</Line>
  <Line number="165">#define SOL_ALG		279</Line>
  <Line number="166">#define SOL_NFC		280</Line>
  <Line number="167">#define SOL_KCM		281</Line>
  <Line number="168">#define SOL_TLS		282</Line>
  <Line number="169">#define SOL_XDP		283</Line>
  <Line number="170"></Line>
  <Line number="171">/* Maximum queue length specifiable by listen.  */</Line>
  <Line number="172">#define SOMAXCONN	4096</Line>
  <Line number="173"></Line>
  <Line number="174">/* Get the definition of the macro to define the common sockaddr members.  */</Line>
  <Line number="175">#include &lt;bits/sockaddr.h&gt;</Line>
  <Line number="176"></Line>
  <Line number="177">/* Structure describing a generic socket address.  */</Line>
  <Line number="178">struct sockaddr</Line>
  <Line number="179">  {</Line>
  <Line number="180">    __SOCKADDR_COMMON (sa_);	/* Common data: address family and length.  */</Line>
  <Line number="181">    char sa_data[14];		/* Address data.  */</Line>
  <Line number="182">  };</Line>
  <Line number="183"></Line>
  <Line number="184"></Line>
  <Line number="185">/* Structure large enough to hold any socket address (with the historical</Line>
  <Line number="186">   exception of AF_UNIX).  */</Line>
  <Line number="187">#define __ss_aligntype	unsigned long int</Line>
  <Line number="188">#define _SS_PADSIZE \</Line>
  <Line number="189">  (_SS_SIZE - __SOCKADDR_COMMON_SIZE - sizeof (__ss_aligntype))</Line>
  <Line number="190"></Line>
  <Line number="191">struct sockaddr_storage</Line>
  <Line number="192">  {</Line>
  <Line number="193">    __SOCKADDR_COMMON (ss_);	/* Address family, etc.  */</Line>
  <Line number="194">    char __ss_padding[<CheckRefs ids="49,50,51">_SS_PADSIZE</CheckRefs>];</Line>
  <Line number="195">    __ss_aligntype __ss_align;	/* Force desired alignment.  */</Line>
  <Line number="196">  };</Line>
  <Line number="197"></Line>
  <Line number="198"></Line>
  <Line number="199">/* Bits in the FLAGS argument to `send&apos;, `recv&apos;, et al.  */</Line>
  <Line number="200">enum</Line>
  <Line number="201">  {</Line>
  <Line number="202">    MSG_OOB		= 0x01,	/* Process out-of-band data.  */</Line>
  <Line number="203">#define MSG_OOB		MSG_OOB</Line>
  <Line number="204">    MSG_PEEK		= 0x02,	/* Peek at incoming messages.  */</Line>
  <Line number="205">#define MSG_PEEK	MSG_PEEK</Line>
  <Line number="206">    MSG_DONTROUTE	= 0x04,	/* Don&apos;t use local routing.  */</Line>
  <Line number="207">#define MSG_DONTROUTE	MSG_DONTROUTE</Line>
  <Line number="208">#ifdef __USE_GNU</Line>
  <Line number="209">    /* DECnet uses a different name.  */</Line>
  <Line number="210">    MSG_TRYHARD		= MSG_DONTROUTE,</Line>
  <Line number="211"># define MSG_TRYHARD	MSG_DONTROUTE</Line>
  <Line number="212">#endif</Line>
  <Line number="213">    MSG_CTRUNC		= 0x08,	/* Control data lost before delivery.  */</Line>
  <Line number="214">#define MSG_CTRUNC	MSG_CTRUNC</Line>
  <Line number="215">    MSG_PROXY		= 0x10,	/* Supply or ask second address.  */</Line>
  <Line number="216">#define MSG_PROXY	MSG_PROXY</Line>
  <Line number="217">    MSG_TRUNC		= 0x20,</Line>
  <Line number="218">#define MSG_TRUNC	MSG_TRUNC</Line>
  <Line number="219">    MSG_DONTWAIT	= 0x40, /* Nonblocking IO.  */</Line>
  <Line number="220">#define MSG_DONTWAIT	MSG_DONTWAIT</Line>
  <Line number="221">    MSG_EOR		= 0x80, /* End of record.  */</Line>
  <Line number="222">#define MSG_EOR		MSG_EOR</Line>
  <Line number="223">    MSG_WAITALL		= 0x100, /* Wait for a full request.  */</Line>
  <Line number="224">#define MSG_WAITALL	MSG_WAITALL</Line>
  <Line number="225">    MSG_FIN		= 0x200,</Line>
  <Line number="226">#define MSG_FIN		MSG_FIN</Line>
  <Line number="227">    MSG_SYN		= 0x400,</Line>
  <Line number="228">#define MSG_SYN		MSG_SYN</Line>
  <Line number="229">    MSG_CONFIRM		= 0x800, /* Confirm path validity.  */</Line>
  <Line number="230">#define MSG_CONFIRM	MSG_CONFIRM</Line>
  <Line number="231">    MSG_RST		= 0x1000,</Line>
  <Line number="232">#define MSG_RST		MSG_RST</Line>
  <Line number="233">    MSG_ERRQUEUE	= 0x2000, /* Fetch message from error queue.  */</Line>
  <Line number="234">#define MSG_ERRQUEUE	MSG_ERRQUEUE</Line>
  <Line number="235">    MSG_NOSIGNAL	= 0x4000, /* Do not generate SIGPIPE.  */</Line>
  <Line number="236">#define MSG_NOSIGNAL	MSG_NOSIGNAL</Line>
  <Line number="237">    MSG_MORE		= 0x8000,  /* Sender will send more.  */</Line>
  <Line number="238">#define MSG_MORE	MSG_MORE</Line>
  <Line number="239">    MSG_WAITFORONE	= 0x10000, /* Wait for at least one packet to return.*/</Line>
  <Line number="240">#define MSG_WAITFORONE	MSG_WAITFORONE</Line>
  <Line number="241">    MSG_BATCH		= 0x40000, /* sendmmsg: more messages coming.  */</Line>
  <Line number="242">#define MSG_BATCH	MSG_BATCH</Line>
  <Line number="243">    MSG_ZEROCOPY	= 0x4000000, /* Use user data in kernel path.  */</Line>
  <Line number="244">#define MSG_ZEROCOPY	MSG_ZEROCOPY</Line>
  <Line number="245">    MSG_FASTOPEN	= 0x20000000, /* Send data in TCP SYN.  */</Line>
  <Line number="246">#define MSG_FASTOPEN	MSG_FASTOPEN</Line>
  <Line number="247"></Line>
  <Line number="248">    MSG_CMSG_CLOEXEC	= 0x40000000	/* Set close_on_exit for file</Line>
  <Line number="249">					   descriptor received through</Line>
  <Line number="250">					   SCM_RIGHTS.  */</Line>
  <Line number="251">#define MSG_CMSG_CLOEXEC MSG_CMSG_CLOEXEC</Line>
  <Line number="252">  };</Line>
  <Line number="253"></Line>
  <Line number="254"></Line>
  <Line number="255">/* Structure describing messages sent by</Line>
  <Line number="256">   `sendmsg&apos; and received by `recvmsg&apos;.  */</Line>
  <Line number="257">struct msghdr</Line>
  <Line number="258">  {</Line>
  <Line number="259">    void *msg_name;		/* Address to send to/receive from.  */</Line>
  <Line number="260">    socklen_t msg_namelen;	/* Length of address data.  */</Line>
  <Line number="261"></Line>
  <Line number="262">    struct iovec *msg_iov;	/* Vector of data to send/receive into.  */</Line>
  <Line number="263">    size_t msg_iovlen;		/* Number of elements in the vector.  */</Line>
  <Line number="264"></Line>
  <Line number="265">    void *msg_control;		/* Ancillary data (eg BSD filedesc passing). */</Line>
  <Line number="266">    size_t msg_controllen;	/* Ancillary data buffer length.</Line>
  <Line number="267">				   !! The type should be socklen_t but the</Line>
  <Line number="268">				   definition of the kernel is incompatible</Line>
  <Line number="269">				   with this.  */</Line>
  <Line number="270"></Line>
  <Line number="271">    int msg_flags;		/* Flags on received message.  */</Line>
  <Line number="272">  };</Line>
  <Line number="273"></Line>
  <Line number="274">/* Structure used for storage of ancillary data object information.  */</Line>
  <Line number="275">struct cmsghdr</Line>
  <Line number="276">  {</Line>
  <Line number="277">    size_t cmsg_len;		/* Length of data in cmsg_data plus length</Line>
  <Line number="278">				   of cmsghdr structure.</Line>
  <Line number="279">				   !! The type should be socklen_t but the</Line>
  <Line number="280">				   definition of the kernel is incompatible</Line>
  <Line number="281">				   with this.  */</Line>
  <Line number="282">    int cmsg_level;		/* Originating protocol.  */</Line>
  <Line number="283">    int cmsg_type;		/* Protocol specific type.  */</Line>
  <Line number="284">#if __glibc_c99_flexarr_available</Line>
  <Line number="285">    __extension__ unsigned char __cmsg_data __flexarr; /* Ancillary data.  */</Line>
  <Line number="286">#endif</Line>
  <Line number="287">  };</Line>
  <Line number="288"></Line>
  <Line number="289">/* Ancillary data object manipulation macros.  */</Line>
  <Line number="290">#if __glibc_c99_flexarr_available</Line>
  <Line number="291"># define CMSG_DATA(cmsg) ((cmsg)-&gt;__cmsg_data)</Line>
  <Line number="292">#else</Line>
  <Line number="293"># define CMSG_DATA(cmsg) ((unsigned char *) ((struct cmsghdr *) (cmsg) + 1))</Line>
  <Line number="294">#endif</Line>
  <Line number="295">#define CMSG_NXTHDR(mhdr, cmsg) __cmsg_nxthdr (mhdr, cmsg)</Line>
  <Line number="296">#define CMSG_FIRSTHDR(mhdr) \</Line>
  <Line number="297">  ((size_t) (mhdr)-&gt;msg_controllen &gt;= sizeof (struct cmsghdr)		      \</Line>
  <Line number="298">   ? (struct cmsghdr *) (mhdr)-&gt;msg_control : (struct cmsghdr *) 0)</Line>
  <Line number="299">#define CMSG_ALIGN(len) (((len) + sizeof (size_t) - 1) \</Line>
  <Line number="300">			 &amp; (size_t) ~(sizeof (size_t) - 1))</Line>
  <Line number="301">#define CMSG_SPACE(len) (CMSG_ALIGN (len) \</Line>
  <Line number="302">			 + CMSG_ALIGN (sizeof (struct cmsghdr)))</Line>
  <Line number="303">#define CMSG_LEN(len)   (CMSG_ALIGN (sizeof (struct cmsghdr)) + (len))</Line>
  <Line number="304"></Line>
  <Line number="305">extern struct cmsghdr *__cmsg_nxthdr (struct msghdr *__mhdr,</Line>
  <Line number="306">				      struct cmsghdr *__cmsg) __THROW;</Line>
  <Line number="307">#ifdef __USE_EXTERN_INLINES</Line>
  <Line number="308"># ifndef _EXTERN_INLINE</Line>
  <Line number="309">#  define _EXTERN_INLINE __extern_inline</Line>
  <Line number="310"># endif</Line>
  <Line number="311">_EXTERN_INLINE struct cmsghdr *</Line>
  <Line number="312">__NTH (__cmsg_nxthdr (struct msghdr *__mhdr, struct cmsghdr *__cmsg))</Line>
  <Line number="313">{</Line>
  <Line number="314">  if ((size_t) __cmsg-&gt;cmsg_len &lt; sizeof (struct cmsghdr))</Line>
  <Line number="315">    /* The kernel header does this so there may be a reason.  */</Line>
  <Line number="316">    return (struct cmsghdr *) 0;</Line>
  <Line number="317"></Line>
  <Line number="318">  __cmsg = (struct cmsghdr *) ((unsigned char *) __cmsg</Line>
  <Line number="319">			       + CMSG_ALIGN (__cmsg-&gt;cmsg_len));</Line>
  <Line number="320">  if ((unsigned char *) (__cmsg + 1) &gt; ((unsigned char *) __mhdr-&gt;msg_control</Line>
  <Line number="321">					+ __mhdr-&gt;msg_controllen)</Line>
  <Line number="322">      || ((unsigned char *) __cmsg + CMSG_ALIGN (__cmsg-&gt;cmsg_len)</Line>
  <Line number="323">	  &gt; ((unsigned char *) __mhdr-&gt;msg_control + __mhdr-&gt;msg_controllen)))</Line>
  <Line number="324">    /* No more entries.  */</Line>
  <Line number="325">    return (struct cmsghdr *) 0;</Line>
  <Line number="326">  return __cmsg;</Line>
  <Line number="327">}</Line>
  <Line number="328">#endif	/* Use `extern inline&apos;.  */</Line>
  <Line number="329"></Line>
  <Line number="330">/* Socket level message types.  This must match the definitions in</Line>
  <Line number="331">   &lt;linux/socket.h&gt;.  */</Line>
  <Line number="332">enum</Line>
  <Line number="333">  {</Line>
  <Line number="334">    SCM_RIGHTS = 0x01		/* Transfer file descriptors.  */</Line>
  <Line number="335">#define SCM_RIGHTS SCM_RIGHTS</Line>
  <Line number="336">#ifdef __USE_GNU</Line>
  <Line number="337">    , SCM_CREDENTIALS = 0x02	/* Credentials passing.  */</Line>
  <Line number="338"># define SCM_CREDENTIALS SCM_CREDENTIALS</Line>
  <Line number="339">#endif</Line>
  <Line number="340">  };</Line>
  <Line number="341"></Line>
  <Line number="342">#ifdef __USE_GNU</Line>
  <Line number="343">/* User visible structure for SCM_CREDENTIALS message */</Line>
  <Line number="344">struct ucred</Line>
  <Line number="345">{</Line>
  <Line number="346">  pid_t pid;			/* PID of sending process.  */</Line>
  <Line number="347">  uid_t uid;			/* UID of sending process.  */</Line>
  <Line number="348">  gid_t gid;			/* GID of sending process.  */</Line>
  <Line number="349">};</Line>
  <Line number="350">#endif</Line>
  <Line number="351"></Line>
  <Line number="352">#ifdef __USE_MISC</Line>
  <Line number="353"># include &lt;bits/types/time_t.h&gt;</Line>
  <Line number="354"># include &lt;asm/socket.h&gt;</Line>
  <Line number="355">#else</Line>
  <Line number="356"># define SO_DEBUG 1</Line>
  <Line number="357"># include &lt;bits/socket-constants.h&gt;</Line>
  <Line number="358">#endif</Line>
  <Line number="359"></Line>
  <Line number="360">/* Structure used to manipulate the SO_LINGER option.  */</Line>
  <Line number="361">struct linger</Line>
  <Line number="362">  {</Line>
  <Line number="363">    int l_onoff;		/* Nonzero to linger on close.  */</Line>
  <Line number="364">    int l_linger;		/* Time to linger.  */</Line>
  <Line number="365">  };</Line>
  <Line number="366"></Line>
  <Line number="367">#endif	/* bits/socket.h */</Line>
</SourceFile>
