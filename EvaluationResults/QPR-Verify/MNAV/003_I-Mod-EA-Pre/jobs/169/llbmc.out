runJobCommand
precondition analysis with entry:mat_cofact
arguents: child
arguents: job
arguents: mode
arguents: precondition
handleJobInSeparateProcess0

Checking job 169 ...about to run job:
preconNumber: 5, 1

  Running Model Checker with 1 checks ...entry: mat_cofact, functionName: mat_minor
  <badref> = call double @qpr.precondition.mat_minor(double** %0, i32 %1, i32 %2)
entry: mat_cofact, functionName: mat_cofact
entry: mat_cofact, functionName: mat_minor
try
try ready

    SMTSolver : stp
    CallStackBound : 0
    StopEncodingAfterCheckLoop : 0
    LoopUnrollBound : 1
    HavocLimit : 0
    PreconditionNumber : 5
    PreconditionLocation : jobs/169
    TimeOut : 300
    InitializedGlobals : false
    IgnoreMissingFunctions : true
    StopEncodingAfterCheck : false
    OverApproxVaArgs : false
    PreconditionCheckMemory : false
    PreconditionOnlyArguments : trueI [0] lib/ModelChecker/Verifier.cpp:247 | EntryPoint : mat_cofact
m_checker->run()

    Performing bounded model checking ...
      Performing pre-transformations on LLVM IR ...        0 sec [DONE]
        
      Performing logical encoding ...size Alloca: 1
TODO MKB implement precondition handling: IE
Reading in precondition at: jobs/169/precondition_mat_minor.txt
preconFile: jobs/169/precondition_mat_minor.txt
ref: [underoverapprox]name of function arguments, argValue:  
ref: [underoverapprox]name of function arguments, argValue:  
name of function arguments line
param: i32 %arg1:1
---name: i32 %arg1, value: 1.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 1
###new bool cond: bool % = compare(%arg1, %i32__1)
param:  i32 %arg2:1
---name:  i32 %arg2, value: 1.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 1
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:0
---name: i32 %arg1, value: 0.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 0
###new bool cond: bool % = compare(%arg1, %i32__0)
param:  i32 %arg2:0
---name:  i32 %arg2, value: 0.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 0
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:304355361
---name: i32 %arg1, value: 304355361.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 304355361
###new bool cond: bool % = compare(%arg1, %i32__304355361)
param:  i32 %arg2:0
---name:  i32 %arg2, value: 0.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 0
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:537952276
---name: i32 %arg1, value: 537952276.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 537952276
###new bool cond: bool % = compare(%arg1, %i32__537952276)
param:  i32 %arg2:128
---name:  i32 %arg2, value: 128.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 128
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:1212154146
---name: i32 %arg1, value: 1212154146.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 1212154146
###new bool cond: bool % = compare(%arg1, %i32__1212154146)
param:  i32 %arg2:0
---name:  i32 %arg2, value: 0.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 0
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
Writing precondition type at: jobs/169/precondition_type_mat_cofact.txt

Type of Precondition:
[underoverapprox]
precondition found, end encoding
                      0 sec [DONE]
        Number of expressions:                          6084
        after encoding

      5 assertions before transformations (5 custom).

      Performing formula transformations ...
        Simplifier
          Number of rewrites                              83
        Fixed Memory Address Assigner
          Number of moved ops                              6
          Number of rewrites                             365
        Simplifier
          Number of moved ops                              1
          Number of rewrites                            2732
        Memory Model Encoder
          Number of moved ops                              0
          Number of rewrites                               0
        Simplifier
          Number of rewrites                               0
        Simplifier
          Number of rewrites                               0
        ToASC Analyser
          Memcpy/memset found                             no
        Byte-Based Memory Creator
        Instantiation-Based ToASC Simplifier
        Simplifier
        FP Abstraction
          Number of rewrites                               1

Abstracted floating point operations.  The result might be a false positive.

        Simplifier
          Number of rewrites                               0
                                                           0 sec [DONE]
        
      5 assertions remain after transformations (5 custom).
after rewriteFormula
after sanityCheckFormula

      Running SMT solver (STP with MiniSat) ...            0 sec [DONE]
        
                                                           0 sec [DONE]
      after performing Check
evaluateCheckerResultsViaRefinementLoop
checker.getResult() is Trace
checkOnlyPrecon: 1, size:1
setCheckToUnsafe for precondition Instruction
checkID: 1467
setCheckToUnsafe
set check to unsafe
getCheckerResultAfterUpdatingMarker
failingInst is nullptr
Preconditions internal: 
i32 %arg1:0; (i32 %arg1:0)i32 %arg2:0; (i32 %arg2:0)
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg1 = nondef() : 0
assumePair: i32 %arg2 = nondef() : 0

    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst:   %12 = call double @qpr.precondition.mat_minor(double** %arg0, i32 %arg1, i32 %arg2), !dbg !1378
Preconditions internal: 
i32 %arg1:1; (i32 %arg1:1)i32 %arg2:1; (i32 %arg2:1)
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg1 = nondef() : 1
assumePair: i32 %arg2 = nondef() : 1

    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst is nullptr
Preconditions internal: 
i32 %arg1:304355361; (i32 %arg1:304355361)i32 %arg2:0; (i32 %arg2:0)
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg1 = nondef() : 304355361
assumePair: i32 %arg2 = nondef() : 0

    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst is nullptr
Preconditions internal: 
i32 %arg1:537952276; (i32 %arg1:537952276)i32 %arg2:128; (i32 %arg2:128)
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg1 = nondef() : 537952276
assumePair: i32 %arg2 = nondef() : 128

    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst is nullptr
Preconditions internal: 
i32 %arg1:1212154146; (i32 %arg1:1212154146)i32 %arg2:0; (i32 %arg2:0)
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg1 = nondef() : 1212154146
assumePair: i32 %arg2 = nondef() : 0

    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      name of function arguments: Writing precondition at: jobs/169/precondition_mat_cofact.txt

Generated Preconditions:
[underoverapprox]name of function arguments: 
i32 %arg1:0; i32 %arg2:0; 
i32 %arg1:1; i32 %arg2:1; 
i32 %arg1:304355361; i32 %arg2:0; 
i32 %arg1:537952276; i32 %arg2:128; 
i32 %arg1:1212154146; i32 %arg2:0; 

                                                           0 sec [DONE]
    allunsafe
    
                                                           0 sec [DONE]
  