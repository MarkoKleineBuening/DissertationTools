runJobCommand
precondition analysis with entry:mat_minor
arguents: child
arguents: job
arguents: mode
arguents: precondition
handleJobInSeparateProcess0

Checking job 252 ...about to run job:
preconNumber: 5, 1

  Running Model Checker with 1 checks ...entry: mat_minor, functionName: mat_submat
  <badref> = call double** @qpr.precondition.mat_submat(double** %0, i32 %1, i32 %2, double** %14)
entry: mat_minor, functionName: mat_minor
entry: mat_minor, functionName: mat_submat
try
try ready

    SMTSolver : stp
    CallStackBound : 0
    StopEncodingAfterCheckLoop : 0
    LoopUnrollBound : 1
    HavocLimit : 0
    PreconditionNumber : 5
    PreconditionLocation : jobs/252
    TimeOut : 300
    InitializedGlobals : false
    IgnoreMissingFunctions : true
    StopEncodingAfterCheck : false
    OverApproxVaArgs : false
    PreconditionCheckMemory : false
    PreconditionOnlyArguments : trueI [0] lib/ModelChecker/Verifier.cpp:247 | EntryPoint : mat_minor
m_checker->run()

    Performing bounded model checking ...
      Performing pre-transformations on LLVM IR ...        0 sec [DONE]
        
      Performing logical encoding ...size Alloca: 1

        Unrolling loop in function "_mat_creat" for 1 iterations succeeded.
        Transformed "_mat_creat" from 10 to 11 basic blocks and from 54 to 57 instructions
        Transformed "mat_error" from 5 to 10 basic blocks and from 10 to 19 instructions
        Unrolling loop in function "mat_fill" for 1 iterations succeeded.
        Unrolling loop in function "mat_fill" for 1 iterations succeeded.
        Transformed "mat_fill" from 18 to 24 basic blocks and from 67 to 82 instructionsTODO MKB implement precondition handling: IE
Reading in precondition at: jobs/252/precondition_mat_submat.txt
preconFile: jobs/252/precondition_mat_submat.txt
ref: [underoverapprox]name of function arguments, argValue:  
ref: [underoverapprox]name of function arguments, argValue:  
name of function arguments line
param: i32 %arg1:1
---name: i32 %arg1, value: 1.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 1
###new bool cond: bool % = compare(%arg1, %i32__1)
param:  i32 %arg2:0
---name:  i32 %arg2, value: 0.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 0
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:0
---name: i32 %arg1, value: 0.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 0
###new bool cond: bool % = compare(%arg1, %i32__0)
param:  i32 %arg2:0
---name:  i32 %arg2, value: 0.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 0
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:0
---name: i32 %arg1, value: 0.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 0
###new bool cond: bool % = compare(%arg1, %i32__0)
param:  i32 %arg2:1
---name:  i32 %arg2, value: 1.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 1
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:0
---name: i32 %arg1, value: 0.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 0
###new bool cond: bool % = compare(%arg1, %i32__0)
param:  i32 %arg2:2
---name:  i32 %arg2, value: 2.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 2
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
param: i32 %arg1:0
---name: i32 %arg1, value: 0.
integer, char or other simple types
name: i32 %arg1
assuming that there are not more then 10 arguments
nameIndex: 1
nameID: 1
argument name: arg1
value: 0
###new bool cond: bool % = compare(%arg1, %i32__0)
param:  i32 %arg2:3
---name:  i32 %arg2, value: 3.
integer, char or other simple types
name:  i32 %arg2
assuming that there are not more then 10 arguments
nameIndex: 2
nameID: 2
argument name: arg2
value: 3
###added bool cond: bool % = or(%, %)
pruneOrAssert -- adding line boolCond: bool % = or(%, %)
Writing precondition type at: jobs/252/precondition_type_mat_minor.txt

Type of Precondition:
[underoverapprox]
precondition found, end encoding

                                                           0 sec [DONE]
        Number of expressions:                          6609
        after encoding

      8 assertions before transformations (3 no_back_edge, 5 custom).

      Performing formula transformations ...
        Simplifier
          Number of rewrites                             510
        Fixed Memory Address Assigner
          Number of moved ops                              6
          Number of rewrites                             369
        Simplifier
          Number of moved ops                              1
          Number of rewrites                            7852
        Memory Model Encoder
          Number of moved ops                              0
          Number of rewrites                               0
        Simplifier
          Number of rewrites                               4
        Simplifier
          Number of moved ops                              0
          Number of rewrites                               0
        ToASC Analyser
          Memcpy/memset found                             no
        Byte-Based Memory Creator
        Instantiation-Based ToASC Simplifier
        Simplifier
        FP Abstraction
          Number of rewrites                               5

Abstracted floating point operations.  The result might be a false positive.

        Simplifier
          Number of rewrites                               0
                                                           0 sec [DONE]
        
      8 assertions remain after transformations (3 no_back_edge, 5 custom).
after rewriteFormula
after sanityCheckFormula

      Running SMT solver (STP with MiniSat) ...            0 sec [DONE]
        
                                                           0 sec [DONE]
      after performing Check
evaluateCheckerResultsViaRefinementLoop
checker.getResult() is Trace
checkOnlyPrecon: 1, size:1
setCheckToUnsafe for precondition Instruction
checkID: 1693
setCheckToUnsafe
set check to unsafe
getCheckerResultAfterUpdatingMarker
failingInst is nullptr
Preconditions internal: 
i32 %arg1:0; (i32 %arg1:0)i32 %arg2:3; (i32 %arg2:3)
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg1 = nondef() : 0
assumePair: i32 %arg2 = nondef() : 3

    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst:   %12 = call double** @qpr.precondition.mat_submat(double** %arg0, i32 %arg1, i32 %arg2, double** %10), !dbg !1385
Preconditions internal: 
i32 %arg1:1; (i32 %arg1:1)i32 %arg2:0; (i32 %arg2:0)
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg1 = nondef() : 1
assumePair: i32 %arg2 = nondef() : 0

    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst is nullptr
Preconditions internal: 
i32 %arg1:0; (i32 %arg1:0)i32 %arg2:0; (i32 %arg2:0)
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg1 = nondef() : 0
assumePair: i32 %arg2 = nondef() : 0

    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst is nullptr
Preconditions internal: 
i32 %arg1:0; (i32 %arg1:0)i32 %arg2:2; (i32 %arg2:2)
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg1 = nondef() : 0
assumePair: i32 %arg2 = nondef() : 2

    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      failingInst is nullptr
Preconditions internal: 
i32 %arg1:0; (i32 %arg1:0)i32 %arg2:1; (i32 %arg2:1)
 function does not read memory: 0, checkValidLoad:0, checkMemory: 0
function does not read memory 

assumePair: i32 %arg1 = nondef() : 0
assumePair: i32 %arg2 = nondef() : 1

    Rerunning SMT solver (STP with MiniSat) ...            0 sec [DONE]
      name of function arguments: Writing precondition at: jobs/252/precondition_mat_minor.txt

Generated Preconditions:
[underoverapprox]name of function arguments: 
i32 %arg1:0; i32 %arg2:3; 
i32 %arg1:1; i32 %arg2:0; 
i32 %arg1:0; i32 %arg2:0; 
i32 %arg1:0; i32 %arg2:2; 
i32 %arg1:0; i32 %arg2:1; 

                                                           0 sec [DONE]
    allunsafe
    
                                                           0 sec [DONE]
  